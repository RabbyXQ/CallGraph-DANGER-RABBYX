digraph CallGraph {
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.Integer: void <clinit>()>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.net.ServerSocket: void <init>(int)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<com.rabbitmq.tools.Tracer: void printBoolProperty(java.lang.String,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<com.rabbitmq.tools.Tracer: void printBoolProperty(java.lang.String,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<com.rabbitmq.tools.Tracer: void printBoolProperty(java.lang.String,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<com.rabbitmq.tools.Tracer: void printBoolProperty(java.lang.String,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<com.rabbitmq.tools.Tracer: void printBoolProperty(java.lang.String,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.System: java.util.Properties getProperties()>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.Integer: void <clinit>()>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: void exit(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger)>" -> "<java.lang.System: void <clinit>()>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger)>" -> "<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger)>" -> "<java.lang.System: java.util.Properties getProperties()>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger)>" -> "<com.rabbitmq.utility.BlockingCell: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.ServerSocket: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<java.net.ServerSocket: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream)>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>";
"<com.rabbitmq.tools.Tracer: void printBoolProperty(java.lang.String,java.util.Properties)>" -> "<java.lang.System: void <clinit>()>";
"<com.rabbitmq.tools.Tracer: void printBoolProperty(java.lang.String,java.util.Properties)>" -> "<com.rabbitmq.tools.Tracer: boolean getBoolProperty(java.lang.String,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer: void printBoolProperty(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuilder: void <init>(int)>";
"<java.lang.System: java.util.Properties getProperties()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: int parseInt(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.io.DataOutputStream: void <init>(java.io.OutputStream)>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.io.DataInputStream: void <init>(java.io.InputStream)>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.io.DataOutputStream: void <init>(java.io.OutputStream)>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.io.DataInputStream: void <init>(java.io.InputStream)>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.net.Socket: void <init>(java.lang.String,int)>";
"<com.rabbitmq.utility.BlockingCell: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void <init>(com.rabbitmq.tools.Tracer$AsyncLogger,java.io.PrintStream,int,java.util.concurrent.BlockingQueue)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<com.rabbitmq.tools.Tracer$SafeCounter: void <init>()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean)>";
"<com.rabbitmq.tools.Tracer: boolean getBoolProperty(java.lang.String,java.util.Properties)>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.rabbitmq.tools.Tracer: boolean getBoolProperty(java.lang.String,java.util.Properties)>" -> "<java.lang.Boolean: boolean parseBoolean(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: boolean getBoolProperty(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuilder: void <init>()>";
"<java.lang.StringBuilder: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>" -> "<java.lang.Object: void <init>()>";
"<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.DataOutputStream: void <init>(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>";
"<java.io.DataOutputStream: void <init>(java.io.OutputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.DataInputStream: void <init>(java.io.InputStream)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<java.io.DataInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.Socket: void <init>(java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<java.net.Socket: void <init>(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void <init>(com.rabbitmq.tools.Tracer$AsyncLogger,java.io.PrintStream,int,java.util.concurrent.BlockingQueue)>" -> "<java.lang.Object: void <init>()>";
"<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>" -> "<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>";
"<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>" -> "<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>";
"<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$SafeCounter: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.tools.Tracer$SafeCounter: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean)>" -> "<java.util.AbstractQueue: void <init>()>";
"<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Boolean: boolean parseBoolean(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractQueue: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractQueue: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: boolean getBoolProperty(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: boolean getBoolProperty(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: boolean getBoolProperty(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void <init>(java.io.OutputStream,int)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.rabbitmq.tools.Tracer: void printBoolProperty(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void printBoolProperty(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void printBoolProperty(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void printBoolProperty(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
"<com.rabbitmq.tools.Tracer: void printBoolProperty(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.net.Socket: java.io.InputStream getInputStream()>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.net.Socket: java.io.OutputStream getOutputStream()>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.net.Socket: java.io.InputStream getInputStream()>";
"<com.rabbitmq.tools.Tracer: void <init>(java.net.Socket,java.lang.String,java.lang.String,int,com.rabbitmq.tools.Tracer$Logger,com.rabbitmq.utility.BlockingCell,java.util.Properties)>" -> "<java.net.Socket: java.io.OutputStream getOutputStream()>";
"<java.net.Socket: java.io.InputStream getInputStream()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.Socket: java.io.OutputStream getOutputStream()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.Throwable: void printStackTrace()>";
"<java.lang.Throwable: void printStackTrace()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<com.rabbitmq.tools.Tracer: void run()>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<com.rabbitmq.tools.Tracer: void start()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.utility.BlockingCell: void <init>()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer: void reportAndLogNonNullException(java.lang.Exception)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer: void waitAndLogException(com.rabbitmq.utility.BlockingCell)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.lang.Thread: void <init>(java.lang.Runnable)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: void <init>(com.rabbitmq.tools.Tracer,com.rabbitmq.utility.BlockingCell,boolean,java.io.DataInputStream,java.io.DataOutputStream,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.lang.Thread: void <init>(java.lang.Runnable)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: void <init>(com.rabbitmq.tools.Tracer,com.rabbitmq.utility.BlockingCell,boolean,java.io.DataInputStream,java.io.DataOutputStream,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer: void start()>" -> "<java.lang.Thread: void <init>(java.lang.Runnable)>";
"<com.rabbitmq.tools.Tracer: void waitAndLogException(com.rabbitmq.utility.BlockingCell)>" -> "<com.rabbitmq.tools.Tracer: void reportAndLogNonNullException(java.lang.Exception)>";
"<java.lang.Thread: void <init>(java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void <init>(com.rabbitmq.tools.Tracer,com.rabbitmq.utility.BlockingCell,boolean,java.io.DataInputStream,java.io.DataOutputStream,java.util.Properties)>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void <init>(com.rabbitmq.tools.Tracer,com.rabbitmq.utility.BlockingCell,boolean,java.io.DataInputStream,java.io.DataOutputStream,java.util.Properties)>" -> "<java.util.HashMap: void <init>()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void <init>(com.rabbitmq.tools.Tracer,com.rabbitmq.utility.BlockingCell,boolean,java.io.DataInputStream,java.io.DataOutputStream,java.util.Properties)>" -> "<com.rabbitmq.tools.Tracer: boolean access$000(java.lang.String,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void <init>(com.rabbitmq.tools.Tracer,com.rabbitmq.utility.BlockingCell,boolean,java.io.DataInputStream,java.io.DataOutputStream,java.util.Properties)>" -> "<com.rabbitmq.tools.Tracer: boolean access$000(java.lang.String,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void <init>(com.rabbitmq.tools.Tracer,com.rabbitmq.utility.BlockingCell,boolean,java.io.DataInputStream,java.io.DataOutputStream,java.util.Properties)>" -> "<com.rabbitmq.tools.Tracer: boolean access$000(java.lang.String,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void <init>(com.rabbitmq.tools.Tracer,com.rabbitmq.utility.BlockingCell,boolean,java.io.DataInputStream,java.io.DataOutputStream,java.util.Properties)>" -> "<com.rabbitmq.tools.Tracer: boolean access$000(java.lang.String,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void <init>(com.rabbitmq.tools.Tracer,com.rabbitmq.utility.BlockingCell,boolean,java.io.DataInputStream,java.io.DataOutputStream,java.util.Properties)>" -> "<com.rabbitmq.tools.Tracer: boolean access$000(java.lang.String,java.util.Properties)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void <init>(com.rabbitmq.tools.Tracer,com.rabbitmq.utility.BlockingCell,boolean,java.io.DataInputStream,java.io.DataOutputStream,java.util.Properties)>" -> "<com.rabbitmq.tools.Tracer: boolean access$000(java.lang.String,java.util.Properties)>";
"<java.util.HashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: boolean access$000(java.lang.String,java.util.Properties)>" -> "<com.rabbitmq.tools.Tracer: boolean getBoolProperty(java.lang.String,java.util.Properties)>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void waitAndLogException(com.rabbitmq.utility.BlockingCell)>" -> "<com.rabbitmq.utility.BlockingCell: java.lang.Object uninterruptibleGet()>";
"<com.rabbitmq.utility.BlockingCell: java.lang.Object uninterruptibleGet()>" -> "<com.rabbitmq.utility.BlockingCell: java.lang.Object get()>";
"<com.rabbitmq.utility.BlockingCell: java.lang.Object get()>" -> "<java.lang.Object: void wait()>";
"<java.lang.Object: void wait()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void start()>" -> "<java.lang.Thread: void run()>";
"<com.rabbitmq.tools.Tracer: void start()>" -> "<java.lang.Thread: void start()>";
"<java.lang.Thread: void run()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void start()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void start()>" -> "<com.rabbitmq.tools.Tracer: void run()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: void run()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: void run()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void run()>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<java.lang.Integer: void <clinit>()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: void report(int,java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<com.rabbitmq.client.impl.AMQCommand: void <init>()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: void reportFrame(com.rabbitmq.client.impl.Frame)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: void report(int,java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: void report(int,java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: void report(int,java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: com.rabbitmq.client.impl.Frame readFrame()>";
"<java.lang.Integer: java.lang.Integer valueOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void report(int,java.lang.Object)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQCommand: void <init>()>" -> "<com.rabbitmq.client.impl.AMQCommand: void <init>(com.rabbitmq.client.Method,com.rabbitmq.client.impl.AMQContentHeader,byte[])>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void reportFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: void report(int,java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void reportFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: void report(int,java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void reportFrame(com.rabbitmq.client.impl.Frame)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void reportFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.AMQContentHeader readContentHeaderFrom(java.io.DataInputStream)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void reportFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.tools.Tracer$DirectionHandler: void report(int,java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void reportFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: com.rabbitmq.client.impl.Frame readFrame()>" -> "<com.rabbitmq.client.impl.Frame: com.rabbitmq.client.impl.Frame readFrom(java.io.DataInputStream)>";
"<java.lang.StringBuilder: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQCommand: void <init>(com.rabbitmq.client.Method,com.rabbitmq.client.impl.AMQContentHeader,byte[])>" -> "<com.rabbitmq.client.impl.CommandAssembler: void <clinit>()>";
"<com.rabbitmq.client.impl.AMQCommand: void <init>(com.rabbitmq.client.Method,com.rabbitmq.client.impl.AMQContentHeader,byte[])>" -> "<com.rabbitmq.client.impl.CommandAssembler: void <init>(com.rabbitmq.client.impl.Method,com.rabbitmq.client.impl.AMQContentHeader,byte[])>";
"<com.rabbitmq.client.impl.AMQCommand: void <init>(com.rabbitmq.client.Method,com.rabbitmq.client.impl.AMQContentHeader,byte[])>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.AMQContentHeader readContentHeaderFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.UnknownClassOrMethodId: void <init>(int)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.AMQContentHeader readContentHeaderFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.UnknownClassOrMethodId: void <init>(int,int)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Confirm$SelectOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Confirm$Select: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$RollbackOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$Rollback: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$CommitOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$Commit: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$SelectOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$Select: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Nack: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$RecoverOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Recover: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$RecoverAsync: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Reject: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Ack: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$GetEmpty: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$GetOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Get: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Deliver: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Return: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Publish: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$CancelOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Cancel: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$ConsumeOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$QosOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Qos: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$UnbindOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$DeleteOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$PurgeOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Purge: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$BindOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$DeclareOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$UnbindOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$BindOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$DeleteOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$DeclareOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Access$RequestOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Access$Request: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$CloseOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$Close: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$FlowOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$Flow: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$OpenOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$Open: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Unblocked: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Blocked: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$CloseOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Close: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$OpenOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Open: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$TuneOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Tune: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$SecureOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Secure: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.Frame: com.rabbitmq.client.impl.Frame readFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.Frame: com.rabbitmq.client.impl.Frame readFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.Frame: void <init>(int,int,byte[])>";
"<com.rabbitmq.client.impl.Frame: com.rabbitmq.client.impl.Frame readFrom(java.io.DataInputStream)>" -> "<com.rabbitmq.client.MalformedFrameException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.Frame: com.rabbitmq.client.impl.Frame readFrom(java.io.DataInputStream)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.client.impl.CommandAssembler: void <init>(com.rabbitmq.client.impl.Method,com.rabbitmq.client.impl.AMQContentHeader,byte[])>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>";
"<com.rabbitmq.client.impl.CommandAssembler: void <init>(com.rabbitmq.client.impl.Method,com.rabbitmq.client.impl.AMQContentHeader,byte[])>" -> "<com.rabbitmq.client.impl.CommandAssembler: void updateContentBodyState()>";
"<com.rabbitmq.client.impl.CommandAssembler: void <init>(com.rabbitmq.client.impl.Method,com.rabbitmq.client.impl.AMQContentHeader,byte[])>" -> "<com.rabbitmq.client.impl.CommandAssembler: void appendBodyFragment(byte[])>";
"<com.rabbitmq.client.impl.CommandAssembler: void <init>(com.rabbitmq.client.impl.Method,com.rabbitmq.client.impl.AMQContentHeader,byte[])>" -> "<java.util.ArrayList: void <init>(int)>";
"<com.rabbitmq.client.impl.CommandAssembler: void <init>(com.rabbitmq.client.impl.Method,com.rabbitmq.client.impl.AMQContentHeader,byte[])>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.client.impl.CommandAssembler: void <init>(com.rabbitmq.client.impl.Method,com.rabbitmq.client.impl.AMQContentHeader,byte[])>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>";
"<com.rabbitmq.client.impl.CommandAssembler: void <init>(com.rabbitmq.client.impl.Method,com.rabbitmq.client.impl.AMQContentHeader,byte[])>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>";
"<com.rabbitmq.client.UnknownClassOrMethodId: void <init>(int)>" -> "<com.rabbitmq.client.UnknownClassOrMethodId: void <init>(int,int)>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<java.lang.Integer: void <clinit>()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQBasicProperties: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<java.lang.Integer: void <clinit>()>";
"<com.rabbitmq.client.UnknownClassOrMethodId: void <init>(int,int)>" -> "<java.io.IOException: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Confirm$SelectOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Confirm$SelectOk: void <init>()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: void <init>(com.rabbitmq.client.impl.ValueReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void clearBits()>";
"<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Confirm$Select: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Confirm$Select: void <init>(boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Tx$RollbackOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$RollbackOk: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Tx$Rollback: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$Rollback: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Tx$CommitOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$CommitOk: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Tx$Commit: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$Commit: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Tx$SelectOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$SelectOk: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Tx$Select: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$Select: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Nack: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Nack: void <init>(long,boolean,boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$RecoverOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$RecoverOk: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Recover: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Recover: void <init>(boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$RecoverAsync: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$RecoverAsync: void <init>(boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Reject: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Reject: void <init>(long,boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Ack: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Ack: void <init>(long,boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$GetEmpty: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$GetEmpty: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$GetOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$GetOk: void <init>(long,boolean,java.lang.String,java.lang.String,int)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Get: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Get: void <init>(int,java.lang.String,boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Deliver: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Deliver: void <init>(java.lang.String,long,boolean,java.lang.String,java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Return: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Return: void <init>(int,java.lang.String,java.lang.String,java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Publish: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Publish: void <init>(int,java.lang.String,java.lang.String,boolean,boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$CancelOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$CancelOk: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Cancel: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Cancel: void <init>(java.lang.String,boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$ConsumeOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$ConsumeOk: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$QosOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$QosOk: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Qos: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Qos: void <init>(int,int,boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$UnbindOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$UnbindOk: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$DeleteOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$DeleteOk: void <init>(int)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: void <init>(int,java.lang.String,boolean,boolean,boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$PurgeOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$PurgeOk: void <init>(int)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Purge: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Purge: void <init>(int,java.lang.String,boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$BindOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$BindOk: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$DeclareOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$DeclareOk: void <init>(java.lang.String,int,int)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(int,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$UnbindOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$UnbindOk: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$BindOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$BindOk: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$DeleteOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$DeleteOk: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: void <init>(int,java.lang.String,boolean,boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$DeclareOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$DeclareOk: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Access$RequestOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Access$RequestOk: void <init>(int)>";
"<com.rabbitmq.client.impl.AMQImpl$Access$Request: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Access$Request: void <init>(java.lang.String,boolean,boolean,boolean,boolean,boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$CloseOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$CloseOk: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Close: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$Close: void <init>(int,java.lang.String,int,int)>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$FlowOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$FlowOk: void <init>(boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Flow: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$Flow: void <init>(boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$OpenOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$OpenOk: void <init>(com.rabbitmq.client.LongString)>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Open: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$Open: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Unblocked: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Unblocked: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Blocked: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Blocked: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$CloseOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$CloseOk: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Close: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Close: void <init>(int,java.lang.String,int,int)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$OpenOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$OpenOk: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Open: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Open: void <init>(java.lang.String,java.lang.String,boolean)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$TuneOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$TuneOk: void <init>(int,int,int)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Tune: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Tune: void <init>(int,int,int)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$SecureOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$SecureOk: void <init>(com.rabbitmq.client.LongString)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Secure: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Secure: void <init>(com.rabbitmq.client.LongString)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(java.util.Map,java.lang.String,com.rabbitmq.client.LongString,java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(int,int,java.util.Map,com.rabbitmq.client.LongString,com.rabbitmq.client.LongString)>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<com.rabbitmq.client.MalformedFrameException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<com.rabbitmq.client.MalformedFrameException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<com.rabbitmq.client.MalformedFrameException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<com.rabbitmq.client.MalformedFrameException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.Frame: void <init>(int,int,byte[])>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.client.MalformedFrameException: void <init>(java.lang.String)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <init>(java.lang.String,int)>";
"<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <init>(java.lang.String,int)>";
"<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <init>(java.lang.String,int)>";
"<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <init>(java.lang.String,int)>";
"<com.rabbitmq.client.impl.CommandAssembler: void updateContentBodyState()>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>";
"<com.rabbitmq.client.impl.CommandAssembler: void updateContentBodyState()>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ContentHeaderPropertyReader: void <init>(java.io.DataInputStream)>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.client.impl.ContentHeaderPropertyReader: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: void <init>(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.AMQBasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.AMQContentHeader: void <init>(java.io.DataInputStream)>";
"<java.io.IOException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Confirm$SelectOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Confirm$Select: void <init>(boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Tx$RollbackOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Tx$Rollback: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Tx$CommitOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Tx$Commit: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Tx$SelectOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Tx$Select: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Nack: void <init>(long,boolean,boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$RecoverOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Recover: void <init>(boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$RecoverAsync: void <init>(boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Reject: void <init>(long,boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Ack: void <init>(long,boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$GetEmpty: void <init>(java.lang.String)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$GetEmpty: void <init>(java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$GetOk: void <init>(long,boolean,java.lang.String,java.lang.String,int)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$GetOk: void <init>(long,boolean,java.lang.String,java.lang.String,int)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$GetOk: void <init>(long,boolean,java.lang.String,java.lang.String,int)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Get: void <init>(int,java.lang.String,boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Get: void <init>(int,java.lang.String,boolean)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Deliver: void <init>(java.lang.String,long,boolean,java.lang.String,java.lang.String)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Deliver: void <init>(java.lang.String,long,boolean,java.lang.String,java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Deliver: void <init>(java.lang.String,long,boolean,java.lang.String,java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Deliver: void <init>(java.lang.String,long,boolean,java.lang.String,java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Return: void <init>(int,java.lang.String,java.lang.String,java.lang.String)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Return: void <init>(int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Return: void <init>(int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Return: void <init>(int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Publish: void <init>(int,java.lang.String,java.lang.String,boolean,boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Publish: void <init>(int,java.lang.String,java.lang.String,boolean,boolean)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Publish: void <init>(int,java.lang.String,java.lang.String,boolean,boolean)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$CancelOk: void <init>(java.lang.String)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$CancelOk: void <init>(java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Cancel: void <init>(java.lang.String,boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Cancel: void <init>(java.lang.String,boolean)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$ConsumeOk: void <init>(java.lang.String)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$ConsumeOk: void <init>(java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.util.Collections: void <clinit>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.util.HashMap: void <init>(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$QosOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Qos: void <init>(int,int,boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$UnbindOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>" -> "<java.util.Collections: void <clinit>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>" -> "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>" -> "<java.util.HashMap: void <init>(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$DeleteOk: void <init>(int)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: void <init>(int,java.lang.String,boolean,boolean,boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: void <init>(int,java.lang.String,boolean,boolean,boolean)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$PurgeOk: void <init>(int)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Purge: void <init>(int,java.lang.String,boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Purge: void <init>(int,java.lang.String,boolean)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$BindOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.util.Collections: void <clinit>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.util.HashMap: void <init>(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$DeclareOk: void <init>(java.lang.String,int,int)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$DeclareOk: void <init>(java.lang.String,int,int)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(int,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.util.Collections: void <clinit>()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(int,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(int,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.util.HashMap: void <init>(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(int,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(int,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$UnbindOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.util.Collections: void <clinit>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.util.HashMap: void <init>(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$BindOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.util.Collections: void <clinit>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.util.HashMap: void <init>(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$DeleteOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: void <init>(int,java.lang.String,boolean,boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: void <init>(int,java.lang.String,boolean,boolean)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$DeclareOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.util.Collections: void <clinit>()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.util.HashMap: void <init>(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Access$RequestOk: void <init>(int)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Access$Request: void <init>(java.lang.String,boolean,boolean,boolean,boolean,boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Access$Request: void <init>(java.lang.String,boolean,boolean,boolean,boolean,boolean)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$CloseOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Close: void <init>(int,java.lang.String,int,int)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Close: void <init>(int,java.lang.String,int,int)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$FlowOk: void <init>(boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Flow: void <init>(boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$OpenOk: void <init>(com.rabbitmq.client.LongString)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$OpenOk: void <init>(com.rabbitmq.client.LongString)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Open: void <init>(java.lang.String)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Open: void <init>(java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Unblocked: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Blocked: void <init>(java.lang.String)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Blocked: void <init>(java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$CloseOk: void <init>()>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Close: void <init>(int,java.lang.String,int,int)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Close: void <init>(int,java.lang.String,int,int)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$OpenOk: void <init>(java.lang.String)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$OpenOk: void <init>(java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Open: void <init>(java.lang.String,java.lang.String,boolean)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Open: void <init>(java.lang.String,java.lang.String,boolean)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Open: void <init>(java.lang.String,java.lang.String,boolean)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$TuneOk: void <init>(int,int,int)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Tune: void <init>(int,int,int)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$SecureOk: void <init>(com.rabbitmq.client.LongString)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$SecureOk: void <init>(com.rabbitmq.client.LongString)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Secure: void <init>(com.rabbitmq.client.LongString)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Secure: void <init>(com.rabbitmq.client.LongString)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(java.util.Map,java.lang.String,com.rabbitmq.client.LongString,java.lang.String)>" -> "<java.util.Collections: void <clinit>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(java.util.Map,java.lang.String,com.rabbitmq.client.LongString,java.lang.String)>" -> "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(java.util.Map,java.lang.String,com.rabbitmq.client.LongString,java.lang.String)>" -> "<java.util.HashMap: void <init>(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(java.util.Map,java.lang.String,com.rabbitmq.client.LongString,java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(java.util.Map,java.lang.String,com.rabbitmq.client.LongString,java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(java.util.Map,java.lang.String,com.rabbitmq.client.LongString,java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(java.util.Map,java.lang.String,com.rabbitmq.client.LongString,java.lang.String)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(int,int,java.util.Map,com.rabbitmq.client.LongString,com.rabbitmq.client.LongString)>" -> "<java.util.Collections: void <clinit>()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(int,int,java.util.Map,com.rabbitmq.client.LongString,com.rabbitmq.client.LongString)>" -> "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(int,int,java.util.Map,com.rabbitmq.client.LongString,com.rabbitmq.client.LongString)>" -> "<java.util.HashMap: void <init>(java.util.Map)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(int,int,java.util.Map,com.rabbitmq.client.LongString,com.rabbitmq.client.LongString)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(int,int,java.util.Map,com.rabbitmq.client.LongString,com.rabbitmq.client.LongString)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(int,int,java.util.Map,com.rabbitmq.client.LongString,com.rabbitmq.client.LongString)>" -> "<com.rabbitmq.client.impl.Method: void <init>()>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.CommandAssembler$CAState: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQContentHeader: void <init>(java.io.DataInputStream)>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.client.impl.Method: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashMap: void <init>(java.util.Map)>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>(java.util.Map)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void finalize()>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Enum: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void reportFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQContentHeader: long getBodySize()>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readOctet()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readOctet()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.util.Map readTable()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: com.rabbitmq.client.LongString readLongstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Start: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: com.rabbitmq.client.LongString readLongstr()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: int readOctet()>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void clearBits()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: java.util.Map readTable()>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void clearBits()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: com.rabbitmq.client.LongString readLongstr()>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void clearBits()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.util.Map readTable()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: com.rabbitmq.client.LongString readLongstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void clearBits()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Secure: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: com.rabbitmq.client.LongString readLongstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$SecureOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: com.rabbitmq.client.LongString readLongstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Tune: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Tune: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readLong()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Tune: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void clearBits()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: int readLong()>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void clearBits()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$TuneOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$TuneOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readLong()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$TuneOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Open: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Open: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Open: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$OpenOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Close: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Close: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Close: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Close: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Connection$Blocked: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Open: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$OpenOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: com.rabbitmq.client.LongString readLongstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Flow: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$FlowOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Close: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Close: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Close: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Channel$Close: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Access$Request: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Access$Request: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Access$Request: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Access$Request: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Access$Request: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Access$Request: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Access$RequestOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.util.Map readTable()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.util.Map readTable()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.util.Map readTable()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.util.Map readTable()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$DeclareOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$DeclareOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readLong()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$DeclareOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readLong()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.util.Map readTable()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Purge: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Purge: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Purge: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$PurgeOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readLong()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$DeleteOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readLong()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.util.Map readTable()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Qos: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readLong()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Qos: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Qos: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.util.Map readTable()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$ConsumeOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Cancel: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Cancel: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$CancelOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Publish: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Publish: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Publish: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Publish: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Publish: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Return: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Return: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Return: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Return: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Deliver: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Deliver: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: long readLonglong()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Deliver: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Deliver: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Deliver: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: long readLonglong()>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: void clearBits()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Get: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Get: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Get: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$GetOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: long readLonglong()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$GetOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$GetOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$GetOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$GetOk: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: int readLong()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$GetEmpty: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Ack: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: long readLonglong()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Ack: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Reject: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: long readLonglong()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Reject: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$RecoverAsync: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Recover: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Nack: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: long readLonglong()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Nack: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Basic$Nack: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.impl.AMQImpl$Confirm$Select: void <init>(com.rabbitmq.client.impl.MethodArgumentReader)>" -> "<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: void finishPresence()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.util.Map readTable()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: int readOctet()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: int readOctet()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.util.Date readTimestamp()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.ContentHeaderPropertyReader: void finishPresence()>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean isContinuationBitSet()>";
"<com.rabbitmq.client.impl.ContentHeaderPropertyReader: void finishPresence()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.util.Date readTimestamp()>" -> "<com.rabbitmq.client.impl.ValueReader: java.util.Date readTimestamp()>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Date readTimestamp()>" -> "<com.rabbitmq.client.impl.ValueReader: java.util.Date readTimestamp(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Date readTimestamp(java.io.DataInputStream)>" -> "<java.util.Date: void <init>(long)>";
"<java.util.Date: void <init>(long)>" -> "<java.lang.Object: void <init>()>";
"<java.util.Date: void <init>(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ContentHeaderPropertyReader: int readOctet()>" -> "<com.rabbitmq.client.impl.ValueReader: int readOctet()>";
"<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.util.Map readTable()>" -> "<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable()>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable()>" -> "<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>" -> "<java.util.Collections: void <clinit>()>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: java.lang.String readShortstr(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>" -> "<java.io.DataInputStream: void <init>(java.io.InputStream)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.TruncatedInputStream: void <init>(java.io.InputStream,long)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>" -> "<java.util.HashMap: void <init>()>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>" -> "<java.util.Collections: java.util.Map emptyMap()>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: long unsignedExtend(int)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Integer: void <clinit>()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: byte[] readBytes(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Short: java.lang.Short valueOf(short)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Long: java.lang.Long valueOf(long)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Float: java.lang.Float valueOf(float)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Double: java.lang.Double valueOf(double)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Byte: java.lang.Byte valueOf(byte)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: java.util.List readArray(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: java.util.Date readTimestamp(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.math.BigInteger: void <init>(byte[])>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: com.rabbitmq.client.LongString readLongstr(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<com.rabbitmq.client.MalformedFrameException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Short: void <clinit>()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Long: void <clinit>()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Float: void <clinit>()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Double: void <clinit>()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.lang.Byte: void <clinit>()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.math.BigInteger: void <clinit>()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.math.BigDecimal: void <clinit>()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.String readShortstr(java.io.DataInputStream)>" -> "<java.lang.String: void <clinit>()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.String readShortstr(java.io.DataInputStream)>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<com.rabbitmq.client.impl.TruncatedInputStream: void <init>(java.io.InputStream,long)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<java.util.Collections: java.util.Map emptyMap()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ValueReader: byte[] readBytes(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: long unsignedExtend(int)>";
"<com.rabbitmq.client.impl.ValueReader: byte[] readBytes(java.io.DataInputStream)>" -> "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Short: java.lang.Short valueOf(short)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Long: java.lang.Long valueOf(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Float: java.lang.Float valueOf(float)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Double: java.lang.Double valueOf(double)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Byte: java.lang.Byte valueOf(byte)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.List readArray(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: long unsignedExtend(int)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.List readArray(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.List readArray(java.io.DataInputStream)>" -> "<java.util.ArrayList: void <init>()>";
"<com.rabbitmq.client.impl.ValueReader: java.util.List readArray(java.io.DataInputStream)>" -> "<java.io.DataInputStream: void <init>(java.io.InputStream)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.List readArray(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.TruncatedInputStream: void <init>(java.io.InputStream,long)>";
"<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>" -> "<java.lang.Number: void <init>()>";
"<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.math.BigInteger: void <init>(byte[])>" -> "<java.lang.Number: void <init>()>";
"<java.math.BigInteger: void <init>(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ValueReader: com.rabbitmq.client.LongString readLongstr(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.ValueReader: byte[] readBytes(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.ValueReader: com.rabbitmq.client.LongString readLongstr(java.io.DataInputStream)>" -> "<com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(byte[])>";
"<java.lang.String: void <init>(byte[],java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[],java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Number: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Number: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(byte[])>" -> "<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>";
"<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.client.impl.ValueReader: java.util.List readArray(java.io.DataInputStream)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.List readArray(java.io.DataInputStream)>" -> "<java.io.FilterInputStream: int available()>";
"<java.io.FilterInputStream: int available()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.String readShortstr(java.io.DataInputStream)>" -> "<java.io.DataInputStream: int readUnsignedByte()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.String readShortstr(java.io.DataInputStream)>" -> "<java.io.DataInputStream: void readFully(byte[])>";
"<java.io.DataInputStream: int readUnsignedByte()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.DataInputStream: void readFully(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.io.DataInputStream: int readUnsignedByte()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.io.DataInputStream: int readInt()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.io.DataInputStream: int readUnsignedByte()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.io.DataInputStream: void readFully(byte[])>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.io.DataInputStream: byte readByte()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.io.DataInputStream: double readDouble()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.io.DataInputStream: float readFloat()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.io.DataInputStream: long readLong()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.io.DataInputStream: short readShort()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.Object readFieldValue(java.io.DataInputStream)>" -> "<java.io.DataInputStream: boolean readBoolean()>";
"<java.io.DataInputStream: int readInt()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.DataInputStream: byte readByte()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.DataInputStream: double readDouble()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.DataInputStream: float readFloat()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.DataInputStream: long readLong()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.DataInputStream: short readShort()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.DataInputStream: boolean readBoolean()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.List readArray(java.io.DataInputStream)>" -> "<java.io.DataInputStream: int readInt()>";
"<com.rabbitmq.client.impl.ValueReader: byte[] readBytes(java.io.DataInputStream)>" -> "<java.io.DataInputStream: int readInt()>";
"<com.rabbitmq.client.impl.ValueReader: byte[] readBytes(java.io.DataInputStream)>" -> "<java.io.DataInputStream: void readFully(byte[])>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>" -> "<java.io.FilterInputStream: int available()>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: boolean containsKey(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable(java.io.DataInputStream)>" -> "<java.io.DataInputStream: int readInt()>";
"<com.rabbitmq.client.impl.ValueReader: java.util.Date readTimestamp(java.io.DataInputStream)>" -> "<java.io.DataInputStream: long readLong()>";
"<com.rabbitmq.client.impl.ContentHeaderPropertyReader: java.lang.String readShortstr()>" -> "<com.rabbitmq.client.impl.ValueReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.ValueReader: java.lang.String readShortstr()>" -> "<com.rabbitmq.client.impl.ValueReader: java.lang.String readShortstr(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean readPresence()>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: void readFlagWord()>";
"<com.rabbitmq.client.impl.ContentHeaderPropertyReader: void readFlagWord()>" -> "<com.rabbitmq.client.impl.ContentHeaderPropertyReader: boolean isContinuationBitSet()>";
"<com.rabbitmq.client.impl.ContentHeaderPropertyReader: void readFlagWord()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ContentHeaderPropertyReader: void readFlagWord()>" -> "<com.rabbitmq.client.impl.ValueReader: int readShort()>";
"<com.rabbitmq.client.impl.CommandAssembler: void appendBodyFragment(byte[])>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<com.rabbitmq.client.impl.Frame: com.rabbitmq.client.impl.Frame readFrom(java.io.DataInputStream)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.client.impl.Frame: com.rabbitmq.client.impl.Frame readFrom(java.io.DataInputStream)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.rabbitmq.client.impl.Frame: com.rabbitmq.client.impl.Frame readFrom(java.io.DataInputStream)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<com.rabbitmq.client.impl.Frame: void writeTo(java.io.DataOutputStream)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<com.rabbitmq.client.impl.Frame: void writeTo(java.io.DataOutputStream)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<com.rabbitmq.client.impl.Frame: java.lang.String toString()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<com.rabbitmq.client.impl.Frame: void writeTo(java.io.DataOutputStream)>";
"<com.rabbitmq.client.impl.Frame: java.lang.String toString()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.client.impl.Frame: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.client.impl.Frame: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.rabbitmq.client.impl.Frame: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.rabbitmq.client.impl.Frame: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void reportFrame(com.rabbitmq.client.impl.Frame)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void reportFrame(com.rabbitmq.client.impl.Frame)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void reportFrame(com.rabbitmq.client.impl.Frame)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void reportFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.Frame: java.io.DataInputStream getInputStream()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void reportFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.Frame: java.io.DataInputStream getInputStream()>";
"<com.rabbitmq.client.impl.Frame: java.io.DataInputStream getInputStream()>" -> "<java.io.ByteArrayInputStream: void <init>(byte[])>";
"<com.rabbitmq.client.impl.Frame: java.io.DataInputStream getInputStream()>" -> "<java.io.DataInputStream: void <init>(java.io.InputStream)>";
"<java.io.ByteArrayInputStream: void <init>(byte[])>" -> "<java.io.InputStream: void <init>()>";
"<java.io.ByteArrayInputStream: void <init>(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.Frame: java.io.DataInputStream getInputStream()>" -> "<com.rabbitmq.client.impl.Frame: byte[] getPayload()>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<java.io.DataInputStream: short readShort()>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>" -> "<java.io.DataInputStream: short readShort()>";
"<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.AMQContentHeader readContentHeaderFrom(java.io.DataInputStream)>" -> "<java.io.DataInputStream: short readShort()>";
"<com.rabbitmq.client.impl.AMQContentHeader: void <init>(java.io.DataInputStream)>" -> "<java.io.DataInputStream: short readShort()>";
"<com.rabbitmq.client.impl.AMQContentHeader: void <init>(java.io.DataInputStream)>" -> "<java.io.DataInputStream: long readLong()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void report(int,java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void report(int,java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void report(int,java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void report(int,java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<com.rabbitmq.client.impl.AMQCommand: boolean handleFrame(com.rabbitmq.client.impl.Frame)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>" -> "<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>" -> "<java.lang.String: void <clinit>()>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.StringBuilder contentBodyStringBuilder(byte[],boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>" -> "<com.rabbitmq.client.impl.CommandAssembler: com.rabbitmq.client.impl.Method getMethod()>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>" -> "<com.rabbitmq.client.impl.CommandAssembler: com.rabbitmq.client.impl.AMQContentHeader getContentHeader()>";
"<com.rabbitmq.client.impl.AMQCommand: java.lang.String toString(boolean)>" -> "<com.rabbitmq.client.impl.CommandAssembler: byte[] getContentBody()>";
"<com.rabbitmq.client.impl.CommandAssembler: byte[] getContentBody()>" -> "<com.rabbitmq.client.impl.CommandAssembler: byte[] coalesceContentBody()>";
"<com.rabbitmq.client.impl.CommandAssembler: byte[] coalesceContentBody()>" -> "<com.rabbitmq.client.impl.CommandAssembler: void <clinit>()>";
"<com.rabbitmq.client.impl.CommandAssembler: byte[] coalesceContentBody()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.rabbitmq.client.impl.CommandAssembler: byte[] coalesceContentBody()>" -> "<java.lang.System: void <clinit>()>";
"<com.rabbitmq.client.impl.CommandAssembler: byte[] coalesceContentBody()>" -> "<java.util.ArrayList: int size()>";
"<com.rabbitmq.client.impl.CommandAssembler: byte[] coalesceContentBody()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<com.rabbitmq.client.impl.CommandAssembler: byte[] coalesceContentBody()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<com.rabbitmq.client.impl.CommandAssembler: byte[] coalesceContentBody()>" -> "<java.util.ArrayList: void clear()>";
"<com.rabbitmq.client.impl.CommandAssembler: byte[] coalesceContentBody()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.AMQCommand: boolean handleFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.CommandAssembler: boolean handleFrame(com.rabbitmq.client.impl.Frame)>";
"<com.rabbitmq.client.impl.CommandAssembler: boolean handleFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.CommandAssembler$1: void <clinit>()>";
"<com.rabbitmq.client.impl.CommandAssembler: boolean handleFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.CommandAssembler: void consumeBodyFrame(com.rabbitmq.client.impl.Frame)>";
"<com.rabbitmq.client.impl.CommandAssembler: boolean handleFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.CommandAssembler: void consumeHeaderFrame(com.rabbitmq.client.impl.Frame)>";
"<com.rabbitmq.client.impl.CommandAssembler: boolean handleFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>";
"<com.rabbitmq.client.impl.CommandAssembler: boolean handleFrame(com.rabbitmq.client.impl.Frame)>" -> "<java.lang.AssertionError: void <init>(java.lang.Object)>";
"<com.rabbitmq.client.impl.CommandAssembler: boolean handleFrame(com.rabbitmq.client.impl.Frame)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.client.impl.CommandAssembler$1: void <clinit>()>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>";
"<com.rabbitmq.client.impl.CommandAssembler$1: void <clinit>()>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: com.rabbitmq.client.impl.CommandAssembler$CAState[] values()>";
"<com.rabbitmq.client.impl.CommandAssembler$1: void <clinit>()>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>";
"<com.rabbitmq.client.impl.CommandAssembler$1: void <clinit>()>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeBodyFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.CommandAssembler: void updateContentBodyState()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeBodyFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.UnexpectedFrameError: void <init>(com.rabbitmq.client.impl.Frame,int)>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeBodyFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.CommandAssembler: void appendBodyFragment(byte[])>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeBodyFrame(com.rabbitmq.client.impl.Frame)>" -> "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeHeaderFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.AMQContentHeader readContentHeaderFrom(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeHeaderFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.UnexpectedFrameError: void <init>(com.rabbitmq.client.impl.Frame,int)>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeHeaderFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.CommandAssembler: void updateContentBodyState()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.UnexpectedFrameError: void <init>(com.rabbitmq.client.impl.Frame,int)>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl: com.rabbitmq.client.impl.Method readMethodFrom(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>";
"<java.lang.AssertionError: void <init>(java.lang.Object)>" -> "<java.lang.Error: void <init>()>";
"<java.lang.AssertionError: void <init>(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.CommandAssembler$CAState: com.rabbitmq.client.impl.CommandAssembler$CAState[] values()>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>";
"<com.rabbitmq.client.UnexpectedFrameError: void <init>(com.rabbitmq.client.impl.Frame,int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.client.UnexpectedFrameError: void <init>(com.rabbitmq.client.impl.Frame,int)>" -> "<java.lang.Error: void <init>(java.lang.String)>";
"<java.lang.Error: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Error: void <init>(java.lang.String)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.UnexpectedFrameError: void <init>(com.rabbitmq.client.impl.Frame,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.client.UnexpectedFrameError: void <init>(com.rabbitmq.client.impl.Frame,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.rabbitmq.client.UnexpectedFrameError: void <init>(com.rabbitmq.client.impl.Frame,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.client.UnexpectedFrameError: void <init>(com.rabbitmq.client.impl.Frame,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.rabbitmq.client.UnexpectedFrameError: void <init>(com.rabbitmq.client.impl.Frame,int)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.rabbitmq.client.impl.CommandAssembler$CAState: com.rabbitmq.client.impl.CommandAssembler$CAState[] values()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<java.lang.Object: java.lang.Object clone()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Start: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$StartOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Secure: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$SecureOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Tune: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$TuneOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Open: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$OpenOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Close: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$CloseOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Blocked: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Connection$Unblocked: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$Open: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$OpenOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$Flow: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$FlowOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$Close: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Channel$CloseOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Access$Request: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Access$RequestOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$DeclareOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$DeleteOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$BindOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Exchange$UnbindOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$DeclareOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$BindOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Purge: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$PurgeOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$DeleteOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Queue$UnbindOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Qos: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$QosOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Consume: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$ConsumeOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Cancel: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$CancelOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Publish: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Return: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Deliver: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Get: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$GetOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$GetEmpty: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Ack: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Reject: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$RecoverAsync: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Recover: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$RecoverOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Basic$Nack: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$Select: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$SelectOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$Commit: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$CommitOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$Rollback: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Tx$RollbackOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Confirm$Select: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQImpl$Confirm$SelectOk: boolean hasContent()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeHeaderFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.AMQContentHeader: long getBodySize()>";
"<com.rabbitmq.client.impl.CommandAssembler$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<com.rabbitmq.client.impl.CommandAssembler$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<com.rabbitmq.client.impl.CommandAssembler$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<java.lang.Enum: int ordinal()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.CommandAssembler: boolean handleFrame(com.rabbitmq.client.impl.Frame)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.client.impl.CommandAssembler: boolean handleFrame(com.rabbitmq.client.impl.Frame)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.rabbitmq.client.impl.CommandAssembler: boolean handleFrame(com.rabbitmq.client.impl.Frame)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeMethodFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.Frame: java.io.DataInputStream getInputStream()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeHeaderFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.Frame: java.io.DataInputStream getInputStream()>";
"<com.rabbitmq.client.impl.CommandAssembler: void consumeBodyFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.Frame: byte[] getPayload()>";
"<com.rabbitmq.client.impl.CommandAssembler: boolean handleFrame(com.rabbitmq.client.impl.Frame)>" -> "<com.rabbitmq.client.impl.CommandAssembler: boolean isComplete()>";
"<com.rabbitmq.client.impl.CommandAssembler: boolean isComplete()>" -> "<com.rabbitmq.client.impl.CommandAssembler$CAState: void <clinit>()>";
"<com.rabbitmq.client.impl.CommandAssembler: boolean handleFrame(com.rabbitmq.client.impl.Frame)>" -> "<java.lang.Enum: int ordinal()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void doFrame()>" -> "<java.util.HashMap: java.lang.Object remove(java.lang.Object)>";
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashMap: java.lang.Object remove(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void run()>" -> "<com.rabbitmq.utility.BlockingCell: boolean setIfUnset(java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void run()>" -> "<com.rabbitmq.utility.BlockingCell: boolean setIfUnset(java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void run()>" -> "<com.rabbitmq.utility.BlockingCell: boolean setIfUnset(java.lang.Object)>";
"<com.rabbitmq.utility.BlockingCell: boolean setIfUnset(java.lang.Object)>" -> "<com.rabbitmq.utility.BlockingCell: void set(java.lang.Object)>";
"<com.rabbitmq.utility.BlockingCell: void set(java.lang.Object)>" -> "<java.lang.AssertionError: void <init>(java.lang.Object)>";
"<com.rabbitmq.utility.BlockingCell: void set(java.lang.Object)>" -> "<java.lang.Object: void notifyAll()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.lang.Thread: void run()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.lang.Thread: void start()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.lang.Thread: void run()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.lang.Thread: void start()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.utility.BlockingCell: boolean setIfUnset(java.lang.Object)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.utility.BlockingCell: boolean setIfUnset(java.lang.Object)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.utility.BlockingCell: boolean setIfUnset(java.lang.Object)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer: void logException(java.lang.Exception)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer: void logException(java.lang.Exception)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer: void logException(java.lang.Exception)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer: void logException(java.lang.Exception)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer: void logException(java.lang.Exception)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer: void logException(java.lang.Exception)>";
"<com.rabbitmq.tools.Tracer: void logException(java.lang.Exception)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.tools.Tracer: void logException(java.lang.Exception)>" -> "<com.rabbitmq.utility.Utility: java.lang.String makeStackTrace(java.lang.Throwable)>";
"<com.rabbitmq.utility.Utility: java.lang.String makeStackTrace(java.lang.Throwable)>" -> "<java.io.ByteArrayOutputStream: void <init>()>";
"<com.rabbitmq.utility.Utility: java.lang.String makeStackTrace(java.lang.Throwable)>" -> "<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>";
"<java.io.ByteArrayOutputStream: void <init>()>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.ByteArrayOutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.utility.Utility: java.lang.String makeStackTrace(java.lang.Throwable)>" -> "<java.io.PrintStream: void flush()>";
"<com.rabbitmq.utility.Utility: java.lang.String makeStackTrace(java.lang.Throwable)>" -> "<java.io.PrintStream: void close()>";
"<java.io.PrintStream: void flush()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.PrintStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.utility.Utility: java.lang.String makeStackTrace(java.lang.Throwable)>" -> "<java.io.ByteArrayOutputStream: java.lang.String toString()>";
"<java.io.ByteArrayOutputStream: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void logException(java.lang.Exception)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void logException(java.lang.Exception)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void logException(java.lang.Exception)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.rabbitmq.utility.Utility: java.lang.String makeStackTrace(java.lang.Throwable)>" -> "<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>";
"<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void logException(java.lang.Exception)>" -> "<com.rabbitmq.tools.Tracer: void log(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void log(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<com.rabbitmq.tools.Tracer: void log(java.lang.String)>" -> "<java.lang.System: long currentTimeMillis()>";
"<com.rabbitmq.tools.Tracer: void log(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.rabbitmq.tools.Tracer: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
"<com.rabbitmq.tools.Tracer: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.rabbitmq.tools.Tracer: void reportAndLogNonNullException(java.lang.Exception)>" -> "<com.rabbitmq.tools.Tracer: void logException(java.lang.Exception)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.net.ServerSocket: java.net.Socket accept()>";
"<java.net.ServerSocket: java.net.Socket accept()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger: boolean stop()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: boolean stop()>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger$LogCmd: void <clinit>()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: boolean stop()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: boolean stop()>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger$Pr: void <init>(java.lang.Object,java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$LogCmd: void <clinit>()>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger$LogCmd: void <init>(java.lang.String,int)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$LogCmd: void <clinit>()>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger$LogCmd: void <init>(java.lang.String,int)>";
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$Pr: void <init>(java.lang.Object,java.lang.Object)>" -> "<java.lang.Object: void <init>()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$LogCmd: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.rabbitmq.tools.Tracer: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: boolean stop()>" -> "<java.util.concurrent.ArrayBlockingQueue: void put(java.lang.Object)>";
"<java.util.concurrent.ArrayBlockingQueue: void put(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: boolean stop()>" -> "<com.rabbitmq.tools.Tracer$SafeCounter: boolean decrementAndTestZero()>";
"<com.rabbitmq.tools.Tracer: void log(java.lang.String)>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger: void log(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void log(java.lang.String)>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger$LogCmd: void <clinit>()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void log(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void log(java.lang.String)>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger$Pr: void <init>(java.lang.Object,java.lang.Object)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: void log(java.lang.String)>" -> "<java.util.concurrent.ArrayBlockingQueue: void put(java.lang.Object)>";
"<com.rabbitmq.client.impl.ValueReader: int readShort()>" -> "<java.io.DataInputStream: int readUnsignedShort()>";
"<java.io.DataInputStream: int readUnsignedShort()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.ValueReader: int readOctet()>" -> "<java.io.DataInputStream: int readUnsignedByte()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: long readLonglong()>" -> "<com.rabbitmq.client.impl.ValueReader: long readLonglong()>";
"<com.rabbitmq.client.impl.ValueReader: long readLonglong()>" -> "<java.io.DataInputStream: long readLong()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: boolean readBit()>" -> "<com.rabbitmq.client.impl.ValueReader: int readOctet()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: int readLong()>" -> "<com.rabbitmq.client.impl.ValueReader: int readLong()>";
"<com.rabbitmq.client.impl.ValueReader: int readLong()>" -> "<java.io.DataInputStream: int readInt()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: int readShort()>" -> "<com.rabbitmq.client.impl.ValueReader: int readShort()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: java.lang.String readShortstr()>" -> "<com.rabbitmq.client.impl.ValueReader: java.lang.String readShortstr()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: com.rabbitmq.client.LongString readLongstr()>" -> "<com.rabbitmq.client.impl.ValueReader: com.rabbitmq.client.LongString readLongstr()>";
"<com.rabbitmq.client.impl.ValueReader: com.rabbitmq.client.LongString readLongstr()>" -> "<com.rabbitmq.client.impl.ValueReader: com.rabbitmq.client.LongString readLongstr(java.io.DataInputStream)>";
"<com.rabbitmq.client.impl.MethodArgumentReader: java.util.Map readTable()>" -> "<com.rabbitmq.client.impl.ValueReader: java.util.Map readTable()>";
"<com.rabbitmq.client.impl.MethodArgumentReader: int readOctet()>" -> "<com.rabbitmq.client.impl.ValueReader: int readOctet()>";
"<com.rabbitmq.tools.Tracer$DirectionHandler: void report(int,java.lang.Object)>" -> "<com.rabbitmq.tools.Tracer: void log(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void reportAndLogNonNullException(java.lang.Exception)>" -> "<com.rabbitmq.utility.BlockingCell: boolean setIfUnset(java.lang.Object)>";
"<com.rabbitmq.tools.Tracer: void start()>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger: boolean start()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: boolean start()>" -> "<java.lang.Thread: void <init>(java.lang.Runnable)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: boolean start()>" -> "<java.lang.Thread: void run()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: boolean start()>" -> "<java.lang.Thread: void start()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: boolean start()>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<java.lang.System: void <clinit>()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void drainCurrentQueue()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger: com.rabbitmq.tools.Tracer$SafeCounter access$100(com.rabbitmq.tools.Tracer$AsyncLogger)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void drainCurrentQueue()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<java.lang.System: long currentTimeMillis()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<java.lang.System: long currentTimeMillis()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger$LogCmd: void <clinit>()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<java.util.concurrent.TimeUnit: void <clinit>()>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] $values()>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] $values()>" -> "<java.util.concurrent.TimeUnit: void <clinit>()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void drainCurrentQueue()>" -> "<java.io.PrintStream: void println(java.lang.String)>";
"<java.io.PrintStream: void println(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void drainCurrentQueue()>" -> "<java.util.concurrent.ArrayBlockingQueue: int size()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void drainCurrentQueue()>" -> "<java.util.concurrent.ArrayBlockingQueue: java.lang.Object poll()>";
"<java.util.concurrent.ArrayBlockingQueue: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.concurrent.ArrayBlockingQueue: java.lang.Object poll()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<com.rabbitmq.tools.Tracer$SafeCounter: void reset()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<java.util.concurrent.ArrayBlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>";
"<java.util.concurrent.ArrayBlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<java.io.PrintStream: void flush()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<java.io.PrintStream: void println(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<java.io.PrintStream: void println(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<java.io.PrintStream: void flush()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<java.io.PrintStream: void println(java.lang.String)>";
"<com.rabbitmq.tools.Tracer$AsyncLogger$AsyncLoggerRunnable: void run()>" -> "<java.io.PrintStream: void flush()>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: boolean start()>" -> "<com.rabbitmq.tools.Tracer$SafeCounter: boolean testZeroAndIncrement()>";
"<com.rabbitmq.tools.Tracer: void start()>" -> "<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>";
"<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger: boolean stop()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger: boolean stop()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<com.rabbitmq.tools.Tracer$AsyncLogger: boolean stop()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.net.Socket: void close()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.net.Socket: void close()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.net.Socket: void close()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.net.Socket: void close()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.net.Socket: void close()>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.net.Socket: void close()>";
"<java.net.Socket: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<java.io.FilterOutputStream: void write(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.tools.Tracer: void run()>" -> "<java.io.DataInputStream: void readFully(byte[])>";
"<com.rabbitmq.tools.Tracer$AsyncLogger: boolean stop()>" -> "<java.lang.Thread: void interrupt()>";
"<java.lang.Thread: void interrupt()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.rabbitmq.client.impl.Frame: com.rabbitmq.client.impl.Frame readFrom(java.io.DataInputStream)>" -> "<java.io.DataInputStream: int readUnsignedByte()>";
"<com.rabbitmq.client.impl.Frame: com.rabbitmq.client.impl.Frame readFrom(java.io.DataInputStream)>" -> "<java.io.DataInputStream: int readUnsignedShort()>";
"<com.rabbitmq.client.impl.Frame: com.rabbitmq.client.impl.Frame readFrom(java.io.DataInputStream)>" -> "<java.io.DataInputStream: int readInt()>";
"<com.rabbitmq.client.impl.Frame: com.rabbitmq.client.impl.Frame readFrom(java.io.DataInputStream)>" -> "<java.io.DataInputStream: void readFully(byte[])>";
"<com.rabbitmq.client.impl.Frame: com.rabbitmq.client.impl.Frame readFrom(java.io.DataInputStream)>" -> "<java.io.DataInputStream: int readUnsignedByte()>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<java.io.DataInputStream: int readUnsignedByte()>";
"<com.rabbitmq.client.impl.Frame: void protocolVersionMismatch(java.io.DataInputStream)>" -> "<java.io.DataInputStream: int readUnsignedByte()>";
"<com.rabbitmq.client.impl.Frame: void writeTo(java.io.DataOutputStream)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.rabbitmq.client.impl.Frame: void writeTo(java.io.DataOutputStream)>" -> "<java.io.DataOutputStream: void writeShort(int)>";
"<com.rabbitmq.client.impl.Frame: void writeTo(java.io.DataOutputStream)>" -> "<java.io.DataOutputStream: void writeInt(int)>";
"<com.rabbitmq.client.impl.Frame: void writeTo(java.io.DataOutputStream)>" -> "<java.io.DataOutputStream: void write(int)>";
"<com.rabbitmq.client.impl.Frame: void writeTo(java.io.DataOutputStream)>" -> "<java.io.DataOutputStream: void writeInt(int)>";
"<com.rabbitmq.client.impl.Frame: void writeTo(java.io.DataOutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<java.io.DataOutputStream: void writeByte(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.DataOutputStream: void writeShort(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.DataOutputStream: void writeInt(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.DataOutputStream: void write(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
}
