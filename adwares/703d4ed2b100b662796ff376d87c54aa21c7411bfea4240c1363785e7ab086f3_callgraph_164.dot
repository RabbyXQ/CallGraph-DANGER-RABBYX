digraph CallGraph {
"<org.jivesoftware.smack.util.Base64: void main(java.lang.String[])>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: void main(java.lang.String[])>" -> "<org.jivesoftware.smack.util.Base64: void usage(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void main(java.lang.String[])>" -> "<org.jivesoftware.smack.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void main(java.lang.String[])>" -> "<org.jivesoftware.smack.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void main(java.lang.String[])>" -> "<org.jivesoftware.smack.util.Base64: void usage(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void main(java.lang.String[])>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: void main(java.lang.String[])>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: void main(java.lang.String[])>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void usage(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<java.lang.StringBuilder: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>";
"<org.jivesoftware.smack.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.io.FileOutputStream: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)>" -> "<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>";
"<org.jivesoftware.smack.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.io.FileOutputStream: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>" -> "<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>";
"<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.lang.String)>" -> "<java.io.FileOutputStream: void finalize()>";
"<java.io.FileOutputStream: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.lang.String)>" -> "<java.io.OutputStream: void <init>()>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<org.jivesoftware.smack.util.Base64$InputStream: void <init>(java.io.InputStream,int)>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.io.BufferedInputStream: void <init>(java.io.InputStream)>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.lang.String: void <init>(byte[],int,int,java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<org.jivesoftware.smack.util.Base64$InputStream: void <init>(java.io.InputStream,int)>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.io.BufferedInputStream: void <init>(java.io.InputStream)>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.lang.Math: int max(int,int)>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64$InputStream: void <init>(java.io.InputStream,int)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64$InputStream: void <init>(java.io.InputStream,int)>" -> "<org.jivesoftware.smack.util.Base64: byte[] access$1(int)>";
"<org.jivesoftware.smack.util.Base64$InputStream: void <init>(java.io.InputStream,int)>" -> "<org.jivesoftware.smack.util.Base64: byte[] access$0(int)>";
"<org.jivesoftware.smack.util.Base64$InputStream: void <init>(java.io.InputStream,int)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.FileInputStream: void finalize()>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: void <init>(byte[],int,int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[],int,int,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Math: int max(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: byte[] access$1(int)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: byte[] access$1(int)>" -> "<org.jivesoftware.smack.util.Base64: byte[] getDecodabet(int)>";
"<org.jivesoftware.smack.util.Base64: byte[] access$0(int)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: byte[] access$0(int)>" -> "<org.jivesoftware.smack.util.Base64: byte[] getAlphabet(int)>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: byte[] getDecodabet(int)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: byte[] getDecodabet(int)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: byte[] getDecodabet(int)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: byte[] getAlphabet(int)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: byte[] getAlphabet(int)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: byte[] getAlphabet(int)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<org.jivesoftware.smack.util.Base64$InputStream: int read(byte[],int,int)>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.io.FilterInputStream: void close()>";
"<java.io.FilterInputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64$InputStream: int read(byte[],int,int)>" -> "<org.jivesoftware.smack.util.Base64$InputStream: int read()>";
"<org.jivesoftware.smack.util.Base64$InputStream: int read()>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64$InputStream: int read()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64$InputStream: int read()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64$InputStream: int read()>" -> "<org.jivesoftware.smack.util.Base64: int access$3(byte[],int,byte[],int,int)>";
"<org.jivesoftware.smack.util.Base64$InputStream: int read()>" -> "<org.jivesoftware.smack.util.Base64: byte[] access$2(byte[],int,int,byte[],int,int)>";
"<org.jivesoftware.smack.util.Base64$InputStream: int read()>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: int access$3(byte[],int,byte[],int,int)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: int access$3(byte[],int,byte[],int,int)>" -> "<org.jivesoftware.smack.util.Base64: int decode4to3(byte[],int,byte[],int,int)>";
"<org.jivesoftware.smack.util.Base64: byte[] access$2(byte[],int,int,byte[],int,int)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: byte[] access$2(byte[],int,int,byte[],int,int)>" -> "<org.jivesoftware.smack.util.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)>";
"<org.jivesoftware.smack.util.Base64: int decode4to3(byte[],int,byte[],int,int)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: int decode4to3(byte[],int,byte[],int,int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jivesoftware.smack.util.Base64: int decode4to3(byte[],int,byte[],int,int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jivesoftware.smack.util.Base64: int decode4to3(byte[],int,byte[],int,int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jivesoftware.smack.util.Base64: int decode4to3(byte[],int,byte[],int,int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jivesoftware.smack.util.Base64: int decode4to3(byte[],int,byte[],int,int)>" -> "<org.jivesoftware.smack.util.Base64: byte[] getDecodabet(int)>";
"<org.jivesoftware.smack.util.Base64: int decode4to3(byte[],int,byte[],int,int)>" -> "<java.lang.System: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)>" -> "<org.jivesoftware.smack.util.Base64: void <clinit>()>";
"<org.jivesoftware.smack.util.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)>" -> "<org.jivesoftware.smack.util.Base64: byte[] getAlphabet(int)>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: int decode4to3(byte[],int,byte[],int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.jivesoftware.smack.util.Base64: int decode4to3(byte[],int,byte[],int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.jivesoftware.smack.util.Base64: int decode4to3(byte[],int,byte[],int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.jivesoftware.smack.util.Base64: int decode4to3(byte[],int,byte[],int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.io.File: long length()>";
"<java.io.File: long length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.io.FilterInputStream: void close()>";
"<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)>" -> "<java.io.FilterInputStream: void close()>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<org.jivesoftware.smack.util.Base64$InputStream: int read(byte[],int,int)>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.io.FilterInputStream: void close()>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.io.File: long length()>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.io.File: long length()>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.io.File: long length()>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.io.FilterInputStream: void close()>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.io.FilterInputStream: void close()>";
"<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)>" -> "<java.io.FilterInputStream: void close()>";
"<org.jivesoftware.smack.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.jivesoftware.smack.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.io.FilterOutputStream: void close()>";
"<java.io.FilterOutputStream: void write(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FilterOutputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.io.FilterOutputStream: void close()>";
"<org.jivesoftware.smack.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.io.FilterOutputStream: void close()>";
"<org.jivesoftware.smack.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.jivesoftware.smack.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.io.FilterOutputStream: void close()>";
"<org.jivesoftware.smack.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.io.FilterOutputStream: void close()>";
"<org.jivesoftware.smack.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.io.FilterOutputStream: void close()>";
"<org.jivesoftware.smack.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.lang.Throwable: void printStackTrace()>";
"<java.lang.Throwable: void printStackTrace()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.lang.Throwable: void printStackTrace()>";
"<org.jivesoftware.smack.util.Base64: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jivesoftware.smack.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<java.lang.String: byte[] getBytes(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jivesoftware.smack.util.Base64: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jivesoftware.smack.util.Base64: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
}
