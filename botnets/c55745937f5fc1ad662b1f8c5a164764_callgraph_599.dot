digraph CallGraph {
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.audio.ogg.OggFileReader: void <init>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.audio.ogg.OggFileReader: void <init>(org.jaudiotagger.fix.Fix)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.audio.ogg.OggFileReader: void <init>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.fix.Fix202$OggFileFilter: void <init>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.fix.Fix202: void <init>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.fix.Fix: void <clinit>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <clinit>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.audio.ogg.OggFileReader: void <clinit>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <clinit>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.audio.ogg.OggFileReader: void <clinit>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: void exit(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggFileReader: void <init>()>" -> "<org.jaudiotagger.audio.ogg.util.OggInfoReader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggFileReader: void <init>()>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggFileReader: void <init>()>" -> "<org.jaudiotagger.audio.ogg.util.OggInfoReader: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggFileReader: void <init>()>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggFileReader: void <init>()>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggFileReader: void <init>(org.jaudiotagger.fix.Fix)>" -> "<org.jaudiotagger.audio.ogg.util.OggInfoReader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggFileReader: void <init>(org.jaudiotagger.fix.Fix)>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <init>(org.jaudiotagger.fix.Fix)>";
"<org.jaudiotagger.audio.ogg.OggFileReader: void <init>(org.jaudiotagger.fix.Fix)>" -> "<org.jaudiotagger.audio.ogg.util.OggInfoReader: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggFileReader: void <init>(org.jaudiotagger.fix.Fix)>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggFileReader: void <init>(org.jaudiotagger.fix.Fix)>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <clinit>()>";
"<java.lang.StringBuilder: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.fix.Fix202$OggFileFilter: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.fix.Fix202: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggFileReader: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggFileReader: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggFileReader: void <clinit>()>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <clinit>()>";
"<org.jaudiotagger.fix.Fix: void <clinit>()>" -> "<org.jaudiotagger.fix.Fix: void <init>(java.lang.String,int)>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <init>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <init>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <init>(org.jaudiotagger.fix.Fix)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <init>(org.jaudiotagger.fix.Fix)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: void <init>(org.jaudiotagger.fix.Fix)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <init>(org.jaudiotagger.fix.Fix)>" -> "<java.lang.Object: void <init>()>";
"<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.fix.Fix: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: void <init>(org.jaudiotagger.fix.Fix)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void finalize()>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Enum: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.audio.exceptions.CannotReadException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.audio.AudioFile: void <init>(java.io.File,org.jaudiotagger.audio.AudioHeader,org.jaudiotagger.tag.Tag)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.audio.exceptions.CannotReadException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.audio.exceptions.CannotReadException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.util.logging.Level: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.lang.String: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.util.logging.Level: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.audio.AudioFile: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.util.logging.Level: void <clinit>()>";
"<org.jaudiotagger.audio.exceptions.CannotReadException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>";
"<java.lang.String: java.lang.String valueOf(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.AudioFile: void <init>(java.io.File,org.jaudiotagger.audio.AudioHeader,org.jaudiotagger.tag.Tag)>" -> "<java.lang.Object: void <init>()>";
"<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>" -> "<java.io.RandomAccessFile: void finalize()>";
"<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.exceptions.CannotReadException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>" -> "<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.audio.AudioFile: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.AudioFile: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.RandomAccessFile: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: void <init>(java.lang.String,int,java.lang.String)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.audio.AudioFile: void commit()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.audio.AudioFile: void commit()>";
"<org.jaudiotagger.audio.AudioFile: void commit()>" -> "<org.jaudiotagger.audio.AudioFileIO: void <clinit>()>";
"<org.jaudiotagger.audio.AudioFile: void commit()>" -> "<org.jaudiotagger.audio.AudioFileIO: void write(org.jaudiotagger.audio.AudioFile)>";
"<org.jaudiotagger.audio.AudioFileIO: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.AudioFileIO: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.AudioFileIO: void write(org.jaudiotagger.audio.AudioFile)>" -> "<org.jaudiotagger.audio.AudioFileIO: void <clinit>()>";
"<org.jaudiotagger.audio.AudioFileIO: void write(org.jaudiotagger.audio.AudioFile)>" -> "<org.jaudiotagger.audio.AudioFileIO: org.jaudiotagger.audio.AudioFileIO getDefaultAudioFileIO()>";
"<org.jaudiotagger.audio.AudioFileIO: org.jaudiotagger.audio.AudioFileIO getDefaultAudioFileIO()>" -> "<org.jaudiotagger.audio.AudioFileIO: void <clinit>()>";
"<org.jaudiotagger.audio.AudioFileIO: org.jaudiotagger.audio.AudioFileIO getDefaultAudioFileIO()>" -> "<org.jaudiotagger.audio.AudioFileIO: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void <init>()>" -> "<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>";
"<org.jaudiotagger.audio.AudioFileIO: void <init>()>" -> "<org.jaudiotagger.audio.generic.ModificationHandler: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: void <clinit>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.asf.AsfFileWriter: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.wav.WavFileWriter: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.mp3.MP3FileWriter: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.flac.FlacFileWriter: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.ogg.OggFileWriter: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.real.RealFileReader: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.asf.AsfFileReader: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.wav.WavFileReader: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.mp3.MP3FileReader: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.flac.FlacFileReader: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.ogg.OggFileReader: void <init>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.asf.AsfFileWriter: void <clinit>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.generic.AudioFileWriter: void <clinit>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.ogg.OggFileWriter: void <clinit>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <clinit>()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.ogg.OggFileReader: void <clinit>()>";
"<org.jaudiotagger.audio.generic.ModificationHandler: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.generic.ModificationHandler: void <init>()>" -> "<java.util.Vector: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.SupportedFileFormat: void <clinit>()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.audio.SupportedFileFormat: void <clinit>()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.audio.SupportedFileFormat: void <clinit>()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.audio.SupportedFileFormat: void <clinit>()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.audio.SupportedFileFormat: void <clinit>()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.audio.SupportedFileFormat: void <clinit>()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.audio.SupportedFileFormat: void <clinit>()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.audio.SupportedFileFormat: void <clinit>()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.audio.SupportedFileFormat: void <clinit>()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.audio.SupportedFileFormat: void <clinit>()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.audio.SupportedFileFormat: void <clinit>()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.audio.asf.AsfFileWriter: void <init>()>" -> "<org.jaudiotagger.audio.generic.AudioFileWriter: void <init>()>";
"<org.jaudiotagger.audio.wav.WavFileWriter: void <init>()>" -> "<org.jaudiotagger.audio.generic.AudioFileWriter: void <init>()>";
"<org.jaudiotagger.audio.mp3.MP3FileWriter: void <init>()>" -> "<org.jaudiotagger.audio.generic.AudioFileWriter: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacFileWriter: void <init>()>" -> "<org.jaudiotagger.audio.flac.FlacTagWriter: void <clinit>()>";
"<org.jaudiotagger.audio.flac.FlacFileWriter: void <init>()>" -> "<org.jaudiotagger.audio.flac.FlacTagWriter: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacFileWriter: void <init>()>" -> "<org.jaudiotagger.audio.generic.AudioFileWriter: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggFileWriter: void <init>()>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagWriter: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggFileWriter: void <init>()>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagWriter: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggFileWriter: void <init>()>" -> "<org.jaudiotagger.audio.generic.AudioFileWriter: void <init>()>";
"<org.jaudiotagger.audio.real.RealFileReader: void <init>()>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <init>()>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <init>()>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <init>()>";
"<org.jaudiotagger.audio.wav.WavFileReader: void <init>()>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <init>()>";
"<org.jaudiotagger.audio.wav.WavFileReader: void <init>()>" -> "<org.jaudiotagger.audio.wav.util.WavInfoReader: void <init>()>";
"<org.jaudiotagger.audio.mp3.MP3FileReader: void <init>()>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacFileReader: void <init>()>" -> "<org.jaudiotagger.audio.flac.FlacInfoReader: void <clinit>()>";
"<org.jaudiotagger.audio.flac.FlacFileReader: void <init>()>" -> "<org.jaudiotagger.audio.flac.FlacTagReader: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacFileReader: void <init>()>" -> "<org.jaudiotagger.audio.flac.FlacInfoReader: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacFileReader: void <init>()>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacFileReader: void <init>()>" -> "<org.jaudiotagger.audio.flac.FlacTagReader: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileWriter: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AudioFileWriter: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.asf.AsfFileWriter: void <clinit>()>" -> "<org.jaudiotagger.audio.generic.AudioFileWriter: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggFileWriter: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggFileWriter: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggFileWriter: void <clinit>()>" -> "<org.jaudiotagger.audio.generic.AudioFileWriter: void <clinit>()>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<org.jaudiotagger.audio.generic.AudioFileReader: void <clinit>()>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <init>(java.util.List,boolean)>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: void <init>(java.util.List,boolean)>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<java.util.ArrayList: void <init>()>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <clinit>()>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: void <clinit>()>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<java.util.Vector: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.Vector: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.SupportedFileFormat: void <init>(java.lang.String,int,java.lang.String)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.audio.generic.AudioFileWriter: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacTagWriter: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.flac.FlacTagWriter: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.flac.FlacTagWriter: void <init>()>" -> "<org.jaudiotagger.audio.flac.FlacTagCreator: void <clinit>()>";
"<org.jaudiotagger.audio.flac.FlacTagWriter: void <init>()>" -> "<org.jaudiotagger.audio.flac.FlacTagReader: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacTagWriter: void <init>()>" -> "<org.jaudiotagger.audio.flac.FlacTagCreator: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacTagWriter: void <init>()>" -> "<java.util.ArrayList: void <init>(int)>";
"<org.jaudiotagger.audio.flac.FlacTagWriter: void <init>()>" -> "<java.util.ArrayList: void <init>(int)>";
"<org.jaudiotagger.audio.flac.FlacTagWriter: void <init>()>" -> "<java.util.ArrayList: void <init>(int)>";
"<org.jaudiotagger.audio.flac.FlacTagWriter: void <init>()>" -> "<java.util.ArrayList: void <init>(int)>";
"<org.jaudiotagger.audio.flac.FlacTagWriter: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacTagWriter: void <init>()>" -> "<org.jaudiotagger.audio.flac.FlacTagReader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagWriter: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagWriter: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagWriter: void <init>()>" -> "<org.jaudiotagger.audio.ogg.OggVorbisCommentTagCreator: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagWriter: void <init>()>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagWriter: void <init>()>" -> "<org.jaudiotagger.audio.ogg.OggVorbisCommentTagCreator: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagWriter: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagWriter: void <init>()>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <clinit>()>";
"<org.jaudiotagger.audio.wav.util.WavInfoReader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacInfoReader: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.flac.FlacInfoReader: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.flac.FlacTagReader: void <init>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: void <clinit>()>";
"<org.jaudiotagger.audio.flac.FlacTagReader: void <init>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacTagReader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacInfoReader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacTagReader: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.flac.FlacTagReader: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <init>(java.util.List,boolean)>" -> "<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <init>(java.util.List,boolean)>";
"<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: void <init>(java.util.List,boolean)>" -> "<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <init>(java.util.List,boolean)>";
"<java.util.ArrayList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <init>(java.util.List,boolean)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <init>(java.util.List,boolean)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: void <init>(java.util.List,boolean)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: void <init>(java.util.List,boolean)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <init>(java.util.List,boolean)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<java.util.ArrayList: void <init>()>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: void <clinit>()>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <clinit>()>";
"<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <clinit>()>";
"<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.flac.FlacTagCreator: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.flac.FlacTagCreator: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentCreator: void <init>()>";
"<org.jaudiotagger.audio.flac.FlacTagCreator: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.flac.FlacTagCreator: void <init>()>" -> "<org.jaudiotagger.audio.generic.AbstractTagCreator: void <init>()>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggVorbisCommentTagCreator: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisCommentTagCreator: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggVorbisCommentTagCreator: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisCommentTagCreator: void <init>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentCreator: void <init>()>";
"<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <init>(java.util.List,boolean)>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <init>(java.util.List,boolean)>" -> "<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void register(java.lang.Class)>";
"<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <init>(java.util.List,boolean)>" -> "<java.util.HashMap: void <init>()>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<java.lang.AssertionError: void <init>(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<java.util.HashMap: void <init>(int)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentCreator: void <init>()>" -> "<org.jaudiotagger.audio.generic.AbstractTagCreator: void <init>()>";
"<org.jaudiotagger.audio.generic.AbstractTagCreator: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void register(java.lang.Class)>" -> "<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <clinit>()>";
"<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void register(java.lang.Class)>" -> "<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <clinit>()>";
"<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[])>";
"<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[],java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<java.lang.AssertionError: void <init>(java.lang.Object)>" -> "<java.lang.Error: void <init>()>";
"<java.lang.AssertionError: void <init>(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashMap: void <init>(int)>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[])>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.asf.data.GUID: void <init>(int[])>" -> "<org.jaudiotagger.audio.asf.data.GUID: void setGUID(int[])>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Error: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void setGUID(int[])>" -> "<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>";
"<org.jaudiotagger.audio.asf.data.GUID: void setGUID(int[])>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void setGUID(int[])>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.jaudiotagger.audio.asf.data.GUID: void setGUID(int[])>" -> "<org.jaudiotagger.audio.asf.data.GUID: boolean assertGUID(int[])>";
"<org.jaudiotagger.audio.asf.data.GUID: void setGUID(int[])>" -> "<java.lang.System: void <clinit>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.AudioFileIO: void write(org.jaudiotagger.audio.AudioFile)>" -> "<org.jaudiotagger.audio.AudioFileIO: void writeFile(org.jaudiotagger.audio.AudioFile)>";
"<org.jaudiotagger.audio.AudioFileIO: void writeFile(org.jaudiotagger.audio.AudioFile)>" -> "<org.jaudiotagger.audio.generic.Utils: void <clinit>()>";
"<org.jaudiotagger.audio.AudioFileIO: void writeFile(org.jaudiotagger.audio.AudioFile)>" -> "<org.jaudiotagger.audio.exceptions.CannotWriteException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.AudioFileIO: void writeFile(org.jaudiotagger.audio.AudioFile)>" -> "<org.jaudiotagger.audio.generic.Utils: java.lang.String getExtension(java.io.File)>";
"<org.jaudiotagger.audio.AudioFileIO: void writeFile(org.jaudiotagger.audio.AudioFile)>" -> "<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>";
"<org.jaudiotagger.audio.generic.Utils: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.generic.Utils: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.jaudiotagger.audio.exceptions.CannotWriteException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.AudioFileIO: void writeFile(org.jaudiotagger.audio.AudioFile)>" -> "<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg(java.lang.Object[])>";
"<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg(java.lang.Object[])>" -> "<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg(java.lang.Object[])>" -> "<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg()>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: boolean containsKey(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.data.GUID: java.lang.String getDescription()>";
"<org.jaudiotagger.audio.asf.data.GUID: void <clinit>()>" -> "<java.lang.Class: boolean desiredAssertionStatus()>";
"<java.lang.Class: boolean desiredAssertionStatus()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: void <clinit>()>" -> "<java.lang.Class: boolean desiredAssertionStatus()>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void setExtendedHeaderReader(org.jaudiotagger.audio.asf.io.AsfExtHeaderReader)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void setExtendedHeaderReader(org.jaudiotagger.audio.asf.io.AsfExtHeaderReader)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void setExtendedHeaderReader(org.jaudiotagger.audio.asf.io.AsfExtHeaderReader)>" -> "<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: org.jaudiotagger.audio.asf.data.GUID[] getApplyingIds()>";
"<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: org.jaudiotagger.audio.asf.data.GUID[] getApplyingIds()>" -> "<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: void <clinit>()>";
"<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: org.jaudiotagger.audio.asf.data.GUID[] getApplyingIds()>" -> "<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <clinit>()>";
"<org.jaudiotagger.audio.asf.io.AsfExtHeaderReader: org.jaudiotagger.audio.asf.data.GUID[] getApplyingIds()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<java.lang.Object: java.lang.Object clone()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<java.util.ArrayList: void clear()>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <clinit>()>" -> "<java.lang.Class: boolean desiredAssertionStatus()>";
"<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void <init>(java.util.List,boolean)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<java.util.ArrayList: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.asf.io.ChunkContainerReader: void register(java.lang.Class)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void setExtendedHeaderReader(org.jaudiotagger.audio.asf.io.AsfExtHeaderReader)>";
"<org.jaudiotagger.audio.asf.io.AsfHeaderReader: void setExtendedHeaderReader(org.jaudiotagger.audio.asf.io.AsfExtHeaderReader)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.asf.AsfFileReader: void <clinit>()>" -> "<java.lang.Class: boolean desiredAssertionStatus()>";
"<org.jaudiotagger.audio.asf.AsfFileWriter: void <clinit>()>" -> "<java.lang.Class: boolean desiredAssertionStatus()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: java.lang.String getFilesuffix()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: java.lang.String getFilesuffix()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: java.lang.String getFilesuffix()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: java.lang.String getFilesuffix()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: java.lang.String getFilesuffix()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: java.lang.String getFilesuffix()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: java.lang.String getFilesuffix()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: java.lang.String getFilesuffix()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: java.lang.String getFilesuffix()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: java.lang.String getFilesuffix()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: java.lang.String getFilesuffix()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<org.jaudiotagger.audio.SupportedFileFormat: java.lang.String getFilesuffix()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.util.Collection values()>";
"<org.jaudiotagger.audio.AudioFileIO: void prepareReadersAndWriters()>" -> "<java.util.HashMap: java.util.Collection values()>";
"<java.util.HashMap: java.util.Collection values()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.AudioFileIO: void writeFile(org.jaudiotagger.audio.AudioFile)>" -> "<org.jaudiotagger.audio.AudioFile: java.io.File getFile()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<java.lang.Throwable: java.lang.String getMessage()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.io.RandomAccessFile: void close()>";
"<java.io.RandomAccessFile: void seek(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.RandomAccessFile: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.io.RandomAccessFile: void close()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg(java.lang.Object[])>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg(java.lang.Object[])>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg(java.lang.Object[])>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg(java.lang.Object[])>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg(java.lang.Object[])>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.io.File: boolean canRead()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.io.File: long length()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<java.io.File: java.lang.String getAbsolutePath()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: boolean canRead()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: long length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.audio.ogg.OggFileReader: org.jaudiotagger.audio.generic.GenericAudioHeader getEncodingInfo(java.io.RandomAccessFile)>";
"<org.jaudiotagger.audio.generic.AudioFileReader: org.jaudiotagger.audio.AudioFile read(java.io.File)>" -> "<org.jaudiotagger.audio.ogg.OggFileReader: org.jaudiotagger.tag.Tag getTag(java.io.RandomAccessFile)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<org.jaudiotagger.fix.Fix202$OggFileFilter: boolean accept(java.io.File)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.io.File: boolean exists()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.io.File: boolean isDirectory()>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>";
"<org.jaudiotagger.fix.Fix202: void main(java.lang.String[])>" -> "<java.io.File: java.lang.String getPath()>";
"<java.io.File: boolean exists()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: boolean isDirectory()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: java.lang.String getPath()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggFileReader: org.jaudiotagger.tag.Tag getTag(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: org.jaudiotagger.tag.Tag read(java.io.RandomAccessFile)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: org.jaudiotagger.tag.Tag read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: org.jaudiotagger.tag.Tag read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] readRawPacketData(java.io.RandomAccessFile)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] readRawPacketData(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] readRawPacketData(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] readRawPacketData(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.exceptions.CannotReadException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] readRawPacketData(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] readRawPacketData(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] readRawPacketData(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<java.io.ByteArrayOutputStream: void <init>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.exceptions.CannotReadException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<java.lang.String: void <init>(byte[])>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<java.util.Arrays: boolean equals(byte[],byte[])>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<java.lang.String: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<java.io.ByteArrayOutputStream: void <init>()>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.ByteArrayOutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<org.jaudiotagger.audio.generic.Utils: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader$PacketStartAndLength: void <init>(int,int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<java.lang.Math: double pow(double,double)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader$PacketStartAndLength: void <init>(int,int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<org.jaudiotagger.audio.generic.Utils: int getIntLE(byte[],int,int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<org.jaudiotagger.audio.generic.Utils: int getIntLE(byte[],int,int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<org.jaudiotagger.audio.generic.Utils: int getIntLE(byte[],int,int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<java.util.ArrayList: void <init>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<java.util.logging.Level: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <clinit>()>";
"<java.lang.String: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Arrays: boolean equals(byte[],byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader$PacketStartAndLength: void <init>(int,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader$PacketStartAndLength: void <init>(int,int)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader$PacketStartAndLength: void <init>(int,int)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader$PacketStartAndLength: void <init>(int,int)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader$PacketStartAndLength: void <init>(int,int)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader$PacketStartAndLength: void <init>(int,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Integer: java.lang.Integer valueOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.generic.Utils: int getIntLE(byte[],int,int)>" -> "<org.jaudiotagger.audio.generic.Utils: void <clinit>()>";
"<org.jaudiotagger.audio.generic.Utils: int getIntLE(byte[],int,int)>" -> "<org.jaudiotagger.audio.generic.Utils: long getLongLE(java.nio.ByteBuffer,int,int)>";
"<org.jaudiotagger.audio.generic.Utils: int getIntLE(byte[],int,int)>" -> "<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>";
"<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] readRawPacketData(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: int getPageLength()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: int getPageLength()>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: int getPageLength()>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: int getPageLength()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: int getPageLength()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.lang.String toString()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.lang.String toString()>" -> "<java.lang.String: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.lang.String toString()>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.lang.String toString()>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.lang.String toString()>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.lang.String toString()>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: int getPageSequence()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.lang.String toString()>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: boolean isLastPacketIncomplete()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.lang.String toString()>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: int getSerialNumber()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.lang.String toString()>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.util.List getPacketList()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.lang.String toString()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg(java.lang.Object[])>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<java.io.OutputStream: void write(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.ByteArrayOutputStream: byte[] toByteArray()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.util.List getPacketList()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.util.List getPacketList()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: boolean isLastPacketIncomplete()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.util.List getPacketList()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: java.util.List getPacketList()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: boolean isLastPacketIncomplete()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<java.util.ArrayList: int size()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<java.util.ArrayList: int size()>";
"<java.util.ArrayList: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] readRawPacketData(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: long getFilePointer()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] readRawPacketData(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] readRawPacketData(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: int read(byte[])>";
"<java.io.RandomAccessFile: long getFilePointer()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.RandomAccessFile: int read(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: long getFilePointer()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: int read(byte[])>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: byte readByte()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: int read(byte[])>";
"<java.io.RandomAccessFile: byte readByte()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: int read(byte[])>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] convertToVorbisCommentPacket(org.jaudiotagger.audio.ogg.util.OggPageHeader,java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: int read(byte[])>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: byte[] readRawPacketData(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.OggVorbisTagReader: boolean isVorbisCommentHeader(byte[])>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: boolean isVorbisCommentHeader(byte[])>" -> "<org.jaudiotagger.audio.generic.Utils: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: boolean isVorbisCommentHeader(byte[])>" -> "<org.jaudiotagger.audio.generic.Utils: java.lang.String getString(byte[],int,int,java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: boolean isVorbisCommentHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisPacketType: void <clinit>()>";
"<org.jaudiotagger.audio.generic.Utils: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.jaudiotagger.audio.generic.Utils: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
"<org.jaudiotagger.audio.generic.Utils: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.String: void <init>(byte[],int,int,java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.VorbisPacketType: void <clinit>()>" -> "<org.jaudiotagger.audio.ogg.util.VorbisPacketType: void <init>(java.lang.String,int,int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisPacketType: void <clinit>()>" -> "<org.jaudiotagger.audio.ogg.util.VorbisPacketType: void <init>(java.lang.String,int,int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisPacketType: void <clinit>()>" -> "<org.jaudiotagger.audio.ogg.util.VorbisPacketType: void <init>(java.lang.String,int,int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisPacketType: void <clinit>()>" -> "<org.jaudiotagger.audio.ogg.util.VorbisPacketType: void <init>(java.lang.String,int,int)>";
"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: void <init>(byte[],int,int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[],int,int,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.VorbisPacketType: void <init>(java.lang.String,int,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: boolean isVorbisCommentHeader(byte[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: boolean isVorbisCommentHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisPacketType: int getType()>";
"<org.jaudiotagger.audio.ogg.OggVorbisTagReader: org.jaudiotagger.tag.Tag read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(byte[])>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.audio.generic.Utils: int getIntLE(byte[])>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.audio.exceptions.CannotReadException: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.audio.generic.Utils: int getIntLE(byte[])>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.audio.generic.Utils: int getIntLE(byte[])>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <init>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.fix.Fix: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.String: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.audio.generic.Utils: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.System: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: void <init>(java.lang.Class)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(byte[])>" -> "<java.lang.String: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(byte[])>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(byte[])>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.generic.Utils: int getIntLE(byte[])>" -> "<org.jaudiotagger.audio.generic.Utils: void <clinit>()>";
"<org.jaudiotagger.audio.generic.Utils: int getIntLE(byte[])>" -> "<org.jaudiotagger.audio.generic.Utils: long getLongLE(java.nio.ByteBuffer,int,int)>";
"<org.jaudiotagger.audio.generic.Utils: int getIntLE(byte[])>" -> "<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>";
"<java.lang.String: void <init>(byte[],java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[],java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <init>()>" -> "<org.jaudiotagger.audio.generic.AbstractTag: void <init>()>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.FieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>";
"<java.util.EnumMap: void <init>(java.lang.Class)>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.EnumMap: void <init>(java.lang.Class)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.reference.Tagger: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>" -> "<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>";
"<org.jaudiotagger.audio.generic.AbstractTag: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.generic.AbstractTag: void <init>()>" -> "<java.util.LinkedHashMap: void <init>()>";
"<org.jaudiotagger.tag.FieldKey: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.reference.Tagger: void <clinit>()>" -> "<org.jaudiotagger.tag.reference.Tagger: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.reference.Tagger: void <clinit>()>" -> "<org.jaudiotagger.tag.reference.Tagger: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.reference.Tagger: void <clinit>()>" -> "<org.jaudiotagger.tag.reference.Tagger: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.reference.Tagger: void <clinit>()>" -> "<org.jaudiotagger.tag.reference.Tagger: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.reference.Tagger: void <clinit>()>" -> "<org.jaudiotagger.tag.reference.Tagger: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.reference.Tagger: void <clinit>()>" -> "<org.jaudiotagger.tag.reference.Tagger: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.reference.Tagger: void <clinit>()>" -> "<org.jaudiotagger.tag.reference.Tagger: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.reference.Tagger: void <clinit>()>" -> "<org.jaudiotagger.tag.reference.Tagger: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.reference.Tagger: void <clinit>()>" -> "<org.jaudiotagger.tag.reference.Tagger: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.reference.Tagger: void <clinit>()>" -> "<org.jaudiotagger.tag.reference.Tagger: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.reference.Tagger: void <clinit>()>" -> "<org.jaudiotagger.tag.reference.Tagger: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.reference.Tagger: void <clinit>()>" -> "<org.jaudiotagger.tag.reference.Tagger: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String,java.util.EnumSet)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <init>(java.lang.String,int,java.lang.String)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.LinkedHashMap: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<java.util.LinkedHashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.reference.Tagger: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: java.lang.String getFieldName()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: java.lang.String getFieldName()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: java.lang.String getFieldName()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: java.lang.String getFieldName()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: java.lang.String getFieldName()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: java.lang.String getFieldName()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: java.lang.String getFieldName()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: java.lang.String getFieldName()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(byte[])>" -> "<java.lang.String: int length()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(byte[])>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(byte[])>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(byte[])>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(byte[])>" -> "<java.lang.String: java.lang.String toUpperCase()>";
"<java.lang.String: int indexOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String toUpperCase()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void <clinit>()>" -> "<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>";
"<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: java.lang.String getId()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg(java.lang.Object[])>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg(java.lang.Object[])>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg(java.lang.Object[])>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void setVendor(java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: java.lang.String getVendor()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentReader: org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag read(byte[],boolean)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void addField(org.jaudiotagger.tag.TagField)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void setVendor(java.lang.String)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void setVendor(java.lang.String)>" -> "<org.jaudiotagger.audio.generic.AbstractTag: void setField(org.jaudiotagger.tag.TagField)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void setVendor(java.lang.String)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(java.lang.String,java.lang.String)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: java.lang.String getVendor()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void addField(org.jaudiotagger.tag.TagField)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: void <clinit>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void addField(org.jaudiotagger.tag.TagField)>" -> "<org.jaudiotagger.audio.generic.AbstractTag: void addField(org.jaudiotagger.tag.TagField)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void addField(org.jaudiotagger.tag.TagField)>" -> "<org.jaudiotagger.audio.generic.AbstractTag: void setField(org.jaudiotagger.tag.TagField)>";
"<org.jaudiotagger.audio.generic.AbstractTag: void setField(org.jaudiotagger.tag.TagField)>" -> "<java.util.ArrayList: void <init>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(java.lang.String,java.lang.String)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void checkCommon()>";
"<org.jaudiotagger.audio.generic.AbstractTag: void addField(org.jaudiotagger.tag.TagField)>" -> "<java.util.ArrayList: void <init>()>";
"<org.jaudiotagger.audio.generic.AbstractTag: void addField(org.jaudiotagger.tag.TagField)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.generic.AbstractTag: void setField(org.jaudiotagger.tag.TagField)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jaudiotagger.audio.generic.AbstractTag: void setField(org.jaudiotagger.tag.TagField)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: java.lang.String getId()>";
"<org.jaudiotagger.audio.generic.AbstractTag: void setField(org.jaudiotagger.tag.TagField)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: java.lang.String getId()>";
"<org.jaudiotagger.audio.generic.AbstractTag: void setField(org.jaudiotagger.tag.TagField)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: boolean isCommon()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void addField(org.jaudiotagger.tag.TagField)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: java.lang.String getFieldName()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void addField(org.jaudiotagger.tag.TagField)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: java.lang.String getId()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void addField(org.jaudiotagger.tag.TagField)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jaudiotagger.audio.generic.AbstractTag: void addField(org.jaudiotagger.tag.TagField)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: java.lang.String getId()>";
"<org.jaudiotagger.audio.generic.AbstractTag: void addField(org.jaudiotagger.tag.TagField)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: java.lang.String getId()>";
"<org.jaudiotagger.audio.generic.AbstractTag: void addField(org.jaudiotagger.tag.TagField)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: boolean isCommon()>";
"<org.jaudiotagger.audio.generic.AbstractTag: void addField(org.jaudiotagger.tag.TagField)>" -> "<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
"<org.jaudiotagger.audio.generic.AbstractTag: void addField(org.jaudiotagger.tag.TagField)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.generic.AbstractTag: void setField(org.jaudiotagger.tag.TagField)>" -> "<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
"<org.jaudiotagger.audio.generic.AbstractTag: void setField(org.jaudiotagger.tag.TagField)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: java.lang.String getVendor()>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: java.lang.String getFieldName()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: java.lang.String getVendor()>" -> "<org.jaudiotagger.audio.generic.AbstractTag: java.lang.String getFirst(java.lang.String)>";
"<org.jaudiotagger.audio.generic.AbstractTag: java.lang.String getFirst(java.lang.String)>" -> "<org.jaudiotagger.audio.generic.AbstractTag: java.util.List getFields(java.lang.String)>";
"<org.jaudiotagger.audio.generic.AbstractTag: java.util.List getFields(java.lang.String)>" -> "<java.util.ArrayList: void <init>()>";
"<org.jaudiotagger.audio.generic.AbstractTag: java.lang.String getFirst(java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<org.jaudiotagger.audio.generic.AbstractTag: java.lang.String getFirst(java.lang.String)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.jaudiotagger.audio.generic.AbstractTag: java.util.List getFields(java.lang.String)>" -> "<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTag: void setVendor(java.lang.String)>" -> "<org.jaudiotagger.tag.vorbiscomment.VorbisCommentFieldKey: java.lang.String getFieldName()>";
"<org.jaudiotagger.tag.vorbiscomment.VorbisCommentTagField: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String toUpperCase()>";
"<org.jaudiotagger.audio.ogg.OggFileReader: org.jaudiotagger.audio.generic.GenericAudioHeader getEncodingInfo(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggInfoReader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggInfoReader: int computeBitrate(int,long)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void <init>(byte[])>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: org.jaudiotagger.audio.ogg.util.OggPageHeader read(java.io.RandomAccessFile)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <init>(byte[])>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.exceptions.CannotReadException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.exceptions.CannotReadException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.lang.String: void <init>(byte[])>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.util.Arrays: boolean equals(byte[],byte[])>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.lang.String: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.logging.ErrorMessage: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.lang.Float: java.lang.Float valueOf(float)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.util.HashMap: void <init>(int)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.lang.Boolean: void <clinit>()>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.lang.Float: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Float: java.lang.Float valueOf(float)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: int getPageLength()>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void <init>(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int u(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.generic.Utils: java.lang.String getString(byte[],int,int,java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisPacketType: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.generic.Utils: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<org.jaudiotagger.audio.ogg.util.VorbisPacketType: int getType()>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: void decodeHeader(byte[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int getSamplingRate()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int getChannelNumber()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int getSamplingRate()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: java.lang.String getEncodingType()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int getNominalBitrate()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int getMaxBitrate()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int getNominalBitrate()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int getMinBitrate()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int getNominalBitrate()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int getNominalBitrate()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int getNominalBitrate()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int getMaxBitrate()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int getMinBitrate()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: int getNominalBitrate()>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: java.lang.String getEncodingType()>" -> "<org.jaudiotagger.audio.ogg.VorbisVersion: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: java.lang.String getEncodingType()>" -> "<org.jaudiotagger.audio.ogg.VorbisVersion: org.jaudiotagger.audio.ogg.VorbisVersion[] values()>";
"<org.jaudiotagger.audio.ogg.VorbisVersion: void <clinit>()>" -> "<org.jaudiotagger.audio.ogg.VorbisVersion: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jaudiotagger.audio.ogg.VorbisVersion: org.jaudiotagger.audio.ogg.VorbisVersion[] values()>" -> "<org.jaudiotagger.audio.ogg.VorbisVersion: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.VorbisVersion: org.jaudiotagger.audio.ogg.VorbisVersion[] values()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.jaudiotagger.audio.ogg.VorbisVersion: org.jaudiotagger.audio.ogg.VorbisVersion[] values()>" -> "<java.lang.System: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.VorbisVersion: void <init>(java.lang.String,int,java.lang.String)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: double getAbsoluteGranulePosition()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: double getAbsoluteGranulePosition()>" -> "<org.jaudiotagger.audio.ogg.util.OggPageHeader: void <clinit>()>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: double getAbsoluteGranulePosition()>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: double getAbsoluteGranulePosition()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(double)>";
"<org.jaudiotagger.audio.ogg.util.OggPageHeader: double getAbsoluteGranulePosition()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(double)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg(java.lang.Object[])>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.logging.ErrorMessage: java.lang.String getMsg()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: void setPreciseLength(float)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: void setChannelNumber(int)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: void setSamplingRate(int)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: void setEncodingType(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: void setExtraEncodingInfos(java.lang.String)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: void setBitrate(int)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: void setVariableBitRate(boolean)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: void setBitrate(int)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: void setVariableBitRate(boolean)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: int getTrackLength()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: void setBitrate(int)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: void setVariableBitRate(boolean)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setPreciseLength(float)>" -> "<java.lang.Float: void <clinit>()>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setPreciseLength(float)>" -> "<java.lang.Float: java.lang.Float valueOf(float)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setChannelNumber(int)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setChannelNumber(int)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setSamplingRate(int)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setSamplingRate(int)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setBitrate(int)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setBitrate(int)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setVariableBitRate(boolean)>" -> "<java.lang.Boolean: void <clinit>()>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setVariableBitRate(boolean)>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: int getTrackLength()>" -> "<org.jaudiotagger.audio.generic.GenericAudioHeader: float getPreciseLength()>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: float getPreciseLength()>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setVariableBitRate(boolean)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setBitrate(int)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setExtraEncodingInfos(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setEncodingType(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setSamplingRate(int)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setChannelNumber(int)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.generic.GenericAudioHeader: void setPreciseLength(float)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: int read(byte[])>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: long length()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: long getFilePointer()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: int read()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: long getFilePointer()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: void readFully(byte[])>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: long getFilePointer()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: long getFilePointer()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: long getFilePointer()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: byte readByte()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: void readFully(byte[])>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: long getFilePointer()>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: int read(byte[])>";
"<org.jaudiotagger.audio.ogg.util.OggInfoReader: org.jaudiotagger.audio.generic.GenericAudioHeader read(java.io.RandomAccessFile)>" -> "<java.io.RandomAccessFile: long length()>";
"<java.io.RandomAccessFile: long length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.RandomAccessFile: int read()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.RandomAccessFile: void readFully(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.generic.Utils: java.lang.String getExtension(java.io.File)>" -> "<java.io.File: java.lang.String getName()>";
"<java.io.File: java.lang.String getName()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jaudiotagger.audio.AudioFileIO: void writeFile(org.jaudiotagger.audio.AudioFile)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.jaudiotagger.audio.ogg.util.VorbisIdentificationHeader: java.lang.String getEncodingType()>" -> "<org.jaudiotagger.audio.ogg.VorbisVersion: java.lang.String toString()>";
}
