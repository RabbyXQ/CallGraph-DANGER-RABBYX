digraph CallGraph {
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.util.Util: java.lang.String toHex(byte[])>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: com.mongodb.gridfs.GridFS getGridFS()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: com.mongodb.gridfs.GridFS getGridFS()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: com.mongodb.gridfs.GridFS getGridFS()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.Long: java.lang.Long valueOf(long)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: com.mongodb.gridfs.GridFS getGridFS()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: void printUsage()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: void printUsage()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.Long: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.CLI: void <clinit>()>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.Util: java.lang.String toHex(byte[])>" -> "<java.lang.Integer: void <clinit>()>";
"<com.mongodb.util.Util: java.lang.String toHex(byte[])>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<com.mongodb.util.Util: java.lang.String toHex(byte[])>" -> "<java.lang.StringBuilder: void <init>()>";
"<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.CLI: com.mongodb.gridfs.GridFS getGridFS()>" -> "<com.mongodb.gridfs.CLI: void <clinit>()>";
"<com.mongodb.gridfs.CLI: com.mongodb.gridfs.GridFS getGridFS()>" -> "<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB)>";
"<com.mongodb.gridfs.CLI: com.mongodb.gridfs.GridFS getGridFS()>" -> "<com.mongodb.gridfs.CLI: com.mongodb.Mongo getMongo()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Long: java.lang.Long valueOf(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void printUsage()>" -> "<java.lang.System: void <clinit>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: java.lang.String toHexString(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB)>" -> "<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>";
"<com.mongodb.gridfs.CLI: com.mongodb.Mongo getMongo()>" -> "<com.mongodb.gridfs.CLI: void <clinit>()>";
"<com.mongodb.gridfs.CLI: com.mongodb.Mongo getMongo()>" -> "<com.mongodb.Mongo: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.CLI: com.mongodb.Mongo getMongo()>" -> "<com.mongodb.Mongo: void <clinit>()>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder start()>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder start()>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder start()>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<com.mongodb.Mongo: void <init>(java.lang.String)>" -> "<com.mongodb.ServerAddress: void <init>(java.lang.String)>";
"<com.mongodb.Mongo: void <init>(java.lang.String)>" -> "<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress)>";
"<com.mongodb.Mongo: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<com.mongodb.Mongo: void <clinit>()>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.mongodb.Mongo: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>";
"<com.mongodb.Mongo: void <clinit>()>" -> "<java.lang.Integer: void <clinit>()>";
"<java.lang.Integer: java.lang.Integer valueOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder start()>" -> "<com.mongodb.BasicDBObjectBuilder: void <init>()>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String)>" -> "<com.mongodb.ServerAddress: int defaultPort()>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String)>" -> "<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress)>" -> "<com.mongodb.MongoOptions: void <init>()>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress)>" -> "<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>";
"<java.lang.Integer: int parseInt(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.BasicDBObjectBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.BasicDBObjectBuilder: void <init>()>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<com.mongodb.BasicDBObjectBuilder: void <init>()>" -> "<java.util.LinkedList: void <init>()>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>" -> "<com.mongodb.ServerAddress: int defaultPort()>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>" -> "<com.mongodb.ServerAddress: java.lang.String defaultHost()>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>" -> "<com.mongodb.ServerAddress: java.lang.String defaultHost()>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.MongoOptions: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.WriteConcern: void <clinit>()>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.Mongo$CursorCleanerThread: void <init>(com.mongodb.Mongo)>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.DBTCPConnector: void <init>(com.mongodb.Mongo,com.mongodb.ServerAddress)>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.Mongo$1: void <init>(com.mongodb.Mongo,int)>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.Bytes$OptionHolder: void <init>(com.mongodb.Bytes$OptionHolder)>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.ReadPreference: com.mongodb.ReadPreference primary()>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<java.util.concurrent.ConcurrentHashMap: void <init>()>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.DBTCPConnector: void <clinit>()>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.ReadPreference: void <clinit>()>";
"<com.mongodb.BasicDBObject: void <init>()>" -> "<org.bson.BasicBSONObject: void <init>()>";
"<java.util.LinkedList: void <init>()>" -> "<java.util.AbstractSequentialList: void <init>()>";
"<java.util.LinkedList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.WriteConcern: void <clinit>()>" -> "<com.mongodb.WriteConcern: void <init>(int)>";
"<com.mongodb.WriteConcern: void <clinit>()>" -> "<com.mongodb.WriteConcern: void <init>(int)>";
"<com.mongodb.WriteConcern: void <clinit>()>" -> "<com.mongodb.WriteConcern: void <init>(int,int,boolean,boolean)>";
"<com.mongodb.WriteConcern: void <clinit>()>" -> "<com.mongodb.WriteConcern: void <init>(boolean)>";
"<com.mongodb.WriteConcern: void <clinit>()>" -> "<com.mongodb.WriteConcern$Majority: void <init>()>";
"<com.mongodb.WriteConcern: void <clinit>()>" -> "<com.mongodb.WriteConcern: void <init>(int)>";
"<com.mongodb.WriteConcern: void <clinit>()>" -> "<com.mongodb.WriteConcern: void <init>(int)>";
"<com.mongodb.Mongo$CursorCleanerThread: void <init>(com.mongodb.Mongo)>" -> "<java.lang.Thread: void <init>()>";
"<com.mongodb.Mongo$CursorCleanerThread: void <init>(com.mongodb.Mongo)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBTCPConnector: void <init>(com.mongodb.Mongo,com.mongodb.ServerAddress)>" -> "<com.mongodb.DBPortPool$Holder: void <clinit>()>";
"<com.mongodb.DBTCPConnector: void <init>(com.mongodb.Mongo,com.mongodb.ServerAddress)>" -> "<com.mongodb.DBTCPConnector: boolean setMasterAddress(com.mongodb.ServerAddress)>";
"<com.mongodb.DBTCPConnector: void <init>(com.mongodb.Mongo,com.mongodb.ServerAddress)>" -> "<com.mongodb.DBTCPConnector: com.mongodb.ServerAddress _checkAddress(com.mongodb.ServerAddress)>";
"<com.mongodb.DBTCPConnector: void <init>(com.mongodb.Mongo,com.mongodb.ServerAddress)>" -> "<com.mongodb.DBPortPool$Holder: void <init>(com.mongodb.MongoOptions)>";
"<com.mongodb.DBTCPConnector: void <init>(com.mongodb.Mongo,com.mongodb.ServerAddress)>" -> "<com.mongodb.DBTCPConnector$1: void <init>(com.mongodb.DBTCPConnector)>";
"<com.mongodb.DBTCPConnector: void <init>(com.mongodb.Mongo,com.mongodb.ServerAddress)>" -> "<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>";
"<com.mongodb.DBTCPConnector: void <init>(com.mongodb.Mongo,com.mongodb.ServerAddress)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.DBTCPConnector: void <init>(com.mongodb.Mongo,com.mongodb.ServerAddress)>" -> "<com.mongodb.DBTCPConnector: void <clinit>()>";
"<com.mongodb.Mongo$1: void <init>(com.mongodb.Mongo,int)>" -> "<org.bson.util.SimplePool: void <init>(int)>";
"<com.mongodb.Bytes$OptionHolder: void <init>(com.mongodb.Bytes$OptionHolder)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.ReadPreference: com.mongodb.ReadPreference primary()>" -> "<com.mongodb.ReadPreference: void <clinit>()>";
"<java.util.concurrent.ConcurrentHashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.concurrent.ConcurrentHashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void <clinit>()>" -> "<com.mongodb.Bytes: void <clinit>()>";
"<com.mongodb.DBTCPConnector: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void <clinit>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBTCPConnector: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void <clinit>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBTCPConnector: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<com.mongodb.DBTCPConnector: void <clinit>()>" -> "<org.bson.BSON: void <clinit>()>";
"<com.mongodb.ReadPreference: void <clinit>()>" -> "<com.mongodb.TaggableReadPreference: void <clinit>()>";
"<com.mongodb.ReadPreference: void <clinit>()>" -> "<com.mongodb.TaggableReadPreference$NearestReadPreference: void <init>()>";
"<com.mongodb.ReadPreference: void <clinit>()>" -> "<com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference: void <init>()>";
"<com.mongodb.ReadPreference: void <clinit>()>" -> "<com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference: void <init>()>";
"<com.mongodb.ReadPreference: void <clinit>()>" -> "<com.mongodb.TaggableReadPreference$SecondaryReadPreference: void <init>()>";
"<com.mongodb.ReadPreference: void <clinit>()>" -> "<com.mongodb.ReadPreference$PrimaryReadPreference: void <init>(com.mongodb.ReadPreference$1)>";
"<com.mongodb.ReadPreference: void <clinit>()>" -> "<com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference: void <init>()>";
"<com.mongodb.ReadPreference: void <clinit>()>" -> "<com.mongodb.ReadPreference$PrimaryReadPreference: void <init>(com.mongodb.ReadPreference$1)>";
"<org.bson.BasicBSONObject: void <init>()>" -> "<java.util.LinkedHashMap: void <init>()>";
"<java.util.AbstractSequentialList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.AbstractSequentialList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.WriteConcern: void <init>(int)>" -> "<com.mongodb.WriteConcern: void <init>(int,int,boolean)>";
"<com.mongodb.WriteConcern: void <init>(int,int,boolean,boolean)>" -> "<com.mongodb.WriteConcern: void <init>(int,int,boolean,boolean,boolean)>";
"<com.mongodb.WriteConcern: void <init>(boolean)>" -> "<com.mongodb.WriteConcern: void <init>(int,int,boolean)>";
"<com.mongodb.WriteConcern$Majority: void <init>()>" -> "<com.mongodb.WriteConcern: void <init>(java.lang.String,int,boolean,boolean)>";
"<java.lang.Thread: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: void <clinit>()>" -> "<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>";
"<com.mongodb.DBTCPConnector: boolean setMasterAddress(com.mongodb.ServerAddress)>" -> "<com.mongodb.DBTCPConnector: void <clinit>()>";
"<com.mongodb.DBTCPConnector: boolean setMasterAddress(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBTCPConnector: boolean setMasterAddress(com.mongodb.ServerAddress)>" -> "<java.util.logging.Level: void <clinit>()>";
"<com.mongodb.DBTCPConnector: com.mongodb.ServerAddress _checkAddress(com.mongodb.ServerAddress)>" -> "<java.lang.NullPointerException: void <init>(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: void <init>(com.mongodb.MongoOptions)>" -> "<java.util.Collections: void <clinit>()>";
"<com.mongodb.DBPortPool$Holder: void <init>(com.mongodb.MongoOptions)>" -> "<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>";
"<com.mongodb.DBPortPool$Holder: void <init>(com.mongodb.MongoOptions)>" -> "<java.util.HashMap: void <init>()>";
"<com.mongodb.DBPortPool$Holder: void <init>(com.mongodb.MongoOptions)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.DBPortPool$Holder: void <init>(com.mongodb.MongoOptions)>" -> "<com.mongodb.DBPortPool$Holder: void <clinit>()>";
"<com.mongodb.DBTCPConnector$1: void <init>(com.mongodb.DBTCPConnector)>" -> "<java.lang.ThreadLocal: void <init>()>";
"<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>" -> "<java.lang.Object: void <init>()>";
"<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.SimplePool: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<org.bson.util.SimplePool: void <init>(int)>" -> "<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<org.bson.types.ObjectId: void <init>(int,int,int)>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<java.util.logging.Level: void <clinit>()>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<org.bson.types.ObjectId: void <clinit>()>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<java.lang.Integer: void <clinit>()>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<java.nio.ByteOrder: void <clinit>()>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<java.util.logging.Level: void <clinit>()>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.mongodb.Bytes: void <clinit>()>" -> "<org.bson.BSON: void <clinit>()>";
"<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BSON: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.bson.BSON: void <clinit>()>" -> "<org.bson.BSON$2: void <init>()>";
"<org.bson.BSON: void <clinit>()>" -> "<org.bson.BSON$1: void <init>()>";
"<org.bson.BSON: void <clinit>()>" -> "<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>";
"<org.bson.BSON: void <clinit>()>" -> "<org.bson.util.ClassMap: void <init>()>";
"<org.bson.BSON: void <clinit>()>" -> "<org.bson.util.ClassMap: void <init>()>";
"<org.bson.BSON: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<com.mongodb.TaggableReadPreference: void <clinit>()>" -> "<com.mongodb.ReadPreference: void <clinit>()>";
"<com.mongodb.TaggableReadPreference: void <clinit>()>" -> "<java.util.ArrayList: void <init>()>";
"<com.mongodb.TaggableReadPreference$NearestReadPreference: void <init>()>" -> "<com.mongodb.TaggableReadPreference: void <init>()>";
"<com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference: void <init>()>" -> "<com.mongodb.TaggableReadPreference$SecondaryReadPreference: void <init>()>";
"<com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference: void <init>()>" -> "<com.mongodb.TaggableReadPreference$SecondaryReadPreference: void <init>()>";
"<com.mongodb.TaggableReadPreference$SecondaryReadPreference: void <init>()>" -> "<com.mongodb.TaggableReadPreference: void <init>()>";
"<com.mongodb.ReadPreference$PrimaryReadPreference: void <init>(com.mongodb.ReadPreference$1)>" -> "<com.mongodb.ReadPreference$PrimaryReadPreference: void <init>()>";
"<java.util.LinkedHashMap: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<java.util.LinkedHashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.WriteConcern: void <init>(int,int,boolean)>" -> "<com.mongodb.WriteConcern: void <init>(int,int,boolean,boolean)>";
"<com.mongodb.WriteConcern: void <init>(int,int,boolean,boolean,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<com.mongodb.WriteConcern: void <init>(int,int,boolean,boolean,boolean)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.WriteConcern: void <init>(int,int,boolean,boolean,boolean)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.WriteConcern: void <init>(int,int,boolean,boolean,boolean)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.WriteConcern: void <init>(java.lang.String,int,boolean,boolean)>" -> "<com.mongodb.WriteConcern: void <init>(java.lang.String,int,boolean,boolean,boolean)>";
"<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>" -> "<java.lang.Number: void <init>()>";
"<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.NullPointerException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.NullPointerException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ThreadLocal: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ThreadLocal: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>" -> "<java.util.AbstractQueue: void <init>()>";
"<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.types.ObjectId: void <init>(int,int,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Boolean: boolean getBoolean(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.System: int identityHashCode(java.lang.Object)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.management.ManagementFactory: java.lang.management.RuntimeMXBean getRuntimeMXBean()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.util.Random: void <init>()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.util.Random: void <init>()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.util.Random: void <init>()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.util.logging.Level: void <clinit>()>";
"<org.bson.BSON$2: void <init>()>" -> "<java.lang.ThreadLocal: void <init>()>";
"<org.bson.BSON$1: void <init>()>" -> "<java.lang.ThreadLocal: void <init>()>";
"<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.ClassMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.bson.util.ClassMap: void <init>()>" -> "<org.bson.util.ComputingMap: java.util.Map create(org.bson.util.Function)>";
"<org.bson.util.ClassMap: void <init>()>" -> "<org.bson.util.ClassMap$ComputeFunction: void <init>(org.bson.util.ClassMap,org.bson.util.ClassMap$1)>";
"<org.bson.util.ClassMap: void <init>()>" -> "<org.bson.util.CopyOnWriteMap: org.bson.util.CopyOnWriteMap newHashMap()>";
"<java.util.ArrayList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.TaggableReadPreference: void <init>()>" -> "<com.mongodb.TaggableReadPreference: void <clinit>()>";
"<com.mongodb.TaggableReadPreference: void <init>()>" -> "<com.mongodb.ReadPreference: void <init>()>";
"<com.mongodb.TaggableReadPreference: void <init>()>" -> "<com.mongodb.ReadPreference: void <clinit>()>";
"<com.mongodb.ReadPreference$PrimaryReadPreference: void <init>()>" -> "<com.mongodb.ReadPreference: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.WriteConcern: void <init>(java.lang.String,int,boolean,boolean,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<com.mongodb.WriteConcern: void <init>(java.lang.String,int,boolean,boolean,boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.WriteConcern: void <init>(java.lang.String,int,boolean,boolean,boolean)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.WriteConcern: void <init>(java.lang.String,int,boolean,boolean,boolean)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Number: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Number: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractQueue: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractQueue: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: int identityHashCode(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Random: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Random: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.ComputingMap: java.util.Map create(org.bson.util.Function)>" -> "<org.bson.util.CopyOnWriteMap: org.bson.util.CopyOnWriteMap newHashMap()>";
"<org.bson.util.ComputingMap: java.util.Map create(org.bson.util.Function)>" -> "<org.bson.util.ComputingMap: void <init>(java.util.concurrent.ConcurrentMap,org.bson.util.Function)>";
"<org.bson.util.ClassMap$ComputeFunction: void <init>(org.bson.util.ClassMap,org.bson.util.ClassMap$1)>" -> "<org.bson.util.ClassMap$ComputeFunction: void <init>(org.bson.util.ClassMap)>";
"<org.bson.util.CopyOnWriteMap: org.bson.util.CopyOnWriteMap newHashMap()>" -> "<org.bson.util.CopyOnWriteMap: org.bson.util.CopyOnWriteMap$Builder builder()>";
"<com.mongodb.ReadPreference: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.bson.util.ComputingMap: void <init>(java.util.concurrent.ConcurrentMap,org.bson.util.Function)>" -> "<java.lang.Object: void <init>()>";
"<org.bson.util.ComputingMap: void <init>(java.util.concurrent.ConcurrentMap,org.bson.util.Function)>" -> "<org.bson.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>";
"<org.bson.util.ComputingMap: void <init>(java.util.concurrent.ConcurrentMap,org.bson.util.Function)>" -> "<org.bson.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>";
"<org.bson.util.ClassMap$ComputeFunction: void <init>(org.bson.util.ClassMap)>" -> "<java.lang.Object: void <init>()>";
"<org.bson.util.CopyOnWriteMap: org.bson.util.CopyOnWriteMap$Builder builder()>" -> "<org.bson.util.CopyOnWriteMap$Builder: void <init>()>";
"<org.bson.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>" -> "<org.bson.util.Assertions$NullArgumentException: void <init>(java.lang.String)>";
"<org.bson.util.CopyOnWriteMap$Builder: void <init>()>" -> "<org.bson.util.AbstractCopyOnWriteMap$View$Type: void <clinit>()>";
"<org.bson.util.CopyOnWriteMap$Builder: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<org.bson.util.CopyOnWriteMap$Builder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.bson.util.Assertions$NullArgumentException: void <init>(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.util.Assertions$NullArgumentException: void <init>(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.util.AbstractCopyOnWriteMap$View$Type: void <clinit>()>" -> "<org.bson.util.AbstractCopyOnWriteMap$View$Type$1: void <init>(java.lang.String,int)>";
"<org.bson.util.AbstractCopyOnWriteMap$View$Type: void <clinit>()>" -> "<org.bson.util.AbstractCopyOnWriteMap$View$Type$2: void <init>(java.lang.String,int)>";
"<org.bson.util.AbstractCopyOnWriteMap$View$Type$1: void <init>(java.lang.String,int)>" -> "<org.bson.util.AbstractCopyOnWriteMap$View$Type: void <init>(java.lang.String,int,org.bson.util.AbstractCopyOnWriteMap$1)>";
"<org.bson.util.AbstractCopyOnWriteMap$View$Type$2: void <init>(java.lang.String,int)>" -> "<org.bson.util.AbstractCopyOnWriteMap$View$Type: void <init>(java.lang.String,int,org.bson.util.AbstractCopyOnWriteMap$1)>";
"<org.bson.util.AbstractCopyOnWriteMap$View$Type: void <init>(java.lang.String,int,org.bson.util.AbstractCopyOnWriteMap$1)>" -> "<org.bson.util.AbstractCopyOnWriteMap$View$Type: void <init>(java.lang.String,int)>";
"<org.bson.util.AbstractCopyOnWriteMap$View$Type: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void finalize()>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Enum: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.Assertions$NullArgumentException: void <init>(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.util.Assertions$NullArgumentException: void <init>(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.util.Assertions$NullArgumentException: void <init>(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.CopyOnWriteMap: org.bson.util.CopyOnWriteMap newHashMap()>" -> "<org.bson.util.CopyOnWriteMap$Builder: org.bson.util.CopyOnWriteMap newHashMap()>";
"<org.bson.util.CopyOnWriteMap$Builder: org.bson.util.CopyOnWriteMap newHashMap()>" -> "<org.bson.util.CopyOnWriteMap$Hash: void <init>(java.util.Map,org.bson.util.AbstractCopyOnWriteMap$View$Type)>";
"<org.bson.util.CopyOnWriteMap$Hash: void <init>(java.util.Map,org.bson.util.AbstractCopyOnWriteMap$View$Type)>" -> "<org.bson.util.CopyOnWriteMap: void <init>(java.util.Map,org.bson.util.AbstractCopyOnWriteMap$View$Type)>";
"<org.bson.util.CopyOnWriteMap: void <init>(java.util.Map,org.bson.util.AbstractCopyOnWriteMap$View$Type)>" -> "<org.bson.util.AbstractCopyOnWriteMap: void <init>(java.util.Map,org.bson.util.AbstractCopyOnWriteMap$View$Type)>";
"<org.bson.util.AbstractCopyOnWriteMap: void <init>(java.util.Map,org.bson.util.AbstractCopyOnWriteMap$View$Type)>" -> "<java.lang.Object: void <init>()>";
"<org.bson.util.AbstractCopyOnWriteMap: void <init>(java.util.Map,org.bson.util.AbstractCopyOnWriteMap$View$Type)>" -> "<org.bson.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: void <init>(java.util.Map,org.bson.util.AbstractCopyOnWriteMap$View$Type)>" -> "<org.bson.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: void <init>(java.util.Map,org.bson.util.AbstractCopyOnWriteMap$View$Type)>" -> "<org.bson.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: void <init>(java.util.Map,org.bson.util.AbstractCopyOnWriteMap$View$Type)>" -> "<java.util.concurrent.locks.ReentrantLock: void <init>()>";
"<java.util.concurrent.locks.ReentrantLock: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.concurrent.locks.ReentrantLock: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.AbstractCopyOnWriteMap: void <init>(java.util.Map,org.bson.util.AbstractCopyOnWriteMap$View$Type)>" -> "<org.bson.util.CopyOnWriteMap$Hash: java.util.Map copy(java.util.Map)>";
"<org.bson.util.CopyOnWriteMap$Hash: java.util.Map copy(java.util.Map)>" -> "<java.util.HashMap: void <init>(java.util.Map)>";
"<java.util.HashMap: void <init>(java.util.Map)>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>(java.util.Map)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.AbstractCopyOnWriteMap: void <init>(java.util.Map,org.bson.util.AbstractCopyOnWriteMap$View$Type)>" -> "<org.bson.util.AbstractCopyOnWriteMap$View$Type$1: org.bson.util.AbstractCopyOnWriteMap$View get(org.bson.util.AbstractCopyOnWriteMap)>";
"<org.bson.util.AbstractCopyOnWriteMap$View$Type$1: org.bson.util.AbstractCopyOnWriteMap$View get(org.bson.util.AbstractCopyOnWriteMap)>" -> "<org.bson.util.AbstractCopyOnWriteMap$Immutable: void <init>(org.bson.util.AbstractCopyOnWriteMap)>";
"<org.bson.util.AbstractCopyOnWriteMap$Immutable: void <init>(org.bson.util.AbstractCopyOnWriteMap)>" -> "<org.bson.util.AbstractCopyOnWriteMap$View: void <init>()>";
"<org.bson.util.AbstractCopyOnWriteMap$View: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.bson.util.AbstractCopyOnWriteMap$View$Type$1: org.bson.util.AbstractCopyOnWriteMap$View get(org.bson.util.AbstractCopyOnWriteMap)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<java.lang.Object: java.lang.Class getClass()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.Class: java.lang.ClassLoader getClassLoader()>";
"<java.lang.Class: java.lang.ClassLoader getClassLoader()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.util.Random: int nextInt()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.util.Random: int nextInt()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.util.Random: int nextInt()>";
"<java.util.Random: int nextInt()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBTCPConnector: boolean setMasterAddress(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBTCPConnector: boolean setMasterAddress(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.mongodb.DBTCPConnector: boolean setMasterAddress(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBTCPConnector: boolean setMasterAddress(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.mongodb.DBTCPConnector: boolean setMasterAddress(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: void <init>(com.mongodb.MongoOptions)>" -> "<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>";
"<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBTCPConnector: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.Mongo$CursorCleanerThread: void <init>(com.mongodb.Mongo)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.Mongo$CursorCleanerThread: void <init>(com.mongodb.Mongo)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.mongodb.Mongo$CursorCleanerThread: void <init>(com.mongodb.Mongo)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.Mongo$CursorCleanerThread: void run()>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<java.lang.Thread: void start()>";
"<com.mongodb.Mongo$CursorCleanerThread: void run()>" -> "<com.mongodb.Mongo: void <clinit>()>";
"<com.mongodb.Mongo$CursorCleanerThread: void run()>" -> "<java.lang.Thread: void sleep(long)>";
"<java.lang.Thread: void start()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void sleep(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.Mongo$CursorCleanerThread: void <init>(com.mongodb.Mongo)>" -> "<java.lang.Thread: void setDaemon(boolean)>";
"<com.mongodb.Mongo$CursorCleanerThread: void <init>(com.mongodb.Mongo)>" -> "<java.lang.Object: int hashCode()>";
"<com.mongodb.Mongo$CursorCleanerThread: void <init>(com.mongodb.Mongo)>" -> "<java.lang.Thread: void setName(java.lang.String)>";
"<java.lang.Thread: void setDaemon(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: int hashCode()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void setName(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.DBTCPConnector: void start()>";
"<com.mongodb.DBTCPConnector: boolean setMasterAddress(com.mongodb.ServerAddress)>" -> "<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.util.SimplePool: void <clinit>()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.util.management.MBeanServerFactory: com.mongodb.util.management.MBeanServer getMBeanServer()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.util.management.MBeanServerFactory: com.mongodb.util.management.MBeanServer getMBeanServer()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.util.management.MBeanServerFactory: com.mongodb.util.management.MBeanServer getMBeanServer()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.DBPortPool$Holder: java.lang.String createObjectName(com.mongodb.ServerAddress)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.DBPortPool: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<java.util.logging.Level: void <clinit>()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<org.bson.BSON: void <clinit>()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.Bytes: void <clinit>()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<java.util.logging.Level: void <clinit>()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<org.bson.BSON: void <clinit>()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.Bytes: void <clinit>()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<java.util.logging.Level: void <clinit>()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<org.bson.BSON: void <clinit>()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.Bytes: void <clinit>()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.util.management.MBeanServerFactory: void <clinit>()>";
"<com.mongodb.util.management.MBeanServerFactory: com.mongodb.util.management.MBeanServer getMBeanServer()>" -> "<com.mongodb.util.management.MBeanServerFactory: void <clinit>()>";
"<com.mongodb.DBPortPool$Holder: java.lang.String createObjectName(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBPortPool$Holder: java.lang.String createObjectName(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBPortPool: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBPortPool: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<java.util.concurrent.Semaphore: void <init>(int)>";
"<com.mongodb.DBPortPool: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.util.SimplePool: void <init>(java.lang.String,int)>";
"<com.mongodb.util.management.MBeanServerFactory: void <clinit>()>" -> "<com.mongodb.util.management.jmx.JMXMBeanServer: void <init>()>";
"<com.mongodb.util.management.MBeanServerFactory: void <clinit>()>" -> "<com.mongodb.util.management.NullMBeanServer: void <init>()>";
"<java.util.concurrent.Semaphore: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<java.util.concurrent.Semaphore: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.SimplePool: void <init>(java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.util.SimplePool: void <init>(java.lang.String,int)>" -> "<java.util.concurrent.Semaphore: void <init>(int)>";
"<com.mongodb.util.SimplePool: void <init>(java.lang.String,int)>" -> "<java.util.HashSet: void <init>()>";
"<com.mongodb.util.SimplePool: void <init>(java.lang.String,int)>" -> "<java.util.ArrayList: void <init>()>";
"<com.mongodb.util.management.jmx.JMXMBeanServer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.util.management.jmx.JMXMBeanServer: void <init>()>" -> "<java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>";
"<com.mongodb.util.management.NullMBeanServer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.HashSet: void <init>()>" -> "<java.util.AbstractSet: void <init>()>";
"<java.util.HashSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractSet: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBPortPool: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBPortPool$Holder: java.lang.String createObjectName(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: java.lang.String createObjectName(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: java.lang.String createObjectName(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: java.lang.String createObjectName(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.mongodb.DBPortPool$Holder: java.lang.String createObjectName(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBPortPool$Holder: java.lang.String createObjectName(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: java.lang.String createObjectName(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: java.lang.String createObjectName(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: java.lang.String createObjectName(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.util.management.jmx.JMXMBeanServer: boolean isRegistered(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.util.management.jmx.JMXMBeanServer: void unregisterMBean(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.util.management.jmx.JMXMBeanServer: void registerMBean(java.lang.Object,java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.util.management.NullMBeanServer: boolean isRegistered(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.util.management.NullMBeanServer: void unregisterMBean(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<com.mongodb.util.management.NullMBeanServer: void registerMBean(java.lang.Object,java.lang.String)>";
"<com.mongodb.util.management.jmx.JMXMBeanServer: boolean isRegistered(java.lang.String)>" -> "<com.mongodb.util.management.jmx.JMXMBeanServer: javax.management.ObjectName createObjectName(java.lang.String)>";
"<com.mongodb.util.management.jmx.JMXMBeanServer: void unregisterMBean(java.lang.String)>" -> "<com.mongodb.util.management.jmx.JMXMBeanServer: javax.management.ObjectName createObjectName(java.lang.String)>";
"<com.mongodb.util.management.jmx.JMXMBeanServer: void unregisterMBean(java.lang.String)>" -> "<com.mongodb.util.management.JMException: void <init>(java.lang.Throwable)>";
"<com.mongodb.util.management.jmx.JMXMBeanServer: void unregisterMBean(java.lang.String)>" -> "<com.mongodb.util.management.JMException: void <init>(java.lang.Throwable)>";
"<com.mongodb.util.management.jmx.JMXMBeanServer: void registerMBean(java.lang.Object,java.lang.String)>" -> "<com.mongodb.util.management.jmx.JMXMBeanServer: javax.management.ObjectName createObjectName(java.lang.String)>";
"<com.mongodb.util.management.jmx.JMXMBeanServer: void registerMBean(java.lang.Object,java.lang.String)>" -> "<com.mongodb.util.management.JMException: void <init>(java.lang.Throwable)>";
"<com.mongodb.util.management.jmx.JMXMBeanServer: void registerMBean(java.lang.Object,java.lang.String)>" -> "<com.mongodb.util.management.JMException: void <init>(java.lang.Throwable)>";
"<com.mongodb.util.management.jmx.JMXMBeanServer: void registerMBean(java.lang.Object,java.lang.String)>" -> "<com.mongodb.util.management.JMException: void <init>(java.lang.Throwable)>";
"<com.mongodb.util.management.jmx.JMXMBeanServer: javax.management.ObjectName createObjectName(java.lang.String)>" -> "<javax.management.ObjectName: void <init>(java.lang.String)>";
"<com.mongodb.util.management.jmx.JMXMBeanServer: javax.management.ObjectName createObjectName(java.lang.String)>" -> "<com.mongodb.util.management.JMException: void <init>(java.lang.Throwable)>";
"<com.mongodb.util.management.JMException: void <init>(java.lang.Throwable)>" -> "<java.lang.Exception: void <init>(java.lang.Throwable)>";
"<java.lang.Exception: void <init>(java.lang.Throwable)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.SimplePool: void <clinit>()>" -> "<java.lang.Class: boolean desiredAssertionStatus()>";
"<java.lang.Class: boolean desiredAssertionStatus()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool$Holder: com.mongodb.DBPortPool get(com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.BasicDBObjectBuilder: void <init>()>" -> "<java.util.LinkedList: boolean add(java.lang.Object)>";
"<java.util.LinkedList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.MongoOptions: void <init>()>" -> "<com.mongodb.MongoOptions: void reset()>";
"<com.mongodb.MongoOptions: void reset()>" -> "<com.mongodb.Bytes: void <clinit>()>";
"<com.mongodb.MongoOptions: void reset()>" -> "<javax.net.SocketFactory: javax.net.SocketFactory getDefault()>";
"<com.mongodb.MongoOptions: void reset()>" -> "<com.mongodb.DefaultDBEncoder: void <clinit>()>";
"<com.mongodb.MongoOptions: void reset()>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<com.mongodb.MongoOptions: void reset()>" -> "<com.mongodb.DefaultDBDecoder: void <clinit>()>";
"<com.mongodb.MongoOptions: void reset()>" -> "<org.bson.BSON: void <clinit>()>";
"<javax.net.SocketFactory: javax.net.SocketFactory getDefault()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DefaultDBEncoder: void <clinit>()>" -> "<com.mongodb.DefaultDBEncoder$DefaultFactory: void <init>()>";
"<org.bson.BasicBSONDecoder: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.bson.BasicBSONDecoder: void <clinit>()>" -> "<org.bson.BasicBSONDecoder: void _fillRange(byte,byte)>";
"<org.bson.BasicBSONDecoder: void <clinit>()>" -> "<org.bson.BasicBSONDecoder: void _fillRange(byte,byte)>";
"<org.bson.BasicBSONDecoder: void <clinit>()>" -> "<org.bson.BasicBSONDecoder: void _fillRange(byte,byte)>";
"<com.mongodb.DefaultDBDecoder: void <clinit>()>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<com.mongodb.DefaultDBDecoder: void <clinit>()>" -> "<com.mongodb.DefaultDBDecoder$DefaultFactory: void <init>()>";
"<com.mongodb.DefaultDBEncoder$DefaultFactory: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.bson.BasicBSONDecoder: void _fillRange(byte,byte)>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<org.bson.BasicBSONDecoder: void _fillRange(byte,byte)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DefaultDBDecoder$DefaultFactory: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.bson.BasicBSONDecoder: void _fillRange(byte,byte)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject get()>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject get()>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject get()>";
"<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject get()>" -> "<java.util.LinkedList: java.lang.Object getFirst()>";
"<java.util.LinkedList: java.lang.Object getFirst()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder append(java.lang.String,java.lang.Object)>";
"<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder append(java.lang.String,java.lang.Object)>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject _cur()>";
"<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject _cur()>" -> "<java.util.LinkedList: java.lang.Object getLast()>";
"<java.util.LinkedList: java.lang.Object getLast()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>" -> "<com.mongodb.ServerAddress: boolean updateInetAddress()>";
"<com.mongodb.ServerAddress: boolean updateInetAddress()>" -> "<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>";
"<com.mongodb.ServerAddress: boolean updateInetAddress()>" -> "<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>";
"<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>" -> "<java.net.SocketAddress: void <init>()>";
"<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.SocketAddress: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.net.SocketAddress: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.ServerAddress: boolean updateInetAddress()>" -> "<java.net.InetSocketAddress: boolean equals(java.lang.Object)>";
"<java.net.InetSocketAddress: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void <init>(com.mongodb.Mongo,com.mongodb.ServerAddress)>" -> "<com.mongodb.ServerAddress: java.lang.String toString()>";
"<com.mongodb.ServerAddress: java.lang.String toString()>" -> "<java.net.InetSocketAddress: java.lang.String toString()>";
"<java.net.InetSocketAddress: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBPortPool: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.ServerAddress: java.lang.String toString()>";
"<com.mongodb.DBPortPool$Holder: java.lang.String createObjectName(com.mongodb.ServerAddress)>" -> "<com.mongodb.ServerAddress: java.lang.String toString()>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.GridFS: com.mongodb.DBCursor getFileList()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSDBFile findOne(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSInputFile createFile(java.io.File)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSDBFile findOne(java.lang.String)>";
"<com.mongodb.gridfs.GridFS: com.mongodb.DBCursor getFileList()>" -> "<java.lang.Integer: void <clinit>()>";
"<com.mongodb.gridfs.GridFS: com.mongodb.DBCursor getFileList()>" -> "<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFS: com.mongodb.DBCursor getFileList()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSDBFile findOne(java.lang.String)>" -> "<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSInputFile createFile(java.io.File)>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONObject: void <init>(java.lang.String,java.lang.Object)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.FileInputStream: void finalize()>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.InputStream: void <init>()>";
"<org.bson.BasicBSONObject: void <init>(java.lang.String,java.lang.Object)>" -> "<java.util.LinkedHashMap: void <init>()>";
"<java.io.FileInputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONObject: void <init>(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSInputFile createFile(java.io.File)>" -> "<java.io.File: java.lang.String getName()>";
"<java.io.File: java.lang.String getName()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSInputFile createFile(java.io.File)>" -> "<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSInputFile createFile(java.io.InputStream,java.lang.String,boolean)>";
"<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSInputFile createFile(java.io.InputStream,java.lang.String,boolean)>" -> "<com.mongodb.gridfs.GridFSFile: void <clinit>()>";
"<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSInputFile createFile(java.io.InputStream,java.lang.String,boolean)>" -> "<com.mongodb.gridfs.GridFSInputFile: void <init>(com.mongodb.gridfs.GridFS,java.io.InputStream,java.lang.String,boolean)>";
"<com.mongodb.gridfs.GridFSFile: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<com.mongodb.gridfs.GridFSFile: void <clinit>()>" -> "<java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>";
"<com.mongodb.gridfs.GridFSFile: void <clinit>()>" -> "<java.util.HashSet: void <init>(java.util.Collection)>";
"<com.mongodb.gridfs.GridFSFile: void <clinit>()>" -> "<java.util.Arrays: java.util.List asList(java.lang.Object[])>";
"<com.mongodb.gridfs.GridFSFile: void <clinit>()>" -> "<java.util.Collections: void <clinit>()>";
"<com.mongodb.gridfs.GridFSInputFile: void <init>(com.mongodb.gridfs.GridFS,java.io.InputStream,java.lang.String,boolean)>" -> "<org.bson.types.ObjectId: void <clinit>()>";
"<com.mongodb.gridfs.GridFSInputFile: void <init>(com.mongodb.gridfs.GridFS,java.io.InputStream,java.lang.String,boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSInputFile: void <init>(com.mongodb.gridfs.GridFS,java.io.InputStream,java.lang.String,boolean)>" -> "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>";
"<com.mongodb.gridfs.GridFSInputFile: void <init>(com.mongodb.gridfs.GridFS,java.io.InputStream,java.lang.String,boolean)>" -> "<java.util.Date: void <init>()>";
"<com.mongodb.gridfs.GridFSInputFile: void <init>(com.mongodb.gridfs.GridFS,java.io.InputStream,java.lang.String,boolean)>" -> "<org.bson.types.ObjectId: void <init>()>";
"<com.mongodb.gridfs.GridFSInputFile: void <init>(com.mongodb.gridfs.GridFS,java.io.InputStream,java.lang.String,boolean)>" -> "<com.mongodb.gridfs.GridFSFile: void <init>()>";
"<java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashSet: void <init>(java.util.Collection)>" -> "<java.util.AbstractSet: void <init>()>";
"<java.util.HashSet: void <init>(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Arrays: java.util.List asList(java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Date: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Date: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.types.ObjectId: void <init>()>" -> "<java.lang.System: void <clinit>()>";
"<org.bson.types.ObjectId: void <init>()>" -> "<java.lang.System: long currentTimeMillis()>";
"<org.bson.types.ObjectId: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.bson.types.ObjectId: void <init>()>" -> "<org.bson.types.ObjectId: void <clinit>()>";
"<com.mongodb.gridfs.GridFSFile: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.gridfs.GridFSFile: void <init>()>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<org.bson.types.ObjectId: void <init>()>" -> "<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>";
"<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.GridFSInputFile: void save()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.gridfs.GridFSFile: void validate()>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<com.mongodb.MongoException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<com.mongodb.MongoException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<com.mongodb.MongoException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<com.mongodb.MongoException: void <init>(java.lang.String)>";
"<com.mongodb.MongoException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<org.bson.types.ObjectId: java.lang.String toString()>";
"<org.bson.types.ObjectId: java.lang.String toString()>" -> "<org.bson.types.ObjectId: java.lang.String toStringMongod()>";
"<org.bson.types.ObjectId: java.lang.String toStringMongod()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.bson.types.ObjectId: java.lang.String toStringMongod()>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<org.bson.types.ObjectId: java.lang.String toStringMongod()>" -> "<java.lang.StringBuilder: void <init>(int)>";
"<java.lang.StringBuilder: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.types.ObjectId: java.lang.String toStringMongod()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: java.lang.String toStringMongod()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: java.lang.String toStringMongod()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.types.ObjectId: java.lang.String toStringMongod()>" -> "<org.bson.types.ObjectId: byte[] toByteArray()>";
"<org.bson.types.ObjectId: byte[] toByteArray()>" -> "<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>";
"<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSInputFile: void save()>" -> "<com.mongodb.gridfs.GridFSInputFile: void save(long)>";
"<com.mongodb.gridfs.GridFSInputFile: void save(long)>" -> "<com.mongodb.MongoException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSInputFile: void save(long)>" -> "<com.mongodb.MongoException: void <init>(java.lang.String,java.lang.Throwable)>";
"<com.mongodb.gridfs.GridFSInputFile: void save(long)>" -> "<com.mongodb.gridfs.GridFSFile: void save()>";
"<com.mongodb.MongoException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<com.mongodb.MongoException: java.lang.Throwable _massage(java.lang.Throwable)>";
"<com.mongodb.MongoException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
"<com.mongodb.gridfs.GridFSFile: void save()>" -> "<com.mongodb.MongoException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSInputFile: void save(long)>" -> "<com.mongodb.gridfs.GridFSInputFile: int saveChunks(long)>";
"<com.mongodb.gridfs.GridFSInputFile: int saveChunks(long)>" -> "<com.mongodb.MongoException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSInputFile: int saveChunks(long)>" -> "<com.mongodb.gridfs.GridFSInputFile: void _finishData()>";
"<com.mongodb.gridfs.GridFSInputFile: int saveChunks(long)>" -> "<com.mongodb.gridfs.GridFSInputFile: void _dumpBuffer(boolean)>";
"<com.mongodb.gridfs.GridFSInputFile: int saveChunks(long)>" -> "<com.mongodb.gridfs.GridFSInputFile: int _readStream2Buffer()>";
"<com.mongodb.gridfs.GridFSInputFile: int saveChunks(long)>" -> "<com.mongodb.MongoException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSInputFile: int saveChunks(long)>" -> "<com.mongodb.MongoException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSInputFile: void _finishData()>" -> "<com.mongodb.util.Util: java.lang.String toHex(byte[])>";
"<com.mongodb.gridfs.GridFSInputFile: void _dumpBuffer(boolean)>" -> "<java.lang.System: void <clinit>()>";
"<com.mongodb.gridfs.GridFSInputFile: void _dumpBuffer(boolean)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.mongodb.gridfs.GridFSInputFile: int _readStream2Buffer()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSInputFile: int _readStream2Buffer()>" -> "<java.io.FileInputStream: int read(byte[],int,int)>";
"<java.io.FileInputStream: int read(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSInputFile: void _dumpBuffer(boolean)>" -> "<com.mongodb.gridfs.GridFSInputFile: com.mongodb.DBObject createChunk(java.lang.Object,int,byte[])>";
"<com.mongodb.gridfs.GridFSInputFile: com.mongodb.DBObject createChunk(java.lang.Object,int,byte[])>" -> "<java.lang.Integer: void <clinit>()>";
"<com.mongodb.gridfs.GridFSInputFile: com.mongodb.DBObject createChunk(java.lang.Object,int,byte[])>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.gridfs.GridFSInputFile: com.mongodb.DBObject createChunk(java.lang.Object,int,byte[])>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder start()>";
"<com.mongodb.gridfs.GridFSInputFile: com.mongodb.DBObject createChunk(java.lang.Object,int,byte[])>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFSInputFile: com.mongodb.DBObject createChunk(java.lang.Object,int,byte[])>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFSInputFile: com.mongodb.DBObject createChunk(java.lang.Object,int,byte[])>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFSInputFile: com.mongodb.DBObject createChunk(java.lang.Object,int,byte[])>" -> "<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject get()>";
"<com.mongodb.gridfs.GridFSInputFile: void _finishData()>" -> "<java.io.FileInputStream: void close()>";
"<java.io.FileInputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSDBFile findOne(java.lang.String)>" -> "<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSDBFile findOne(com.mongodb.DBObject)>";
"<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSDBFile findOne(com.mongodb.DBObject)>" -> "<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSDBFile _fix(java.lang.Object)>";
"<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSDBFile _fix(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.Util: java.lang.String toHex(byte[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.util.Util: java.lang.String toHex(byte[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.util.Util: java.lang.String toHex(byte[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.types.ObjectId: void <clinit>()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<java.lang.Throwable: java.lang.String getMessage()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.CLI: com.mongodb.gridfs.GridFS getGridFS()>" -> "<com.mongodb.Mongo: com.mongodb.DB getDB(java.lang.String)>";
"<com.mongodb.Mongo: com.mongodb.DB getDB(java.lang.String)>" -> "<com.mongodb.DBApiLayer: void <clinit>()>";
"<com.mongodb.Mongo: com.mongodb.DB getDB(java.lang.String)>" -> "<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>";
"<com.mongodb.Mongo: com.mongodb.DB getDB(java.lang.String)>" -> "<com.mongodb.DB: void <clinit>()>";
"<com.mongodb.DBApiLayer: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<com.mongodb.DBApiLayer: void <clinit>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<com.mongodb.DBApiLayer: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<com.mongodb.DBApiLayer: void <clinit>()>" -> "<java.util.logging.Level: void <clinit>()>";
"<com.mongodb.DBApiLayer: void <clinit>()>" -> "<java.util.logging.Level: void <clinit>()>";
"<com.mongodb.DBApiLayer: void <clinit>()>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.mongodb.DBApiLayer: void <clinit>()>" -> "<com.mongodb.DB: void <clinit>()>";
"<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>" -> "<com.mongodb.DB: void <init>(com.mongodb.Mongo,java.lang.String)>";
"<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>" -> "<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>";
"<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>" -> "<java.util.concurrent.ConcurrentHashMap: void <init>()>";
"<com.mongodb.DB: void <clinit>()>" -> "<java.util.HashSet: void <init>()>";
"<com.mongodb.DB: void <init>(com.mongodb.Mongo,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.DB: void <init>(com.mongodb.Mongo,java.lang.String)>" -> "<com.mongodb.Bytes$OptionHolder: void <init>(com.mongodb.Bytes$OptionHolder)>";
"<com.mongodb.DB: void <init>(com.mongodb.Mongo,java.lang.String)>" -> "<java.util.concurrent.atomic.AtomicReference: void <init>()>";
"<java.util.concurrent.atomic.AtomicReference: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.concurrent.atomic.AtomicReference: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DB: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<com.mongodb.DB: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<com.mongodb.DB: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<com.mongodb.DB: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<com.mongodb.DB: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<com.mongodb.DB: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<com.mongodb.DB: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<com.mongodb.DB: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<com.mongodb.DB: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<java.util.HashSet: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>";
"<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>" -> "<com.mongodb.DBApiLayer: com.mongodb.DBApiLayer$MyCollection doGetCollection(java.lang.String)>";
"<com.mongodb.DBApiLayer: com.mongodb.DBApiLayer$MyCollection doGetCollection(java.lang.String)>" -> "<com.mongodb.DBApiLayer$MyCollection: void <init>(com.mongodb.DBApiLayer,java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: void <init>(com.mongodb.DBApiLayer,java.lang.String)>" -> "<com.mongodb.DBCollection: void <init>(com.mongodb.DB,java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: void <init>(com.mongodb.DBApiLayer,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBCollection: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.util.Collections: void <clinit>()>";
"<com.mongodb.DBCollection: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.Bytes$OptionHolder: void <init>(com.mongodb.Bytes$OptionHolder)>";
"<com.mongodb.DBCollection: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBCollection: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.util.HashSet: void <init>()>";
"<com.mongodb.DBCollection: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>";
"<com.mongodb.DBCollection: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.util.HashMap: void <init>()>";
"<com.mongodb.DBCollection: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.DBCollection: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBCollection: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBCollection: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBCollection: void <init>(com.mongodb.DB,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBApiLayer$MyCollection: void <init>(com.mongodb.DBApiLayer,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: void <init>(com.mongodb.DBApiLayer,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: void <init>(com.mongodb.DBApiLayer,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: void <init>(com.mongodb.DBApiLayer,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBCollection: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.DB: java.lang.String getName()>";
"<com.mongodb.DBApiLayer: com.mongodb.DBApiLayer$MyCollection doGetCollection(java.lang.String)>" -> "<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
"<com.mongodb.DBApiLayer: com.mongodb.DBApiLayer$MyCollection doGetCollection(java.lang.String)>" -> "<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.DBCollection: long count()>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.DBCollection: long count()>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>";
"<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>" -> "<com.mongodb.DBCollection: void setObjectClass(java.lang.Class)>";
"<com.mongodb.DBCollection: long count()>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<com.mongodb.DBCollection: void setObjectClass(java.lang.Class)>" -> "<com.mongodb.ReflectionDBObject: void <clinit>()>";
"<com.mongodb.DBCollection: void setObjectClass(java.lang.Class)>" -> "<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapper(java.lang.Class)>";
"<com.mongodb.DBCollection: void setObjectClass(java.lang.Class)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.DBCollection: void setObjectClass(java.lang.Class)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.ReflectionDBObject: void <clinit>()>" -> "<java.util.Collections: void <clinit>()>";
"<com.mongodb.ReflectionDBObject: void <clinit>()>" -> "<java.util.HashSet: void <init>()>";
"<com.mongodb.ReflectionDBObject: void <clinit>()>" -> "<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>";
"<com.mongodb.ReflectionDBObject: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapper(java.lang.Class)>" -> "<com.mongodb.ReflectionDBObject: void <clinit>()>";
"<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapper(java.lang.Class)>" -> "<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<com.mongodb.ReflectionDBObject: void <clinit>()>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.util.HashSet: void <init>(java.util.Collection)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<com.mongodb.ReflectionDBObject$FieldInfo: void <init>(java.lang.String,java.lang.Class)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<com.mongodb.ReflectionDBObject: java.util.Set access$000()>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.util.TreeMap: void <init>()>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.util.Collections: void <clinit>()>";
"<com.mongodb.ReflectionDBObject$FieldInfo: void <init>(java.lang.String,java.lang.Class)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.ReflectionDBObject: java.util.Set access$000()>" -> "<com.mongodb.ReflectionDBObject: void <clinit>()>";
"<java.util.TreeMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.TreeMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.util.HashSet: boolean contains(java.lang.Object)>";
"<java.util.HashSet: boolean contains(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<java.util.HashSet: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<com.mongodb.ReflectionDBObject$FieldInfo: boolean ok()>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.util.TreeMap: java.util.Set keySet()>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.util.TreeMap: java.util.Set keySet()>";
"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.TreeMap: java.util.Set keySet()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.ReflectionDBObject: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<com.mongodb.DBCollection: void setObjectClass(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBCollection: void setObjectClass(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBCollection: void setObjectClass(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBCollection: void setObjectClass(java.lang.Class)>" -> "<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>";
"<com.mongodb.DBCollection: void setObjectClass(java.lang.Class)>" -> "<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>";
"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBCollection: void setObjectClass(java.lang.Class)>" -> "<java.lang.Class: java.lang.String getName()>";
"<java.lang.Class: java.lang.String getName()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.lang.Class: java.lang.String getName()>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>" -> "<java.lang.Class: java.lang.reflect.Method[] getMethods()>";
"<java.lang.Class: java.lang.reflect.Method[] getMethods()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: boolean checkReadOnly(boolean)>";
"<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: com.mongodb.DBObject defaultOptions(com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: boolean checkReadOnly(boolean)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.mongodb.DBCollection: com.mongodb.DBObject defaultOptions(com.mongodb.DBObject)>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject defaultOptions(com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: java.lang.String genIndexName(com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: com.mongodb.DBEncoder getDBEncoder()>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBCollection: java.lang.String genIndexName(com.mongodb.DBObject)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>" -> "<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBCollection: java.lang.String genIndexName(com.mongodb.DBObject)>" -> "<java.lang.StringBuilder: int length()>";
"<com.mongodb.DBCollection: java.lang.String genIndexName(com.mongodb.DBObject)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<com.mongodb.DBCollection: java.lang.String genIndexName(com.mongodb.DBObject)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBCollection: java.lang.String genIndexName(com.mongodb.DBObject)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBCollection: java.lang.String genIndexName(com.mongodb.DBObject)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.DBApiLayer$MyCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBEncoder)>";
"<com.mongodb.DBApiLayer$MyCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBEncoder)>" -> "<com.mongodb.DefaultDBEncoder: void <clinit>()>";
"<com.mongodb.DBApiLayer$MyCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBEncoder)>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<com.mongodb.DBApiLayer$MyCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBEncoder)>" -> "<com.mongodb.WriteConcern: void <clinit>()>";
"<com.mongodb.DBApiLayer$MyCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBEncoder)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBApiLayer$MyCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBEncoder)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBApiLayer$MyCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBEncoder)>" -> "<com.mongodb.DefaultDBEncoder$DefaultFactory: com.mongodb.DBEncoder create()>";
"<com.mongodb.DefaultDBEncoder$DefaultFactory: com.mongodb.DBEncoder create()>" -> "<com.mongodb.DefaultDBEncoder: void <clinit>()>";
"<com.mongodb.DefaultDBEncoder$DefaultFactory: com.mongodb.DBEncoder create()>" -> "<com.mongodb.DefaultDBEncoder: void <init>()>";
"<com.mongodb.DefaultDBEncoder: void <init>()>" -> "<org.bson.BasicBSONEncoder: void <init>()>";
"<org.bson.BasicBSONEncoder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.DBApiLayer$MyCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBEncoder)>" -> "<java.util.LinkedHashMap: java.util.Set keySet()>";
"<com.mongodb.DBApiLayer$MyCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBEncoder)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<java.util.LinkedHashMap: java.util.Set keySet()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject)>";
"<com.mongodb.DBApiLayer$MyCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DefaultDBEncoder: void <clinit>()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.OutMessage: com.mongodb.OutMessage insert(com.mongodb.DBCollection,com.mongodb.DBEncoder,com.mongodb.WriteConcern)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer: void trace(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.util.JSON: java.lang.String serialize(java.lang.Object)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer: boolean willTrace()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DB: void <clinit>()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer: void <clinit>()>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage insert(com.mongodb.DBCollection,com.mongodb.DBEncoder,com.mongodb.WriteConcern)>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage insert(com.mongodb.DBCollection,com.mongodb.DBEncoder,com.mongodb.WriteConcern)>" -> "<com.mongodb.OutMessage: void writeInsertPrologue(com.mongodb.WriteConcern)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage insert(com.mongodb.DBCollection,com.mongodb.DBEncoder,com.mongodb.WriteConcern)>" -> "<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage insert(com.mongodb.DBCollection,com.mongodb.DBEncoder,com.mongodb.WriteConcern)>" -> "<com.mongodb.OutMessage$OpCode: void <clinit>()>";
"<com.mongodb.DBApiLayer: void trace(java.lang.String)>" -> "<com.mongodb.DBApiLayer: void <clinit>()>";
"<com.mongodb.DBApiLayer: void trace(java.lang.String)>" -> "<com.mongodb.DB: void <clinit>()>";
"<com.mongodb.util.JSON: java.lang.String serialize(java.lang.Object)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.util.JSON: java.lang.String serialize(java.lang.Object)>" -> "<com.mongodb.util.JSON: void serialize(java.lang.Object,java.lang.StringBuilder)>";
"<com.mongodb.DBApiLayer: boolean willTrace()>" -> "<com.mongodb.DBApiLayer: void <clinit>()>";
"<com.mongodb.DBApiLayer: boolean willTrace()>" -> "<com.mongodb.DB: void <clinit>()>";
"<com.mongodb.OutMessage: void <clinit>()>" -> "<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder)>" -> "<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder)>";
"<com.mongodb.OutMessage$OpCode: void <clinit>()>" -> "<com.mongodb.OutMessage$OpCode: void <init>(java.lang.String,int,int)>";
"<com.mongodb.OutMessage$OpCode: void <clinit>()>" -> "<com.mongodb.OutMessage$OpCode: void <init>(java.lang.String,int,int)>";
"<com.mongodb.OutMessage$OpCode: void <clinit>()>" -> "<com.mongodb.OutMessage$OpCode: void <init>(java.lang.String,int,int)>";
"<com.mongodb.OutMessage$OpCode: void <clinit>()>" -> "<com.mongodb.OutMessage$OpCode: void <init>(java.lang.String,int,int)>";
"<com.mongodb.OutMessage$OpCode: void <clinit>()>" -> "<com.mongodb.OutMessage$OpCode: void <init>(java.lang.String,int,int)>";
"<com.mongodb.OutMessage$OpCode: void <clinit>()>" -> "<com.mongodb.OutMessage$OpCode: void <init>(java.lang.String,int,int)>";
"<com.mongodb.util.JSON: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<com.mongodb.util.JSONSerializers: com.mongodb.util.ObjectSerializer getLegacy()>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder)>" -> "<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>";
"<com.mongodb.OutMessage$OpCode: void <init>(java.lang.String,int,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ObjectSerializer getLegacy()>" -> "<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ObjectSerializer getLegacy()>" -> "<com.mongodb.util.JSONSerializers$LegacyBinarySerializer: void <init>(com.mongodb.util.JSONSerializers$1)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ObjectSerializer getLegacy()>" -> "<com.mongodb.util.JSONSerializers$LegacyBinarySerializer: void <init>(com.mongodb.util.JSONSerializers$1)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ObjectSerializer getLegacy()>" -> "<com.mongodb.util.JSONSerializers$LegacyBSONTimestampSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ObjectSerializer getLegacy()>" -> "<com.mongodb.util.JSONSerializers$LegacyDateSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<com.mongodb.OutMessage: void writeMessagePrologue(com.mongodb.OutMessage$OpCode)>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<org.bson.BasicBSONEncoder: void <init>()>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void <init>()>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$UUIDSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$StringSerializer: void <init>(com.mongodb.util.JSONSerializers$1)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$PatternSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$ObjectIdSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$ToStringSerializer: void <init>(com.mongodb.util.JSONSerializers$1)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$MinKeySerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$MaxKeySerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$MapSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$IterableSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$DBRefBaseSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$DBObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$CodeWScopeSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$CodeSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$ToStringSerializer: void <init>(com.mongodb.util.JSONSerializers$1)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.JSONSerializers$ObjectArraySerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$LegacyBinarySerializer: void <init>(com.mongodb.util.JSONSerializers$1)>" -> "<com.mongodb.util.JSONSerializers$LegacyBinarySerializer: void <init>()>";
"<com.mongodb.util.JSONSerializers$LegacyBSONTimestampSerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$LegacyDateSerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void <init>()>" -> "<com.mongodb.util.AbstractObjectSerializer: void <init>()>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void <init>()>" -> "<org.bson.util.ClassMap: void <init>()>";
"<com.mongodb.util.JSONSerializers$UUIDSerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$StringSerializer: void <init>(com.mongodb.util.JSONSerializers$1)>" -> "<com.mongodb.util.JSONSerializers$StringSerializer: void <init>()>";
"<com.mongodb.util.JSONSerializers$PatternSerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$ObjectIdSerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$ToStringSerializer: void <init>(com.mongodb.util.JSONSerializers$1)>" -> "<com.mongodb.util.JSONSerializers$ToStringSerializer: void <init>()>";
"<com.mongodb.util.JSONSerializers$MinKeySerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$MaxKeySerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$MapSerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$IterableSerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$DBRefBaseSerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$DBObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$CodeWScopeSerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$CodeSerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$ObjectArraySerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers$LegacyBinarySerializer: void <init>()>" -> "<com.mongodb.util.AbstractObjectSerializer: void <init>()>";
"<com.mongodb.util.JSONSerializers$CompoundObjectSerializer: void <init>(com.mongodb.util.ObjectSerializer)>" -> "<com.mongodb.util.AbstractObjectSerializer: void <init>()>";
"<com.mongodb.util.AbstractObjectSerializer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.util.JSONSerializers$StringSerializer: void <init>()>" -> "<com.mongodb.util.AbstractObjectSerializer: void <init>()>";
"<com.mongodb.util.JSONSerializers$ToStringSerializer: void <init>()>" -> "<com.mongodb.util.AbstractObjectSerializer: void <init>()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.OutMessage: int size()>";
"<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>" -> "<java.lang.Math: int max(int,int)>";
"<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>" -> "<com.mongodb.MongoInternalException: void <init>(java.lang.String)>";
"<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>" -> "<java.lang.StringBuilder: void <init>()>";
"<java.lang.Math: int max(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.MongoInternalException: void <init>(java.lang.String)>" -> "<com.mongodb.MongoException: void <init>(java.lang.String)>";
"<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ClassMapBasedObjectSerializer addCommonSerializers()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>" -> "<org.bson.util.ClassMap: java.lang.Object put(java.lang.Class,java.lang.Object)>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ObjectSerializer getLegacy()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ObjectSerializer getLegacy()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ObjectSerializer getLegacy()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSONSerializers: com.mongodb.util.ObjectSerializer getLegacy()>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void addObjectSerializer(java.lang.Class,com.mongodb.util.ObjectSerializer)>";
"<com.mongodb.util.JSON: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<com.mongodb.Bytes: void <clinit>()>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<org.bson.util.ClassMap: java.util.List getAncestry(java.lang.Class)>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<org.bson.BSON: java.lang.Object applyEncodingHooks(java.lang.Object)>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<org.bson.BSON: void <clinit>()>";
"<org.bson.util.ClassMap: java.util.List getAncestry(java.lang.Class)>" -> "<org.bson.util.ClassAncestry: void <clinit>()>";
"<org.bson.util.ClassMap: java.util.List getAncestry(java.lang.Class)>" -> "<org.bson.util.ClassAncestry: java.util.List getAncestry(java.lang.Class)>";
"<org.bson.BSON: java.lang.Object applyEncodingHooks(java.lang.Object)>" -> "<org.bson.BSON: void <clinit>()>";
"<org.bson.BSON: java.lang.Object applyEncodingHooks(java.lang.Object)>" -> "<org.bson.BSON: boolean _anyHooks()>";
"<org.bson.util.ClassAncestry: void <clinit>()>" -> "<org.bson.util.CopyOnWriteMap: org.bson.util.CopyOnWriteMap newHashMap()>";
"<org.bson.util.ClassAncestry: java.util.List getAncestry(java.lang.Class)>" -> "<org.bson.util.ClassAncestry: void <clinit>()>";
"<org.bson.util.ClassAncestry: java.util.List getAncestry(java.lang.Class)>" -> "<org.bson.util.ClassAncestry: java.util.List computeAncestry(java.lang.Class)>";
"<org.bson.util.ClassAncestry: java.util.List getAncestry(java.lang.Class)>" -> "<org.bson.util.ClassAncestry: java.util.concurrent.ConcurrentMap getClassAncestryCache()>";
"<org.bson.BSON: boolean _anyHooks()>" -> "<org.bson.BSON: void <clinit>()>";
"<org.bson.util.ClassAncestry: java.util.List computeAncestry(java.lang.Class)>" -> "<org.bson.util.ClassAncestry: void <clinit>()>";
"<org.bson.util.ClassAncestry: java.util.List computeAncestry(java.lang.Class)>" -> "<java.util.Collections: java.util.List unmodifiableList(java.util.List)>";
"<org.bson.util.ClassAncestry: java.util.List computeAncestry(java.lang.Class)>" -> "<java.util.ArrayList: void <init>(java.util.Collection)>";
"<org.bson.util.ClassAncestry: java.util.List computeAncestry(java.lang.Class)>" -> "<java.util.Collections: void reverse(java.util.List)>";
"<org.bson.util.ClassAncestry: java.util.List computeAncestry(java.lang.Class)>" -> "<org.bson.util.ClassAncestry: void computeAncestry(java.lang.Class,java.util.List)>";
"<org.bson.util.ClassAncestry: java.util.List computeAncestry(java.lang.Class)>" -> "<java.util.ArrayList: void <init>()>";
"<org.bson.util.ClassAncestry: java.util.List computeAncestry(java.lang.Class)>" -> "<java.util.Collections: void <clinit>()>";
"<org.bson.util.ClassAncestry: java.util.concurrent.ConcurrentMap getClassAncestryCache()>" -> "<org.bson.util.ClassAncestry: void <clinit>()>";
"<java.util.Collections: java.util.List unmodifiableList(java.util.List)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: void <init>(java.util.Collection)>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Collections: void reverse(java.util.List)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.ClassAncestry: void computeAncestry(java.lang.Class,java.util.List)>" -> "<org.bson.util.ClassAncestry: void <clinit>()>";
"<org.bson.util.ClassAncestry: void computeAncestry(java.lang.Class,java.util.List)>" -> "<org.bson.util.ClassAncestry: void computeAncestry(java.lang.Class,java.util.List)>";
"<org.bson.util.ClassAncestry: void computeAncestry(java.lang.Class,java.util.List)>" -> "<org.bson.util.ClassAncestry: void computeAncestry(java.lang.Class,java.util.List)>";
"<org.bson.util.ClassAncestry: void computeAncestry(java.lang.Class,java.util.List)>" -> "<org.bson.util.ClassAncestry: void <clinit>()>";
"<org.bson.util.ClassAncestry: void computeAncestry(java.lang.Class,java.util.List)>" -> "<java.util.ArrayList: boolean contains(java.lang.Object)>";
"<org.bson.util.ClassAncestry: void computeAncestry(java.lang.Class,java.util.List)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: boolean contains(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.ClassAncestry: java.util.List computeAncestry(java.lang.Class)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.bson.util.ClassAncestry: java.util.List getAncestry(java.lang.Class)>" -> "<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object get(java.lang.Object)>";
"<org.bson.util.ClassAncestry: java.util.List getAncestry(java.lang.Class)>" -> "<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: java.util.Map copy()>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: void set(java.util.Map)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: void set(java.util.Map)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.util.Map copy()>" -> "<org.bson.util.CopyOnWriteMap$Hash: java.util.Map copy(java.util.Map)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.util.Map copy()>" -> "<java.util.concurrent.locks.ReentrantLock: void lock()>";
"<org.bson.util.AbstractCopyOnWriteMap: java.util.Map copy()>" -> "<java.util.concurrent.locks.ReentrantLock: void unlock()>";
"<org.bson.util.AbstractCopyOnWriteMap: java.util.Map copy()>" -> "<java.util.concurrent.locks.ReentrantLock: void unlock()>";
"<java.util.concurrent.locks.ReentrantLock: void lock()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.concurrent.locks.ReentrantLock: void unlock()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: boolean containsKey(java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object get(java.lang.Object)>";
"<java.util.HashMap: boolean containsKey(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: java.util.Map copy()>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: void set(java.util.Map)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: void set(java.util.Map)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.util.concurrent.locks.ReentrantLock: void lock()>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.util.concurrent.locks.ReentrantLock: void unlock()>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.util.concurrent.locks.ReentrantLock: void unlock()>";
"<org.bson.util.AbstractCopyOnWriteMap: boolean containsKey(java.lang.Object)>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: boolean containsKey(java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: boolean containsKey(java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<java.util.concurrent.locks.ReentrantLock: void lock()>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<java.util.concurrent.locks.ReentrantLock: void unlock()>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<java.util.concurrent.locks.ReentrantLock: void unlock()>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" -> "<java.util.concurrent.locks.ReentrantLock: void unlock()>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object get(java.lang.Object)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object get(java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object get(java.lang.Object)>";
"<org.bson.BSON: java.lang.Object applyEncodingHooks(java.lang.Object)>" -> "<org.bson.util.ClassMap: int size()>";
"<org.bson.BSON: java.lang.Object applyEncodingHooks(java.lang.Object)>" -> "<org.bson.util.ClassMap: java.lang.Object get(java.lang.Object)>";
"<org.bson.util.ClassMap: java.lang.Object get(java.lang.Object)>" -> "<org.bson.util.ComputingMap: java.lang.Object get(java.lang.Object)>";
"<org.bson.util.ComputingMap: java.lang.Object get(java.lang.Object)>" -> "<org.bson.util.ClassMap$ComputeFunction: java.lang.Object apply(java.lang.Object)>";
"<org.bson.util.ClassMap$ComputeFunction: java.lang.Object apply(java.lang.Object)>" -> "<org.bson.util.ClassMap$ComputeFunction: java.lang.Object apply(java.lang.Class)>";
"<org.bson.util.ClassMap$ComputeFunction: java.lang.Object apply(java.lang.Class)>" -> "<org.bson.util.ClassMap: java.util.List getAncestry(java.lang.Class)>";
"<org.bson.util.ClassMap$ComputeFunction: java.lang.Object apply(java.lang.Class)>" -> "<org.bson.util.ClassMap: java.util.Map access$000(org.bson.util.ClassMap)>";
"<org.bson.util.ClassMap$ComputeFunction: java.lang.Object apply(java.lang.Class)>" -> "<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object get(java.lang.Object)>";
"<org.bson.util.ComputingMap: java.lang.Object get(java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object get(java.lang.Object)>";
"<org.bson.util.ComputingMap: java.lang.Object get(java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
"<org.bson.util.ClassMap: int size()>" -> "<org.bson.util.AbstractCopyOnWriteMap: int size()>";
"<org.bson.util.AbstractCopyOnWriteMap: int size()>" -> "<java.util.HashMap: int size()>";
"<org.bson.util.AbstractCopyOnWriteMap: int size()>" -> "<org.bson.util.AbstractCopyOnWriteMap: int size()>";
"<java.util.HashMap: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<org.bson.util.ClassMap: java.lang.Object get(java.lang.Object)>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<org.bson.util.ClassMap: java.lang.Object get(java.lang.Object)>";
"<org.bson.util.ClassAncestry: void computeAncestry(java.lang.Class,java.util.List)>" -> "<java.lang.Class: java.lang.Class[] getInterfaces()>";
"<org.bson.util.ClassAncestry: void computeAncestry(java.lang.Class,java.util.List)>" -> "<java.lang.Class: java.lang.Class getSuperclass()>";
"<java.lang.Class: java.lang.Class[] getInterfaces()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Class: java.lang.Class getSuperclass()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<java.lang.Class: boolean isArray()>";
"<java.lang.Class: boolean isArray()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<org.bson.BasicBSONEncoder: void set(org.bson.io.OutputBuffer)>";
"<org.bson.BasicBSONEncoder: void set(org.bson.io.OutputBuffer)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.mongodb.OutMessage: void writeMessagePrologue(com.mongodb.OutMessage$OpCode)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.OutMessage: void writeMessagePrologue(com.mongodb.OutMessage$OpCode)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.OutMessage: void writeMessagePrologue(com.mongodb.OutMessage$OpCode)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.OutMessage: void writeMessagePrologue(com.mongodb.OutMessage$OpCode)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.OutMessage: void writeInsertPrologue(com.mongodb.WriteConcern)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.OutMessage: void writeInsertPrologue(com.mongodb.WriteConcern)>" -> "<org.bson.BasicBSONEncoder: void writeCString(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void writeCString(java.lang.String)>" -> "<org.bson.BasicBSONEncoder: int _put(java.lang.String)>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<java.lang.Character: int charCount(int)>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<java.lang.Character: int codePointAt(java.lang.CharSequence,int)>";
"<java.lang.Character: int charCount(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Character: int codePointAt(java.lang.CharSequence,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.JSON: java.lang.String serialize(java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.OutMessage: void writeMessagePrologue(com.mongodb.OutMessage$OpCode)>" -> "<com.mongodb.OutMessage$OpCode: int getValue()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DefaultDBEncoder$DefaultFactory: com.mongodb.DBEncoder create()>";
"<com.mongodb.OutMessage: void writeInsertPrologue(com.mongodb.WriteConcern)>" -> "<com.mongodb.WriteConcern: boolean getContinueOnErrorForInsert()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<com.mongodb.util.ClassMapBasedObjectSerializer: void serialize(java.lang.Object,java.lang.StringBuilder)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<org.bson.BSON: java.lang.Object applyEncodingHooks(java.lang.Object)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBCollection: java.lang.Object apply(com.mongodb.DBObject)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBCollection: com.mongodb.DBObject _checkObject(com.mongodb.DBObject,boolean,boolean)>";
"<com.mongodb.DBCollection: com.mongodb.DBObject _checkObject(com.mongodb.DBObject,boolean,boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.DBCollection: com.mongodb.DBObject _checkObject(com.mongodb.DBObject,boolean,boolean)>" -> "<com.mongodb.DBCollection: void _checkKeys(com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: com.mongodb.DBObject _checkObject(com.mongodb.DBObject,boolean,boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.DBCollection: void _checkKeys(com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: void validateKey(java.lang.String)>";
"<com.mongodb.DBCollection: void _checkKeys(com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: void _checkKeys(java.util.Map)>";
"<com.mongodb.DBCollection: void _checkKeys(com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: void _checkKeys(com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.DBCollection: void _checkKeys(java.util.Map)>" -> "<com.mongodb.DBCollection: void validateKey(java.lang.String)>";
"<com.mongodb.DBCollection: void _checkKeys(java.util.Map)>" -> "<com.mongodb.DBCollection: void _checkKeys(java.util.Map)>";
"<com.mongodb.DBCollection: void _checkKeys(java.util.Map)>" -> "<com.mongodb.DBCollection: void _checkKeys(com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject _checkObject(com.mongodb.DBObject,boolean,boolean)>" -> "<com.mongodb.BasicDBObject: boolean isPartialObject()>";
"<com.mongodb.DBCollection: void _checkKeys(com.mongodb.DBObject)>" -> "<java.util.LinkedHashMap: java.util.Set keySet()>";
"<com.mongodb.DBCollection: void _checkKeys(com.mongodb.DBObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.DBCollection: java.lang.Object apply(com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: java.lang.Object apply(com.mongodb.DBObject,boolean)>";
"<com.mongodb.DBCollection: java.lang.Object apply(com.mongodb.DBObject,boolean)>" -> "<org.bson.types.ObjectId: void <clinit>()>";
"<com.mongodb.DBCollection: java.lang.Object apply(com.mongodb.DBObject,boolean)>" -> "<org.bson.types.ObjectId: org.bson.types.ObjectId get()>";
"<org.bson.types.ObjectId: org.bson.types.ObjectId get()>" -> "<org.bson.types.ObjectId: void <clinit>()>";
"<org.bson.types.ObjectId: org.bson.types.ObjectId get()>" -> "<org.bson.types.ObjectId: void <init>()>";
"<com.mongodb.DBCollection: java.lang.Object apply(com.mongodb.DBObject,boolean)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.DBCollection: java.lang.Object apply(com.mongodb.DBObject,boolean)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBCollection: java.lang.Object apply(com.mongodb.DBObject,boolean)>" -> "<com.mongodb.DBApiLayer$MyCollection: void doapply(com.mongodb.DBObject)>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBCollection: com.mongodb.DB getDB()>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder)>" -> "<com.mongodb.DB: com.mongodb.Mongo getMongo()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.Mongo: int getMaxBsonObjectSize()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: com.mongodb.ReadPreference getReadPreference()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.QueryOpBuilder: void <init>()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.DBCollection: com.mongodb.DBDecoder getDecoder()>";
"<com.mongodb.QueryOpBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addQuery(com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addOrderBy(com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addReadPreference(com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<com.mongodb.QueryOpBuilder: void addToQueryObject(com.mongodb.DBObject,java.lang.String,java.lang.Object)>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<com.mongodb.QueryOpBuilder: void addToQueryObject(com.mongodb.DBObject,java.lang.String,java.lang.Object)>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<com.mongodb.QueryOpBuilder: void addToQueryObject(com.mongodb.DBObject,java.lang.String,com.mongodb.DBObject,boolean)>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<com.mongodb.QueryOpBuilder: void addToQueryObject(com.mongodb.DBObject,java.lang.String,com.mongodb.DBObject,boolean)>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<com.mongodb.QueryOpBuilder: boolean hasSpecialQueryFields()>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<java.lang.Boolean: void <clinit>()>";
"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.QueryOpBuilder: void addToQueryObject(com.mongodb.DBObject,java.lang.String,com.mongodb.DBObject,boolean)>" -> "<com.mongodb.QueryOpBuilder: void addToQueryObject(com.mongodb.DBObject,java.lang.String,java.lang.Object)>";
"<com.mongodb.QueryOpBuilder: void addToQueryObject(com.mongodb.DBObject,java.lang.String,com.mongodb.DBObject,boolean)>" -> "<java.util.LinkedHashMap: java.util.Set keySet()>";
"<com.mongodb.QueryOpBuilder: void addToQueryObject(com.mongodb.DBObject,java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.BasicDBObject: void markAsPartialObject()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.DBCollection: com.mongodb.DB getDB()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.DBCollection: int getOptions()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.DefaultDBEncoder: void <clinit>()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.DB: com.mongodb.Mongo getMongo()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.Mongo: boolean isMongosConnection()>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.DefaultDBEncoder$DefaultFactory: com.mongodb.DBEncoder create()>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer: void <clinit>()>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer$Result: void <init>(com.mongodb.DBApiLayer,com.mongodb.DBApiLayer$MyCollection,com.mongodb.Response,int,int,int,com.mongodb.DBDecoder)>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<com.mongodb.MongoException: com.mongodb.MongoException parse(org.bson.BSONObject)>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer: int chooseBatchSize(int,int,int)>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer: void trace(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<com.mongodb.util.JSON: java.lang.String serialize(java.lang.Object)>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer: boolean willTrace()>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<com.mongodb.DB: void <clinit>()>";
"<com.mongodb.DBApiLayer$Result: void <init>(com.mongodb.DBApiLayer,com.mongodb.DBApiLayer$MyCollection,com.mongodb.Response,int,int,int,com.mongodb.DBDecoder)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.DBApiLayer$Result: void <init>(com.mongodb.DBApiLayer,com.mongodb.DBApiLayer$MyCollection,com.mongodb.Response,int,int,int,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBApiLayer$Result$OptionalFinalizer: void <init>(com.mongodb.DBApiLayer$Result,com.mongodb.DBApiLayer$1)>";
"<com.mongodb.DBApiLayer$Result: void <init>(com.mongodb.DBApiLayer,com.mongodb.DBApiLayer$MyCollection,com.mongodb.Response,int,int,int,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBApiLayer$Result: void init(com.mongodb.Response)>";
"<com.mongodb.DBApiLayer$Result: void <init>(com.mongodb.DBApiLayer,com.mongodb.DBApiLayer$MyCollection,com.mongodb.Response,int,int,int,com.mongodb.DBDecoder)>" -> "<java.util.ArrayList: void <init>()>";
"<com.mongodb.MongoException: com.mongodb.MongoException parse(org.bson.BSONObject)>" -> "<com.mongodb.ServerError: java.lang.String getMsg(org.bson.BSONObject,java.lang.String)>";
"<com.mongodb.MongoException: com.mongodb.MongoException parse(org.bson.BSONObject)>" -> "<com.mongodb.MongoException: void <init>(int,java.lang.String)>";
"<com.mongodb.MongoException: com.mongodb.MongoException parse(org.bson.BSONObject)>" -> "<com.mongodb.ServerError: int getCode(org.bson.BSONObject)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<com.mongodb.OutMessage: void writeQuery(com.mongodb.DBObject,int,int)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>";
"<com.mongodb.DBApiLayer: int chooseBatchSize(int,int,int)>" -> "<java.lang.Math: int abs(int)>";
"<com.mongodb.DBApiLayer: int chooseBatchSize(int,int,int)>" -> "<java.lang.Math: int min(int,int)>";
"<com.mongodb.DBApiLayer$Result$OptionalFinalizer: void <init>(com.mongodb.DBApiLayer$Result,com.mongodb.DBApiLayer$1)>" -> "<com.mongodb.DBApiLayer$Result$OptionalFinalizer: void finalize()>";
"<com.mongodb.DBApiLayer$Result$OptionalFinalizer: void <init>(com.mongodb.DBApiLayer$Result,com.mongodb.DBApiLayer$1)>" -> "<com.mongodb.DBApiLayer$Result$OptionalFinalizer: void <init>(com.mongodb.DBApiLayer$Result)>";
"<com.mongodb.DBApiLayer$Result: void init(com.mongodb.Response)>" -> "<java.lang.Integer: void <clinit>()>";
"<com.mongodb.DBApiLayer$Result: void init(com.mongodb.Response)>" -> "<com.mongodb.MongoException$CursorNotFound: void <init>(long,com.mongodb.ServerAddress)>";
"<com.mongodb.DBApiLayer$Result: void init(com.mongodb.Response)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.MongoException: void <init>(int,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<com.mongodb.OutMessage$OpCode: void <clinit>()>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>";
"<java.lang.Math: int abs(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Math: int min(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBApiLayer$Result$OptionalFinalizer: void finalize()>" -> "<com.mongodb.DBApiLayer$DeadCursor: void <init>(long,com.mongodb.ServerAddress)>";
"<com.mongodb.DBApiLayer$Result$OptionalFinalizer: void <init>(com.mongodb.DBApiLayer$Result)>" -> "<com.mongodb.DBApiLayer$Result$OptionalFinalizer: void finalize()>";
"<com.mongodb.DBApiLayer$Result$OptionalFinalizer: void <init>(com.mongodb.DBApiLayer$Result)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.MongoException$CursorNotFound: void <init>(long,com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.MongoException$CursorNotFound: void <init>(long,com.mongodb.ServerAddress)>" -> "<com.mongodb.MongoException: void <init>(int,java.lang.String)>";
"<com.mongodb.DBApiLayer$DeadCursor: void <init>(long,com.mongodb.ServerAddress)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.MongoException$CursorNotFound: void <init>(long,com.mongodb.ServerAddress)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.OutMessage: void writeQuery(com.mongodb.DBObject,int,int)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.OutMessage: void writeQuery(com.mongodb.DBObject,int,int)>" -> "<org.bson.BasicBSONEncoder: void writeCString(java.lang.String)>";
"<com.mongodb.OutMessage: void writeQuery(com.mongodb.DBObject,int,int)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.OutMessage: void writeQuery(com.mongodb.DBObject,int,int)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.OutMessage: void writeQuery(com.mongodb.DBObject,int,int)>" -> "<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>";
"<com.mongodb.OutMessage: void writeQuery(com.mongodb.DBObject,int,int)>" -> "<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>";
"<com.mongodb.ServerError: int getCode(org.bson.BSONObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.ServerError: int getCode(org.bson.BSONObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.ServerError: int getCode(org.bson.BSONObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.ServerError: java.lang.String getMsg(org.bson.BSONObject,java.lang.String)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.ServerError: java.lang.String getMsg(org.bson.BSONObject,java.lang.String)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.ServerError: java.lang.String getMsg(org.bson.BSONObject,java.lang.String)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.DBApiLayer$Result: void init(com.mongodb.Response)>" -> "<com.mongodb.DBApiLayer$Result: void killCursor()>";
"<com.mongodb.DBApiLayer$Result: void killCursor()>" -> "<java.lang.Long: void <clinit>()>";
"<com.mongodb.DBApiLayer$Result: void killCursor()>" -> "<com.mongodb.DBApiLayer$DeadCursor: void <init>(long,com.mongodb.ServerAddress)>";
"<com.mongodb.DBApiLayer$Result: void killCursor()>" -> "<java.lang.Long: java.lang.Long valueOf(long)>";
"<com.mongodb.DBApiLayer$Result: void killCursor()>" -> "<java.util.ArrayList: void <init>()>";
"<com.mongodb.DBApiLayer$Result: void killCursor()>" -> "<java.util.logging.Level: void <clinit>()>";
"<com.mongodb.DBApiLayer$Result: void killCursor()>" -> "<org.bson.BSON: void <clinit>()>";
"<com.mongodb.DBApiLayer$Result: void killCursor()>" -> "<com.mongodb.Bytes: void <clinit>()>";
"<com.mongodb.DBApiLayer$Result: void killCursor()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<com.mongodb.DBApiLayer$Result: void init(com.mongodb.Response)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<com.mongodb.DBCollection: com.mongodb.DB getDB()>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<com.mongodb.DB: com.mongodb.Mongo getMongo()>";
"<com.mongodb.DBApiLayer$Result: void <init>(com.mongodb.DBApiLayer,com.mongodb.DBApiLayer$MyCollection,com.mongodb.Response,int,int,int,com.mongodb.DBDecoder)>" -> "<com.mongodb.Mongo: com.mongodb.MongoOptions getMongoOptions()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.DBApiLayer$Result: boolean hasNext()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.DBApiLayer$Result: com.mongodb.DBObject next()>";
"<com.mongodb.DBApiLayer$Result: boolean hasNext()>" -> "<com.mongodb.DBApiLayer$Result: void _advance()>";
"<com.mongodb.DBApiLayer$Result: boolean hasNext()>" -> "<com.mongodb.MongoInterruptedException: void <init>(java.lang.InterruptedException)>";
"<com.mongodb.DBApiLayer$Result: boolean hasNext()>" -> "<java.lang.Thread: void sleep(long)>";
"<com.mongodb.DBApiLayer$Result: com.mongodb.DBObject next()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBApiLayer$Result: com.mongodb.DBObject next()>" -> "<com.mongodb.DBApiLayer$Result: void _advance()>";
"<com.mongodb.DBApiLayer$Result: void _advance()>" -> "<com.mongodb.DBApiLayer: void <clinit>()>";
"<com.mongodb.DBApiLayer$Result: void _advance()>" -> "<com.mongodb.DBApiLayer$Result: void init(com.mongodb.Response)>";
"<com.mongodb.DBApiLayer$Result: void _advance()>" -> "<com.mongodb.OutMessage: com.mongodb.OutMessage getMore(com.mongodb.DBCollection,long,int)>";
"<com.mongodb.DBApiLayer$Result: void _advance()>" -> "<com.mongodb.DBApiLayer: int chooseBatchSize(int,int,int)>";
"<com.mongodb.DBApiLayer$Result: void _advance()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBApiLayer$Result: void _advance()>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.DBApiLayer$Result: void _advance()>" -> "<com.mongodb.DB: void <clinit>()>";
"<com.mongodb.MongoInterruptedException: void <init>(java.lang.InterruptedException)>" -> "<com.mongodb.MongoException: void <init>(java.lang.String,java.lang.Throwable)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage getMore(com.mongodb.DBCollection,long,int)>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage getMore(com.mongodb.DBCollection,long,int)>" -> "<com.mongodb.OutMessage: void writeGetMore(long,int)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage getMore(com.mongodb.DBCollection,long,int)>" -> "<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.OutMessage$OpCode)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage getMore(com.mongodb.DBCollection,long,int)>" -> "<com.mongodb.OutMessage$OpCode: void <clinit>()>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.OutMessage$OpCode)>" -> "<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder)>";
"<com.mongodb.OutMessage: void writeGetMore(long,int)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.OutMessage: void writeGetMore(long,int)>" -> "<org.bson.BasicBSONEncoder: void writeCString(java.lang.String)>";
"<com.mongodb.OutMessage: void writeGetMore(long,int)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.OutMessage: void writeGetMore(long,int)>" -> "<org.bson.BasicBSONEncoder: void writeLong(long)>";
"<com.mongodb.DBApiLayer$Result: com.mongodb.DBObject next()>" -> "<com.mongodb.DBApiLayer$Result: com.mongodb.DBObject next()>";
"<com.mongodb.DBCollection: int getOptions()>" -> "<com.mongodb.Bytes$OptionHolder: int get()>";
"<com.mongodb.Bytes$OptionHolder: int get()>" -> "<com.mongodb.Bytes$OptionHolder: int get()>";
"<com.mongodb.DBCollection: com.mongodb.DBDecoder getDecoder()>" -> "<com.mongodb.DBCollection: com.mongodb.DBDecoderFactory getDBDecoderFactory()>";
"<com.mongodb.DBCollection: com.mongodb.DBDecoder getDecoder()>" -> "<com.mongodb.DBCollection: com.mongodb.DBDecoderFactory getDBDecoderFactory()>";
"<com.mongodb.DBCollection: com.mongodb.ReadPreference getReadPreference()>" -> "<com.mongodb.DB: com.mongodb.ReadPreference getReadPreference()>";
"<com.mongodb.DB: com.mongodb.ReadPreference getReadPreference()>" -> "<com.mongodb.Mongo: com.mongodb.ReadPreference getReadPreference()>";
"<com.mongodb.DBApiLayer$MyCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer: com.mongodb.DBApiLayer$MyCollection doGetCollection(java.lang.String)>";
"<com.mongodb.DBCollection: com.mongodb.DBEncoder getDBEncoder()>" -> "<com.mongodb.DBCollection: com.mongodb.DBEncoderFactory getDBEncoderFactory()>";
"<com.mongodb.DBCollection: com.mongodb.DBEncoder getDBEncoder()>" -> "<com.mongodb.DBCollection: com.mongodb.DBEncoderFactory getDBEncoderFactory()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject defaultOptions(com.mongodb.DBObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBCollection: com.mongodb.DBObject defaultOptions(com.mongodb.DBObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<java.util.HashSet: boolean contains(java.lang.Object)>";
"<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: com.mongodb.DBObject defaultOptions(com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<java.util.LinkedHashMap: java.util.Set keySet()>";
"<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.DBCollection: long count()>" -> "<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long)>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long)>" -> "<com.mongodb.DBCollection: com.mongodb.ReadPreference getReadPreference()>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long)>" -> "<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<java.lang.Long: void <clinit>()>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<java.lang.Long: java.lang.Long valueOf(long)>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<java.lang.Long: java.lang.Long valueOf(long)>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<java.lang.Long: void <clinit>()>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<com.mongodb.DBCollection: java.lang.String getName()>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<com.mongodb.DBCollection: int getOptions()>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference)>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<com.mongodb.DefaultDBEncoder: void <clinit>()>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<com.mongodb.DefaultDBEncoder$DefaultFactory: com.mongodb.DBEncoder create()>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<com.mongodb.DefaultDBDecoder: void <clinit>()>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<com.mongodb.CommandResult: void <init>(com.mongodb.DBObject,com.mongodb.ServerAddress)>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<com.mongodb.CommandResult: void <init>(com.mongodb.DBObject,com.mongodb.ServerAddress)>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<com.mongodb.CommandResult: void <init>(com.mongodb.DBObject,com.mongodb.ServerAddress)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.CommandResult: void <init>(com.mongodb.DBObject,com.mongodb.ServerAddress)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<org.bson.BasicBSONObject: void putAll(org.bson.BSONObject)>";
"<org.bson.BasicBSONObject: void putAll(org.bson.BSONObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<com.mongodb.DefaultDBDecoder$DefaultFactory: com.mongodb.DBDecoder create()>";
"<com.mongodb.DefaultDBDecoder$DefaultFactory: com.mongodb.DBDecoder create()>" -> "<com.mongodb.DefaultDBDecoder: void <clinit>()>";
"<com.mongodb.DefaultDBDecoder$DefaultFactory: com.mongodb.DBDecoder create()>" -> "<com.mongodb.DefaultDBDecoder: void <init>()>";
"<com.mongodb.DefaultDBDecoder$DefaultFactory: com.mongodb.DBDecoder create()>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<com.mongodb.DefaultDBDecoder: void <init>()>" -> "<org.bson.BasicBSONDecoder: void <init>()>";
"<org.bson.BasicBSONDecoder: void <init>()>" -> "<org.bson.io.PoolOutputBuffer: void <clinit>()>";
"<org.bson.BasicBSONDecoder: void <init>()>" -> "<org.bson.io.PoolOutputBuffer: void <init>()>";
"<org.bson.BasicBSONDecoder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.bson.io.PoolOutputBuffer: void <clinit>()>" -> "<org.bson.io.PoolOutputBuffer$1: void <init>(int)>";
"<org.bson.io.PoolOutputBuffer: void <init>()>" -> "<org.bson.io.OutputBuffer: void <init>()>";
"<org.bson.io.PoolOutputBuffer: void <init>()>" -> "<org.bson.io.PoolOutputBuffer$Position: void <init>()>";
"<org.bson.io.PoolOutputBuffer: void <init>()>" -> "<org.bson.io.PoolOutputBuffer$Position: void <init>()>";
"<org.bson.io.PoolOutputBuffer: void <init>()>" -> "<org.bson.io.UTF8Encoding: void <init>()>";
"<org.bson.io.PoolOutputBuffer: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<org.bson.io.PoolOutputBuffer$1: void <init>(int)>" -> "<org.bson.util.SimplePool: void <init>(int)>";
"<org.bson.io.OutputBuffer: void <init>()>" -> "<java.io.OutputStream: void <init>()>";
"<org.bson.io.PoolOutputBuffer$Position: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.bson.io.UTF8Encoding: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.io.PoolOutputBuffer$Position: void <init>()>" -> "<org.bson.io.PoolOutputBuffer$Position: void reset()>";
"<org.bson.io.PoolOutputBuffer: void <init>()>" -> "<org.bson.io.PoolOutputBuffer: void reset()>";
"<org.bson.io.PoolOutputBuffer: void reset()>" -> "<org.bson.io.PoolOutputBuffer: void <clinit>()>";
"<org.bson.io.PoolOutputBuffer: void reset()>" -> "<org.bson.util.SimplePool: void done(java.lang.Object)>";
"<org.bson.util.SimplePool: void done(java.lang.Object)>" -> "<org.bson.util.SimplePool: boolean ok(java.lang.Object)>";
"<org.bson.io.PoolOutputBuffer: void reset()>" -> "<java.util.ArrayList: int size()>";
"<org.bson.io.PoolOutputBuffer: void reset()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.bson.io.PoolOutputBuffer: void reset()>" -> "<java.util.ArrayList: void clear()>";
"<java.util.ArrayList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.io.PoolOutputBuffer: void reset()>" -> "<org.bson.io.PoolOutputBuffer$Position: void reset()>";
"<org.bson.io.PoolOutputBuffer: void reset()>" -> "<org.bson.io.PoolOutputBuffer$Position: void reset()>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<com.mongodb.DB: com.mongodb.ReadPreference getCommandReadPreference(com.mongodb.DBObject,com.mongodb.ReadPreference)>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>";
"<com.mongodb.DB: com.mongodb.ReadPreference getCommandReadPreference(com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.ReadPreference: void <clinit>()>";
"<com.mongodb.DB: com.mongodb.ReadPreference getCommandReadPreference(com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.ReadPreference: com.mongodb.ReadPreference primary()>";
"<com.mongodb.DB: com.mongodb.ReadPreference getCommandReadPreference(com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.ReadPreference: com.mongodb.ReadPreference primaryPreferred()>";
"<com.mongodb.DB: com.mongodb.ReadPreference getCommandReadPreference(com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.DB: void <clinit>()>";
"<com.mongodb.DB: com.mongodb.ReadPreference getCommandReadPreference(com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.ReadPreference: void <clinit>()>";
"<com.mongodb.ReadPreference: com.mongodb.ReadPreference primaryPreferred()>" -> "<com.mongodb.ReadPreference: void <clinit>()>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>";
"<com.mongodb.DB: com.mongodb.ReadPreference getCommandReadPreference(com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<com.mongodb.DB: com.mongodb.ReadPreference getCommandReadPreference(com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<java.util.HashSet: boolean contains(java.lang.Object)>";
"<com.mongodb.DB: com.mongodb.ReadPreference getCommandReadPreference(com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<java.util.LinkedHashMap: java.util.Set keySet()>";
"<com.mongodb.DB: com.mongodb.ReadPreference getCommandReadPreference(com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer$Result: boolean hasNext()>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer$Result: com.mongodb.DBObject next()>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer$Result: com.mongodb.ServerAddress getServerAddress()>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<com.mongodb.CommandResult: boolean ok()>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<com.mongodb.CommandResult: java.lang.String getErrorMessage()>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<com.mongodb.CommandResult: void throwOnError()>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<org.bson.BasicBSONObject: long getLong(java.lang.String)>";
"<com.mongodb.CommandResult: boolean ok()>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.CommandResult: boolean ok()>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.CommandResult: boolean ok()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.BasicBSONObject: long getLong(java.lang.String)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.CommandResult: void throwOnError()>" -> "<com.mongodb.CommandResult: boolean ok()>";
"<com.mongodb.CommandResult: void throwOnError()>" -> "<com.mongodb.CommandResult: boolean hasErr()>";
"<com.mongodb.CommandResult: void throwOnError()>" -> "<com.mongodb.CommandResult: com.mongodb.MongoException getException()>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<com.mongodb.MongoException: void <init>(int,java.lang.String)>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<com.mongodb.MongoException$DuplicateKey: void <init>(int,java.lang.String)>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<com.mongodb.CommandResult: int getCode()>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<com.mongodb.CommandResult$CommandFailure: void <init>(com.mongodb.CommandResult,java.lang.String)>";
"<com.mongodb.MongoException$DuplicateKey: void <init>(int,java.lang.String)>" -> "<com.mongodb.MongoException: void <init>(int,java.lang.String)>";
"<com.mongodb.CommandResult$CommandFailure: void <init>(com.mongodb.CommandResult,java.lang.String)>" -> "<com.mongodb.ServerError: int getCode(org.bson.BSONObject)>";
"<com.mongodb.CommandResult$CommandFailure: void <init>(com.mongodb.CommandResult,java.lang.String)>" -> "<com.mongodb.MongoException: void <init>(int,java.lang.String)>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<com.mongodb.CommandResult: boolean ok()>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<com.mongodb.BasicDBObject: java.lang.String toString()>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<com.mongodb.CommandResult: boolean hasErr()>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.BasicDBObject: java.lang.String toString()>" -> "<com.mongodb.util.JSON: java.lang.String serialize(java.lang.Object)>";
"<com.mongodb.CommandResult: int getCode()>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.CommandResult: int getCode()>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.CommandResult: com.mongodb.MongoException getException()>" -> "<java.util.LinkedHashMap: java.util.Set keySet()>";
"<com.mongodb.CommandResult: boolean hasErr()>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.CommandResult: java.lang.String getErrorMessage()>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.CommandResult: boolean ok()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.CommandResult: boolean ok()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.CommandResult: boolean ok()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.CommandResult: boolean ok()>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<com.mongodb.ReadPreference$PrimaryReadPreference: boolean isSlaveOk()>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<com.mongodb.TaggableReadPreference: boolean isSlaveOk()>";
"<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.Mongo: void _applyMongoOptions()>";
"<com.mongodb.Mongo: void _applyMongoOptions()>" -> "<com.mongodb.Mongo: void slaveOk()>";
"<com.mongodb.Mongo: void _applyMongoOptions()>" -> "<com.mongodb.Mongo: void setReadPreference(com.mongodb.ReadPreference)>";
"<com.mongodb.Mongo: void _applyMongoOptions()>" -> "<com.mongodb.Mongo: void setWriteConcern(com.mongodb.WriteConcern)>";
"<com.mongodb.Mongo: void slaveOk()>" -> "<com.mongodb.Mongo: void addOption(int)>";
"<com.mongodb.Mongo: void addOption(int)>" -> "<com.mongodb.Bytes$OptionHolder: void add(int)>";
"<com.mongodb.Bytes$OptionHolder: void add(int)>" -> "<com.mongodb.Bytes$OptionHolder: int get()>";
"<com.mongodb.Bytes$OptionHolder: void add(int)>" -> "<com.mongodb.Bytes$OptionHolder: void set(int)>";
"<com.mongodb.Mongo: void _applyMongoOptions()>" -> "<com.mongodb.MongoOptions: com.mongodb.ReadPreference getReadPreference()>";
"<com.mongodb.Mongo: void _applyMongoOptions()>" -> "<com.mongodb.MongoOptions: com.mongodb.ReadPreference getReadPreference()>";
"<com.mongodb.Mongo: void _applyMongoOptions()>" -> "<com.mongodb.MongoOptions: com.mongodb.WriteConcern getWriteConcern()>";
"<com.mongodb.MongoOptions: com.mongodb.WriteConcern getWriteConcern()>" -> "<com.mongodb.WriteConcern: void <clinit>()>";
"<com.mongodb.MongoOptions: com.mongodb.WriteConcern getWriteConcern()>" -> "<com.mongodb.WriteConcern: void <init>(int,int,boolean)>";
"<com.mongodb.MongoOptions: com.mongodb.WriteConcern getWriteConcern()>" -> "<com.mongodb.WriteConcern: void <clinit>()>";
"<com.mongodb.MongoOptions: com.mongodb.WriteConcern getWriteConcern()>" -> "<com.mongodb.WriteConcern: void <clinit>()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.security.DigestInputStream: int read()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.io.FilterInputStream: int read(byte[])>";
"<java.security.DigestInputStream: int read()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FilterInputStream: int read(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>" -> "<java.lang.String: java.lang.String trim()>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>" -> "<java.lang.String: java.lang.String trim()>";
"<java.lang.String: java.lang.String trim()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: int indexOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.SimplePool: void done(java.lang.Object)>" -> "<java.util.concurrent.ConcurrentLinkedQueue: int size()>";
"<org.bson.util.SimplePool: void done(java.lang.Object)>" -> "<java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>";
"<java.util.concurrent.ConcurrentLinkedQueue: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long,com.mongodb.ReadPreference)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.OutMessage: void writeGetMore(long,int)>" -> "<com.mongodb.DBCollection: java.lang.String getFullName()>";
"<com.mongodb.DBApiLayer$Result: void <init>(com.mongodb.DBApiLayer,com.mongodb.DBApiLayer$MyCollection,com.mongodb.Response,int,int,int,com.mongodb.DBDecoder)>" -> "<com.mongodb.MongoOptions: boolean isCursorFinalizerEnabled()>";
"<com.mongodb.DBApiLayer$Result: void killCursor()>" -> "<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<com.mongodb.OutMessage: com.mongodb.OutMessage killCursors(com.mongodb.Mongo,int)>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<java.lang.Math: int min(int,int)>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<com.mongodb.OutMessage: com.mongodb.OutMessage killCursors(com.mongodb.Mongo,int)>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<java.lang.Math: int min(int,int)>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<com.mongodb.WriteConcern: void <clinit>()>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<com.mongodb.WriteConcern: void <clinit>()>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage killCursors(com.mongodb.Mongo,int)>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage killCursors(com.mongodb.Mongo,int)>" -> "<com.mongodb.OutMessage: void writeKillCursorsPrologue(int)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage killCursors(com.mongodb.Mongo,int)>" -> "<com.mongodb.OutMessage: void <init>(com.mongodb.Mongo,com.mongodb.OutMessage$OpCode)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage killCursors(com.mongodb.Mongo,int)>" -> "<com.mongodb.OutMessage$OpCode: void <clinit>()>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.Mongo,com.mongodb.OutMessage$OpCode)>" -> "<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder)>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<org.bson.BasicBSONEncoder: void writeLong(long)>";
"<com.mongodb.OutMessage: void writeKillCursorsPrologue(int)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.OutMessage: void writeKillCursorsPrologue(int)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<java.util.ArrayList: int size()>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<java.util.ArrayList: int size()>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<java.util.ArrayList: int size()>";
"<java.util.ArrayList: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBApiLayer$Result: void killCursor()>" -> "<java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>";
"<com.mongodb.DBApiLayer$Result$OptionalFinalizer: void finalize()>" -> "<java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>";
"<com.mongodb.OutMessage: void writeQuery(com.mongodb.DBObject,int,int)>" -> "<com.mongodb.DBCollection: java.lang.String getFullName()>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.Mongo: boolean isMongosConnection()>" -> "<com.mongodb.DBTCPConnector: boolean isMongosConnection()>";
"<com.mongodb.DBTCPConnector: boolean isMongosConnection()>" -> "<com.mongodb.DBTCPConnector: void initDirectConnection()>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<java.lang.Integer: void <clinit>()>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<java.util.logging.Level: void <clinit>()>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<com.mongodb.DBTCPConnector: void <clinit>()>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<com.mongodb.Mongo: com.mongodb.DB getDB(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<com.mongodb.DBPortPool: com.mongodb.DBPort get()>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<com.mongodb.util.SimplePool: void done(java.lang.Object)>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<com.mongodb.util.SimplePool: void done(java.lang.Object)>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<com.mongodb.util.SimplePool: void done(java.lang.Object)>";
"<com.mongodb.DBPortPool: com.mongodb.DBPort get()>" -> "<java.lang.System: void <clinit>()>";
"<com.mongodb.DBPortPool: com.mongodb.DBPort get()>" -> "<java.lang.System: int identityHashCode(java.lang.Object)>";
"<com.mongodb.DBPortPool: com.mongodb.DBPort get()>" -> "<java.lang.Thread: java.lang.Thread currentThread()>";
"<com.mongodb.DBPortPool: com.mongodb.DBPort get()>" -> "<com.mongodb.MongoInterruptedException: void <init>(java.lang.InterruptedException)>";
"<com.mongodb.DBPortPool: com.mongodb.DBPort get()>" -> "<com.mongodb.DBPortPool$ConnectionWaitTimeOut: void <init>(int)>";
"<com.mongodb.DBPortPool: com.mongodb.DBPort get()>" -> "<com.mongodb.DBPortPool$SemaphoresOut: void <init>()>";
"<com.mongodb.util.SimplePool: void done(java.lang.Object)>" -> "<com.mongodb.util.SimplePool: void assertConditions()>";
"<com.mongodb.util.SimplePool: void done(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBPortPool$ConnectionWaitTimeOut: void <init>(int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBPortPool$ConnectionWaitTimeOut: void <init>(int)>" -> "<com.mongodb.DBPortPool$NoMoreConnection: void <init>(java.lang.String)>";
"<com.mongodb.DBPortPool$SemaphoresOut: void <init>()>" -> "<com.mongodb.DBPortPool$NoMoreConnection: void <init>(java.lang.String)>";
"<com.mongodb.util.SimplePool: void assertConditions()>" -> "<com.mongodb.util.SimplePool: void <clinit>()>";
"<com.mongodb.util.SimplePool: void assertConditions()>" -> "<java.lang.AssertionError: void <init>()>";
"<com.mongodb.DBPortPool$NoMoreConnection: void <init>(java.lang.String)>" -> "<com.mongodb.MongoInternalException: void <init>(java.lang.String)>";
"<java.lang.AssertionError: void <init>()>" -> "<java.lang.Error: void <init>()>";
"<java.lang.AssertionError: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Error: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBPortPool$ConnectionWaitTimeOut: void <init>(int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool$ConnectionWaitTimeOut: void <init>(int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.mongodb.DBPortPool$ConnectionWaitTimeOut: void <init>(int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPortPool$ConnectionWaitTimeOut: void <init>(int)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.util.SimplePool: void done(java.lang.Object)>" -> "<com.mongodb.DBPortPool: void cleanup(java.lang.Object)>";
"<com.mongodb.DBPortPool: void cleanup(java.lang.Object)>" -> "<com.mongodb.DBPortPool: void cleanup(com.mongodb.DBPort)>";
"<com.mongodb.util.SimplePool: void assertConditions()>" -> "<com.mongodb.util.SimplePool: int getTotal()>";
"<com.mongodb.util.SimplePool: void assertConditions()>" -> "<com.mongodb.util.SimplePool: int getMaxSize()>";
"<com.mongodb.util.SimplePool: int getTotal()>" -> "<java.util.HashSet: int size()>";
"<java.util.HashSet: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.SimplePool: int getTotal()>" -> "<java.util.ArrayList: int size()>";
"<com.mongodb.util.SimplePool: void done(java.lang.Object)>" -> "<java.util.concurrent.Semaphore: void release()>";
"<java.util.concurrent.Semaphore: void release()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.SimplePool: void done(java.lang.Object)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<com.mongodb.util.SimplePool: void done(java.lang.Object)>" -> "<java.util.HashSet: boolean remove(java.lang.Object)>";
"<java.util.HashSet: boolean remove(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBPortPool: com.mongodb.DBPort get()>" -> "<com.mongodb.util.SimplePool: java.lang.Object get(long)>";
"<com.mongodb.util.SimplePool: java.lang.Object get(long)>" -> "<com.mongodb.util.SimplePool: boolean permitAcquired(long)>";
"<com.mongodb.util.SimplePool: java.lang.Object get(long)>" -> "<com.mongodb.util.SimplePool: java.lang.Object createNewAndReleasePermitIfFailure()>";
"<com.mongodb.util.SimplePool: java.lang.Object get(long)>" -> "<com.mongodb.util.SimplePool: void assertConditions()>";
"<com.mongodb.util.SimplePool: boolean permitAcquired(long)>" -> "<java.util.concurrent.TimeUnit: void <clinit>()>";
"<com.mongodb.util.SimplePool: java.lang.Object createNewAndReleasePermitIfFailure()>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] $values()>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <clinit>()>" -> "<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] $values()>" -> "<java.util.concurrent.TimeUnit: void <clinit>()>";
"<com.mongodb.util.SimplePool: java.lang.Object get(long)>" -> "<com.mongodb.util.SimplePool: int getTotal()>";
"<com.mongodb.util.SimplePool: java.lang.Object get(long)>" -> "<com.mongodb.util.SimplePool: int getMaxSize()>";
"<com.mongodb.util.SimplePool: java.lang.Object get(long)>" -> "<com.mongodb.DBPortPool: int pick(int,boolean)>";
"<com.mongodb.DBPortPool: int pick(int,boolean)>" -> "<java.lang.System: void <clinit>()>";
"<com.mongodb.DBPortPool: int pick(int,boolean)>" -> "<java.lang.System: int identityHashCode(java.lang.Object)>";
"<com.mongodb.DBPortPool: int pick(int,boolean)>" -> "<java.lang.Thread: java.lang.Thread currentThread()>";
"<com.mongodb.DBPortPool: int pick(int,boolean)>" -> "<java.util.ArrayList: int size()>";
"<com.mongodb.DBPortPool: int pick(int,boolean)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<com.mongodb.util.SimplePool: java.lang.Object createNewAndReleasePermitIfFailure()>" -> "<com.mongodb.DBPortPool: com.mongodb.DBPort createNew()>";
"<com.mongodb.DBPortPool: com.mongodb.DBPort createNew()>" -> "<com.mongodb.DBPort: void <clinit>()>";
"<com.mongodb.DBPortPool: com.mongodb.DBPort createNew()>" -> "<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>";
"<com.mongodb.DBPort: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<com.mongodb.DBPort: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<com.mongodb.DBPort: void finalize()>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<java.util.concurrent.ConcurrentHashMap: void <init>()>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<java.util.logging.Logger: void <clinit>()>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<com.mongodb.DBPort: void <clinit>()>";
"<com.mongodb.DBPort: void finalize()>" -> "<java.lang.Object: void finalize()>";
"<com.mongodb.DBPort: void finalize()>" -> "<com.mongodb.DBPort: void close()>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<com.mongodb.ServerAddress: java.net.InetSocketAddress getSocketAddress()>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<com.mongodb.ServerAddress: java.lang.String toString()>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<java.net.InetSocketAddress: int hashCode()>";
"<java.net.InetSocketAddress: int hashCode()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.SimplePool: java.lang.Object createNewAndReleasePermitIfFailure()>" -> "<java.util.concurrent.Semaphore: void release()>";
"<com.mongodb.util.SimplePool: java.lang.Object createNewAndReleasePermitIfFailure()>" -> "<java.util.concurrent.Semaphore: void release()>";
"<com.mongodb.util.SimplePool: boolean permitAcquired(long)>" -> "<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>";
"<com.mongodb.util.SimplePool: boolean permitAcquired(long)>" -> "<java.util.concurrent.Semaphore: void acquire()>";
"<com.mongodb.util.SimplePool: boolean permitAcquired(long)>" -> "<java.util.concurrent.Semaphore: boolean tryAcquire()>";
"<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.concurrent.Semaphore: void acquire()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.concurrent.Semaphore: boolean tryAcquire()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.SimplePool: java.lang.Object get(long)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<com.mongodb.util.SimplePool: java.lang.Object get(long)>" -> "<java.util.ArrayList: int size()>";
"<com.mongodb.util.SimplePool: java.lang.Object get(long)>" -> "<java.util.ArrayList: java.lang.Object remove(int)>";
"<java.util.ArrayList: java.lang.Object remove(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBPortPool: com.mongodb.DBPort get()>" -> "<java.util.concurrent.Semaphore: boolean tryAcquire()>";
"<com.mongodb.DBPortPool: com.mongodb.DBPort get()>" -> "<java.util.concurrent.Semaphore: void release()>";
"<com.mongodb.DBPortPool: com.mongodb.DBPort get()>" -> "<java.util.concurrent.Semaphore: void release()>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<com.mongodb.DBPort: com.mongodb.CommandResult runCommand(com.mongodb.DB,com.mongodb.DBObject)>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<com.mongodb.DBPort: com.mongodb.DBPortPool getPool()>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<com.mongodb.DBPort: com.mongodb.ServerAddress serverAddress()>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<com.mongodb.DBPort: com.mongodb.DBPortPool getPool()>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<com.mongodb.DBPort: com.mongodb.DBPortPool getPool()>";
"<com.mongodb.DBPort: com.mongodb.CommandResult runCommand(com.mongodb.DB,com.mongodb.DBObject)>" -> "<com.mongodb.DBPort: com.mongodb.Response findOne(com.mongodb.DB,java.lang.String,com.mongodb.DBObject)>";
"<com.mongodb.DBPort: com.mongodb.CommandResult runCommand(com.mongodb.DB,com.mongodb.DBObject)>" -> "<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>";
"<com.mongodb.DBPort: com.mongodb.Response findOne(com.mongodb.DB,java.lang.String,com.mongodb.DBObject)>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.DBPort: com.mongodb.Response findOne(com.mongodb.DB,java.lang.String,com.mongodb.DBObject)>" -> "<com.mongodb.DBPort: com.mongodb.Response go(com.mongodb.OutMessage,com.mongodb.DBCollection,com.mongodb.DBDecoder)>";
"<com.mongodb.DBPort: com.mongodb.Response findOne(com.mongodb.DB,java.lang.String,com.mongodb.DBObject)>" -> "<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject)>";
"<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>" -> "<com.mongodb.CommandResult: void <init>(com.mongodb.DBObject,com.mongodb.ServerAddress)>";
"<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>" -> "<com.mongodb.MongoInternalException: void <init>(java.lang.String)>";
"<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>" -> "<com.mongodb.MongoInternalException: void <init>(java.lang.String)>";
"<com.mongodb.DBPort: com.mongodb.Response go(com.mongodb.OutMessage,com.mongodb.DBCollection,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBPort: com.mongodb.Response go(com.mongodb.OutMessage,com.mongodb.DBCollection,boolean,com.mongodb.DBDecoder)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.ReadPreference: void <clinit>()>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.ReadPreference: com.mongodb.ReadPreference primary()>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.DBPort: com.mongodb.Response go(com.mongodb.OutMessage,com.mongodb.DBCollection,boolean,com.mongodb.DBDecoder)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.mongodb.DBPort: com.mongodb.Response go(com.mongodb.OutMessage,com.mongodb.DBCollection,boolean,com.mongodb.DBDecoder)>" -> "<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>";
"<com.mongodb.DBPort: com.mongodb.Response go(com.mongodb.OutMessage,com.mongodb.DBCollection,boolean,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBPort$ActiveState: void <init>(com.mongodb.DBPort,com.mongodb.OutMessage)>";
"<com.mongodb.DBPort: com.mongodb.Response go(com.mongodb.OutMessage,com.mongodb.DBCollection,boolean,com.mongodb.DBDecoder)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.DefaultDBEncoder: void <clinit>()>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference,com.mongodb.DBEncoder)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<com.mongodb.Response$MyInputStream: int access$000(com.mongodb.Response$MyInputStream)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<com.mongodb.Response$MyInputStream: int access$000(com.mongodb.Response$MyInputStream)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.util.ArrayList: void <init>(int)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<com.mongodb.Response$MyInputStream: int access$000(com.mongodb.Response$MyInputStream)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<com.mongodb.Response$MyInputStream: int access$000(com.mongodb.Response$MyInputStream)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.util.LinkedList: void <init>()>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<com.mongodb.Response$MyInputStream: void <init>(java.io.InputStream,int)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<org.bson.io.Bits: int readInt(byte[],int)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<org.bson.io.Bits: int readInt(byte[],int)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<org.bson.io.Bits: long readLong(byte[],int)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<org.bson.io.Bits: int readInt(byte[],int)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<org.bson.io.Bits: int readInt(byte[],int)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<org.bson.io.Bits: int readInt(byte[],int)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<org.bson.io.Bits: int readInt(byte[],int)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<org.bson.io.Bits: int readInt(byte[],int)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<org.bson.io.Bits: void readFully(java.io.InputStream,byte[])>";
"<com.mongodb.DBPort$ActiveState: void <init>(com.mongodb.DBPort,com.mongodb.OutMessage)>" -> "<java.lang.System: void <clinit>()>";
"<com.mongodb.DBPort$ActiveState: void <init>(com.mongodb.DBPort,com.mongodb.OutMessage)>" -> "<java.lang.Thread: java.lang.Thread currentThread()>";
"<com.mongodb.DBPort$ActiveState: void <init>(com.mongodb.DBPort,com.mongodb.OutMessage)>" -> "<java.lang.System: long nanoTime()>";
"<com.mongodb.DBPort$ActiveState: void <init>(com.mongodb.DBPort,com.mongodb.OutMessage)>" -> "<java.lang.Object: void <init>()>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.Response$MyInputStream: void <init>(java.io.InputStream,int)>" -> "<java.io.InputStream: void <init>()>";
"<org.bson.io.Bits: void readFully(java.io.InputStream,byte[])>" -> "<org.bson.io.Bits: void readFully(java.io.InputStream,byte[],int)>";
"<org.bson.io.Bits: void readFully(java.io.InputStream,byte[],int)>" -> "<org.bson.io.Bits: void readFully(java.io.InputStream,byte[],int,int)>";
"<org.bson.io.Bits: void readFully(java.io.InputStream,byte[],int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.io.Bits: void readFully(java.io.InputStream,byte[],int,int)>" -> "<java.io.EOFException: void <init>()>";
"<java.io.EOFException: void <init>()>" -> "<java.io.IOException: void <init>()>";
"<java.io.EOFException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.IOException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBPort$ActiveState: void <init>(com.mongodb.DBPort,com.mongodb.OutMessage)>" -> "<java.lang.Thread: java.lang.String getName()>";
"<java.lang.Thread: java.lang.String getName()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.util.LinkedList: boolean add(java.lang.Object)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.util.LinkedList: int size()>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<java.util.ArrayList: int size()>";
"<java.util.LinkedList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.DefaultDBEncoder$DefaultFactory: com.mongodb.DBEncoder create()>";
"<com.mongodb.DBPort: com.mongodb.Response go(com.mongodb.OutMessage,com.mongodb.DBCollection,boolean,com.mongodb.DBDecoder)>" -> "<com.mongodb.OutMessage: void prepare()>";
"<com.mongodb.DBPort: com.mongodb.Response go(com.mongodb.OutMessage,com.mongodb.DBCollection,boolean,com.mongodb.DBDecoder)>" -> "<com.mongodb.OutMessage: void pipe(java.io.OutputStream)>";
"<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>" -> "<org.bson.BasicBSONObject: void putAll(org.bson.BSONObject)>";
"<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>" -> "<com.mongodb.Response: int size()>";
"<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>" -> "<com.mongodb.Response: int size()>";
"<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>" -> "<com.mongodb.Response: int size()>";
"<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>" -> "<com.mongodb.Response: com.mongodb.DBObject get(int)>";
"<com.mongodb.DBPort: com.mongodb.CommandResult convertToCommandResult(com.mongodb.DBObject,com.mongodb.Response)>" -> "<com.mongodb.Response: com.mongodb.ServerAddress serverUsed()>";
"<com.mongodb.Response: com.mongodb.DBObject get(int)>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<com.mongodb.Response: com.mongodb.DBObject get(int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<java.util.LinkedList: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<org.bson.BasicBSONObject: boolean containsField(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<org.bson.BasicBSONObject: java.lang.String getString(java.lang.String)>";
"<org.bson.BasicBSONObject: boolean containsField(java.lang.String)>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<org.bson.BasicBSONObject: java.lang.String getString(java.lang.String)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.DBPort: com.mongodb.Response findOne(com.mongodb.DB,java.lang.String,com.mongodb.DBObject)>" -> "<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>";
"<com.mongodb.DBPort: com.mongodb.Response findOne(com.mongodb.DB,java.lang.String,com.mongodb.DBObject)>" -> "<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>";
"<com.mongodb.DBPort: com.mongodb.Response go(com.mongodb.OutMessage,com.mongodb.DBCollection,boolean,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBPort: boolean _open()>";
"<com.mongodb.DBPort: com.mongodb.Response go(com.mongodb.OutMessage,com.mongodb.DBCollection,boolean,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBPort: void close()>";
"<com.mongodb.DBPort: boolean _open()>" -> "<java.lang.System: void <clinit>()>";
"<com.mongodb.DBPort: boolean _open()>" -> "<com.mongodb.util.ThreadUtil: void sleep(long)>";
"<com.mongodb.DBPort: boolean _open()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBPort: boolean _open()>" -> "<java.lang.System: long currentTimeMillis()>";
"<com.mongodb.DBPort: boolean _open()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBPort: boolean _open()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<com.mongodb.DBPort: boolean _open()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBPort: boolean _open()>" -> "<java.io.BufferedInputStream: void <init>(java.io.InputStream)>";
"<com.mongodb.DBPort: boolean _open()>" -> "<java.lang.System: long currentTimeMillis()>";
"<com.mongodb.DBPort: boolean _open()>" -> "<com.mongodb.util.ThreadUtil: void <clinit>()>";
"<com.mongodb.DBPort: boolean _open()>" -> "<java.lang.System: void <clinit>()>";
"<com.mongodb.DBPort: boolean _open()>" -> "<java.util.logging.Level: void <clinit>()>";
"<com.mongodb.util.ThreadUtil: void sleep(long)>" -> "<java.lang.Thread: void sleep(long)>";
"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.ThreadUtil: void <clinit>()>" -> "<java.util.Collections: void <clinit>()>";
"<com.mongodb.util.ThreadUtil: void <clinit>()>" -> "<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>";
"<com.mongodb.util.ThreadUtil: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<com.mongodb.DBPort: boolean _open()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPort: boolean _open()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPort: boolean _open()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBPort: boolean _open()>" -> "<com.mongodb.DBPort: void close()>";
"<com.mongodb.DBPortPool: void cleanup(com.mongodb.DBPort)>" -> "<com.mongodb.DBPort: void close()>";
"<com.mongodb.DBTCPConnector: void initDirectConnection()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.QueryOpBuilder: boolean hasSpecialQueryFields()>" -> "<java.util.LinkedHashMap: java.util.Set keySet()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.ReadPreference$PrimaryReadPreference: com.mongodb.DBObject toDBObject()>";
"<com.mongodb.ReadPreference$PrimaryReadPreference: com.mongodb.DBObject toDBObject()>" -> "<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>";
"<com.mongodb.ReadPreference$PrimaryReadPreference: com.mongodb.DBObject toDBObject()>" -> "<com.mongodb.ReadPreference$PrimaryReadPreference: java.lang.String getName()>";
"<com.mongodb.Mongo: int getMaxBsonObjectSize()>" -> "<com.mongodb.DBTCPConnector: int getMaxBsonObjectSize()>";
"<com.mongodb.Mongo: int getMaxBsonObjectSize()>" -> "<com.mongodb.DBTCPConnector: void initDirectConnection()>";
"<com.mongodb.Mongo: int getMaxBsonObjectSize()>" -> "<com.mongodb.DBTCPConnector: int getMaxBsonObjectSize()>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<java.lang.String: int length()>";
"<java.lang.String: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.ClassMap: java.lang.Object put(java.lang.Class,java.lang.Object)>" -> "<org.bson.util.ComputingMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.bson.util.ClassMap: java.lang.Object put(java.lang.Class,java.lang.Object)>" -> "<org.bson.util.ComputingMap: void clear()>";
"<org.bson.util.ClassMap: java.lang.Object put(java.lang.Class,java.lang.Object)>" -> "<org.bson.util.ComputingMap: void clear()>";
"<org.bson.util.ClassMap: java.lang.Object put(java.lang.Class,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.bson.util.ClassMap: java.lang.Object put(java.lang.Class,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: void clear()>";
"<org.bson.util.ClassMap: java.lang.Object put(java.lang.Class,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: void clear()>";
"<org.bson.util.AbstractCopyOnWriteMap: void clear()>" -> "<java.util.Collections: void <clinit>()>";
"<org.bson.util.AbstractCopyOnWriteMap: void clear()>" -> "<java.util.Collections: java.util.Map emptyMap()>";
"<java.util.Collections: java.util.Map emptyMap()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.util.AbstractCopyOnWriteMap: void clear()>" -> "<org.bson.util.CopyOnWriteMap$Hash: java.util.Map copy(java.util.Map)>";
"<org.bson.util.AbstractCopyOnWriteMap: void clear()>" -> "<org.bson.util.AbstractCopyOnWriteMap: void set(java.util.Map)>";
"<org.bson.util.AbstractCopyOnWriteMap: void clear()>" -> "<java.util.concurrent.locks.ReentrantLock: void lock()>";
"<org.bson.util.AbstractCopyOnWriteMap: void clear()>" -> "<java.util.concurrent.locks.ReentrantLock: void unlock()>";
"<org.bson.util.AbstractCopyOnWriteMap: void clear()>" -> "<java.util.concurrent.locks.ReentrantLock: void unlock()>";
"<org.bson.util.ComputingMap: void clear()>" -> "<org.bson.util.AbstractCopyOnWriteMap: void clear()>";
"<org.bson.util.ComputingMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<org.bson.util.AbstractCopyOnWriteMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>" -> "<com.mongodb.Mongo: com.mongodb.DBTCPConnector getConnector()>";
"<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>" -> "<com.mongodb.Mongo: int getMaxBsonObjectSize()>";
"<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>" -> "<com.mongodb.DBTCPConnector: int getMaxBsonObjectSize()>";
"<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>" -> "<com.mongodb.DefaultDBEncoder: int writeObject(org.bson.io.OutputBuffer,org.bson.BSONObject)>";
"<com.mongodb.DefaultDBEncoder: int writeObject(org.bson.io.OutputBuffer,org.bson.BSONObject)>" -> "<org.bson.BasicBSONEncoder: int putObject(org.bson.BSONObject)>";
"<com.mongodb.DefaultDBEncoder: int writeObject(org.bson.io.OutputBuffer,org.bson.BSONObject)>" -> "<org.bson.BasicBSONEncoder: void set(org.bson.io.OutputBuffer)>";
"<com.mongodb.DefaultDBEncoder: int writeObject(org.bson.io.OutputBuffer,org.bson.BSONObject)>" -> "<org.bson.BasicBSONEncoder: void done()>";
"<org.bson.BasicBSONEncoder: int putObject(org.bson.BSONObject)>" -> "<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<java.lang.NullPointerException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.BasicBSONObject: boolean containsField(java.lang.String)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<java.util.LinkedHashMap: java.util.Set keySet()>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<java.util.LinkedHashMap: java.util.Set entrySet()>";
"<java.util.LinkedHashMap: java.util.Set entrySet()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.BasicBSONEncoder: boolean handleSpecialObjects(java.lang.String,org.bson.BSONObject)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BSON: void <clinit>()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putMaxKey(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putMinKey(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONObject: void <init>()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putArray(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putIterable(java.lang.String,java.lang.Iterable)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putMap(java.lang.String,java.util.Map)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putPattern(java.lang.String,java.util.regex.Pattern)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BSON: java.lang.Object applyEncodingHooks(java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void putArray(java.lang.String,java.lang.Object)>" -> "<java.lang.String: void <clinit>()>";
"<org.bson.BasicBSONEncoder: void putArray(java.lang.String,java.lang.Object)>" -> "<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>";
"<org.bson.BasicBSONEncoder: void putArray(java.lang.String,java.lang.Object)>" -> "<java.lang.String: java.lang.String valueOf(int)>";
"<org.bson.BasicBSONEncoder: void putArray(java.lang.String,java.lang.Object)>" -> "<java.lang.reflect.Array: int getLength(java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void putIterable(java.lang.String,java.lang.Iterable)>" -> "<java.lang.String: void <clinit>()>";
"<org.bson.BasicBSONEncoder: void putIterable(java.lang.String,java.lang.Iterable)>" -> "<java.lang.String: java.lang.String valueOf(int)>";
"<org.bson.BasicBSONEncoder: void putPattern(java.lang.String,java.util.regex.Pattern)>" -> "<org.bson.BSON: void <clinit>()>";
"<org.bson.BasicBSONEncoder: void putPattern(java.lang.String,java.util.regex.Pattern)>" -> "<org.bson.BSON: java.lang.String regexFlags(int)>";
"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String valueOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.reflect.Array: int getLength(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BSON: java.lang.String regexFlags(int)>" -> "<org.bson.BSON$RegexFlag: void <clinit>()>";
"<org.bson.BSON: java.lang.String regexFlags(int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.BSON: java.lang.String regexFlags(int)>" -> "<org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag[] values()>";
"<org.bson.BSON: java.lang.String regexFlags(int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<java.lang.Character: void <clinit>()>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<java.lang.Character: java.lang.Character valueOf(char)>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag[] values()>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>";
"<org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag[] values()>" -> "<org.bson.BSON$RegexFlag: void <clinit>()>";
"<java.lang.Character: java.lang.Character valueOf(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag[] values()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<java.lang.Object: java.lang.Object clone()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BSON$RegexFlag: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.bson.BSON: java.lang.String regexFlags(int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.bson.BSON: java.lang.String regexFlags(int)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<com.mongodb.BasicDBObject: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<com.mongodb.BasicDBObject: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<com.mongodb.BasicDBObject: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<org.bson.BasicBSONEncoder: void putMap(java.lang.String,java.util.Map)>" -> "<java.util.LinkedHashMap: java.util.Set entrySet()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void _putValueString(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putNull(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putDate(java.lang.String,java.util.Date)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putNumber(java.lang.String,java.lang.Number)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putString(java.lang.String,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putString(java.lang.String,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putObjectId(java.lang.String,org.bson.types.ObjectId)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putBoolean(java.lang.String,java.lang.Boolean)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,byte[])>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,org.bson.types.Binary)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putUUID(java.lang.String,java.util.UUID)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putSymbol(java.lang.String,org.bson.types.Symbol)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putTimestamp(java.lang.String,org.bson.types.BSONTimestamp)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putCodeWScope(java.lang.String,org.bson.types.CodeWScope)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void putCode(java.lang.String,org.bson.types.Code)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<com.mongodb.DefaultDBEncoder: boolean putSpecial(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void putNumber(java.lang.String,java.lang.Number)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.BasicBSONEncoder: void putNumber(java.lang.String,java.lang.Number)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putString(java.lang.String,java.lang.String)>" -> "<org.bson.BasicBSONEncoder: void _putString(java.lang.String,java.lang.String,byte)>";
"<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,byte[])>" -> "<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,int,byte[])>";
"<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,org.bson.types.Binary)>" -> "<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,int,byte[])>";
"<org.bson.BasicBSONEncoder: void putSymbol(java.lang.String,org.bson.types.Symbol)>" -> "<org.bson.BasicBSONEncoder: void _putString(java.lang.String,java.lang.String,byte)>";
"<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,int,byte[])>" -> "<com.mongodb.util.MyAsserts: void <clinit>()>";
"<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,int,byte[])>" -> "<com.mongodb.util.MyAsserts: void assertEquals(int,int)>";
"<com.mongodb.util.MyAsserts: void <clinit>()>" -> "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>";
"<com.mongodb.util.MyAsserts: void assertEquals(int,int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.util.MyAsserts: void assertEquals(int,int)>" -> "<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>";
"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.util.MyAsserts: void assertEquals(int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.util.MyAsserts: void assertEquals(int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.mongodb.util.MyAsserts: void assertEquals(int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.util.MyAsserts: void assertEquals(int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.mongodb.util.MyAsserts: void assertEquals(int,int)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DefaultDBEncoder: boolean putSpecial(java.lang.String,java.lang.Object)>" -> "<com.mongodb.DefaultDBEncoder: void putDBPointer(java.lang.String,java.lang.String,org.bson.types.ObjectId)>";
"<com.mongodb.DefaultDBEncoder: boolean putSpecial(java.lang.String,java.lang.Object)>" -> "<com.mongodb.DefaultDBEncoder: void putDBRef(java.lang.String,com.mongodb.DBRefBase)>";
"<com.mongodb.DefaultDBEncoder: void putDBRef(java.lang.String,com.mongodb.DBRefBase)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<com.mongodb.DefaultDBEncoder: void putDBRef(java.lang.String,com.mongodb.DBRefBase)>" -> "<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>";
"<com.mongodb.DefaultDBEncoder: void putDBRef(java.lang.String,com.mongodb.DBRefBase)>" -> "<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>";
"<com.mongodb.DefaultDBEncoder: void putDBPointer(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<com.mongodb.DefaultDBEncoder: void putDBPointer(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.BasicBSONEncoder: void _putValueString(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putCode(java.lang.String,org.bson.types.Code)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putCode(java.lang.String,org.bson.types.Code)>" -> "<org.bson.BasicBSONEncoder: void _putValueString(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putCodeWScope(java.lang.String,org.bson.types.CodeWScope)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putCodeWScope(java.lang.String,org.bson.types.CodeWScope)>" -> "<org.bson.BasicBSONEncoder: void _putValueString(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putCodeWScope(java.lang.String,org.bson.types.CodeWScope)>" -> "<org.bson.BasicBSONEncoder: int putObject(org.bson.BSONObject)>";
"<org.bson.BasicBSONEncoder: void putTimestamp(java.lang.String,org.bson.types.BSONTimestamp)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putString(java.lang.String,java.lang.String,byte)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putString(java.lang.String,java.lang.String,byte)>" -> "<org.bson.BasicBSONEncoder: void _putValueString(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putUUID(java.lang.String,java.util.UUID)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,int,byte[])>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putBoolean(java.lang.String,java.lang.Boolean)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putObjectId(java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putNumber(java.lang.String,java.lang.Number)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putNumber(java.lang.String,java.lang.Number)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void putNumber(java.lang.String,java.lang.Number)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void putNumber(java.lang.String,java.lang.Number)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putNumber(java.lang.String,java.lang.Number)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putNumber(java.lang.String,java.lang.Number)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putDate(java.lang.String,java.util.Date)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putNull(java.lang.String)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putValueString(java.lang.String)>" -> "<org.bson.BasicBSONEncoder: int _put(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putPattern(java.lang.String,java.util.regex.Pattern)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putPattern(java.lang.String,java.util.regex.Pattern)>" -> "<org.bson.BasicBSONEncoder: int _put(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putPattern(java.lang.String,java.util.regex.Pattern)>" -> "<org.bson.BasicBSONEncoder: int _put(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putMap(java.lang.String,java.util.Map)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putMap(java.lang.String,java.util.Map)>" -> "<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void putIterable(java.lang.String,java.lang.Iterable)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putIterable(java.lang.String,java.lang.Iterable)>" -> "<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void putArray(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putArray(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONEncoder: void putMinKey(java.lang.String)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putMaxKey(java.lang.String)>" -> "<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.lang.String: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.lang.String: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.lang.String: java.lang.String toString()>";
"<java.lang.String: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>" -> "<org.bson.BasicBSONEncoder: int _put(java.lang.String)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<org.bson.util.SimplePool: java.lang.Object get()>";
"<org.bson.util.SimplePool: java.lang.Object get()>" -> "<com.mongodb.Mongo$1: org.bson.io.PoolOutputBuffer createNew()>";
"<com.mongodb.Mongo$1: org.bson.io.PoolOutputBuffer createNew()>" -> "<org.bson.io.PoolOutputBuffer: void <clinit>()>";
"<com.mongodb.Mongo$1: org.bson.io.PoolOutputBuffer createNew()>" -> "<org.bson.io.PoolOutputBuffer: void <init>()>";
"<org.bson.util.SimplePool: java.lang.Object get()>" -> "<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>";
"<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>" -> "<org.bson.io.PoolOutputBuffer: void reset()>";
"<com.mongodb.OutMessage: void writeInsertPrologue(com.mongodb.WriteConcern)>" -> "<com.mongodb.DBCollection: java.lang.String getFullName()>";
"<com.mongodb.Mongo: com.mongodb.DB getDB(java.lang.String)>" -> "<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
"<com.mongodb.Mongo: com.mongodb.DB getDB(java.lang.String)>" -> "<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
"<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSDBFile findOne(com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject)>";
"<com.mongodb.gridfs.GridFSInputFile: void _dumpBuffer(boolean)>" -> "<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: com.mongodb.WriteConcern getWriteConcern()>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject,com.mongodb.WriteConcern)>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject,com.mongodb.WriteConcern)>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject,com.mongodb.WriteConcern)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject,com.mongodb.WriteConcern)>" -> "<com.mongodb.DBCollection: boolean checkReadOnly(boolean)>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject,com.mongodb.WriteConcern)>" -> "<com.mongodb.DBCollection: com.mongodb.DBObject _checkObject(com.mongodb.DBObject,boolean,boolean)>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject,com.mongodb.WriteConcern)>" -> "<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[])>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject,com.mongodb.WriteConcern)>" -> "<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject,com.mongodb.WriteConcern)>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject,com.mongodb.WriteConcern)>" -> "<com.mongodb.DBCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean)>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject,com.mongodb.WriteConcern)>" -> "<com.mongodb.DBCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern)>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern)>" -> "<com.mongodb.DBCollection: com.mongodb.DBEncoder getDBEncoder()>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern)>" -> "<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DefaultDBEncoder: void <clinit>()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.OutMessage: com.mongodb.OutMessage update(com.mongodb.DBCollection,com.mongodb.DBEncoder,boolean,boolean,com.mongodb.DBObject,com.mongodb.DBObject)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer: void trace(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.util.JSON: java.lang.String serialize(java.lang.Object)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.util.JSON: java.lang.String serialize(java.lang.Object)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer: boolean willTrace()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DB: void <clinit>()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer: void <clinit>()>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage update(com.mongodb.DBCollection,com.mongodb.DBEncoder,boolean,boolean,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.OutMessage: void <clinit>()>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage update(com.mongodb.DBCollection,com.mongodb.DBEncoder,boolean,boolean,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.OutMessage: void writeUpdate(boolean,boolean,com.mongodb.DBObject,com.mongodb.DBObject)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage update(com.mongodb.DBCollection,com.mongodb.DBEncoder,boolean,boolean,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject)>";
"<com.mongodb.OutMessage: com.mongodb.OutMessage update(com.mongodb.DBCollection,com.mongodb.DBEncoder,boolean,boolean,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.OutMessage$OpCode: void <clinit>()>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject)>" -> "<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.Mongo,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject,int,com.mongodb.ReadPreference)>";
"<com.mongodb.OutMessage: void writeUpdate(boolean,boolean,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.OutMessage: void writeUpdate(boolean,boolean,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<org.bson.BasicBSONEncoder: void writeCString(java.lang.String)>";
"<com.mongodb.OutMessage: void writeUpdate(boolean,boolean,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<org.bson.BasicBSONEncoder: void writeInt(int)>";
"<com.mongodb.OutMessage: void writeUpdate(boolean,boolean,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>";
"<com.mongodb.OutMessage: void writeUpdate(boolean,boolean,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DefaultDBEncoder$DefaultFactory: com.mongodb.DBEncoder create()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBCollection: com.mongodb.DBObject _checkObject(com.mongodb.DBObject,boolean,boolean)>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: com.mongodb.DB getDB()>";
"<com.mongodb.OutMessage: void <init>(com.mongodb.DBCollection,com.mongodb.OutMessage$OpCode,com.mongodb.DBEncoder,com.mongodb.DBObject)>" -> "<com.mongodb.DB: com.mongodb.Mongo getMongo()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern)>" -> "<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.ReadPreference: void <clinit>()>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.WriteResult: void <init>(com.mongodb.CommandResult,com.mongodb.WriteConcern)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.CommandResult: void <init>(com.mongodb.ServerAddress)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.MongoException$Network: void <init>(java.lang.String,java.io.IOException)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.WriteResult: void <init>(com.mongodb.DB,com.mongodb.DBPort,com.mongodb.WriteConcern)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.ReadPreference: com.mongodb.ReadPreference primary()>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.mongodb.WriteResult: void <init>(com.mongodb.CommandResult,com.mongodb.WriteConcern)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.CommandResult: void <init>(com.mongodb.ServerAddress)>" -> "<com.mongodb.CommandResult: void <init>(com.mongodb.DBObject,com.mongodb.ServerAddress)>";
"<com.mongodb.MongoException$Network: void <init>(java.lang.String,java.io.IOException)>" -> "<com.mongodb.MongoException: void <init>(int,java.lang.String,java.lang.Throwable)>";
"<com.mongodb.WriteResult: void <init>(com.mongodb.DB,com.mongodb.DBPort,com.mongodb.WriteConcern)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.MongoException: void <init>(int,java.lang.String,java.lang.Throwable)>" -> "<com.mongodb.MongoException: java.lang.Throwable _massage(java.lang.Throwable)>";
"<com.mongodb.MongoException: void <init>(int,java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.OutMessage: void doneWithMessage()>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.OutMessage: void doneWithMessage()>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.OutMessage: void doneWithMessage()>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.OutMessage: void doneWithMessage()>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.DBTCPConnector: void _checkClosed()>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.DBTCPConnector: void checkMaster(boolean,boolean)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.DBTCPConnector: com.mongodb.WriteResult _checkWriteError(com.mongodb.DB,com.mongodb.DBPort,com.mongodb.WriteConcern)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.DBTCPConnector: boolean _error(java.lang.Throwable,boolean)>";
"<com.mongodb.DBTCPConnector: void _checkClosed()>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void checkMaster(boolean,boolean)>" -> "<com.mongodb.MongoException: void <init>(java.lang.String)>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult _checkWriteError(com.mongodb.DB,com.mongodb.DBPort,com.mongodb.WriteConcern)>" -> "<com.mongodb.WriteResult: void <init>(com.mongodb.CommandResult,com.mongodb.WriteConcern)>";
"<com.mongodb.DBTCPConnector: boolean _error(java.lang.Throwable,boolean)>" -> "<com.mongodb.DBTCPConnector: void checkMaster(boolean,boolean)>";
"<com.mongodb.DBTCPConnector: void checkMaster(boolean,boolean)>" -> "<com.mongodb.DBTCPConnector: void setMaster(com.mongodb.ConnectionStatus$Node)>";
"<com.mongodb.DBTCPConnector: void checkMaster(boolean,boolean)>" -> "<com.mongodb.DBTCPConnector: void initDirectConnection()>";
"<com.mongodb.DBTCPConnector: void setMaster(com.mongodb.ConnectionStatus$Node)>" -> "<com.mongodb.DBTCPConnector: boolean setMasterAddress(com.mongodb.ServerAddress)>";
"<com.mongodb.DBTCPConnector: void setMaster(com.mongodb.ConnectionStatus$Node)>" -> "<java.util.concurrent.atomic.AtomicBoolean: boolean get()>";
"<java.util.concurrent.atomic.AtomicBoolean: boolean get()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBTCPConnector: void _checkClosed()>" -> "<java.util.concurrent.atomic.AtomicBoolean: boolean get()>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<java.lang.ThreadLocal: java.lang.Object get()>";
"<java.lang.ThreadLocal: java.lang.Object get()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<java.lang.String: boolean startsWith(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean)>" -> "<com.mongodb.DBCollection: com.mongodb.WriteConcern getWriteConcern()>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean)>" -> "<com.mongodb.DBCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern)>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject,com.mongodb.WriteConcern)>" -> "<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],com.mongodb.WriteConcern)>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],com.mongodb.WriteConcern)>" -> "<com.mongodb.DBCollection: com.mongodb.DBEncoder getDBEncoder()>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],com.mongodb.WriteConcern)>" -> "<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],com.mongodb.WriteConcern,com.mongodb.DBEncoder)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[])>" -> "<com.mongodb.DBCollection: com.mongodb.WriteConcern getWriteConcern()>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[])>" -> "<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],com.mongodb.WriteConcern)>";
"<com.mongodb.DBCollection: com.mongodb.WriteConcern getWriteConcern()>" -> "<com.mongodb.DB: com.mongodb.WriteConcern getWriteConcern()>";
"<com.mongodb.DB: com.mongodb.WriteConcern getWriteConcern()>" -> "<com.mongodb.Mongo: com.mongodb.WriteConcern getWriteConcern()>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.WriteConcern: boolean callGetLastError()>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>" -> "<com.mongodb.WriteConcern: boolean raiseNetworkErrors()>";
"<com.mongodb.DBTCPConnector: com.mongodb.WriteResult _checkWriteError(com.mongodb.DB,com.mongodb.DBPort,com.mongodb.WriteConcern)>" -> "<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>";
"<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>" -> "<java.lang.Integer: void <clinit>()>";
"<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
"<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
"<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>" -> "<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>";
"<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: void save()>" -> "<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject)>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject,com.mongodb.WriteConcern)>" -> "<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>" -> "<java.lang.Long: void <clinit>()>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>" -> "<java.lang.Long: java.lang.Long valueOf(long)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>" -> "<java.lang.Long: java.lang.Long valueOf(long)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>" -> "<java.lang.Long: void <clinit>()>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.gridfs.GridFSFile: java.util.Set keySet()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.gridfs.GridFSFile: java.util.Set keySet()>";
"<com.mongodb.gridfs.GridFSFile: java.util.Set keySet()>" -> "<com.mongodb.gridfs.GridFSFile: void <clinit>()>";
"<com.mongodb.gridfs.GridFSFile: java.util.Set keySet()>" -> "<java.util.HashSet: void <init>()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.util.HashSet: boolean isEmpty()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<java.util.HashSet: boolean isEmpty()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: java.util.Set keySet()>" -> "<java.util.AbstractCollection: boolean addAll(java.util.Collection)>";
"<com.mongodb.gridfs.GridFSFile: java.util.Set keySet()>" -> "<java.util.AbstractCollection: boolean addAll(java.util.Collection)>";
"<java.util.AbstractCollection: boolean addAll(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: java.util.Set keySet()>" -> "<java.util.LinkedHashMap: java.util.Set keySet()>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject,com.mongodb.WriteConcern)>" -> "<org.bson.types.ObjectId: boolean isNew()>";
"<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject,com.mongodb.WriteConcern)>" -> "<org.bson.types.ObjectId: void notNew()>";
"<com.mongodb.DBCollection: com.mongodb.DBObject _checkObject(com.mongodb.DBObject,boolean,boolean)>" -> "<com.mongodb.gridfs.GridFSFile: boolean isPartialObject()>";
"<com.mongodb.DBCollection: void _checkKeys(com.mongodb.DBObject)>" -> "<com.mongodb.gridfs.GridFSFile: java.util.Set keySet()>";
"<com.mongodb.DBCollection: void _checkKeys(com.mongodb.DBObject)>" -> "<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>";
"<com.mongodb.DBCollection: void _checkKeys(com.mongodb.DBObject)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.String: boolean contains(java.lang.CharSequence)>";
"<com.mongodb.DBCollection: void validateKey(java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<java.lang.String: boolean contains(java.lang.CharSequence)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<com.mongodb.gridfs.GridFSFile: boolean containsField(java.lang.String)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<com.mongodb.gridfs.GridFSFile: java.util.Set keySet()>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: boolean containsField(java.lang.String)>" -> "<com.mongodb.gridfs.GridFSFile: java.util.Set keySet()>";
"<com.mongodb.gridfs.GridFSFile: boolean containsField(java.lang.String)>" -> "<java.util.HashSet: boolean contains(java.lang.Object)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.util.Date: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.util.Date: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<java.util.Date: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.types.ObjectId: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.types.ObjectId: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<org.bson.types.ObjectId: java.lang.String toString()>";
"<java.util.Date: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DefaultDBEncoder: void putDBPointer(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.types.ObjectId: int _time()>";
"<com.mongodb.DefaultDBEncoder: void putDBPointer(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.types.ObjectId: int _machine()>";
"<com.mongodb.DefaultDBEncoder: void putDBPointer(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.types.ObjectId: int _inc()>";
"<org.bson.BasicBSONEncoder: void putObjectId(java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.types.ObjectId: int _time()>";
"<org.bson.BasicBSONEncoder: void putObjectId(java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.types.ObjectId: int _machine()>";
"<org.bson.BasicBSONEncoder: void putObjectId(java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.types.ObjectId: int _inc()>";
"<org.bson.BasicBSONEncoder: void putDate(java.lang.String,java.util.Date)>" -> "<java.util.Date: long getTime()>";
"<java.util.Date: long getTime()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<com.mongodb.gridfs.GridFSFile: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<com.mongodb.gridfs.GridFSFile: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void _putObjectField(java.lang.String,java.lang.Object)>" -> "<com.mongodb.gridfs.GridFSFile: java.lang.String toString()>";
"<com.mongodb.gridfs.GridFSFile: java.lang.String toString()>" -> "<com.mongodb.util.JSON: java.lang.String serialize(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>" -> "<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int)>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int)>" -> "<com.mongodb.DB: com.mongodb.ReadPreference getReadPreference()>";
"<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int)>" -> "<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject,int,com.mongodb.ReadPreference)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<org.bson.BasicBSONObject: boolean containsField(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: void validate()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFS: com.mongodb.DBCursor getFileList()>" -> "<com.mongodb.DBCollection: com.mongodb.DBCursor find()>";
"<com.mongodb.DBCollection: com.mongodb.DBCursor find()>" -> "<com.mongodb.DBCursor: void <init>(com.mongodb.DBCollection,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>";
"<com.mongodb.DBCursor: void <init>(com.mongodb.DBCollection,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<java.lang.Object: void <init>()>";
"<com.mongodb.DBCursor: void <init>(com.mongodb.DBCollection,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<com.mongodb.DBCursor: void <init>(com.mongodb.DBCollection,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.DBCursor: void <init>(com.mongodb.DBCollection,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<java.util.ArrayList: void <init>()>";
"<com.mongodb.DBCollection: com.mongodb.DBCursor find()>" -> "<com.mongodb.DBCollection: com.mongodb.ReadPreference getReadPreference()>";
"<com.mongodb.DBCursor: void <init>(com.mongodb.DBCollection,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.DBCollection: com.mongodb.DBDecoderFactory getDBDecoderFactory()>";
"<com.mongodb.gridfs.GridFS: com.mongodb.DBCursor getFileList()>" -> "<com.mongodb.DBCursor: com.mongodb.DBCursor sort(com.mongodb.DBObject)>";
"<com.mongodb.DBCursor: com.mongodb.DBCursor sort(com.mongodb.DBObject)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.DBCursor: java.util.Iterator iterator()>";
"<com.mongodb.DBCursor: java.util.Iterator iterator()>" -> "<com.mongodb.DBCursor: com.mongodb.DBCursor copy()>";
"<com.mongodb.DBCursor: com.mongodb.DBCursor copy()>" -> "<com.mongodb.DBCursor: void <init>(com.mongodb.DBCollection,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>";
"<com.mongodb.DBCursor: com.mongodb.DBCursor copy()>" -> "<com.mongodb.BasicDBObject: void <init>(java.util.Map)>";
"<com.mongodb.BasicDBObject: void <init>(java.util.Map)>" -> "<org.bson.BasicBSONObject: void <init>(java.util.Map)>";
"<org.bson.BasicBSONObject: void <init>(java.util.Map)>" -> "<java.util.LinkedHashMap: void <init>(java.util.Map)>";
"<java.util.LinkedHashMap: void <init>(java.util.Map)>" -> "<java.util.HashMap: void <init>()>";
"<java.util.LinkedHashMap: void <init>(java.util.Map)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBCursor: com.mongodb.DBCursor copy()>" -> "<org.bson.BasicBSONObject: java.util.Map toMap()>";
"<org.bson.BasicBSONObject: java.util.Map toMap()>" -> "<java.util.LinkedHashMap: void <init>(java.util.Map)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.DBCursor: boolean hasNext()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<com.mongodb.DBCursor: com.mongodb.DBObject next()>";
"<com.mongodb.DBCursor: boolean hasNext()>" -> "<com.mongodb.DBCursor$CursorType: void <clinit>()>";
"<com.mongodb.DBCursor: boolean hasNext()>" -> "<com.mongodb.DBCursor: boolean _hasNext()>";
"<com.mongodb.DBCursor: com.mongodb.DBObject next()>" -> "<com.mongodb.DBCursor$CursorType: void <clinit>()>";
"<com.mongodb.DBCursor: com.mongodb.DBObject next()>" -> "<com.mongodb.DBCursor: com.mongodb.DBObject _next()>";
"<com.mongodb.DBCursor$CursorType: void <clinit>()>" -> "<com.mongodb.DBCursor$CursorType: void <init>(java.lang.String,int)>";
"<com.mongodb.DBCursor$CursorType: void <clinit>()>" -> "<com.mongodb.DBCursor$CursorType: void <init>(java.lang.String,int)>";
"<com.mongodb.DBCursor: boolean _hasNext()>" -> "<com.mongodb.DBCursor: void _check()>";
"<com.mongodb.DBCursor: com.mongodb.DBObject _next()>" -> "<com.mongodb.DBCursor$CursorType: void <clinit>()>";
"<com.mongodb.DBCursor: com.mongodb.DBObject _next()>" -> "<com.mongodb.DBCursor: void _check()>";
"<com.mongodb.DBCursor: com.mongodb.DBObject _next()>" -> "<com.mongodb.DBCursor$CursorType: void <clinit>()>";
"<com.mongodb.DBCursor$CursorType: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.DBCursor: void _lookForHints()>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.DBCursor: com.mongodb.DBDecoder getDecoder()>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.QueryOpBuilder: void <init>()>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addQuery(com.mongodb.DBObject)>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addOrderBy(com.mongodb.DBObject)>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addHint(com.mongodb.DBObject)>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addHint(java.lang.String)>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addExplain(boolean)>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addSnapshot(boolean)>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addSpecialFields(com.mongodb.DBObject)>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addReadPreference(com.mongodb.DBObject)>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()>";
"<com.mongodb.DBCursor: com.mongodb.DBObject next()>" -> "<com.mongodb.DBCursor: void _checkType(com.mongodb.DBCursor$CursorType)>";
"<com.mongodb.DBCursor: void _checkType(com.mongodb.DBCursor$CursorType)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.DBCursor: com.mongodb.DBObject _next()>" -> "<com.mongodb.DBCursor: void _checkType(com.mongodb.DBCursor$CursorType)>";
"<com.mongodb.DBCursor: void _lookForHints()>" -> "<com.mongodb.DBCursor: com.mongodb.DBCursor hint(com.mongodb.DBObject)>";
"<com.mongodb.DBCursor: com.mongodb.DBCursor hint(com.mongodb.DBObject)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.mongodb.DBCursor: void _lookForHints()>" -> "<java.util.LinkedHashMap: java.util.Set keySet()>";
"<com.mongodb.DBCursor: void _lookForHints()>" -> "<java.util.LinkedHashMap: java.util.Set keySet()>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.ReadPreference$PrimaryReadPreference: com.mongodb.DBObject toDBObject()>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.DBCollection: com.mongodb.DB getDB()>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.DB: com.mongodb.Mongo getMongo()>";
"<com.mongodb.DBCursor: void _check()>" -> "<com.mongodb.Mongo: boolean isMongosConnection()>";
"<com.mongodb.DBCursor: com.mongodb.DBObject _next()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<com.mongodb.DBCursor: boolean hasNext()>" -> "<com.mongodb.DBCursor: void _checkType(com.mongodb.DBCursor$CursorType)>";
"<com.mongodb.DBCursor: boolean _hasNext()>" -> "<com.mongodb.DBApiLayer$Result: boolean hasNext()>";
"<com.mongodb.DBCursor: void <init>(com.mongodb.DBCollection,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)>" -> "<com.mongodb.DBCollection: int getOptions()>";
"<com.mongodb.DBPortPool: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>" -> "<com.mongodb.MongoOptions: java.lang.String toString()>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.MongoOptions: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.Mongo$CursorCleanerThread: void run()>" -> "<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>";
"<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.Mongo$CursorCleanerThread: void run()>" -> "<com.mongodb.DBTCPConnector: boolean isOpen()>";
"<com.mongodb.DBTCPConnector: boolean isOpen()>" -> "<java.util.concurrent.atomic.AtomicBoolean: boolean get()>";
"<com.mongodb.DBTCPConnector: boolean setMasterAddress(com.mongodb.ServerAddress)>" -> "<com.mongodb.DBPortPool: com.mongodb.ServerAddress getServerAddress()>";
"<com.mongodb.DBCursor: com.mongodb.DBObject _next()>" -> "<java.util.LinkedHashMap: java.util.Set keySet()>";
"<com.mongodb.DBCursor: com.mongodb.DBObject _next()>" -> "<com.mongodb.BasicDBObject: void markAsPartialObject()>";
"<com.mongodb.DBCursor: com.mongodb.DBObject _next()>" -> "<com.mongodb.DBApiLayer$Result: com.mongodb.DBObject next()>";
"<com.mongodb.OutMessage: void doneWithMessage()>" -> "<org.bson.util.SimplePool: void done(java.lang.Object)>";
"<com.mongodb.OutMessage: void doneWithMessage()>" -> "<org.bson.io.PoolOutputBuffer: void reset()>";
"<com.mongodb.OutMessage: void writeUpdate(boolean,boolean,com.mongodb.DBObject,com.mongodb.DBObject)>" -> "<com.mongodb.DBCollection: java.lang.String getFullName()>";
"<com.mongodb.DefaultDBEncoder: void putDBRef(java.lang.String,com.mongodb.DBRefBase)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.io.PoolOutputBuffer: int getPosition()>" -> "<org.bson.io.PoolOutputBuffer$Position: int pos()>";
"<com.mongodb.DefaultDBEncoder: void putDBRef(java.lang.String,com.mongodb.DBRefBase)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<com.mongodb.DefaultDBEncoder: void putDBRef(java.lang.String,com.mongodb.DBRefBase)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<com.mongodb.DefaultDBEncoder: void putDBRef(java.lang.String,com.mongodb.DBRefBase)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<com.mongodb.DefaultDBEncoder: void putDBRef(java.lang.String,com.mongodb.DBRefBase)>" -> "<org.bson.io.OutputBuffer: void writeInt(int,int)>";
"<org.bson.io.OutputBuffer: void writeInt(int,int)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.io.OutputBuffer: void writeInt(int,int)>" -> "<org.bson.io.PoolOutputBuffer: void setPosition(int)>";
"<org.bson.io.OutputBuffer: void writeInt(int,int)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.io.OutputBuffer: void writeInt(int,int)>" -> "<org.bson.io.PoolOutputBuffer: void setPosition(int)>";
"<org.bson.io.PoolOutputBuffer: void setPosition(int)>" -> "<org.bson.io.PoolOutputBuffer$Position: void reset(int)>";
"<org.bson.io.PoolOutputBuffer: void write(int)>" -> "<org.bson.io.PoolOutputBuffer: byte[] _cur()>";
"<org.bson.io.PoolOutputBuffer: void write(int)>" -> "<org.bson.io.PoolOutputBuffer: void _afterWrite()>";
"<org.bson.io.PoolOutputBuffer: void _afterWrite()>" -> "<org.bson.io.PoolOutputBuffer: void <clinit>()>";
"<org.bson.io.PoolOutputBuffer: void _afterWrite()>" -> "<org.bson.util.SimplePool: java.lang.Object get()>";
"<org.bson.io.PoolOutputBuffer: void _afterWrite()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.bson.io.PoolOutputBuffer: void _afterWrite()>" -> "<org.bson.io.PoolOutputBuffer$Position: int pos()>";
"<org.bson.io.PoolOutputBuffer: void _afterWrite()>" -> "<org.bson.io.PoolOutputBuffer$Position: int pos()>";
"<org.bson.io.PoolOutputBuffer: void _afterWrite()>" -> "<org.bson.io.PoolOutputBuffer$Position: void nextBuffer()>";
"<org.bson.io.PoolOutputBuffer: void _afterWrite()>" -> "<org.bson.io.PoolOutputBuffer$Position: void reset(org.bson.io.PoolOutputBuffer$Position)>";
"<org.bson.io.PoolOutputBuffer: void _afterWrite()>" -> "<org.bson.io.PoolOutputBuffer$Position: void nextBuffer()>";
"<org.bson.io.PoolOutputBuffer: void _afterWrite()>" -> "<org.bson.io.PoolOutputBuffer$Position: void reset(org.bson.io.PoolOutputBuffer$Position)>";
"<org.bson.io.PoolOutputBuffer$Position: void nextBuffer()>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.io.PoolOutputBuffer: byte[] _cur()>" -> "<org.bson.io.PoolOutputBuffer: byte[] _get(int)>";
"<org.bson.io.PoolOutputBuffer: byte[] _get(int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.bson.io.PoolOutputBuffer: void write(int)>" -> "<org.bson.io.PoolOutputBuffer$Position: int getAndInc()>";
"<org.bson.io.OutputBuffer: void writeInt(int)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.io.OutputBuffer: void writeInt(int)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.io.OutputBuffer: void writeInt(int)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.io.OutputBuffer: void writeInt(int)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.util.SimplePool: java.lang.Object get()>" -> "<org.bson.io.PoolOutputBuffer$1: byte[] createNew()>";
"<com.mongodb.DefaultDBEncoder: void putDBPointer(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<com.mongodb.DefaultDBEncoder: void putDBPointer(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<com.mongodb.DefaultDBEncoder: void putDBPointer(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,int,byte[])>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,int,byte[])>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,int,byte[])>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,int,byte[])>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,int,byte[])>" -> "<org.bson.io.PoolOutputBuffer: void write(byte[])>";
"<org.bson.BasicBSONEncoder: void putBinary(java.lang.String,int,byte[])>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.io.PoolOutputBuffer: void write(byte[])>" -> "<org.bson.io.PoolOutputBuffer: void write(byte[],int,int)>";
"<org.bson.io.PoolOutputBuffer: void write(byte[],int,int)>" -> "<java.lang.System: void <clinit>()>";
"<org.bson.io.PoolOutputBuffer: void write(byte[],int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.bson.io.PoolOutputBuffer: void write(byte[],int,int)>" -> "<java.lang.Math: int min(int,int)>";
"<org.bson.io.PoolOutputBuffer: void write(byte[],int,int)>" -> "<org.bson.io.PoolOutputBuffer: byte[] _cur()>";
"<org.bson.io.PoolOutputBuffer: void write(byte[],int,int)>" -> "<org.bson.io.PoolOutputBuffer: void _afterWrite()>";
"<org.bson.io.PoolOutputBuffer: void write(byte[],int,int)>" -> "<org.bson.io.PoolOutputBuffer$Position: void inc(int)>";
"<org.bson.io.PoolOutputBuffer$Position: void inc(int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONEncoder: void putCode(java.lang.String,org.bson.types.Code)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: void putCodeWScope(java.lang.String,org.bson.types.CodeWScope)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: void putCodeWScope(java.lang.String,org.bson.types.CodeWScope)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: void putCodeWScope(java.lang.String,org.bson.types.CodeWScope)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.BasicBSONEncoder: void putCodeWScope(java.lang.String,org.bson.types.CodeWScope)>" -> "<org.bson.io.OutputBuffer: void writeInt(int,int)>";
"<org.bson.BasicBSONEncoder: void putTimestamp(java.lang.String,org.bson.types.BSONTimestamp)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.BasicBSONEncoder: void putTimestamp(java.lang.String,org.bson.types.BSONTimestamp)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.BasicBSONEncoder: void putUUID(java.lang.String,java.util.UUID)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.BasicBSONEncoder: void putUUID(java.lang.String,java.util.UUID)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: void putUUID(java.lang.String,java.util.UUID)>" -> "<org.bson.io.OutputBuffer: void writeLong(long)>";
"<org.bson.BasicBSONEncoder: void putUUID(java.lang.String,java.util.UUID)>" -> "<org.bson.io.OutputBuffer: void writeLong(long)>";
"<org.bson.io.OutputBuffer: void writeLong(long)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.io.OutputBuffer: void writeLong(long)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.io.OutputBuffer: void writeLong(long)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.io.OutputBuffer: void writeLong(long)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.io.OutputBuffer: void writeLong(long)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.io.OutputBuffer: void writeLong(long)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.io.OutputBuffer: void writeLong(long)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.io.OutputBuffer: void writeLong(long)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: void putBoolean(java.lang.String,java.lang.Boolean)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: void putObjectId(java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.io.OutputBuffer: void writeIntBE(int)>";
"<org.bson.BasicBSONEncoder: void putObjectId(java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.io.OutputBuffer: void writeIntBE(int)>";
"<org.bson.BasicBSONEncoder: void putObjectId(java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.io.OutputBuffer: void writeIntBE(int)>";
"<org.bson.io.OutputBuffer: void writeIntBE(int)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.io.OutputBuffer: void writeIntBE(int)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.io.OutputBuffer: void writeIntBE(int)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.io.OutputBuffer: void writeIntBE(int)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: void putNumber(java.lang.String,java.lang.Number)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.BasicBSONEncoder: void putNumber(java.lang.String,java.lang.Number)>" -> "<org.bson.io.OutputBuffer: void writeLong(long)>";
"<org.bson.BasicBSONEncoder: void putNumber(java.lang.String,java.lang.Number)>" -> "<org.bson.io.OutputBuffer: void writeDouble(double)>";
"<org.bson.io.OutputBuffer: void writeDouble(double)>" -> "<java.lang.Double: void <clinit>()>";
"<org.bson.io.OutputBuffer: void writeDouble(double)>" -> "<java.lang.Double: long doubleToRawLongBits(double)>";
"<org.bson.io.OutputBuffer: void writeDouble(double)>" -> "<org.bson.io.OutputBuffer: void writeLong(long)>";
"<org.bson.BasicBSONEncoder: void putDate(java.lang.String,java.util.Date)>" -> "<org.bson.io.OutputBuffer: void writeLong(long)>";
"<org.bson.BasicBSONEncoder: void _putValueString(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: void _putValueString(java.lang.String)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.BasicBSONEncoder: void _putValueString(java.lang.String)>" -> "<org.bson.io.OutputBuffer: void writeInt(int,int)>";
"<org.bson.BasicBSONEncoder: void putMap(java.lang.String,java.util.Map)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: void putMap(java.lang.String,java.util.Map)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: void putMap(java.lang.String,java.util.Map)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.BasicBSONEncoder: void putMap(java.lang.String,java.util.Map)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: void putMap(java.lang.String,java.util.Map)>" -> "<org.bson.io.OutputBuffer: void writeInt(int,int)>";
"<org.bson.BasicBSONEncoder: void putIterable(java.lang.String,java.lang.Iterable)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: void putIterable(java.lang.String,java.lang.Iterable)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: void putIterable(java.lang.String,java.lang.Iterable)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.BasicBSONEncoder: void putIterable(java.lang.String,java.lang.Iterable)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: void putIterable(java.lang.String,java.lang.Iterable)>" -> "<org.bson.io.OutputBuffer: void writeInt(int,int)>";
"<org.bson.BasicBSONEncoder: void putArray(java.lang.String,java.lang.Object)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: void putArray(java.lang.String,java.lang.Object)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: void putArray(java.lang.String,java.lang.Object)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.BasicBSONEncoder: void putArray(java.lang.String,java.lang.Object)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: void putArray(java.lang.String,java.lang.Object)>" -> "<org.bson.io.OutputBuffer: void writeInt(int,int)>";
"<org.bson.BasicBSONEncoder: void _put(byte,java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.io.OutputBuffer: void writeInt(int,int)>";
"<org.bson.BasicBSONEncoder: int putObject(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.io.PoolOutputBuffer: int getPosition()>";
"<com.mongodb.OutMessage: void pipe(java.io.OutputStream)>" -> "<org.bson.io.PoolOutputBuffer: int pipe(java.io.OutputStream)>";
"<org.bson.io.PoolOutputBuffer: int pipe(java.io.OutputStream)>" -> "<java.lang.NullPointerException: void <init>(java.lang.String)>";
"<org.bson.io.PoolOutputBuffer: int pipe(java.io.OutputStream)>" -> "<org.bson.io.PoolOutputBuffer: byte[] _get(int)>";
"<org.bson.io.PoolOutputBuffer: int pipe(java.io.OutputStream)>" -> "<org.bson.io.PoolOutputBuffer$Position: int len(int)>";
"<org.bson.io.PoolOutputBuffer: int pipe(java.io.OutputStream)>" -> "<java.util.ArrayList: int size()>";
"<com.mongodb.OutMessage: void prepare()>" -> "<org.bson.io.PoolOutputBuffer: int size()>";
"<org.bson.io.PoolOutputBuffer: int size()>" -> "<org.bson.io.PoolOutputBuffer$Position: int pos()>";
"<com.mongodb.OutMessage: void prepare()>" -> "<org.bson.io.OutputBuffer: void writeInt(int,int)>";
"<org.bson.io.Bits: void readFully(java.io.InputStream,byte[],int,int)>" -> "<java.io.BufferedInputStream: int read(byte[],int,int)>";
"<java.io.BufferedInputStream: int read(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBPort: void close()>" -> "<java.util.concurrent.ConcurrentHashMap: void clear()>";
"<java.util.concurrent.ConcurrentHashMap: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBPort: void <init>(com.mongodb.ServerAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>" -> "<com.mongodb.DefaultDBDecoder$DefaultFactory: com.mongodb.DBDecoder create()>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern)>";
"<com.mongodb.DBApiLayer: void killCursors(com.mongodb.ServerAddress,java.util.List)>" -> "<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern,com.mongodb.ServerAddress)>";
"<com.mongodb.CommandResult: void <init>(com.mongodb.DBObject,com.mongodb.ServerAddress)>" -> "<com.mongodb.ServerAddress: java.lang.String toString()>";
"<org.bson.BasicBSONEncoder: void writeLong(long)>" -> "<org.bson.io.OutputBuffer: void writeLong(long)>";
"<com.mongodb.DBApiLayer$Result: void _advance()>" -> "<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,com.mongodb.DBDecoder)>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.ReadPreference: void <clinit>()>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.MongoException: void <init>(java.lang.String)>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.MongoException$Network: void <init>(java.lang.String,java.io.IOException)>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.MongoException: void <init>(java.lang.String)>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.ReadPreference: com.mongodb.ReadPreference primary()>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.ReadPreference: com.mongodb.ReadPreference secondaryPreferred()>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.ReadPreference: com.mongodb.ReadPreference primary()>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.ReadPreference: com.mongodb.ReadPreference primary()>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.ReadPreference: void <clinit>()>";
"<com.mongodb.ReadPreference: com.mongodb.ReadPreference secondaryPreferred()>" -> "<com.mongodb.ReadPreference: void <clinit>()>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.OutMessage: boolean hasOption(int)>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.OutMessage: int getId()>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.OutMessage: void doneWithMessage()>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.OutMessage: void doneWithMessage()>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.OutMessage: void doneWithMessage()>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.OutMessage: void doneWithMessage()>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBTCPConnector: void _checkClosed()>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBTCPConnector: void checkMaster(boolean,boolean)>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBTCPConnector: boolean _error(java.lang.Throwable,boolean)>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBTCPConnector: void checkMaster(boolean,boolean)>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>";
"<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>" -> "<java.lang.ThreadLocal: java.lang.Object get()>";
"<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBTCPConnector: com.mongodb.Response call(com.mongodb.DB,com.mongodb.DBCollection,com.mongodb.OutMessage,com.mongodb.ServerAddress,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder)>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: int _put(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONEncoder: void writeInt(int)>" -> "<org.bson.io.OutputBuffer: void writeInt(int)>";
"<com.mongodb.OutMessage: int size()>" -> "<org.bson.io.PoolOutputBuffer: int size()>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.DBTCPConnector: com.mongodb.WriteResult say(com.mongodb.DB,com.mongodb.OutMessage,com.mongodb.WriteConcern)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>";
"<com.mongodb.DBCollection: java.lang.Object apply(com.mongodb.DBObject,boolean)>" -> "<com.mongodb.gridfs.GridFSFile: java.lang.Object get(java.lang.String)>";
"<com.mongodb.DBCollection: java.lang.Object apply(com.mongodb.DBObject,boolean)>" -> "<com.mongodb.gridfs.GridFSFile: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object put(java.lang.String,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object put(java.lang.String,java.lang.Object)>" -> "<org.bson.types.ObjectId: java.lang.String toString()>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object put(java.lang.String,java.lang.Object)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object put(java.lang.String,java.lang.Object)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object put(java.lang.String,java.lang.Object)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object put(java.lang.String,java.lang.Object)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object put(java.lang.String,java.lang.Object)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object put(java.lang.String,java.lang.Object)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object put(java.lang.String,java.lang.Object)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.mongodb.gridfs.GridFSFile: java.lang.Object put(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DBApiLayer$MyCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],boolean,com.mongodb.WriteConcern,com.mongodb.DBEncoder)>" -> "<org.bson.types.ObjectId: void notNew()>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.gridfs.CLI: void main(java.lang.String[])>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.Response: void <init>(com.mongodb.ServerAddress,com.mongodb.DBCollection,java.io.InputStream,com.mongodb.DBDecoder)>" -> "<com.mongodb.DefaultDBDecoder: com.mongodb.DBObject decode(java.io.InputStream,com.mongodb.DBCollection)>";
"<com.mongodb.DefaultDBDecoder: com.mongodb.DBObject decode(java.io.InputStream,com.mongodb.DBCollection)>" -> "<com.mongodb.DefaultDBDecoder: com.mongodb.DBCallback getDBCallback(com.mongodb.DBCollection)>";
"<com.mongodb.DefaultDBDecoder: com.mongodb.DBObject decode(java.io.InputStream,com.mongodb.DBCollection)>" -> "<org.bson.BasicBSONDecoder: int decode(java.io.InputStream,org.bson.BSONCallback)>";
"<com.mongodb.DefaultDBDecoder: com.mongodb.DBCallback getDBCallback(com.mongodb.DBCollection)>" -> "<com.mongodb.DefaultDBCallback: void <clinit>()>";
"<com.mongodb.DefaultDBDecoder: com.mongodb.DBCallback getDBCallback(com.mongodb.DBCollection)>" -> "<com.mongodb.DefaultDBCallback: void <init>(com.mongodb.DBCollection)>";
"<org.bson.BasicBSONDecoder: int decode(java.io.InputStream,org.bson.BSONCallback)>" -> "<org.bson.BasicBSONDecoder$BSONInput: void <init>(org.bson.BasicBSONDecoder,java.io.InputStream)>";
"<org.bson.BasicBSONDecoder: int decode(java.io.InputStream,org.bson.BSONCallback)>" -> "<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>";
"<com.mongodb.DefaultDBCallback: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<com.mongodb.DefaultDBCallback: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<com.mongodb.DefaultDBCallback: void <clinit>()>" -> "<com.mongodb.DefaultDBCallback$DefaultFactory: void <init>()>";
"<com.mongodb.DefaultDBCallback: void <init>(com.mongodb.DBCollection)>" -> "<org.bson.BasicBSONCallback: void <init>()>";
"<org.bson.BasicBSONDecoder$BSONInput: void <init>(org.bson.BasicBSONDecoder,java.io.InputStream)>" -> "<java.lang.Object: void <init>()>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.mongodb.DefaultDBCallback$DefaultFactory: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.bson.BasicBSONCallback: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.bson.BasicBSONCallback: void <init>()>" -> "<java.util.LinkedList: void <init>()>";
"<org.bson.BasicBSONCallback: void <init>()>" -> "<java.util.LinkedList: void <init>()>";
"<com.mongodb.DefaultDBDecoder: com.mongodb.DBObject decode(java.io.InputStream,com.mongodb.DBCollection)>" -> "<com.mongodb.DefaultDBCallback: void reset()>";
"<com.mongodb.DefaultDBDecoder: com.mongodb.DBObject decode(java.io.InputStream,com.mongodb.DBCollection)>" -> "<org.bson.BasicBSONCallback: java.lang.Object get()>";
"<com.mongodb.DefaultDBCallback: void reset()>" -> "<org.bson.BasicBSONCallback: void reset()>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<org.bson.BasicBSONDecoder$BSONInput: int numRead()>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<org.bson.BasicBSONDecoder$BSONInput: void setMax(int)>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<org.bson.BasicBSONDecoder$BSONInput: int numRead()>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<org.bson.BasicBSONDecoder$BSONInput: int numRead()>";
"<org.bson.BasicBSONDecoder$BSONInput: int readInt()>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: int readInt()>" -> "<org.bson.io.Bits: int readInt(byte[],int)>";
"<org.bson.BasicBSONDecoder$BSONInput: int readInt()>" -> "<org.bson.BasicBSONDecoder: byte[] access$000(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: int readInt()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>";
"<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>" -> "<org.bson.BasicBSONDecoder: byte[] access$000(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>" -> "<java.lang.Math: int min(int,int)>";
"<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>" -> "<org.bson.BasicBSONDecoder: byte[] access$000(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>" -> "<org.bson.BasicBSONDecoder: byte[] access$000(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>" -> "<org.bson.BasicBSONDecoder: byte[] access$000(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>" -> "<org.bson.BasicBSONDecoder: byte[] access$000(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>" -> "<java.lang.System: void <clinit>()>";
"<org.bson.BasicBSONCallback: void <init>()>" -> "<com.mongodb.DefaultDBCallback: void reset()>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<org.bson.BasicBSONCallback: void objectStart()>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<com.mongodb.DefaultDBCallback: java.lang.Object objectDone()>";
"<org.bson.BasicBSONCallback: void objectStart()>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.mongodb.DefaultDBCallback: java.lang.Object objectDone()>" -> "<com.mongodb.DBRef: void <clinit>()>";
"<com.mongodb.DefaultDBCallback: java.lang.Object objectDone()>" -> "<com.mongodb.DBRef: void <init>(com.mongodb.DB,org.bson.BSONObject)>";
"<com.mongodb.DefaultDBCallback: java.lang.Object objectDone()>" -> "<org.bson.BasicBSONCallback: java.lang.Object objectDone()>";
"<com.mongodb.DBRef: void <clinit>()>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.mongodb.DBRef: void <clinit>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<com.mongodb.DBRef: void <init>(com.mongodb.DB,org.bson.BSONObject)>" -> "<com.mongodb.DBRefBase: void <init>(com.mongodb.DB,java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: java.lang.Object objectDone()>" -> "<org.bson.BSON: void <clinit>()>";
"<org.bson.BasicBSONCallback: java.lang.Object objectDone()>" -> "<org.bson.BSON: java.lang.Object applyDecodingHooks(java.lang.Object)>";
"<org.bson.BasicBSONCallback: java.lang.Object objectDone()>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONCallback: java.lang.Object objectDone()>" -> "<org.bson.BSON: boolean hasDecodeHooks()>";
"<com.mongodb.DBRefBase: void <init>(com.mongodb.DB,java.lang.String,java.lang.Object)>" -> "<java.lang.Object: void <init>()>";
"<org.bson.BSON: java.lang.Object applyDecodingHooks(java.lang.Object)>" -> "<org.bson.BSON: void <clinit>()>";
"<org.bson.BSON: java.lang.Object applyDecodingHooks(java.lang.Object)>" -> "<org.bson.BSON: boolean _anyHooks()>";
"<org.bson.BSON: boolean hasDecodeHooks()>" -> "<org.bson.BSON: void <clinit>()>";
"<org.bson.BSON: java.lang.Object applyDecodingHooks(java.lang.Object)>" -> "<org.bson.util.ClassMap: java.lang.Object get(java.lang.Object)>";
"<com.mongodb.DefaultDBCallback: java.lang.Object objectDone()>" -> "<org.bson.BasicBSONCallback: org.bson.BSONObject cur()>";
"<org.bson.BasicBSONCallback: org.bson.BSONObject cur()>" -> "<java.util.LinkedList: java.lang.Object getLast()>";
"<org.bson.BasicBSONCallback: java.lang.Object objectDone()>" -> "<java.util.LinkedList: java.lang.Object removeLast()>";
"<org.bson.BasicBSONCallback: java.lang.Object objectDone()>" -> "<java.util.LinkedList: int size()>";
"<org.bson.BasicBSONCallback: java.lang.Object objectDone()>" -> "<java.util.LinkedList: java.lang.Object removeLast()>";
"<org.bson.BasicBSONCallback: java.lang.Object objectDone()>" -> "<java.util.LinkedList: int size()>";
"<java.util.LinkedList: java.lang.Object removeLast()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONCallback: void objectStart()>" -> "<org.bson.BasicBSONCallback: void objectStart(boolean)>";
"<org.bson.BasicBSONCallback: void objectStart(boolean)>" -> "<com.mongodb.DefaultDBCallback: org.bson.BSONObject create(boolean,java.util.List)>";
"<com.mongodb.DefaultDBCallback: org.bson.BSONObject create(boolean,java.util.List)>" -> "<com.mongodb.BasicDBList: void <init>()>";
"<com.mongodb.DefaultDBCallback: org.bson.BSONObject create(boolean,java.util.List)>" -> "<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>";
"<com.mongodb.BasicDBList: void <init>()>" -> "<org.bson.types.BasicBSONList: void <init>()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<com.mongodb.DefaultDBCallback: void <clinit>()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<com.mongodb.BasicDBObject: void <init>()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<com.mongodb.MongoInternalException: void <init>(java.lang.String,java.lang.Throwable)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<com.mongodb.MongoInternalException: void <init>(java.lang.String,java.lang.Throwable)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.util.logging.Level: void <clinit>()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<com.mongodb.DefaultDBCallback: void <clinit>()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.util.logging.Level: void <clinit>()>";
"<org.bson.types.BasicBSONList: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<com.mongodb.MongoInternalException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<com.mongodb.MongoException: java.lang.Throwable _massage(java.lang.Throwable)>";
"<com.mongodb.MongoInternalException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<com.mongodb.MongoException: void <init>(java.lang.String,java.lang.Throwable)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.BasicBSONCallback: void objectStart(boolean)>" -> "<java.util.LinkedList: boolean add(java.lang.Object)>";
"<org.bson.BasicBSONCallback: void objectStart()>" -> "<java.util.LinkedList: int size()>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<org.bson.BasicBSONDecoder: boolean decodeElement()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.types.ObjectId: void <clinit>()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.types.ObjectId: void <init>(int,int,int)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.types.ObjectId: void <init>(int,int,int)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.types.ObjectId: void <clinit>()>";
"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder: java.lang.Object _readBasicObject()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder: boolean decodeElement()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder: boolean decodeElement()>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONDecoder: java.lang.Object _readBasicObject()>" -> "<org.bson.BasicBSONDecoder: boolean decodeElement()>";
"<org.bson.BasicBSONDecoder: java.lang.Object _readBasicObject()>" -> "<org.bson.BasicBSONCallback: org.bson.BSONCallback createBSONCallback()>";
"<org.bson.BasicBSONDecoder: java.lang.Object _readBasicObject()>" -> "<com.mongodb.DefaultDBCallback: void reset()>";
"<org.bson.BasicBSONDecoder: java.lang.Object _readBasicObject()>" -> "<org.bson.BasicBSONCallback: void objectStart(boolean)>";
"<org.bson.BasicBSONDecoder: java.lang.Object _readBasicObject()>" -> "<org.bson.BasicBSONCallback: java.lang.Object get()>";
"<org.bson.BasicBSONCallback: org.bson.BSONCallback createBSONCallback()>" -> "<org.bson.BasicBSONCallback: void <init>()>";
"<org.bson.BasicBSONDecoder: java.lang.Object _readBasicObject()>" -> "<org.bson.BasicBSONCallback: void reset()>";
"<org.bson.BasicBSONDecoder: java.lang.Object _readBasicObject()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<org.bson.BasicBSONCallback: void gotBinary(java.lang.String,byte,byte[])>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<org.bson.BasicBSONCallback: void gotBinary(java.lang.String,byte,byte[])>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<org.bson.BasicBSONCallback: void gotBinary(java.lang.String,byte,byte[])>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<org.bson.BasicBSONCallback: void gotUUID(java.lang.String,long,long)>";
"<org.bson.BasicBSONCallback: void gotBinary(java.lang.String,byte,byte[])>" -> "<org.bson.types.Binary: void <init>(byte,byte[])>";
"<org.bson.BasicBSONCallback: void gotUUID(java.lang.String,long,long)>" -> "<java.util.UUID: void <init>(long,long)>";
"<org.bson.types.Binary: void <init>(byte,byte[])>" -> "<java.lang.Object: void <init>()>";
"<java.util.UUID: void <init>(long,long)>" -> "<java.lang.Object: void <init>()>";
"<java.util.UUID: void <init>(long,long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONCallback: void gotUUID(java.lang.String,long,long)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>" -> "<org.bson.BSON: void <clinit>()>";
"<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>" -> "<org.bson.BSON: java.lang.Object applyDecodingHooks(java.lang.Object)>";
"<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>" -> "<org.bson.BSON: boolean hasDecodeHooks()>";
"<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONCallback: org.bson.BSONObject cur()>";
"<org.bson.BasicBSONCallback: void gotBinary(java.lang.String,byte,byte[])>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void gotBinary(java.lang.String,byte,byte[])>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<org.bson.BasicBSONDecoder$BSONInput: byte read()>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<org.bson.BasicBSONDecoder$BSONInput: void fill(byte[])>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<org.bson.BasicBSONDecoder$BSONInput: void fill(byte[])>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<org.bson.BasicBSONDecoder$BSONInput: void fill(byte[])>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<org.bson.BasicBSONDecoder$BSONInput: long readLong()>";
"<org.bson.BasicBSONDecoder: void _binary(java.lang.String)>" -> "<org.bson.BasicBSONDecoder$BSONInput: long readLong()>";
"<org.bson.BasicBSONDecoder$BSONInput: byte read()>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: byte read()>" -> "<org.bson.BasicBSONDecoder: byte[] access$000(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: byte read()>" -> "<org.bson.BasicBSONDecoder: byte[] access$000(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: byte read()>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: long readLong()>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: long readLong()>" -> "<org.bson.io.Bits: long readLong(byte[],int)>";
"<org.bson.BasicBSONDecoder$BSONInput: long readLong()>" -> "<org.bson.BasicBSONDecoder: byte[] access$000(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: long readLong()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>";
"<org.bson.BasicBSONDecoder$BSONInput: void fill(byte[])>" -> "<org.bson.BasicBSONDecoder$BSONInput: void fill(byte[],int)>";
"<org.bson.BasicBSONDecoder$BSONInput: void fill(byte[],int)>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: void fill(byte[],int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONDecoder$BSONInput: void fill(byte[],int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.bson.BasicBSONDecoder$BSONInput: void fill(byte[],int)>" -> "<org.bson.BasicBSONDecoder: byte[] access$000(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: void fill(byte[],int)>" -> "<java.lang.Math: int min(int,int)>";
"<org.bson.BasicBSONDecoder$BSONInput: void fill(byte[],int)>" -> "<java.lang.System: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: void fill(byte[],int)>" -> "<com.mongodb.Response$MyInputStream: int read(byte[],int,int)>";
"<com.mongodb.Response$MyInputStream: int read(byte[],int,int)>" -> "<java.lang.Math: int min(int,int)>";
"<com.mongodb.Response$MyInputStream: int read(byte[],int,int)>" -> "<java.io.BufferedInputStream: int read(byte[],int,int)>";
"<org.bson.BasicBSONDecoder$BSONInput: byte read()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotNull(java.lang.String)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotUndefined(java.lang.String)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotBoolean(java.lang.String,boolean)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotDouble(java.lang.String,double)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotInt(java.lang.String,int)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotLong(java.lang.String,long)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotSymbol(java.lang.String,java.lang.String)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotString(java.lang.String,java.lang.String)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotObjectId(java.lang.String,org.bson.types.ObjectId)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<com.mongodb.DefaultDBCallback: void gotDBRef(java.lang.String,java.lang.String,org.bson.types.ObjectId)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotDate(java.lang.String,long)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotRegex(java.lang.String,java.lang.String,java.lang.String)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotCode(java.lang.String,java.lang.String)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotCodeWScope(java.lang.String,java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void arrayStart(java.lang.String)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: java.lang.Object arrayDone()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void objectStart(java.lang.String)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<com.mongodb.DefaultDBCallback: java.lang.Object objectDone()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotTimestamp(java.lang.String,int,int)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotMinKey(java.lang.String)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotMaxKey(java.lang.String)>";
"<org.bson.BasicBSONCallback: void gotBoolean(java.lang.String,boolean)>" -> "<java.lang.Boolean: void <clinit>()>";
"<org.bson.BasicBSONCallback: void gotBoolean(java.lang.String,boolean)>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
"<org.bson.BasicBSONCallback: void gotDouble(java.lang.String,double)>" -> "<java.lang.Double: void <clinit>()>";
"<org.bson.BasicBSONCallback: void gotDouble(java.lang.String,double)>" -> "<java.lang.Double: java.lang.Double valueOf(double)>";
"<org.bson.BasicBSONCallback: void gotInt(java.lang.String,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.bson.BasicBSONCallback: void gotInt(java.lang.String,int)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.bson.BasicBSONCallback: void gotLong(java.lang.String,long)>" -> "<java.lang.Long: void <clinit>()>";
"<org.bson.BasicBSONCallback: void gotLong(java.lang.String,long)>" -> "<java.lang.Long: java.lang.Long valueOf(long)>";
"<com.mongodb.DefaultDBCallback: void gotDBRef(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<com.mongodb.Bytes: void <clinit>()>";
"<com.mongodb.DefaultDBCallback: void gotDBRef(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<com.mongodb.DBPointer: void <init>(com.mongodb.DBObject,java.lang.String,com.mongodb.DB,java.lang.String,org.bson.types.ObjectId)>";
"<com.mongodb.DefaultDBCallback: void gotDBRef(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<com.mongodb.DBPointer: void <clinit>()>";
"<com.mongodb.DefaultDBCallback: void gotDBRef(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.BSON: void <clinit>()>";
"<org.bson.BasicBSONCallback: void gotDate(java.lang.String,long)>" -> "<java.util.Date: void <init>(long)>";
"<org.bson.BasicBSONCallback: void gotRegex(java.lang.String,java.lang.String,java.lang.String)>" -> "<org.bson.BSON: void <clinit>()>";
"<org.bson.BasicBSONCallback: void gotRegex(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>";
"<org.bson.BasicBSONCallback: void gotRegex(java.lang.String,java.lang.String,java.lang.String)>" -> "<org.bson.BSON: int regexFlags(java.lang.String)>";
"<org.bson.BasicBSONCallback: void gotCode(java.lang.String,java.lang.String)>" -> "<org.bson.types.Code: void <init>(java.lang.String)>";
"<org.bson.BasicBSONCallback: void gotCodeWScope(java.lang.String,java.lang.String,java.lang.Object)>" -> "<org.bson.types.CodeWScope: void <init>(java.lang.String,org.bson.BSONObject)>";
"<org.bson.BasicBSONCallback: void gotTimestamp(java.lang.String,int,int)>" -> "<org.bson.types.BSONTimestamp: void <clinit>()>";
"<org.bson.BasicBSONCallback: void gotTimestamp(java.lang.String,int,int)>" -> "<org.bson.types.BSONTimestamp: void <init>(int,int)>";
"<org.bson.BasicBSONCallback: void gotMinKey(java.lang.String)>" -> "<org.bson.types.MinKey: void <init>()>";
"<org.bson.BasicBSONCallback: void gotMaxKey(java.lang.String)>" -> "<org.bson.types.MaxKey: void <init>()>";
"<java.lang.Double: java.lang.Double valueOf(double)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DBPointer: void <init>(com.mongodb.DBObject,java.lang.String,com.mongodb.DB,java.lang.String,org.bson.types.ObjectId)>" -> "<com.mongodb.DBRefBase: void <init>(com.mongodb.DB,java.lang.String,java.lang.Object)>";
"<com.mongodb.DBPointer: void <clinit>()>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.mongodb.DBPointer: void <clinit>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<java.util.Date: void <init>(long)>" -> "<java.lang.Object: void <init>()>";
"<java.util.Date: void <init>(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BSON: int regexFlags(java.lang.String)>" -> "<org.bson.BSON$RegexFlag: void <clinit>()>";
"<org.bson.BSON: int regexFlags(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.BSON: int regexFlags(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.BSON: int regexFlags(java.lang.String)>" -> "<org.bson.BSON: void _warnUnsupportedRegex(java.lang.String)>";
"<org.bson.BSON: int regexFlags(java.lang.String)>" -> "<org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag getByCharacter(char)>";
"<org.bson.BSON: int regexFlags(java.lang.String)>" -> "<org.bson.BSON: void <clinit>()>";
"<org.bson.types.Code: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.bson.types.CodeWScope: void <init>(java.lang.String,org.bson.BSONObject)>" -> "<org.bson.types.Code: void <init>(java.lang.String)>";
"<org.bson.types.BSONTimestamp: void <clinit>()>" -> "<java.lang.Boolean: void <clinit>()>";
"<org.bson.types.BSONTimestamp: void <clinit>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<org.bson.types.BSONTimestamp: void <init>(int,int)>" -> "<java.lang.Object: void <init>()>";
"<org.bson.types.BSONTimestamp: void <init>(int,int)>" -> "<java.util.Date: void <init>(long)>";
"<org.bson.types.MinKey: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.bson.types.MaxKey: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.bson.BSON: void _warnUnsupportedRegex(java.lang.String)>" -> "<org.bson.BSON: void <clinit>()>";
"<org.bson.BSON: void _warnUnsupportedRegex(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag getByCharacter(char)>" -> "<org.bson.BSON$RegexFlag: void <clinit>()>";
"<org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag getByCharacter(char)>" -> "<java.lang.Character: java.lang.Character valueOf(char)>";
"<org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag getByCharacter(char)>" -> "<java.lang.Character: void <clinit>()>";
"<org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag getByCharacter(char)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.bson.BSON: void _warnUnsupportedRegex(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.BSON: void _warnUnsupportedRegex(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.BSON: void _warnUnsupportedRegex(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.BSON: void _warnUnsupportedRegex(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.BSON: int regexFlags(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.BasicBSONCallback: void gotMaxKey(java.lang.String)>" -> "<org.bson.BasicBSONCallback: org.bson.BSONObject cur()>";
"<org.bson.BasicBSONCallback: void gotMinKey(java.lang.String)>" -> "<org.bson.BasicBSONCallback: org.bson.BSONObject cur()>";
"<org.bson.BasicBSONCallback: void gotTimestamp(java.lang.String,int,int)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void objectStart(java.lang.String)>" -> "<com.mongodb.DefaultDBCallback: void objectStart(boolean,java.lang.String)>";
"<com.mongodb.DefaultDBCallback: void objectStart(boolean,java.lang.String)>" -> "<org.bson.BasicBSONCallback: void objectStart(boolean,java.lang.String)>";
"<org.bson.BasicBSONCallback: void objectStart(boolean,java.lang.String)>" -> "<com.mongodb.DefaultDBCallback: org.bson.BSONObject create(boolean,java.util.List)>";
"<org.bson.BasicBSONCallback: void objectStart(boolean,java.lang.String)>" -> "<java.util.LinkedList: void addLast(java.lang.Object)>";
"<org.bson.BasicBSONCallback: void objectStart(boolean,java.lang.String)>" -> "<java.util.LinkedList: java.lang.Object getLast()>";
"<org.bson.BasicBSONCallback: void objectStart(boolean,java.lang.String)>" -> "<java.util.LinkedList: void addLast(java.lang.Object)>";
"<java.util.LinkedList: void addLast(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONCallback: java.lang.Object arrayDone()>" -> "<com.mongodb.DefaultDBCallback: java.lang.Object objectDone()>";
"<org.bson.BasicBSONCallback: void arrayStart(java.lang.String)>" -> "<com.mongodb.DefaultDBCallback: void objectStart(boolean,java.lang.String)>";
"<org.bson.BasicBSONCallback: void gotCodeWScope(java.lang.String,java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void gotCode(java.lang.String,java.lang.String)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void gotRegex(java.lang.String,java.lang.String,java.lang.String)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void gotDate(java.lang.String,long)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<com.mongodb.DefaultDBCallback: void gotDBRef(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.types.ObjectId: boolean equals(java.lang.Object)>";
"<org.bson.types.ObjectId: boolean equals(java.lang.Object)>" -> "<org.bson.types.ObjectId: void <clinit>()>";
"<org.bson.types.ObjectId: boolean equals(java.lang.Object)>" -> "<org.bson.types.ObjectId: org.bson.types.ObjectId massageToObjectId(java.lang.Object)>";
"<org.bson.types.ObjectId: org.bson.types.ObjectId massageToObjectId(java.lang.Object)>" -> "<org.bson.types.ObjectId: void <clinit>()>";
"<org.bson.types.ObjectId: org.bson.types.ObjectId massageToObjectId(java.lang.Object)>" -> "<org.bson.types.ObjectId: void <init>(java.lang.String)>";
"<org.bson.types.ObjectId: org.bson.types.ObjectId massageToObjectId(java.lang.Object)>" -> "<org.bson.types.ObjectId: boolean isValid(java.lang.String)>";
"<org.bson.types.ObjectId: void <init>(java.lang.String)>" -> "<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>";
"<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>" -> "<org.bson.types.ObjectId: void <clinit>()>";
"<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>" -> "<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>";
"<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>" -> "<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>";
"<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>" -> "<org.bson.types.ObjectId: boolean isValid(java.lang.String)>";
"<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>" -> "<java.lang.Object: void <init>()>";
"<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<java.lang.Integer: int parseInt(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>" -> "<org.bson.types.ObjectId: void <clinit>()>";
"<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>" -> "<org.bson.types.ObjectId: java.lang.String _pos(java.lang.String,int)>";
"<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>" -> "<org.bson.types.ObjectId: java.lang.String _pos(java.lang.String,int)>";
"<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>(int)>";
"<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>" -> "<org.bson.types.ObjectId: boolean isValid(java.lang.String)>";
"<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.types.ObjectId: org.bson.types.ObjectId massageToObjectId(java.lang.Object)>" -> "<org.bson.types.ObjectId: java.lang.String toString()>";
"<com.mongodb.DefaultDBCallback: void gotDBRef(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.BasicBSONCallback: org.bson.BSONObject cur()>";
"<com.mongodb.DefaultDBCallback: void gotDBRef(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.BasicBSONCallback: org.bson.BSONObject cur()>";
"<com.mongodb.DefaultDBCallback: void gotDBRef(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.BasicBSONCallback: org.bson.BSONObject cur()>";
"<org.bson.BasicBSONCallback: void gotObjectId(java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void gotString(java.lang.String,java.lang.String)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void gotSymbol(java.lang.String,java.lang.String)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void gotLong(java.lang.String,long)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void gotInt(java.lang.String,int)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void gotDouble(java.lang.String,double)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void gotBoolean(java.lang.String,boolean)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void gotNull(java.lang.String)>" -> "<org.bson.BasicBSONCallback: org.bson.BSONObject cur()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: byte read()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: byte read()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: double readDouble()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: long readLong()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readIntBE()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readIntBE()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readIntBE()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: long readLong()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BSONException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: org.bson.io.PoolOutputBuffer access$200(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: org.bson.io.PoolOutputBuffer access$200(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: org.bson.io.PoolOutputBuffer access$200(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: org.bson.io.PoolOutputBuffer access$200(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: byte[] access$100(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: byte[] access$100(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: byte[] access$100(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: org.bson.io.PoolOutputBuffer access$200(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: org.bson.io.PoolOutputBuffer access$200(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<java.lang.String: void <init>(byte[],int,int,java.lang.String)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: byte[] access$100(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: byte[] access$100(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: byte[] access$100(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: byte[] access$100(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: byte[] access$100(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder: byte[] access$100(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<java.lang.String: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: double readDouble()>" -> "<java.lang.Double: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: double readDouble()>" -> "<java.lang.Double: double longBitsToDouble(long)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<org.bson.BSONException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<java.lang.String: void <init>(byte[],int,int,java.lang.String)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<org.bson.BasicBSONDecoder: byte[] access$100(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<org.bson.BasicBSONDecoder: byte[] access$100(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<java.lang.String: void <init>(byte[],int,int,java.lang.String)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<org.bson.BasicBSONDecoder: byte[] access$000(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<org.bson.BasicBSONDecoder: byte[] access$000(org.bson.BasicBSONDecoder)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<org.bson.BSONException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<java.lang.String: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<java.lang.String: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: int readIntBE()>" -> "<org.bson.BasicBSONDecoder: void <clinit>()>";
"<org.bson.BasicBSONDecoder$BSONInput: int readIntBE()>" -> "<org.bson.io.Bits: int readIntBE(byte[],int)>";
"<org.bson.BasicBSONDecoder$BSONInput: int readIntBE()>" -> "<org.bson.BasicBSONDecoder: byte[] access$000(org.bson.BasicBSONDecoder)>";
"<org.bson.BSONException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
"<java.lang.String: void <init>(byte[],int,int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[],int,int,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BSONException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONDecoder$BSONInput: int readIntBE()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int readInt()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<org.bson.BasicBSONDecoder$BSONInput: byte read()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readUTF8String()>" -> "<org.bson.BasicBSONDecoder$BSONInput: void fill(byte[],int)>";
"<org.bson.BasicBSONDecoder$BSONInput: double readDouble()>" -> "<org.bson.BasicBSONDecoder$BSONInput: long readLong()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder$BSONInput: byte read()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder$BSONInput: byte read()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder$BSONInput: boolean _isAscii(byte)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder$BSONInput: boolean _isAscii(byte)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder$BSONInput: byte read()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.BasicBSONDecoder$BSONInput: boolean _isAscii(byte)>";
"<org.bson.BSON: int regexFlags(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.bson.BSON: int regexFlags(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.bson.BSON: int regexFlags(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.bson.BSON: int regexFlags(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.bson.BSON: int regexFlags(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.bson.BSON: int regexFlags(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<java.lang.String: java.lang.String toLowerCase()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.util.LinkedList: int size()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.util.LinkedList: int size()>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<org.bson.BasicBSONCallback: void objectStart(boolean)>" -> "<org.bson.BasicBSONCallback: org.bson.BSONObject create(boolean,java.util.List)>";
"<org.bson.BasicBSONCallback: org.bson.BSONObject create(boolean,java.util.List)>" -> "<org.bson.BasicBSONCallback: org.bson.BSONObject createList()>";
"<org.bson.BasicBSONCallback: org.bson.BSONObject create(boolean,java.util.List)>" -> "<org.bson.BasicBSONCallback: org.bson.BSONObject create()>";
"<org.bson.BasicBSONCallback: org.bson.BSONObject create(boolean,java.util.List)>" -> "<com.mongodb.DefaultDBCallback: org.bson.BSONObject create()>";
"<org.bson.BasicBSONCallback: org.bson.BSONObject createList()>" -> "<org.bson.types.BasicBSONList: void <init>()>";
"<org.bson.BasicBSONCallback: org.bson.BSONObject create()>" -> "<org.bson.BasicBSONObject: void <init>()>";
"<com.mongodb.DefaultDBCallback: org.bson.BSONObject create()>" -> "<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>";
"<org.bson.BSON: java.lang.Object applyDecodingHooks(java.lang.Object)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<com.mongodb.DBRefBase: void <init>(com.mongodb.DB,java.lang.String,java.lang.Object)>" -> "<java.lang.String: java.lang.String intern()>";
"<org.bson.BasicBSONCallback: void <init>()>" -> "<org.bson.BasicBSONCallback: void reset()>";
"<com.mongodb.DefaultDBCallback: void <init>(com.mongodb.DBCollection)>" -> "<com.mongodb.DBCollection: com.mongodb.DB getDB()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.io.PoolOutputBuffer: void reset()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.io.PoolOutputBuffer: void write(byte[],int,int)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.io.PoolOutputBuffer: void write(int)>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.io.PoolOutputBuffer: java.lang.String asAscii()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.io.PoolOutputBuffer: void reset()>";
"<org.bson.BasicBSONDecoder$BSONInput: java.lang.String readCStr()>" -> "<org.bson.io.PoolOutputBuffer: java.lang.String asString(java.lang.String)>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asAscii()>" -> "<java.lang.String: void <clinit>()>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asAscii()>" -> "<java.lang.String: void <init>(char[],int,int)>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asAscii()>" -> "<org.bson.io.OutputBuffer: java.lang.String asString()>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asString(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asString(java.lang.String)>" -> "<java.lang.String: void <init>(byte[],int,int,java.lang.String)>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asString(java.lang.String)>" -> "<org.bson.io.OutputBuffer: java.lang.String asString(java.lang.String)>";
"<java.lang.String: void <init>(char[],int,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(char[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.io.OutputBuffer: java.lang.String asString()>" -> "<java.lang.String: void <clinit>()>";
"<org.bson.io.OutputBuffer: java.lang.String asString()>" -> "<java.lang.String: void <init>(byte[])>";
"<org.bson.io.OutputBuffer: java.lang.String asString(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.bson.io.OutputBuffer: java.lang.String asString(java.lang.String)>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<java.lang.String: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: void <init>(byte[],java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[],java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asString(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asString(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asString(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: int size()>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asString(java.lang.String)>" -> "<org.bson.io.PoolOutputBuffer: int size()>";
"<org.bson.io.OutputBuffer: java.lang.String asString(java.lang.String)>" -> "<org.bson.io.OutputBuffer: byte[] toByteArray()>";
"<org.bson.io.OutputBuffer: byte[] toByteArray()>" -> "<java.io.ByteArrayOutputStream: void <init>(int)>";
"<org.bson.io.OutputBuffer: byte[] toByteArray()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
"<java.io.ByteArrayOutputStream: void <init>(int)>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.ByteArrayOutputStream: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.io.OutputBuffer: byte[] toByteArray()>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<java.io.ByteArrayOutputStream: byte[] toByteArray()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.io.OutputBuffer: byte[] toByteArray()>" -> "<org.bson.io.PoolOutputBuffer: int size()>";
"<org.bson.io.OutputBuffer: byte[] toByteArray()>" -> "<org.bson.io.PoolOutputBuffer: int pipe(java.io.OutputStream)>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asString(java.lang.String)>" -> "<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.lang.String: void <init>(char[],int,int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<org.bson.io.UTF8Encoding: void checkByte(int,int,int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<org.bson.io.UTF8Encoding: void checkByte(int,int,int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<org.bson.io.UTF8Encoding: void checkByte(int,int,int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<org.bson.io.UTF8Encoding: void checkByte(int,int,int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<org.bson.io.UTF8Encoding: void checkByte(int,int,int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<org.bson.io.UTF8Encoding: void checkByte(int,int,int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.lang.String: void <clinit>()>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.bson.io.UTF8Encoding: java.lang.String decode(byte[],int,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: void <init>(int)>" -> "<java.lang.Number: void <init>()>";
"<java.lang.Integer: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.bson.io.UTF8Encoding: void checkByte(int,int,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.bson.io.UTF8Encoding: void checkByte(int,int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.bson.io.UTF8Encoding: void checkByte(int,int,int)>" -> "<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.bson.io.UTF8Encoding: void checkByte(int,int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.bson.io.UTF8Encoding: void checkByte(int,int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.bson.io.UTF8Encoding: void checkByte(int,int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.bson.io.UTF8Encoding: void checkMinimal(int,int)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asString(java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asAscii()>" -> "<org.bson.io.PoolOutputBuffer: int size()>";
"<org.bson.io.OutputBuffer: java.lang.String asString()>" -> "<org.bson.io.OutputBuffer: byte[] toByteArray()>";
"<org.bson.io.PoolOutputBuffer: java.lang.String asAscii()>" -> "<java.util.ArrayList: int size()>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: void gotDBRef(java.lang.String,java.lang.String,org.bson.types.ObjectId)>";
"<org.bson.BasicBSONDecoder: boolean decodeElement()>" -> "<org.bson.BasicBSONCallback: java.lang.Object objectDone()>";
"<org.bson.BasicBSONCallback: void gotDBRef(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.BasicBSONObject: void <init>(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void gotDBRef(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.BasicBSONObject: org.bson.BasicBSONObject append(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONObject: org.bson.BasicBSONObject append(java.lang.String,java.lang.Object)>" -> "<org.bson.BasicBSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void gotDBRef(java.lang.String,java.lang.String,org.bson.types.ObjectId)>" -> "<org.bson.BasicBSONCallback: void _put(java.lang.String,java.lang.Object)>";
"<org.bson.BasicBSONCallback: void objectStart(java.lang.String)>" -> "<org.bson.BasicBSONCallback: void objectStart(boolean,java.lang.String)>";
"<org.bson.BasicBSONCallback: void objectStart(boolean,java.lang.String)>" -> "<org.bson.BasicBSONCallback: org.bson.BSONObject create(boolean,java.util.List)>";
"<org.bson.BasicBSONCallback: java.lang.Object arrayDone()>" -> "<org.bson.BasicBSONCallback: java.lang.Object objectDone()>";
"<org.bson.BasicBSONCallback: void arrayStart(java.lang.String)>" -> "<org.bson.BasicBSONCallback: void objectStart(boolean,java.lang.String)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<com.mongodb.DBCollection: java.lang.Class getInternalClass(java.lang.String)>";
"<com.mongodb.DBCollection: java.lang.Class getInternalClass(java.lang.String)>" -> "<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.Class getInternalClass(java.lang.String)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.Class getInternalClass(java.lang.String)>" -> "<com.mongodb.ReflectionDBObject: void <clinit>()>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.Class getInternalClass(java.lang.String)>" -> "<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapperIfReflectionObject(java.lang.Class)>";
"<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapperIfReflectionObject(java.lang.Class)>" -> "<com.mongodb.ReflectionDBObject: void <clinit>()>";
"<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapperIfReflectionObject(java.lang.Class)>" -> "<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapper(java.lang.Class)>";
"<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapperIfReflectionObject(java.lang.Class)>" -> "<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.Class getInternalClass(java.lang.String)>" -> "<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.Class getInternalClass(java.lang.String)>";
"<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.Class getInternalClass(java.lang.String)>" -> "<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
"<com.mongodb.DefaultDBCallback: com.mongodb.DBObject _create(java.util.List)>" -> "<java.lang.Class: java.lang.Object newInstance()>";
"<com.mongodb.DefaultDBCallback: java.lang.Object objectDone()>" -> "<org.bson.BasicBSONObject: boolean containsField(java.lang.String)>";
"<com.mongodb.DefaultDBCallback: java.lang.Object objectDone()>" -> "<org.bson.BasicBSONObject: boolean containsField(java.lang.String)>";
"<com.mongodb.DBRef: void <init>(com.mongodb.DB,org.bson.BSONObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<com.mongodb.DBRef: void <init>(com.mongodb.DB,org.bson.BSONObject)>" -> "<org.bson.BasicBSONObject: java.lang.Object get(java.lang.String)>";
"<org.bson.BasicBSONDecoder$BSONInput: int _need(int)>" -> "<com.mongodb.Response$MyInputStream: int read(byte[],int,int)>";
"<org.bson.BasicBSONCallback: void reset()>" -> "<java.util.LinkedList: void clear()>";
"<org.bson.BasicBSONCallback: void reset()>" -> "<java.util.LinkedList: void clear()>";
"<java.util.LinkedList: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.bson.BasicBSONDecoder: int _decode(org.bson.BasicBSONDecoder$BSONInput,org.bson.BSONCallback)>" -> "<org.bson.BasicBSONCallback: java.lang.Object objectDone()>";
"<org.bson.io.PoolOutputBuffer: int pipe(java.io.OutputStream)>" -> "<java.io.ByteArrayOutputStream: void write(byte[],int,int)>";
"<java.io.ByteArrayOutputStream: void write(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
}
