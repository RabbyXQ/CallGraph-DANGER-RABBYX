digraph CallGraph {
"<com.iflytek.codec.test.TestMP3Encoder: void main(java.lang.String[])>" -> "<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.codec.Mp3Encoder: void <clinit>()>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.codec.Mp3Encoder: int unInit()>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.codec.test.TestMP3Encoder: void write(java.io.FileOutputStream,byte[],int)>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.codec.Mp3Encoder: int encodeFlush(byte[])>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.codec.test.TestMP3Encoder: int read(java.io.FileInputStream,byte[])>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.codec.test.TestMP3Encoder: void write(java.io.FileOutputStream,byte[],int)>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.codec.Mp3Encoder: int encodeBufferInterleaved(short[],int,byte[])>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.utility.t: short[] a(byte[],int,short[])>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.codec.test.TestMP3Encoder: int read(java.io.FileInputStream,byte[])>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.utility.ae: void a(java.lang.String,java.lang.String)>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.codec.Mp3Encoder: int getMP3BufferSize()>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.codec.Mp3Encoder: int getPCMBufferSize()>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<java.io.FileOutputStream: void <init>(java.lang.String)>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<java.io.FileInputStream: void <init>(java.lang.String)>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.utility.ae: void a(java.lang.String,java.lang.String)>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<com.iflytek.codec.Mp3Encoder: int initWithDefaultBitrate(int,int,int,int)>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.codec.Mp3Encoder: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<com.iflytek.codec.Mp3Encoder: void <clinit>()>" -> "<java.lang.System: void loadLibrary(java.lang.String)>";
"<com.iflytek.utility.ae: void a(java.lang.String,java.lang.String)>" -> "<com.iflytek.callshow.utils.log.Logger: void <clinit>()>";
"<com.iflytek.utility.ae: void a(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<com.iflytek.utility.ae: void a(java.lang.String,java.lang.String)>" -> "<com.iflytek.callshow.utils.log.Logger: com.iflytek.callshow.utils.log.Logger log()>";
"<java.io.FileOutputStream: void <init>(java.lang.String)>" -> "<java.io.FileOutputStream: void finalize()>";
"<java.io.FileOutputStream: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.lang.String)>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.FileInputStream: void <init>(java.lang.String)>" -> "<java.io.FileInputStream: void finalize()>";
"<java.io.FileInputStream: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.lang.String)>" -> "<java.io.InputStream: void <init>()>";
"<java.lang.StringBuilder: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.codec.Mp3Encoder: int initWithDefaultBitrate(int,int,int,int)>" -> "<com.iflytek.codec.Mp3Encoder: void <clinit>()>";
"<com.iflytek.codec.Mp3Encoder: int initWithDefaultBitrate(int,int,int,int)>" -> "<com.iflytek.codec.Mp3Encoder: int init(int,int,int,int,int)>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: void loadLibrary(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: void <clinit>()>" -> "<com.iflytek.ui.MyApplication: void <clinit>()>";
"<com.iflytek.callshow.utils.log.Logger: void <clinit>()>" -> "<com.iflytek.callshow.utils.log.Logger: boolean forceShowLog()>";
"<com.iflytek.callshow.utils.log.Logger: void <clinit>()>" -> "<com.iflytek.utility.ae: void a(java.lang.String,java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: void <clinit>()>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: void <clinit>()>" -> "<com.iflytek.callshow.utils.log.Logger: boolean supportLocalMock()>";
"<com.iflytek.callshow.utils.log.Logger: void <clinit>()>" -> "<java.util.Hashtable: void <init>()>";
"<com.iflytek.callshow.utils.log.Logger: void <clinit>()>" -> "<com.iflytek.ui.MyApplication: com.iflytek.ui.MyApplication a()>";
"<com.iflytek.callshow.utils.log.Logger: void <clinit>()>" -> "<com.iflytek.config.b: void <clinit>()>";
"<com.iflytek.callshow.utils.log.Logger: com.iflytek.callshow.utils.log.Logger log()>" -> "<com.iflytek.callshow.utils.log.Logger: void <clinit>()>";
"<com.iflytek.callshow.utils.log.Logger: com.iflytek.callshow.utils.log.Logger log()>" -> "<com.iflytek.callshow.utils.log.Logger: com.iflytek.callshow.utils.log.Logger getLogger(java.lang.String,java.lang.String)>";
"<java.io.FileOutputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: boolean forceShowLog()>" -> "<com.iflytek.ui.MyApplication: void <clinit>()>";
"<com.iflytek.callshow.utils.log.Logger: boolean forceShowLog()>" -> "<java.io.File: void <init>(java.io.File,java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: boolean forceShowLog()>" -> "<com.iflytek.callshow.utils.AppTools: java.io.File getExternalCacheDir(android.content.Context)>";
"<com.iflytek.callshow.utils.log.Logger: boolean forceShowLog()>" -> "<com.iflytek.ui.MyApplication: com.iflytek.ui.MyApplication a()>";
"<com.iflytek.callshow.utils.log.Logger: boolean forceShowLog()>" -> "<java.io.File: void <clinit>()>";
"<com.iflytek.callshow.utils.log.Logger: boolean supportLocalMock()>" -> "<com.iflytek.ui.MyApplication: void <clinit>()>";
"<com.iflytek.callshow.utils.log.Logger: boolean supportLocalMock()>" -> "<java.io.File: void <init>(java.io.File,java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: boolean supportLocalMock()>" -> "<com.iflytek.callshow.utils.AppTools: java.io.File getExternalCacheDir(android.content.Context)>";
"<com.iflytek.callshow.utils.log.Logger: boolean supportLocalMock()>" -> "<com.iflytek.ui.MyApplication: com.iflytek.ui.MyApplication a()>";
"<com.iflytek.callshow.utils.log.Logger: boolean supportLocalMock()>" -> "<java.io.File: void <clinit>()>";
"<java.util.Hashtable: void <init>()>" -> "<java.util.Dictionary: void <init>()>";
"<java.util.Hashtable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.ui.MyApplication: com.iflytek.ui.MyApplication a()>" -> "<com.iflytek.ui.MyApplication: void <clinit>()>";
"<com.iflytek.ui.MyApplication: com.iflytek.ui.MyApplication a()>" -> "<com.iflytek.ui.MyApplication: void <init>()>";
"<com.iflytek.callshow.utils.log.Logger: com.iflytek.callshow.utils.log.Logger getLogger(java.lang.String,java.lang.String)>" -> "<com.iflytek.callshow.utils.log.Logger: void <clinit>()>";
"<com.iflytek.callshow.utils.log.Logger: com.iflytek.callshow.utils.log.Logger getLogger(java.lang.String,java.lang.String)>" -> "<com.iflytek.callshow.utils.log.Logger: void <init>(java.lang.String,java.lang.String)>";
"<java.io.File: void <init>(java.io.File,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.io.File,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.ui.MyApplication: void <init>()>" -> "<java.lang.System: void <clinit>()>";
"<com.iflytek.ui.MyApplication: void <init>()>" -> "<java.lang.System: long currentTimeMillis()>";
"<com.iflytek.ui.MyApplication: void <init>()>" -> "<android.app.Application: void <init>()>";
"<com.iflytek.ui.MyApplication: void <init>()>" -> "<com.iflytek.ui.MyApplication: void <clinit>()>";
"<com.iflytek.callshow.utils.log.Logger: void <init>(java.lang.String,java.lang.String)>" -> "<com.iflytek.callshow.utils.log.Logger: void <clinit>()>";
"<com.iflytek.callshow.utils.log.Logger: void <init>(java.lang.String,java.lang.String)>" -> "<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: void <init>(java.lang.String,java.lang.String)>" -> "<com.iflytek.utility.bm: boolean b(java.lang.CharSequence)>";
"<com.iflytek.callshow.utils.log.Logger: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<android.app.Application: void <init>()>" -> "<android.content.ContextWrapper: void <init>(android.content.Context)>";
"<android.app.Application: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<com.iflytek.ui.MyApplication: void <clinit>()>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<com.iflytek.utility.bo: java.lang.String a()>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.io.File: void <init>(java.io.File,java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<com.iflytek.ui.MyApplication: com.iflytek.ui.MyApplication a()>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<com.iflytek.utility.bo: void <clinit>()>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<com.iflytek.utility.bm: boolean b(java.lang.CharSequence)>" -> "<com.iflytek.utility.bm: boolean a(java.lang.CharSequence)>";
"<android.content.ContextWrapper: void <init>(android.content.Context)>" -> "<android.content.Context: void <init>()>";
"<android.content.ContextWrapper: void <init>(android.content.Context)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.utility.bo: java.lang.String a()>" -> "<java.lang.System: void <clinit>()>";
"<com.iflytek.utility.bo: java.lang.String a()>" -> "<com.iflytek.utility.bo: java.lang.String a(java.lang.String,long)>";
"<com.iflytek.utility.bo: java.lang.String a()>" -> "<java.lang.System: long currentTimeMillis()>";
"<com.iflytek.utility.bo: java.lang.String a()>" -> "<com.iflytek.utility.bo: void <clinit>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<android.os.Environment: void <clinit>()>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<com.iflytek.callshow.utils.AppTools: java.io.File getExternalCacheDir(android.content.Context)>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<com.iflytek.callshow.utils.AppTools: boolean isExternalStorageRemovable()>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<android.os.Environment: java.lang.String getExternalStorageState()>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<com.iflytek.utility.bo: void <clinit>()>" -> "<java.util.Calendar: java.util.Calendar getInstance()>";
"<com.iflytek.utility.bm: boolean a(java.lang.CharSequence)>" -> "<android.text.TextUtils: void <clinit>()>";
"<com.iflytek.utility.bm: boolean a(java.lang.CharSequence)>" -> "<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>";
"<com.iflytek.utility.bm: boolean a(java.lang.CharSequence)>" -> "<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>";
"<android.content.Context: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<android.content.Context: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.utility.bo: java.lang.String a(java.lang.String,long)>" -> "<java.util.Locale: void <clinit>()>";
"<com.iflytek.utility.bo: java.lang.String a(java.lang.String,long)>" -> "<java.util.Date: void <init>(long)>";
"<com.iflytek.utility.bo: java.lang.String a(java.lang.String,long)>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>";
"<com.iflytek.utility.bo: java.lang.String a(java.lang.String,long)>" -> "<java.util.Locale: java.util.Locale getDefault()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.AppTools: boolean isExternalStorageRemovable()>" -> "<android.os.Environment: void <clinit>()>";
"<com.iflytek.callshow.utils.AppTools: boolean isExternalStorageRemovable()>" -> "<android.os.Environment: boolean isExternalStorageRemovable()>";
"<android.os.Environment: java.lang.String getExternalStorageState()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Calendar: java.util.Calendar getInstance()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Date: void <init>(long)>" -> "<java.lang.Object: void <init>()>";
"<java.util.Date: void <init>(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>" -> "<java.text.DateFormat: void <init>()>";
"<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Locale: java.util.Locale getDefault()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<android.os.Environment: boolean isExternalStorageRemovable()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.DateFormat: void <init>()>" -> "<java.text.Format: void <init>()>";
"<java.text.DateFormat: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.Format: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.text.Format: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.utility.bo: java.lang.String a(java.lang.String,long)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<java.text.DateFormat: java.lang.String format(java.util.Date)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.io.File: boolean createNewFile()>";
"<java.io.File: boolean createNewFile()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<java.io.File: java.lang.String getPath()>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<java.io.File: java.lang.String getPath()>";
"<java.io.File: java.lang.String getPath()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.io.File: boolean exists()>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.io.File: boolean mkdirs()>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<java.io.File: boolean exists()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: boolean mkdirs()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: java.lang.String getAbsolutePath()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<java.lang.String: java.lang.String trim()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.utility.bm: boolean a(java.lang.CharSequence)>" -> "<java.lang.String: java.lang.String toString()>";
"<java.lang.String: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: boolean supportLocalMock()>" -> "<java.io.File: boolean exists()>";
"<com.iflytek.callshow.utils.log.Logger: boolean forceShowLog()>" -> "<java.io.File: boolean exists()>";
"<com.iflytek.callshow.utils.log.Logger: void <clinit>()>" -> "<android.content.ContextWrapper: java.lang.String getPackageName()>";
"<android.content.ContextWrapper: java.lang.String getPackageName()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getDiskCacheDir(android.content.Context,java.lang.String)>" -> "<android.content.ContextWrapper: java.io.File getCacheDir()>";
"<android.content.ContextWrapper: java.io.File getCacheDir()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.AppTools: java.io.File getExternalCacheDir(android.content.Context)>" -> "<android.content.ContextWrapper: java.io.File getExternalCacheDir()>";
"<android.content.ContextWrapper: java.io.File getExternalCacheDir()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: boolean forceShowLog()>" -> "<android.content.ContextWrapper: android.content.Context getApplicationContext()>";
"<android.content.ContextWrapper: android.content.Context getApplicationContext()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: boolean supportLocalMock()>" -> "<android.content.ContextWrapper: android.content.Context getApplicationContext()>";
"<com.iflytek.utility.ae: void a(java.lang.String,java.lang.String)>" -> "<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<com.iflytek.callshow.utils.log.Logger: void <clinit>()>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<android.util.Log: int e(java.lang.String,java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<android.util.Log: int e(java.lang.String,java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>";
"<android.util.Log: int e(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.Thread: java.lang.Thread currentThread()>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.Thread: java.lang.Thread currentThread()>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.Thread: java.lang.String getName()>";
"<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: java.lang.String getName()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.Class: java.lang.String getName()>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.Class: java.lang.String getName()>";
"<java.lang.Class: java.lang.String getName()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<java.lang.Object: java.lang.Class getClass()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.iflytek.callshow.utils.log.Logger: java.lang.String getFunctionName()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<com.iflytek.callshow.utils.log.FileLogger: void println(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void println(java.lang.String)>" -> "<com.iflytek.callshow.utils.log.FileLogger: void openInput()>";
"<com.iflytek.callshow.utils.log.FileLogger: void openInput()>" -> "<java.io.File: void <clinit>()>";
"<com.iflytek.callshow.utils.log.FileLogger: void openInput()>" -> "<java.io.BufferedWriter: void <init>(java.io.Writer)>";
"<com.iflytek.callshow.utils.log.FileLogger: void openInput()>" -> "<java.io.FileWriter: void <init>(java.lang.String,boolean)>";
"<com.iflytek.callshow.utils.log.FileLogger: void openInput()>" -> "<java.io.File: void <init>(java.lang.String)>";
"<java.io.BufferedWriter: void <init>(java.io.Writer)>" -> "<java.io.Writer: void <init>()>";
"<java.io.BufferedWriter: void <init>(java.io.Writer)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileWriter: void <init>(java.lang.String,boolean)>" -> "<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>";
"<java.io.FileWriter: void <init>(java.lang.String,boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.Writer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Writer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>" -> "<java.io.Writer: void <init>()>";
"<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void openInput()>" -> "<java.lang.Throwable: void printStackTrace()>";
"<java.lang.Throwable: void printStackTrace()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void openInput()>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<com.iflytek.callshow.utils.log.FileLogger: void println(java.lang.String)>" -> "<com.iflytek.callshow.utils.log.FileLogger: void print(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void print(java.lang.String)>" -> "<com.iflytek.utility.bo: void <clinit>()>";
"<com.iflytek.callshow.utils.log.FileLogger: void print(java.lang.String)>" -> "<com.iflytek.utility.bo: java.lang.String a(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void print(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>(java.lang.String)>";
"<com.iflytek.utility.bo: java.lang.String a(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<com.iflytek.utility.bo: java.lang.String a(java.lang.String)>" -> "<com.iflytek.utility.bo: java.lang.String a(java.lang.String,long)>";
"<com.iflytek.utility.bo: java.lang.String a(java.lang.String)>" -> "<java.lang.System: long currentTimeMillis()>";
"<com.iflytek.utility.bo: java.lang.String a(java.lang.String)>" -> "<com.iflytek.utility.bo: void <clinit>()>";
"<com.iflytek.callshow.utils.log.FileLogger: void print(java.lang.String)>" -> "<java.lang.Throwable: void printStackTrace()>";
"<com.iflytek.callshow.utils.log.FileLogger: void print(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void print(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<com.iflytek.callshow.utils.log.FileLogger: void print(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void print(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<com.iflytek.callshow.utils.log.FileLogger: void print(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
"<com.iflytek.callshow.utils.log.Logger: void <clinit>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.callshow.utils.log.Logger: com.iflytek.callshow.utils.log.Logger getLogger(java.lang.String,java.lang.String)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<com.iflytek.callshow.utils.log.Logger: com.iflytek.callshow.utils.log.Logger getLogger(java.lang.String,java.lang.String)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.utility.ae: void a(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.utility.ae: void a(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.utility.ae: void a(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.iflytek.utility.ae: void a(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<java.lang.String: java.lang.String toString()>";
"<com.iflytek.callshow.utils.log.Logger: void e(java.lang.Object)>" -> "<java.lang.String: java.lang.String toString()>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<java.io.FileOutputStream: void close()>";
"<java.io.FileOutputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.codec.test.TestMP3Encoder: void write(java.io.FileOutputStream,byte[],int)>" -> "<java.io.FileOutputStream: void write(byte[],int,int)>";
"<java.io.FileOutputStream: void write(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<java.io.FileInputStream: void close()>";
"<java.io.FileInputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.codec.test.TestMP3Encoder: int read(java.io.FileInputStream,byte[])>" -> "<java.io.FileInputStream: int read(byte[])>";
"<java.io.FileInputStream: int read(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.iflytek.codec.test.TestMP3Encoder: void encode(java.lang.String,java.lang.String,int,int,int)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.iflytek.callshow.utils.log.FileLogger: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Throwable: void printStackTrace()>";
"<com.iflytek.callshow.utils.log.FileLogger: void print(java.lang.String)>" -> "<java.io.BufferedWriter: void write(int)>";
"<com.iflytek.callshow.utils.log.FileLogger: void print(java.lang.String)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<com.iflytek.callshow.utils.log.FileLogger: void print(java.lang.String)>" -> "<java.io.BufferedWriter: void flush()>";
"<java.io.BufferedWriter: void write(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.Writer: void write(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedWriter: void flush()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
}
