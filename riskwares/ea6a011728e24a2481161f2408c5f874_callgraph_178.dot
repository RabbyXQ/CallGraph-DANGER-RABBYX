digraph CallGraph {
"<com.cg.tools.Test: void main(java.lang.String[])>" -> "<com.cg.tools.Test: void unPack(java.lang.String)>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<javax.imageio.ImageIO: boolean write(java.awt.image.RenderedImage,java.lang.String,java.io.File)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.files.FileHandle: void <init>(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.File)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.files.FileHandle: void <init>(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.files.FileHandle: void <init>(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.util.HashMap: void <init>()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: void <init>(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<com.badlogic.gdx.files.FileHandle: void <init>(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<com.badlogic.gdx.files.FileHandle: void <init>(java.lang.String)>" -> "<com.badlogic.gdx.Files$FileType: void <clinit>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.utils.StreamUtils: void <clinit>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: java.lang.String readValue(java.io.BufferedReader)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: void <init>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: java.lang.String readValue(java.io.BufferedReader)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.utils.StreamUtils: void closeQuietly(java.io.Closeable)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.utils.GdxRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page: void <init>(com.badlogic.gdx.files.FileHandle,float,float,boolean,com.badlogic.gdx.graphics.Pixmap$Format,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: java.lang.String readValue(java.io.BufferedReader)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.utils.StreamUtils: void closeQuietly(java.io.Closeable)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.io.BufferedReader: void <init>(java.io.Reader,int)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.io.InputStreamReader: void <init>(java.io.InputStream)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.utils.Array: void <init>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.utils.Array: void <init>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Object: void <init>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: void <clinit>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.utils.StreamUtils: void <clinit>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.Texture$TextureWrap: void <clinit>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.Texture$TextureFilter: void <clinit>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.Pixmap$Format: void <clinit>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: void <clinit>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: void <clinit>()>";
"<java.util.HashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.Files$FileType: void <clinit>()>" -> "<com.badlogic.gdx.Files$FileType: void <init>(java.lang.String,int)>";
"<com.badlogic.gdx.Files$FileType: void <clinit>()>" -> "<com.badlogic.gdx.Files$FileType: void <init>(java.lang.String,int)>";
"<com.badlogic.gdx.Files$FileType: void <clinit>()>" -> "<com.badlogic.gdx.Files$FileType: void <init>(java.lang.String,int)>";
"<com.badlogic.gdx.Files$FileType: void <clinit>()>" -> "<com.badlogic.gdx.Files$FileType: void <init>(java.lang.String,int)>";
"<com.badlogic.gdx.Files$FileType: void <clinit>()>" -> "<com.badlogic.gdx.Files$FileType: void <init>(java.lang.String,int)>";
"<java.lang.Integer: int parseInt(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas: java.lang.String readValue(java.io.BufferedReader)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas: java.lang.String readValue(java.io.BufferedReader)>" -> "<com.badlogic.gdx.utils.GdxRuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: void <clinit>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>" -> "<com.badlogic.gdx.utils.GdxRuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas: void <clinit>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.GdxRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page: void <init>(com.badlogic.gdx.files.FileHandle,float,float,boolean,com.badlogic.gdx.graphics.Pixmap$Format,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap)>" -> "<java.lang.Object: void <init>()>";
"<com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String)>" -> "<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>";
"<com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String)>" -> "<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>";
"<java.io.BufferedReader: void <init>(java.io.Reader,int)>" -> "<java.io.Reader: void <init>()>";
"<java.io.BufferedReader: void <init>(java.io.Reader,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream)>" -> "<java.io.Reader: void <init>()>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.Array: void <init>()>" -> "<com.badlogic.gdx.utils.Array: void <init>(boolean,int)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas: void <clinit>()>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: void <init>()>";
"<com.badlogic.gdx.graphics.Texture$TextureWrap: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Texture$TextureWrap: void <init>(java.lang.String,int,int)>";
"<com.badlogic.gdx.graphics.Texture$TextureWrap: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Texture$TextureWrap: void <init>(java.lang.String,int,int)>";
"<com.badlogic.gdx.graphics.Texture$TextureWrap: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Texture$TextureWrap: void <init>(java.lang.String,int,int)>";
"<com.badlogic.gdx.graphics.Texture$TextureFilter: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Texture$TextureFilter: void <init>(java.lang.String,int,int)>";
"<com.badlogic.gdx.graphics.Texture$TextureFilter: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Texture$TextureFilter: void <init>(java.lang.String,int,int)>";
"<com.badlogic.gdx.graphics.Texture$TextureFilter: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Texture$TextureFilter: void <init>(java.lang.String,int,int)>";
"<com.badlogic.gdx.graphics.Texture$TextureFilter: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Texture$TextureFilter: void <init>(java.lang.String,int,int)>";
"<com.badlogic.gdx.graphics.Texture$TextureFilter: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Texture$TextureFilter: void <init>(java.lang.String,int,int)>";
"<com.badlogic.gdx.graphics.Texture$TextureFilter: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Texture$TextureFilter: void <init>(java.lang.String,int,int)>";
"<com.badlogic.gdx.graphics.Texture$TextureFilter: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Texture$TextureFilter: void <init>(java.lang.String,int,int)>";
"<com.badlogic.gdx.graphics.Pixmap$Format: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Pixmap$Format: void <init>(java.lang.String,int)>";
"<com.badlogic.gdx.graphics.Pixmap$Format: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Pixmap$Format: void <init>(java.lang.String,int)>";
"<com.badlogic.gdx.graphics.Pixmap$Format: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Pixmap$Format: void <init>(java.lang.String,int)>";
"<com.badlogic.gdx.graphics.Pixmap$Format: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Pixmap$Format: void <init>(java.lang.String,int)>";
"<com.badlogic.gdx.graphics.Pixmap$Format: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Pixmap$Format: void <init>(java.lang.String,int)>";
"<com.badlogic.gdx.graphics.Pixmap$Format: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Pixmap$Format: void <init>(java.lang.String,int)>";
"<com.badlogic.gdx.graphics.Pixmap$Format: void <clinit>()>" -> "<com.badlogic.gdx.graphics.Pixmap$Format: void <init>(java.lang.String,int)>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.Files$FileType: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<com.badlogic.gdx.utils.GdxRuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.Reader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Reader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.Array: void <init>(boolean,int)>" -> "<java.lang.Object: void <init>()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.badlogic.gdx.graphics.Texture$TextureWrap: void <init>(java.lang.String,int,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<com.badlogic.gdx.graphics.Texture$TextureFilter: void <init>(java.lang.String,int,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<com.badlogic.gdx.graphics.Pixmap$Format: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void finalize()>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Enum: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas: java.lang.String readValue(java.io.BufferedReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<java.io.BufferedReader: java.lang.String readLine()>";
"<java.io.BufferedReader: java.lang.String readLine()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas: java.lang.String readValue(java.io.BufferedReader)>" -> "<java.io.BufferedReader: java.lang.String readLine()>";
"<com.badlogic.gdx.utils.StreamUtils: void closeQuietly(java.io.Closeable)>" -> "<java.io.BufferedReader: void close()>";
"<java.io.BufferedReader: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)>" -> "<java.io.BufferedReader: java.lang.String readLine()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.utils.Array: void sort(java.util.Comparator)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.utils.Array: void add(java.lang.Object)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.utils.Array: void add(java.lang.Object)>";
"<com.badlogic.gdx.utils.Array: void sort(java.util.Comparator)>" -> "<com.badlogic.gdx.utils.Sort: com.badlogic.gdx.utils.Sort instance()>";
"<com.badlogic.gdx.utils.Array: void add(java.lang.Object)>" -> "<java.lang.Math: int max(int,int)>";
"<com.badlogic.gdx.utils.Sort: com.badlogic.gdx.utils.Sort instance()>" -> "<com.badlogic.gdx.utils.Sort: void <init>()>";
"<java.lang.Math: int max(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.Sort: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.badlogic.gdx.utils.Array: void sort(java.util.Comparator)>" -> "<com.badlogic.gdx.utils.Sort: void sort(java.lang.Object[],java.util.Comparator,int,int)>";
"<com.badlogic.gdx.utils.Sort: void sort(java.lang.Object[],java.util.Comparator,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: void <init>()>";
"<com.badlogic.gdx.utils.TimSort: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.badlogic.gdx.utils.Sort: void sort(java.lang.Object[],java.util.Comparator,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: void doSort(java.lang.Object[],java.util.Comparator,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void doSort(java.lang.Object[],java.util.Comparator,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: void rangeCheck(int,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void doSort(java.lang.Object[],java.util.Comparator,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: void mergeForceCollapse()>";
"<com.badlogic.gdx.utils.TimSort: void doSort(java.lang.Object[],java.util.Comparator,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: void mergeCollapse()>";
"<com.badlogic.gdx.utils.TimSort: void doSort(java.lang.Object[],java.util.Comparator,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: void pushRun(int,int)>";
"<com.badlogic.gdx.utils.TimSort: void doSort(java.lang.Object[],java.util.Comparator,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: void binarySort(java.lang.Object[],int,int,int,java.util.Comparator)>";
"<com.badlogic.gdx.utils.TimSort: void doSort(java.lang.Object[],java.util.Comparator,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator)>";
"<com.badlogic.gdx.utils.TimSort: void doSort(java.lang.Object[],java.util.Comparator,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: int minRunLength(int)>";
"<com.badlogic.gdx.utils.TimSort: void doSort(java.lang.Object[],java.util.Comparator,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: void binarySort(java.lang.Object[],int,int,int,java.util.Comparator)>";
"<com.badlogic.gdx.utils.TimSort: void doSort(java.lang.Object[],java.util.Comparator,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator)>";
"<com.badlogic.gdx.utils.TimSort: void rangeCheck(int,int,int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.badlogic.gdx.utils.TimSort: void rangeCheck(int,int,int)>" -> "<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>";
"<com.badlogic.gdx.utils.TimSort: void rangeCheck(int,int,int)>" -> "<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>";
"<com.badlogic.gdx.utils.TimSort: void rangeCheck(int,int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.TimSort: void mergeForceCollapse()>" -> "<com.badlogic.gdx.utils.TimSort: void mergeAt(int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeCollapse()>" -> "<com.badlogic.gdx.utils.TimSort: void mergeAt(int)>";
"<com.badlogic.gdx.utils.TimSort: void binarySort(java.lang.Object[],int,int,int,java.util.Comparator)>" -> "<java.lang.System: void <clinit>()>";
"<com.badlogic.gdx.utils.TimSort: void binarySort(java.lang.Object[],int,int,int,java.util.Comparator)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator)>" -> "<com.badlogic.gdx.utils.TimSort: void reverseRange(java.lang.Object[],int,int)>";
"<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>" -> "<java.lang.IndexOutOfBoundsException: void <init>()>";
"<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.TimSort: void mergeAt(int)>" -> "<com.badlogic.gdx.utils.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>";
"<com.badlogic.gdx.utils.TimSort: void mergeAt(int)>" -> "<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeAt(int)>" -> "<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeAt(int)>" -> "<com.badlogic.gdx.utils.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>";
"<java.lang.IndexOutOfBoundsException: void <init>()>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IndexOutOfBoundsException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>" -> "<java.lang.System: void <clinit>()>";
"<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>";
"<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>";
"<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: java.lang.Object[] ensureCapacity(int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>" -> "<java.lang.System: void <clinit>()>";
"<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>";
"<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>";
"<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>" -> "<com.badlogic.gdx.utils.TimSort: java.lang.Object[] ensureCapacity(int)>";
"<com.badlogic.gdx.utils.TimSort: java.lang.Object[] ensureCapacity(int)>" -> "<java.lang.Math: int max(int,int)>";
"<com.badlogic.gdx.utils.TimSort: java.lang.Object[] ensureCapacity(int)>" -> "<java.lang.Math: int min(int,int)>";
"<java.lang.Math: int min(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.TimSort: void rangeCheck(int,int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.utils.TimSort: void rangeCheck(int,int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.badlogic.gdx.utils.TimSort: void rangeCheck(int,int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.utils.TimSort: void rangeCheck(int,int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.badlogic.gdx.utils.TimSort: void rangeCheck(int,int,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.utils.TimSort: void rangeCheck(int,int,int)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.Array: void add(java.lang.Object)>" -> "<com.badlogic.gdx.utils.Array: java.lang.Object[] resize(int)>";
"<com.badlogic.gdx.utils.Array: java.lang.Object[] resize(int)>" -> "<java.lang.System: void <clinit>()>";
"<com.badlogic.gdx.utils.Array: java.lang.Object[] resize(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<com.badlogic.gdx.utils.Array: java.lang.Object[] resize(int)>" -> "<java.lang.Math: int min(int,int)>";
"<com.badlogic.gdx.utils.Array: java.lang.Object[] resize(int)>" -> "<com.badlogic.gdx.utils.reflect.ArrayReflection: java.lang.Object newInstance(java.lang.Class,int)>";
"<com.badlogic.gdx.utils.reflect.ArrayReflection: java.lang.Object newInstance(java.lang.Class,int)>" -> "<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>";
"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.TimSort: int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
"<com.badlogic.gdx.utils.TimSort: int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
"<com.badlogic.gdx.utils.TimSort: int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region,com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region)>";
"<com.badlogic.gdx.utils.TimSort: void binarySort(java.lang.Object[],int,int,int,java.util.Comparator)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: com.badlogic.gdx.utils.Array getPages()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: com.badlogic.gdx.utils.Array getRegions()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle parent()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.files.FileHandle: java.io.File file()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.files.FileHandle: java.lang.String name()>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle parent()>" -> "<com.badlogic.gdx.Files$FileType: void <clinit>()>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle parent()>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle parent()>" -> "<com.badlogic.gdx.files.FileHandle: void <init>(java.io.File,com.badlogic.gdx.Files$FileType)>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle parent()>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle parent()>" -> "<java.io.File: void <clinit>()>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle parent()>" -> "<java.io.File: void <clinit>()>";
"<com.badlogic.gdx.files.FileHandle: java.io.File file()>" -> "<com.badlogic.gdx.Files$FileType: void <clinit>()>";
"<com.badlogic.gdx.files.FileHandle: java.io.File file()>" -> "<java.io.File: void <init>(java.lang.String,java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.File file()>" -> "<java.io.File: void <clinit>()>";
"<com.badlogic.gdx.files.FileHandle: void <init>(java.io.File,com.badlogic.gdx.Files$FileType)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.lang.String name()>" -> "<java.io.File: java.lang.String getName()>";
"<java.io.File: java.lang.String getName()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.File file()>" -> "<java.io.File: java.lang.String getPath()>";
"<java.io.File: java.lang.String getPath()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle parent()>" -> "<java.io.File: java.io.File getParentFile()>";
"<java.io.File: java.io.File getParentFile()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle child(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle child(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle child(java.lang.String)>" -> "<com.badlogic.gdx.files.FileHandle: void <init>(java.io.File,com.badlogic.gdx.Files$FileType)>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle child(java.lang.String)>" -> "<java.io.File: void <init>(java.io.File,java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle child(java.lang.String)>" -> "<com.badlogic.gdx.files.FileHandle: void <init>(java.io.File,com.badlogic.gdx.Files$FileType)>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle child(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle child(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<java.io.File: void <init>(java.io.File,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.io.File,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle child(java.lang.String)>" -> "<java.io.File: java.lang.String getPath()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.files.FileHandle: java.lang.String name()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.files.FileHandle: java.io.File file()>";
"<com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)>" -> "<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<com.badlogic.gdx.Files$FileType: void <clinit>()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<com.badlogic.gdx.utils.GdxRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<com.badlogic.gdx.utils.GdxRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<com.badlogic.gdx.utils.GdxRuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: void <init>()>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.FileInputStream: void finalize()>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.FileInputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>";
"<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<com.badlogic.gdx.files.FileHandle: java.io.File file()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<com.badlogic.gdx.files.FileHandle: java.io.File file()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<com.badlogic.gdx.files.FileHandle: java.io.File file()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<com.badlogic.gdx.files.FileHandle: java.io.File file()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.io.File: boolean exists()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.io.File: boolean exists()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.io.File: java.lang.String getPath()>";
"<com.badlogic.gdx.files.FileHandle: java.io.InputStream read()>" -> "<java.io.File: boolean isDirectory()>";
"<java.io.File: boolean exists()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: boolean isDirectory()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.io.File: boolean exists()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.io.File: boolean mkdirs()>";
"<java.io.File: boolean mkdirs()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.String: java.lang.String replace(char,char)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.String: int lastIndexOf(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.String: int lastIndexOf(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<java.lang.String: java.lang.String replace(char,char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: int lastIndexOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.utils.Array: java.util.Iterator iterator()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.utils.Array: java.util.Iterator iterator()>";
"<com.badlogic.gdx.utils.Array: java.util.Iterator iterator()>" -> "<com.badlogic.gdx.utils.Array$ArrayIterable: void <init>(com.badlogic.gdx.utils.Array)>";
"<com.badlogic.gdx.utils.Array$ArrayIterable: void <init>(com.badlogic.gdx.utils.Array)>" -> "<com.badlogic.gdx.utils.Array$ArrayIterable: void <init>(com.badlogic.gdx.utils.Array,boolean)>";
"<com.badlogic.gdx.utils.Array$ArrayIterable: void <init>(com.badlogic.gdx.utils.Array,boolean)>" -> "<java.lang.Object: void <init>()>";
"<com.badlogic.gdx.utils.Array: java.util.Iterator iterator()>" -> "<com.badlogic.gdx.utils.Array$ArrayIterable: java.util.Iterator iterator()>";
"<com.badlogic.gdx.utils.Array$ArrayIterable: java.util.Iterator iterator()>" -> "<com.badlogic.gdx.utils.Array$ArrayIterator: void <init>(com.badlogic.gdx.utils.Array,boolean)>";
"<com.badlogic.gdx.utils.Array$ArrayIterable: java.util.Iterator iterator()>" -> "<com.badlogic.gdx.utils.Array$ArrayIterator: void <init>(com.badlogic.gdx.utils.Array,boolean)>";
"<com.badlogic.gdx.utils.Array$ArrayIterator: void <init>(com.badlogic.gdx.utils.Array,boolean)>" -> "<java.lang.Object: void <init>()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.utils.Array$ArrayIterator: boolean hasNext()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.utils.Array$ArrayIterator: java.lang.Object next()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.utils.Array$ArrayIterator: boolean hasNext()>";
"<com.cg.tools.Test: void unPack(java.lang.String)>" -> "<com.badlogic.gdx.utils.Array$ArrayIterator: java.lang.Object next()>";
"<com.badlogic.gdx.utils.Array$ArrayIterator: boolean hasNext()>" -> "<com.badlogic.gdx.utils.GdxRuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.Array$ArrayIterator: java.lang.Object next()>" -> "<java.lang.String: void <clinit>()>";
"<com.badlogic.gdx.utils.Array$ArrayIterator: java.lang.Object next()>" -> "<com.badlogic.gdx.utils.GdxRuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.Array$ArrayIterator: java.lang.Object next()>" -> "<java.util.NoSuchElementException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.Array$ArrayIterator: java.lang.Object next()>" -> "<java.lang.String: java.lang.String valueOf(int)>";
"<java.util.NoSuchElementException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.util.NoSuchElementException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String valueOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.Array: java.lang.Object[] resize(int)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<java.lang.Object: java.lang.Class getClass()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
"<com.badlogic.gdx.utils.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
"<com.badlogic.gdx.utils.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
"<com.badlogic.gdx.utils.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
"<com.badlogic.gdx.utils.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
"<com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
"<com.badlogic.gdx.utils.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
"<com.badlogic.gdx.utils.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
"<com.badlogic.gdx.utils.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
"<com.badlogic.gdx.utils.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>" -> "<com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)>";
}
