digraph CallGraph {
"<org.apache.tools.ant.Diagnostics: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void main(java.lang.String[])>" -> "<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Main: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void ignoreThrowable(java.lang.Throwable)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void header(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void doReportLocale(java.io.PrintStream)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void header(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void header(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void doReportSystemProperties(java.io.PrintStream)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void header(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void doReportParserInfo(java.io.PrintStream)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void header(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void doReportWhich(java.io.PrintStream)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void header(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void header(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void doReportUserHomeLibraries(java.io.PrintStream)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void header(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void doReportAntHomeLibraries(java.io.PrintStream)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void header(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void header(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: java.lang.String getImplementationVersion(java.lang.Class)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: java.lang.String getImplementationVersion(java.lang.Class)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: java.lang.Class class$(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void header(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<org.apache.tools.ant.Main: java.lang.String getAntVersion()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Main: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.Main: void <clinit>()>" -> "<java.util.HashSet: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.util.JavaEnvUtils: int getJavaVersionNumber()>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportProxy(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportLocale(java.io.PrintStream)>" -> "<java.util.Calendar: java.util.Calendar getInstance()>";
"<org.apache.tools.ant.Diagnostics: void doReportLocale(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<org.apache.tools.ant.util.FileUtils: void close(java.io.OutputStream)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<org.apache.tools.ant.util.FileUtils: void close(java.io.OutputStream)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void ignoreThrowable(java.lang.Throwable)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<org.apache.tools.ant.util.FileUtils: void close(java.io.OutputStream)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.Math: long abs(long)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.FileOutputStream: void <init>(java.io.File)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.System: long currentTimeMillis()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<org.apache.tools.ant.util.FileUtils: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<org.apache.tools.ant.util.FileUtils: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<org.apache.tools.ant.util.FileUtils: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.File: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void doReportSystemProperties(java.io.PrintStream)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void doReportSystemProperties(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void ignoreThrowable(java.lang.Throwable)>";
"<org.apache.tools.ant.Diagnostics: void doReportSystemProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportSystemProperties(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportSystemProperties(java.io.PrintStream)>" -> "<java.lang.System: java.util.Properties getProperties()>";
"<org.apache.tools.ant.Diagnostics: void doReportParserInfo(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: java.lang.String getXmlParserName()>";
"<org.apache.tools.ant.Diagnostics: void doReportParserInfo(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printParserInfo(java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportParserInfo(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: java.lang.String getNamespaceParserLocation()>";
"<org.apache.tools.ant.Diagnostics: void doReportParserInfo(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: java.lang.String getNamespaceParserName()>";
"<org.apache.tools.ant.Diagnostics: void doReportParserInfo(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printParserInfo(java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportParserInfo(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: java.lang.String getXMLParserLocation()>";
"<org.apache.tools.ant.Diagnostics: void doReportWhich(java.io.PrintStream)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void doReportWhich(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: java.lang.Class class$(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportWhich(java.io.PrintStream)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: java.lang.Class class$(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.util.Properties: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportUserHomeLibraries(java.io.PrintStream)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void doReportUserHomeLibraries(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printLibraries(java.io.File[],java.io.PrintStream)>";
"<org.apache.tools.ant.Diagnostics: void doReportUserHomeLibraries(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: java.io.File[] listJarFiles(java.io.File)>";
"<org.apache.tools.ant.Diagnostics: void doReportUserHomeLibraries(java.io.PrintStream)>" -> "<java.io.File: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportUserHomeLibraries(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportUserHomeLibraries(java.io.PrintStream)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportUserHomeLibraries(java.io.PrintStream)>" -> "<java.io.File: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntHomeLibraries(java.io.PrintStream)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntHomeLibraries(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: void printLibraries(java.io.File[],java.io.PrintStream)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntHomeLibraries(java.io.PrintStream)>" -> "<org.apache.tools.ant.Diagnostics: java.io.File[] listLibraries()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntHomeLibraries(java.io.PrintStream)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntHomeLibraries(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<org.apache.tools.ant.Project: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<org.apache.tools.ant.Project: void <init>()>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Class: java.lang.Class forName(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<org.apache.tools.ant.Main: void <clinit>()>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<org.apache.tools.ant.Main: java.lang.Class class$(java.lang.String)>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.util.Properties: void <init>()>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashSet: void <init>()>" -> "<java.util.AbstractSet: void <init>()>";
"<java.util.HashSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<org.apache.tools.ant.util.FileUtils: org.apache.tools.ant.util.FileUtils getFileUtils()>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<org.apache.tools.ant.taskdefs.condition.Os: boolean isName(java.lang.String)>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<org.apache.tools.ant.taskdefs.condition.Os: boolean isName(java.lang.String)>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<org.apache.tools.ant.taskdefs.condition.Os: boolean isFamily(java.lang.String)>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<org.apache.tools.ant.util.FileUtils: void <clinit>()>";
"<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>" -> "<org.apache.tools.ant.Diagnostics: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.util.JavaEnvUtils: int getJavaVersionNumber()>" -> "<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>";
"<java.util.Calendar: java.util.Calendar getInstance()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Math: long abs(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.io.File)>" -> "<java.io.FileOutputStream: void finalize()>";
"<java.io.FileOutputStream: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.io.File)>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.util.FileUtils: void <clinit>()>" -> "<org.apache.tools.ant.taskdefs.condition.Os: boolean isFamily(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: void <clinit>()>" -> "<org.apache.tools.ant.taskdefs.condition.Os: boolean isFamily(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: void <clinit>()>" -> "<org.apache.tools.ant.taskdefs.condition.Os: boolean isFamily(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: void <clinit>()>" -> "<org.apache.tools.ant.taskdefs.condition.Os: boolean isFamily(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: void <clinit>()>" -> "<java.util.Random: void <init>(long)>";
"<org.apache.tools.ant.util.FileUtils: void <clinit>()>" -> "<java.lang.Runtime: java.lang.Runtime getRuntime()>";
"<org.apache.tools.ant.util.FileUtils: void <clinit>()>" -> "<java.lang.System: long currentTimeMillis()>";
"<org.apache.tools.ant.util.FileUtils: void <clinit>()>" -> "<org.apache.tools.ant.util.FileUtils: void <init>()>";
"<org.apache.tools.ant.util.FileUtils: void <clinit>()>" -> "<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<java.lang.System: java.util.Properties getProperties()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getXmlParserName()>" -> "<org.apache.tools.ant.Diagnostics: javax.xml.parsers.SAXParser getSAXParser()>";
"<org.apache.tools.ant.Diagnostics: void printParserInfo(java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: void printParserInfo(java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getNamespaceParserLocation()>" -> "<org.apache.tools.ant.util.JAXPUtils: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getNamespaceParserLocation()>" -> "<org.apache.tools.ant.Diagnostics: void ignoreThrowable(java.lang.Throwable)>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getNamespaceParserLocation()>" -> "<org.apache.tools.ant.Diagnostics: java.lang.String getClassLocation(java.lang.Class)>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getNamespaceParserLocation()>" -> "<org.apache.tools.ant.util.JAXPUtils: org.xml.sax.XMLReader getNamespaceXMLReader()>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getNamespaceParserName()>" -> "<org.apache.tools.ant.util.JAXPUtils: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getNamespaceParserName()>" -> "<org.apache.tools.ant.Diagnostics: void ignoreThrowable(java.lang.Throwable)>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getNamespaceParserName()>" -> "<org.apache.tools.ant.util.JAXPUtils: org.xml.sax.XMLReader getNamespaceXMLReader()>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getXMLParserLocation()>" -> "<org.apache.tools.ant.Diagnostics: javax.xml.parsers.SAXParser getSAXParser()>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getXMLParserLocation()>" -> "<org.apache.tools.ant.Diagnostics: java.lang.String getClassLocation(java.lang.Class)>";
"<java.util.Properties: void <init>()>" -> "<java.util.Hashtable: void <init>()>";
"<java.util.Properties: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void printLibraries(java.io.File[],java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Diagnostics: java.io.File[] listJarFiles(java.io.File)>" -> "<org.apache.tools.ant.Diagnostics$1: void <init>()>";
"<java.io.File: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: java.io.File[] listLibraries()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: java.io.File[] listLibraries()>" -> "<org.apache.tools.ant.Diagnostics: java.io.File[] listJarFiles(java.io.File)>";
"<org.apache.tools.ant.Diagnostics: java.io.File[] listLibraries()>" -> "<java.io.File: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: java.io.File[] listLibraries()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: java.io.File[] listLibraries()>" -> "<java.io.File: void <clinit>()>";
"<org.apache.tools.ant.Project: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.Project: void <clinit>()>" -> "<org.apache.tools.ant.util.FileUtils: org.apache.tools.ant.util.FileUtils getFileUtils()>";
"<org.apache.tools.ant.Project: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Project: void <clinit>()>" -> "<org.apache.tools.ant.util.FileUtils: void <clinit>()>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<java.util.Collections: void <clinit>()>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<org.apache.tools.ant.input.DefaultInputHandler: void <init>()>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<java.util.WeakHashMap: void <init>()>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<java.util.WeakHashMap: void <init>()>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<java.util.Vector: void <init>()>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<org.apache.tools.ant.types.FilterSetCollection: void <init>(org.apache.tools.ant.types.FilterSet)>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<org.apache.tools.ant.types.FilterSet: void <init>()>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<java.util.Hashtable: void <init>()>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<org.apache.tools.ant.Project$AntRefTable: void <init>()>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>" -> "<java.lang.LinkageError: void <init>()>";
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>" -> "<org.apache.tools.ant.Location: void <clinit>()>";
"<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Main: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.Main: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.util.AbstractSet: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>" -> "<java.util.Locale: void <clinit>()>";
"<org.apache.tools.ant.util.FileUtils: org.apache.tools.ant.util.FileUtils getFileUtils()>" -> "<org.apache.tools.ant.util.FileUtils: void <clinit>()>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isName(java.lang.String)>" -> "<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isName(java.lang.String)>" -> "<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isFamily(java.lang.String)>" -> "<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isFamily(java.lang.String)>" -> "<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
"<java.io.FileOutputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Random: void <init>(long)>" -> "<java.lang.Object: void <init>()>";
"<java.util.Random: void <init>(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Runtime: java.lang.Runtime getRuntime()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.tools.ant.util.FileUtils: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.tools.ant.Diagnostics: javax.xml.parsers.SAXParser getSAXParser()>" -> "<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>";
"<org.apache.tools.ant.Diagnostics: javax.xml.parsers.SAXParser getSAXParser()>" -> "<org.apache.tools.ant.Diagnostics: void ignoreThrowable(java.lang.Throwable)>";
"<org.apache.tools.ant.util.JAXPUtils: void <clinit>()>" -> "<org.apache.tools.ant.util.FileUtils: void <clinit>()>";
"<org.apache.tools.ant.util.JAXPUtils: void <clinit>()>" -> "<org.apache.tools.ant.util.FileUtils: org.apache.tools.ant.util.FileUtils getFileUtils()>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getClassLocation(java.lang.Class)>" -> "<org.apache.tools.ant.util.LoaderUtils: void <clinit>()>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getClassLocation(java.lang.Class)>" -> "<org.apache.tools.ant.util.LoaderUtils: java.io.File getClassSource(java.lang.Class)>";
"<org.apache.tools.ant.util.JAXPUtils: org.xml.sax.XMLReader getNamespaceXMLReader()>" -> "<org.apache.tools.ant.util.JAXPUtils: void <clinit>()>";
"<org.apache.tools.ant.util.JAXPUtils: org.xml.sax.XMLReader getNamespaceXMLReader()>" -> "<org.apache.tools.ant.util.JAXPUtils: org.apache.tools.ant.BuildException convertToBuildException(org.xml.sax.SAXException)>";
"<org.apache.tools.ant.util.JAXPUtils: org.xml.sax.XMLReader getNamespaceXMLReader()>" -> "<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParser newSAXParser(javax.xml.parsers.SAXParserFactory)>";
"<org.apache.tools.ant.util.JAXPUtils: org.xml.sax.XMLReader getNamespaceXMLReader()>" -> "<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParserFactory getNSParserFactory()>";
"<org.apache.tools.ant.util.JAXPUtils: org.xml.sax.XMLReader getNamespaceXMLReader()>" -> "<org.apache.tools.ant.util.JAXPUtils: void <clinit>()>";
"<java.util.Hashtable: void <init>()>" -> "<java.util.Dictionary: void <init>()>";
"<java.util.Hashtable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics$1: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.tools.ant.input.DefaultInputHandler: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.WeakHashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.WeakHashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.Vector: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.types.FilterSetCollection: void <init>(org.apache.tools.ant.types.FilterSet)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.tools.ant.types.FilterSetCollection: void <init>(org.apache.tools.ant.types.FilterSet)>" -> "<java.util.Vector: void <init>()>";
"<org.apache.tools.ant.types.FilterSet: void <init>()>" -> "<org.apache.tools.ant.types.FilterSet$OnMissing: void <clinit>()>";
"<org.apache.tools.ant.types.FilterSet: void <init>()>" -> "<java.util.Vector: void <init>()>";
"<org.apache.tools.ant.types.FilterSet: void <init>()>" -> "<java.util.Vector: void <init>()>";
"<org.apache.tools.ant.types.FilterSet: void <init>()>" -> "<org.apache.tools.ant.types.DataType: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Project$AntRefTable: void <init>()>" -> "<java.util.Hashtable: void <init>()>";
"<java.lang.LinkageError: void <init>()>" -> "<java.lang.Error: void <init>()>";
"<java.lang.LinkageError: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Location: void <clinit>()>" -> "<org.apache.tools.ant.util.FileUtils: void <clinit>()>";
"<org.apache.tools.ant.Location: void <clinit>()>" -> "<org.apache.tools.ant.util.FileUtils: org.apache.tools.ant.util.FileUtils getFileUtils()>";
"<org.apache.tools.ant.Location: void <clinit>()>" -> "<org.apache.tools.ant.Location: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.tools.ant.taskdefs.condition.Os: boolean isFamily(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.tools.ant.taskdefs.condition.Os: boolean isFamily(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.tools.ant.taskdefs.condition.Os: boolean isFamily(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.tools.ant.taskdefs.condition.Os: void <clinit>()>";
"<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.LoaderUtils: void <clinit>()>" -> "<org.apache.tools.ant.util.FileUtils: void <clinit>()>";
"<org.apache.tools.ant.util.LoaderUtils: void <clinit>()>" -> "<org.apache.tools.ant.util.FileUtils: org.apache.tools.ant.util.FileUtils getFileUtils()>";
"<org.apache.tools.ant.util.LoaderUtils: java.io.File getClassSource(java.lang.Class)>" -> "<org.apache.tools.ant.util.LoaderUtils: void <clinit>()>";
"<org.apache.tools.ant.util.LoaderUtils: java.io.File getClassSource(java.lang.Class)>" -> "<org.apache.tools.ant.util.LoaderUtils: java.io.File normalizeSource(java.io.File)>";
"<org.apache.tools.ant.util.LoaderUtils: java.io.File getClassSource(java.lang.Class)>" -> "<org.apache.tools.ant.launch.Locator: java.io.File getClassSource(java.lang.Class)>";
"<org.apache.tools.ant.util.JAXPUtils: org.apache.tools.ant.BuildException convertToBuildException(org.xml.sax.SAXException)>" -> "<org.apache.tools.ant.BuildException: void <init>(java.lang.Throwable)>";
"<org.apache.tools.ant.util.JAXPUtils: org.apache.tools.ant.BuildException convertToBuildException(org.xml.sax.SAXException)>" -> "<org.apache.tools.ant.BuildException: void <init>(java.lang.Throwable)>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParser newSAXParser(javax.xml.parsers.SAXParserFactory)>" -> "<org.apache.tools.ant.util.JAXPUtils: void <clinit>()>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParser newSAXParser(javax.xml.parsers.SAXParserFactory)>" -> "<org.apache.tools.ant.util.JAXPUtils: org.apache.tools.ant.BuildException convertToBuildException(org.xml.sax.SAXException)>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParser newSAXParser(javax.xml.parsers.SAXParserFactory)>" -> "<org.apache.tools.ant.BuildException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParser newSAXParser(javax.xml.parsers.SAXParserFactory)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParserFactory getNSParserFactory()>" -> "<org.apache.tools.ant.util.JAXPUtils: void <clinit>()>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParserFactory getNSParserFactory()>" -> "<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParserFactory newParserFactory()>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.types.FilterSet$OnMissing: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.tools.ant.types.FilterSet$OnMissing: void <clinit>()>" -> "<org.apache.tools.ant.types.FilterSet$OnMissing: void <init>(java.lang.String)>";
"<org.apache.tools.ant.types.FilterSet$OnMissing: void <clinit>()>" -> "<org.apache.tools.ant.types.FilterSet$OnMissing: void <init>(java.lang.String)>";
"<org.apache.tools.ant.types.FilterSet$OnMissing: void <clinit>()>" -> "<org.apache.tools.ant.types.FilterSet$OnMissing: void <init>(java.lang.String)>";
"<org.apache.tools.ant.types.DataType: void <init>()>" -> "<org.apache.tools.ant.ProjectComponent: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Location: void <init>()>" -> "<org.apache.tools.ant.Location: void <init>(java.lang.String,int,int)>";
"<org.apache.tools.ant.util.LoaderUtils: java.io.File normalizeSource(java.io.File)>" -> "<org.apache.tools.ant.util.LoaderUtils: void <clinit>()>";
"<org.apache.tools.ant.BuildException: void <init>(java.lang.Throwable)>" -> "<org.apache.tools.ant.Location: void <clinit>()>";
"<org.apache.tools.ant.BuildException: void <init>(java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.BuildException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<org.apache.tools.ant.Location: void <clinit>()>";
"<org.apache.tools.ant.BuildException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParserFactory newParserFactory()>" -> "<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParserFactory newParserFactory()>" -> "<org.apache.tools.ant.BuildException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParserFactory newParserFactory()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.types.FilterSet$OnMissing: void <init>(java.lang.String)>" -> "<org.apache.tools.ant.types.EnumeratedAttribute: void <init>()>";
"<org.apache.tools.ant.ProjectComponent: void <init>()>" -> "<org.apache.tools.ant.Location: void <clinit>()>";
"<org.apache.tools.ant.ProjectComponent: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.tools.ant.Location: void <init>(java.lang.String,int,int)>" -> "<org.apache.tools.ant.Location: void <clinit>()>";
"<org.apache.tools.ant.Location: void <init>(java.lang.String,int,int)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.tools.ant.types.EnumeratedAttribute: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParserFactory newParserFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParserFactory newParserFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParserFactory newParserFactory()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.types.FilterSet$OnMissing: void <init>(java.lang.String)>" -> "<org.apache.tools.ant.types.EnumeratedAttribute: void setValue(java.lang.String)>";
"<org.apache.tools.ant.types.EnumeratedAttribute: void setValue(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.types.EnumeratedAttribute: void setValue(java.lang.String)>" -> "<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.types.EnumeratedAttribute: void setValue(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.types.EnumeratedAttribute: void setValue(java.lang.String)>" -> "<org.apache.tools.ant.types.EnumeratedAttribute: int indexOfValue(java.lang.String)>";
"<org.apache.tools.ant.types.EnumeratedAttribute: int indexOfValue(java.lang.String)>" -> "<org.apache.tools.ant.types.FilterSet$OnMissing: java.lang.String[] getValues()>";
"<org.apache.tools.ant.types.FilterSet$OnMissing: java.lang.String[] getValues()>" -> "<org.apache.tools.ant.types.FilterSet$OnMissing: void <clinit>()>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParser newSAXParser(javax.xml.parsers.SAXParserFactory)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParser newSAXParser(javax.xml.parsers.SAXParserFactory)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.util.JAXPUtils: javax.xml.parsers.SAXParser newSAXParser(javax.xml.parsers.SAXParserFactory)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.types.FilterSetCollection: void <init>(org.apache.tools.ant.types.FilterSet)>" -> "<org.apache.tools.ant.types.FilterSetCollection: void addFilterSet(org.apache.tools.ant.types.FilterSet)>";
"<org.apache.tools.ant.types.FilterSetCollection: void addFilterSet(org.apache.tools.ant.types.FilterSet)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<java.util.Vector: void addElement(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Project: void <init>()>" -> "<org.apache.tools.ant.ProjectComponent: void setProject(org.apache.tools.ant.Project)>";
"<org.apache.tools.ant.Diagnostics: java.io.File[] listJarFiles(java.io.File)>" -> "<org.apache.tools.ant.Diagnostics$1: boolean accept(java.io.File,java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void printLibraries(java.io.File[],java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void printLibraries(java.io.File[],java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void printLibraries(java.io.File[],java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(long)>";
"<org.apache.tools.ant.Diagnostics: void printLibraries(java.io.File[],java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void printLibraries(java.io.File[],java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void printParserInfo(java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void printParserInfo(java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void printParserInfo(java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void printParserInfo(java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Diagnostics: void printParserInfo(java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void printParserInfo(java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void printParserInfo(java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void printParserInfo(java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Location: void <init>(java.lang.String,int,int)>" -> "<org.apache.tools.ant.util.FileUtils: java.lang.String fromURI(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String fromURI(java.lang.String)>" -> "<org.apache.tools.ant.util.FileUtils: void <clinit>()>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String fromURI(java.lang.String)>" -> "<org.apache.tools.ant.util.FileUtils: boolean isAbsolutePath(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String fromURI(java.lang.String)>" -> "<org.apache.tools.ant.launch.Locator: java.lang.String fromURI(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: boolean isAbsolutePath(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<org.apache.tools.ant.util.FileUtils: boolean isAbsolutePath(java.lang.String)>" -> "<java.lang.Character: boolean isLetter(char)>";
"<org.apache.tools.ant.util.FileUtils: boolean isAbsolutePath(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.apache.tools.ant.util.FileUtils: boolean isAbsolutePath(java.lang.String)>" -> "<org.apache.tools.ant.util.FileUtils: void <clinit>()>";
"<java.lang.Character: boolean isLetter(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String fromURI(java.lang.String)>" -> "<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.util.Stack: void <init>()>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Stack: void <init>()>" -> "<java.util.Vector: void <init>()>";
"<java.util.Stack: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String fromURI(java.lang.String)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<java.io.File: java.lang.String getAbsolutePath()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<java.util.StringTokenizer: boolean hasMoreTokens()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.StringTokenizer: java.lang.String nextToken()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.util.Vector: int size()>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.util.Vector: int size()>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<java.util.Stack: java.lang.Object push(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Stack: java.lang.Object pop()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: java.lang.Object elementAt(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>" -> "<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<org.apache.tools.ant.util.FileUtils: boolean isAbsolutePath(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<org.apache.tools.ant.util.FileUtils: void <clinit>()>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: java.lang.String[] dissect(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.util.LoaderUtils: java.io.File normalizeSource(java.io.File)>" -> "<org.apache.tools.ant.util.FileUtils: java.io.File normalize(java.lang.String)>";
"<org.apache.tools.ant.util.LoaderUtils: java.io.File normalizeSource(java.io.File)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<org.apache.tools.ant.Diagnostics: java.lang.String getClassLocation(java.lang.Class)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<java.lang.String: int indexOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: boolean endsWith(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.types.EnumeratedAttribute: int indexOfValue(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.taskdefs.condition.Os: boolean isOs(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.util.Properties: void load(java.io.InputStream)>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Main: java.lang.String getAntVersion()>" -> "<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
"<java.util.Properties: void load(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Properties: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<org.apache.tools.ant.Project: void initProperties()>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<org.apache.tools.ant.Project: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<org.apache.tools.ant.Project: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<org.apache.tools.ant.Project: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntProperties(java.io.PrintStream)>" -> "<org.apache.tools.ant.Project: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Project: void initProperties()>" -> "<org.apache.tools.ant.Main: void <clinit>()>";
"<org.apache.tools.ant.Project: void initProperties()>" -> "<org.apache.tools.ant.Project: void setAntLib()>";
"<org.apache.tools.ant.Project: void initProperties()>" -> "<org.apache.tools.ant.Project: void setPropertyInternal(java.lang.String,java.lang.String)>";
"<org.apache.tools.ant.Project: void initProperties()>" -> "<org.apache.tools.ant.Main: java.lang.String getAntVersion()>";
"<org.apache.tools.ant.Project: java.lang.String getProperty(java.lang.String)>" -> "<org.apache.tools.ant.PropertyHelper: org.apache.tools.ant.PropertyHelper getPropertyHelper(org.apache.tools.ant.Project)>";
"<org.apache.tools.ant.Project: void setAntLib()>" -> "<org.apache.tools.ant.Project: void <clinit>()>";
"<org.apache.tools.ant.Project: void setAntLib()>" -> "<org.apache.tools.ant.Project: void setPropertyInternal(java.lang.String,java.lang.String)>";
"<org.apache.tools.ant.Project: void setAntLib()>" -> "<org.apache.tools.ant.launch.Locator: java.io.File getClassSource(java.lang.Class)>";
"<org.apache.tools.ant.Project: void setAntLib()>" -> "<org.apache.tools.ant.Project: java.lang.Class class$(java.lang.String)>";
"<org.apache.tools.ant.Project: void setPropertyInternal(java.lang.String,java.lang.String)>" -> "<org.apache.tools.ant.PropertyHelper: org.apache.tools.ant.PropertyHelper getPropertyHelper(org.apache.tools.ant.Project)>";
"<org.apache.tools.ant.PropertyHelper: org.apache.tools.ant.PropertyHelper getPropertyHelper(org.apache.tools.ant.Project)>" -> "<org.apache.tools.ant.PropertyHelper: void <init>()>";
"<org.apache.tools.ant.Project: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.tools.ant.PropertyHelper: void <init>()>" -> "<java.util.Hashtable: void <init>()>";
"<org.apache.tools.ant.PropertyHelper: void <init>()>" -> "<java.util.Hashtable: void <init>()>";
"<org.apache.tools.ant.PropertyHelper: void <init>()>" -> "<java.util.Hashtable: void <init>()>";
"<org.apache.tools.ant.PropertyHelper: org.apache.tools.ant.PropertyHelper getPropertyHelper(org.apache.tools.ant.Project)>" -> "<org.apache.tools.ant.PropertyHelper: void setProject(org.apache.tools.ant.Project)>";
"<org.apache.tools.ant.Project: void setPropertyInternal(java.lang.String,java.lang.String)>" -> "<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<org.apache.tools.ant.PropertyHelper: boolean setPropertyHook(java.lang.String,java.lang.String,java.lang.Object,boolean,boolean,boolean)>";
"<org.apache.tools.ant.PropertyHelper: boolean setPropertyHook(java.lang.String,java.lang.String,java.lang.Object,boolean,boolean,boolean)>" -> "<org.apache.tools.ant.PropertyHelper: org.apache.tools.ant.PropertyHelper getNext()>";
"<org.apache.tools.ant.PropertyHelper: boolean setPropertyHook(java.lang.String,java.lang.String,java.lang.Object,boolean,boolean,boolean)>" -> "<org.apache.tools.ant.PropertyHelper: org.apache.tools.ant.PropertyHelper getNext()>";
"<org.apache.tools.ant.PropertyHelper: boolean setPropertyHook(java.lang.String,java.lang.String,java.lang.Object,boolean,boolean,boolean)>" -> "<org.apache.tools.ant.PropertyHelper: boolean setPropertyHook(java.lang.String,java.lang.String,java.lang.Object,boolean,boolean,boolean)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.String getProperty(java.lang.String)>" -> "<org.apache.tools.ant.PropertyHelper: java.lang.Object getProperty(java.lang.String,java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: java.lang.Object getProperty(java.lang.String,java.lang.String)>" -> "<org.apache.tools.ant.PropertyHelper: java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)>";
"<org.apache.tools.ant.PropertyHelper: java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)>" -> "<java.lang.String: int length()>";
"<java.lang.String: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)>" -> "<org.apache.tools.ant.PropertyHelper: org.apache.tools.ant.PropertyHelper getNext()>";
"<org.apache.tools.ant.PropertyHelper: java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)>" -> "<org.apache.tools.ant.PropertyHelper: org.apache.tools.ant.PropertyHelper getNext()>";
"<org.apache.tools.ant.PropertyHelper: java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)>" -> "<org.apache.tools.ant.PropertyHelper: java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)>";
"<org.apache.tools.ant.PropertyHelper: java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String toString()>";
"<java.lang.String: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: java.lang.Object getProperty(java.lang.String,java.lang.String)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.apache.tools.ant.PropertyHelper: java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: boolean startsWith(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: org.apache.tools.ant.PropertyHelper getPropertyHelper(org.apache.tools.ant.Project)>" -> "<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: org.apache.tools.ant.PropertyHelper getPropertyHelper(org.apache.tools.ant.Project)>" -> "<org.apache.tools.ant.Project: void addReference(java.lang.String,java.lang.Object)>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<java.util.Vector: void <init>()>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<org.apache.tools.ant.PropertyHelper: org.apache.tools.ant.PropertyHelper getPropertyHelper(org.apache.tools.ant.Project)>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<java.util.Vector: void <init>()>";
"<org.apache.tools.ant.Project: void addReference(java.lang.String,java.lang.Object)>" -> "<org.apache.tools.ant.Project$AntRefTable: java.lang.Object access$000(org.apache.tools.ant.Project$AntRefTable,java.lang.Object)>";
"<org.apache.tools.ant.Project: void addReference(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Project: void addReference(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<org.apache.tools.ant.Project: void <clinit>()>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>";
"<org.apache.tools.ant.Project$AntRefTable: java.lang.Object access$000(org.apache.tools.ant.Project$AntRefTable,java.lang.Object)>" -> "<org.apache.tools.ant.Project$AntRefTable: java.lang.Object getReal(java.lang.Object)>";
"<org.apache.tools.ant.Project$AntRefTable: java.lang.Object getReal(java.lang.Object)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<org.apache.tools.ant.PropertyHelper: void parsePropertyString(java.lang.String,java.util.Vector,java.util.Vector)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyString(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Project: void addReference(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: void addReference(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: void addReference(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Project: void addReference(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: void addReference(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: void addReference(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Project: void addReference(java.lang.String,java.lang.Object)>" -> "<org.apache.tools.ant.Project: void log(java.lang.String,int)>";
"<org.apache.tools.ant.Project: void addReference(java.lang.String,java.lang.Object)>" -> "<org.apache.tools.ant.Project: void log(java.lang.String,int)>";
"<org.apache.tools.ant.Project: void log(java.lang.String,int)>" -> "<org.apache.tools.ant.Project: void log(java.lang.String,java.lang.Throwable,int)>";
"<org.apache.tools.ant.Project: void log(java.lang.String,java.lang.Throwable,int)>" -> "<org.apache.tools.ant.Project: void fireMessageLogged(org.apache.tools.ant.Project,java.lang.String,java.lang.Throwable,int)>";
"<org.apache.tools.ant.Project: void fireMessageLogged(org.apache.tools.ant.Project,java.lang.String,java.lang.Throwable,int)>" -> "<org.apache.tools.ant.BuildEvent: void <init>(org.apache.tools.ant.Project)>";
"<org.apache.tools.ant.Project: void fireMessageLogged(org.apache.tools.ant.Project,java.lang.String,java.lang.Throwable,int)>" -> "<org.apache.tools.ant.Project: void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)>";
"<org.apache.tools.ant.BuildEvent: void <init>(org.apache.tools.ant.Project)>" -> "<java.util.EventObject: void <init>(java.lang.Object)>";
"<org.apache.tools.ant.Project: void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)>" -> "<org.apache.tools.ant.util.StringUtils: void <clinit>()>";
"<java.util.EventObject: void <init>(java.lang.Object)>" -> "<java.lang.Object: void <init>()>";
"<java.util.EventObject: void <init>(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.StringUtils: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.util.StringUtils: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Project: void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)>" -> "<org.apache.tools.ant.BuildEvent: void setMessage(java.lang.String,int)>";
"<org.apache.tools.ant.Project: void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)>" -> "<org.apache.tools.ant.BuildEvent: void setMessage(java.lang.String,int)>";
"<org.apache.tools.ant.Project: void fireMessageLogged(org.apache.tools.ant.Project,java.lang.String,java.lang.Throwable,int)>" -> "<org.apache.tools.ant.BuildEvent: void setException(java.lang.Throwable)>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<java.util.Vector: int size()>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.lang.String: int indexOf(java.lang.String,int)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.lang.String: int length()>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.lang.String: int indexOf(int,int)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.lang.String: int length()>";
"<org.apache.tools.ant.PropertyHelper: void parsePropertyStringDefault(java.lang.String,java.util.Vector,java.util.Vector)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: int indexOf(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: int indexOf(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<org.apache.tools.ant.Project: void log(java.lang.String,int)>";
"<org.apache.tools.ant.Project: void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.tools.ant.Project: void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)>" -> "<java.lang.String: int length()>";
"<org.apache.tools.ant.Project: void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<org.apache.tools.ant.Project: void log(java.lang.String,int)>";
"<org.apache.tools.ant.Project: void initProperties()>" -> "<org.apache.tools.ant.Project: void setJavaVersionProperty()>";
"<org.apache.tools.ant.Project: void initProperties()>" -> "<org.apache.tools.ant.Project: void setSystemProperties()>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<org.apache.tools.ant.util.JavaEnvUtils: boolean isJavaVersion(java.lang.String)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<org.apache.tools.ant.util.JavaEnvUtils: boolean isJavaVersion(java.lang.String)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<org.apache.tools.ant.Project: void setPropertyInternal(java.lang.String,java.lang.String)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<org.apache.tools.ant.util.JavaEnvUtils: java.lang.String getJavaVersion()>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.Project: void setSystemProperties()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.Project: void setSystemProperties()>" -> "<org.apache.tools.ant.Project: void setPropertyInternal(java.lang.String,java.lang.String)>";
"<org.apache.tools.ant.Project: void setSystemProperties()>" -> "<java.lang.System: java.util.Properties getProperties()>";
"<org.apache.tools.ant.util.JavaEnvUtils: boolean isJavaVersion(java.lang.String)>" -> "<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>";
"<org.apache.tools.ant.util.JavaEnvUtils: java.lang.String getJavaVersion()>" -> "<org.apache.tools.ant.util.JavaEnvUtils: void <clinit>()>";
"<org.apache.tools.ant.util.JavaEnvUtils: boolean isJavaVersion(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<org.apache.tools.ant.Project: void log(java.lang.String,int)>";
"<org.apache.tools.ant.Project: void setJavaVersionProperty()>" -> "<org.apache.tools.ant.Project: void log(java.lang.String,int)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntHomeLibraries(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntHomeLibraries(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportAntHomeLibraries(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Diagnostics: java.io.File[] listJarFiles(java.io.File)>" -> "<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>";
"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportUserHomeLibraries(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportUserHomeLibraries(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportUserHomeLibraries(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.util.Properties: void load(java.io.InputStream)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.util.Properties: java.util.Enumeration keys()>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.util.Properties: java.lang.Object remove(java.lang.Object)>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.util.Properties: int size()>";
"<java.util.Properties: java.util.Enumeration keys()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Properties: java.lang.Object remove(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Properties: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportSystemProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportSystemProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportSystemProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportSystemProperties(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.FileOutputStream: void write(byte[])>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.FileOutputStream: void close()>";
"<java.io.FileOutputStream: void write(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.util.FileUtils: void close(java.io.OutputStream)>" -> "<java.io.FileOutputStream: void close()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.File: boolean exists()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.File: boolean exists()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.File: boolean delete()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.File: boolean exists()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.File: boolean delete()>";
"<java.io.File: boolean exists()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: boolean delete()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.File: long lastModified()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.File: boolean delete()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.File: boolean exists()>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.io.File: boolean delete()>";
"<java.io.File: long lastModified()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportLocale(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportLocale(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportLocale(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportLocale(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.tools.ant.Diagnostics: void doReportLocale(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Main: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.apache.tools.ant.Main: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.apache.tools.ant.Main: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.apache.tools.ant.Main: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.apache.tools.ant.Main: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.apache.tools.ant.Main: void <clinit>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<java.util.HashSet: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.tools.ant.Diagnostics: void doReportTasksAvailability(java.io.PrintStream)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<java.lang.Throwable: java.lang.String getMessage()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Diagnostics: void doReportWhich(java.io.PrintStream)>" -> "<java.lang.Throwable: void printStackTrace()>";
"<org.apache.tools.ant.Diagnostics: void doReportWhich(java.io.PrintStream)>" -> "<org.apache.tools.ant.BuildException: void printStackTrace()>";
"<java.lang.Throwable: void printStackTrace()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.BuildException: void printStackTrace()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.tools.ant.BuildException: void printStackTrace()>" -> "<org.apache.tools.ant.BuildException: void printStackTrace(java.io.PrintStream)>";
"<org.apache.tools.ant.BuildException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>";
"<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.BuildException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>";
"<org.apache.tools.ant.BuildException: void printStackTrace(java.io.PrintStream)>" -> "<org.apache.tools.ant.BuildException: void printStackTrace(java.io.PrintStream)>";
"<org.apache.tools.ant.Project: void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)>" -> "<java.util.Vector: java.util.Iterator iterator()>";
"<java.util.Vector: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Project: java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.tools.ant.Project: void addReference(java.lang.String,java.lang.Object)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>" -> "<org.apache.tools.ant.Project$AntRefTable: java.lang.Object get(java.lang.Object)>";
"<org.apache.tools.ant.Project$AntRefTable: java.lang.Object get(java.lang.Object)>" -> "<org.apache.tools.ant.Project$AntRefTable: java.lang.Object getReal(java.lang.Object)>";
"<org.apache.tools.ant.PropertyHelper: java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)>" -> "<org.apache.tools.ant.Project: java.lang.Object getReference(java.lang.String)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<org.apache.tools.ant.Project: void log(java.lang.String,int)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<org.apache.tools.ant.Project: void log(java.lang.String,int)>";
"<org.apache.tools.ant.PropertyHelper: boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)>" -> "<org.apache.tools.ant.Project: void log(java.lang.String,int)>";
}
