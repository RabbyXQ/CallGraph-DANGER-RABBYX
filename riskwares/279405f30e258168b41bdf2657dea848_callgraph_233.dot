digraph CallGraph {
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<com.thoughtworks.xstream.core.JVM: boolean canParseUTCDateFormat()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<com.thoughtworks.xstream.core.JVM: boolean hasOptimizedTreeMapPutAll()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<com.thoughtworks.xstream.core.JVM: boolean hasOptimizedTreeSetAddAll()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<com.thoughtworks.xstream.core.JVM: boolean canUseHarmonyReflectionProvider()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<com.thoughtworks.xstream.core.JVM: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<com.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<com.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<java.util.TreeSet: void <init>(java.util.Comparator)>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<com.thoughtworks.xstream.core.util.PresortedSet: void <init>(java.util.Comparator)>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<java.util.TreeMap: void <init>(java.util.Comparator)>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<com.thoughtworks.xstream.core.util.PresortedMap: void <init>(java.util.Comparator)>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<com.thoughtworks.xstream.core.JVM$1: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<com.thoughtworks.xstream.core.JVM: boolean is15()>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isIBM()>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isHarmony()>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<com.thoughtworks.xstream.core.JVM: float getMajorJavaVersion()>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: boolean canParseUTCDateFormat()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean hasOptimizedTreeMapPutAll()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean hasOptimizedTreeSetAddAll()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseHarmonyReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseHarmonyReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isHarmony()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: boolean is14()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isDiablo()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isSAP()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isHitachi()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isBEAWithUnsafeSupport()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isBlackdown()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isIBM()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isHPUX()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isApple()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isOracle()>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isSun()>";
"<java.lang.System: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: void <init>()>" -> "<com.thoughtworks.xstream.core.util.WeakCache: void <init>(java.util.Map)>";
"<com.thoughtworks.xstream.core.JVM: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.text.SimpleDateFormat: void <init>(java.lang.String)>" -> "<java.text.DateFormat: void <init>()>";
"<java.text.SimpleDateFormat: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.TreeSet: void <init>(java.util.Comparator)>" -> "<java.util.AbstractSet: void <init>()>";
"<java.util.TreeSet: void <init>(java.util.Comparator)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.util.PresortedSet: void <init>(java.util.Comparator)>" -> "<com.thoughtworks.xstream.core.util.PresortedSet: void <init>(java.util.Comparator,java.util.Collection)>";
"<java.util.TreeMap: void <init>(java.util.Comparator)>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.TreeMap: void <init>(java.util.Comparator)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.util.PresortedMap: void <init>(java.util.Comparator)>" -> "<com.thoughtworks.xstream.core.util.PresortedMap$ArraySet: void <init>(com.thoughtworks.xstream.core.util.PresortedMap$1)>";
"<com.thoughtworks.xstream.core.util.PresortedMap: void <init>(java.util.Comparator)>" -> "<com.thoughtworks.xstream.core.util.PresortedMap: void <init>(java.util.Comparator,com.thoughtworks.xstream.core.util.PresortedMap$ArraySet)>";
"<com.thoughtworks.xstream.core.JVM$1: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.thoughtworks.xstream.core.JVM: boolean is15()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean isIBM()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean isHarmony()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: float getMajorJavaVersion()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: float getMajorJavaVersion()>" -> "<java.lang.Float: float parseFloat(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: float getMajorJavaVersion()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: float getMajorJavaVersion()>" -> "<com.thoughtworks.xstream.core.JVM: boolean isAndroid()>";
"<com.thoughtworks.xstream.core.JVM: float getMajorJavaVersion()>" -> "<java.lang.Float: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: float getMajorJavaVersion()>" -> "<java.lang.System: void <clinit>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: boolean is14()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean isDiablo()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean isSAP()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean isHitachi()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean isBEAWithUnsafeSupport()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean isBEAWithUnsafeSupport()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: boolean isBEAWithUnsafeSupport()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: boolean isBEAWithUnsafeSupport()>" -> "<java.lang.System: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean isBlackdown()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean isHPUX()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean isApple()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean isOracle()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.JVM: boolean isSun()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<com.thoughtworks.xstream.core.util.WeakCache: void <init>(java.util.Map)>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Class: java.lang.Class forName(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>" -> "<java.lang.LinkageError: void <init>()>";
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.DateFormat: void <init>()>" -> "<java.text.Format: void <init>()>";
"<java.text.DateFormat: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractSet: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.util.PresortedSet: void <init>(java.util.Comparator,java.util.Collection)>" -> "<java.lang.Object: void <init>()>";
"<com.thoughtworks.xstream.core.util.PresortedSet: void <init>(java.util.Comparator,java.util.Collection)>" -> "<java.util.ArrayList: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.util.PresortedMap$ArraySet: void <init>(com.thoughtworks.xstream.core.util.PresortedMap$1)>" -> "<com.thoughtworks.xstream.core.util.PresortedMap$ArraySet: void <init>()>";
"<com.thoughtworks.xstream.core.util.PresortedMap: void <init>(java.util.Comparator,com.thoughtworks.xstream.core.util.PresortedMap$ArraySet)>" -> "<java.lang.Object: void <init>()>";
"<com.thoughtworks.xstream.core.util.PresortedMap: void <init>(java.util.Comparator,com.thoughtworks.xstream.core.util.PresortedMap$ArraySet)>" -> "<com.thoughtworks.xstream.core.util.PresortedMap$ArraySetComparator: void <init>(java.util.ArrayList)>";
"<java.lang.Float: float parseFloat(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: boolean isAndroid()>" -> "<com.thoughtworks.xstream.core.JVM: void <clinit>()>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.LinkageError: void <init>()>" -> "<java.lang.Error: void <init>()>";
"<java.lang.LinkageError: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.Format: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.text.Format: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.util.PresortedMap$ArraySet: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<com.thoughtworks.xstream.core.util.PresortedMap$ArraySetComparator: void <init>(java.util.ArrayList)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<java.text.DateFormat: java.util.Date parse(java.lang.String)>";
"<java.text.DateFormat: java.util.Date parse(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<java.util.TreeSet: boolean addAll(java.util.Collection)>";
"<java.util.TreeSet: boolean addAll(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<com.thoughtworks.xstream.core.util.PresortedSet: boolean addAll(java.util.Collection)>";
"<com.thoughtworks.xstream.core.util.PresortedSet: void <init>(java.util.Comparator,java.util.Collection)>" -> "<com.thoughtworks.xstream.core.util.PresortedSet: boolean addAll(java.util.Collection)>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<java.util.TreeMap: void putAll(java.util.Map)>";
"<java.util.TreeMap: void putAll(java.util.Map)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<com.thoughtworks.xstream.core.util.PresortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<com.thoughtworks.xstream.core.util.PresortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.thoughtworks.xstream.core.JVM: void <clinit>()>" -> "<com.thoughtworks.xstream.core.util.PresortedMap: java.util.Set keySet()>";
"<com.thoughtworks.xstream.core.util.PresortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<com.thoughtworks.xstream.core.util.PresortedMap$1: void <init>(com.thoughtworks.xstream.core.util.PresortedMap,java.lang.Object,java.lang.Object)>";
"<com.thoughtworks.xstream.core.util.PresortedMap: java.util.Set keySet()>" -> "<com.thoughtworks.xstream.core.util.PresortedMap$ArraySet: void <init>(com.thoughtworks.xstream.core.util.PresortedMap$1)>";
"<com.thoughtworks.xstream.core.util.PresortedMap$1: void <init>(com.thoughtworks.xstream.core.util.PresortedMap,java.lang.Object,java.lang.Object)>" -> "<java.lang.Object: void <init>()>";
"<com.thoughtworks.xstream.core.util.PresortedMap: java.util.Set keySet()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(float)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(float)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<com.thoughtworks.xstream.core.JVM: boolean supportsAWT()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<com.thoughtworks.xstream.core.JVM: boolean supportsSwing()>";
"<com.thoughtworks.xstream.core.JVM: void main(java.lang.String[])>" -> "<com.thoughtworks.xstream.core.JVM: boolean supportsSQL()>";
"<com.thoughtworks.xstream.core.JVM: void <init>()>" -> "<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void <init>()>" -> "<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: void <init>()>" -> "<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>";
"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<java.lang.Object: java.lang.Class getClass()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>" -> "<com.thoughtworks.xstream.core.util.WeakCache: java.lang.Object get(java.lang.Object)>";
"<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>" -> "<com.thoughtworks.xstream.core.util.WeakCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.thoughtworks.xstream.core.util.WeakCache: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<com.thoughtworks.xstream.core.util.WeakCache: java.lang.ref.Reference createReference(java.lang.Object)>";
"<com.thoughtworks.xstream.core.util.WeakCache: java.lang.ref.Reference createReference(java.lang.Object)>" -> "<java.lang.ref.WeakReference: void <init>(java.lang.Object)>";
"<java.lang.ref.WeakReference: void <init>(java.lang.Object)>" -> "<java.lang.ref.Reference: void <init>()>";
"<java.lang.ref.WeakReference: void <init>(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ref.Reference: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ref.Reference: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.util.WeakCache: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.ref.Reference: java.lang.Object get()>";
"<java.lang.ref.Reference: java.lang.Object get()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.util.WeakCache: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.util.WeakCache: java.lang.Object get(java.lang.Object)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>" -> "<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>";
"<com.thoughtworks.xstream.core.util.PresortedMap: java.util.Set keySet()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<java.util.ArrayList: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.thoughtworks.xstream.core.util.PresortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<com.thoughtworks.xstream.core.util.PresortedSet: boolean addAll(java.util.Collection)>" -> "<java.util.ArrayList: boolean addAll(java.util.Collection)>";
"<java.util.ArrayList: boolean addAll(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
}
