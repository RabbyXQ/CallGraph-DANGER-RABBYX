digraph CallGraph {
"<org.jsoup.examples.HtmlToPlainText: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.jsoup.examples.HtmlToPlainText: void main(java.lang.String[])>" -> "<org.jsoup.examples.HtmlToPlainText: void <init>()>";
"<org.jsoup.examples.HtmlToPlainText: void main(java.lang.String[])>" -> "<org.jsoup.Jsoup: org.jsoup.Connection connect(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText: void main(java.lang.String[])>" -> "<org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.Jsoup: org.jsoup.Connection connect(java.lang.String)>" -> "<org.jsoup.helper.HttpConnection: org.jsoup.Connection connect(java.lang.String)>";
"<org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection: org.jsoup.Connection connect(java.lang.String)>" -> "<org.jsoup.helper.HttpConnection: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.helper.HttpConnection: void <init>()>" -> "<org.jsoup.helper.HttpConnection$Response: void <init>()>";
"<org.jsoup.helper.HttpConnection: void <init>()>" -> "<org.jsoup.helper.HttpConnection$Request: void <init>(org.jsoup.helper.HttpConnection$1)>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void <init>()>" -> "<org.jsoup.helper.HttpConnection$Base: void <init>(org.jsoup.helper.HttpConnection$1)>";
"<org.jsoup.helper.HttpConnection$Request: void <init>(org.jsoup.helper.HttpConnection$1)>" -> "<org.jsoup.helper.HttpConnection$Request: void <init>()>";
"<org.jsoup.helper.HttpConnection$Base: void <init>(org.jsoup.helper.HttpConnection$1)>" -> "<org.jsoup.helper.HttpConnection$Base: void <init>()>";
"<org.jsoup.helper.HttpConnection$Request: void <init>()>" -> "<org.jsoup.Connection$Method: void <clinit>()>";
"<org.jsoup.helper.HttpConnection$Request: void <init>()>" -> "<org.jsoup.parser.Parser: org.jsoup.parser.Parser htmlParser()>";
"<org.jsoup.helper.HttpConnection$Request: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<org.jsoup.helper.HttpConnection$Request: void <init>()>" -> "<org.jsoup.helper.HttpConnection$Base: void <init>(org.jsoup.helper.HttpConnection$1)>";
"<org.jsoup.helper.HttpConnection$Base: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.helper.HttpConnection$Base: void <init>()>" -> "<java.util.LinkedHashMap: void <init>()>";
"<org.jsoup.helper.HttpConnection$Base: void <init>()>" -> "<java.util.LinkedHashMap: void <init>()>";
"<org.jsoup.Connection$Method: void <clinit>()>" -> "<org.jsoup.Connection$Method: void <init>(java.lang.String,int)>";
"<org.jsoup.Connection$Method: void <clinit>()>" -> "<org.jsoup.Connection$Method: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.Parser: org.jsoup.parser.Parser htmlParser()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void <clinit>()>";
"<org.jsoup.parser.Parser: org.jsoup.parser.Parser htmlParser()>" -> "<org.jsoup.parser.Parser: void <init>(org.jsoup.parser.TreeBuilder)>";
"<org.jsoup.parser.Parser: org.jsoup.parser.Parser htmlParser()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.LinkedHashMap: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<java.util.LinkedHashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.Connection$Method: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.Parser: void <init>(org.jsoup.parser.TreeBuilder)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void <init>()>" -> "<org.jsoup.parser.TreeBuilder: void <init>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void <init>()>" -> "<org.jsoup.helper.DescendableLinkedList: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void finalize()>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.parser.TreeBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.helper.DescendableLinkedList: void <init>()>" -> "<java.util.LinkedList: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.LinkedList: void <init>()>" -> "<java.util.AbstractSequentialList: void <init>()>";
"<java.util.LinkedList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractSequentialList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.AbstractSequentialList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void <clinit>()>" -> "<java.lang.Class: boolean desiredAssertionStatus()>";
"<java.lang.Class: boolean desiredAssertionStatus()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection: org.jsoup.Connection connect(java.lang.String)>" -> "<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)>";
"<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)>" -> "<java.net.URL: void <init>(java.lang.String)>";
"<org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.URL: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.net.URL: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText: void main(java.lang.String[])>" -> "<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()>";
"<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()>" -> "<org.jsoup.Connection$Method: void <clinit>()>";
"<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()>" -> "<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()>";
"<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()>" -> "<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.Connection$Method: void <clinit>()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.io.BufferedInputStream: void <init>(java.io.InputStream)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.DataUtil: java.lang.String getCharsetFromContentType(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.io.BufferedInputStream: void <init>(java.io.InputStream)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.UnsupportedMimeTypeException: void <init>(java.lang.String,java.lang.String,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.HttpStatusException: void <init>(java.lang.String,int,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.net.URL: void <init>(java.net.URL,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: void setupFromConnection(java.net.HttpURLConnection,org.jsoup.Connection$Response)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: void <init>(org.jsoup.helper.HttpConnection$Response)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: void writePost(java.util.Collection,java.io.OutputStream)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.net.MalformedURLException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.DataUtil: void <clinit>()>";
"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.DataUtil: java.lang.String getCharsetFromContentType(java.lang.String)>" -> "<org.jsoup.helper.DataUtil: void <clinit>()>";
"<org.jsoup.helper.DataUtil: java.lang.String getCharsetFromContentType(java.lang.String)>" -> "<java.nio.charset.Charset: boolean isSupported(java.lang.String)>";
"<org.jsoup.helper.DataUtil: java.lang.String getCharsetFromContentType(java.lang.String)>" -> "<java.nio.charset.Charset: boolean isSupported(java.lang.String)>";
"<org.jsoup.helper.DataUtil: java.lang.String getCharsetFromContentType(java.lang.String)>" -> "<java.util.Locale: void <clinit>()>";
"<org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)>" -> "<org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>";
"<org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)>" -> "<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>";
"<org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)>" -> "<java.io.ByteArrayOutputStream: void <init>(int)>";
"<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>" -> "<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>";
"<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.UnsupportedMimeTypeException: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.jsoup.HttpStatusException: void <init>(java.lang.String,int,java.lang.String)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<java.net.URL: void <init>(java.net.URL,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.net.URL: void <init>(java.net.URL,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void setupFromConnection(java.net.HttpURLConnection,org.jsoup.Connection$Response)>" -> "<org.jsoup.Connection$Method: void <clinit>()>";
"<org.jsoup.helper.HttpConnection$Response: void setupFromConnection(java.net.HttpURLConnection,org.jsoup.Connection$Response)>" -> "<org.jsoup.Connection$Method: org.jsoup.Connection$Method valueOf(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void <init>(org.jsoup.helper.HttpConnection$Response)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.helper.HttpConnection$Response: void <init>(org.jsoup.helper.HttpConnection$Response)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void <init>(org.jsoup.helper.HttpConnection$Response)>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.jsoup.helper.HttpConnection$Response: void <init>(org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Base: void <init>(org.jsoup.helper.HttpConnection$1)>";
"<org.jsoup.helper.HttpConnection$Response: void writePost(java.util.Collection,java.io.OutputStream)>" -> "<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void writePost(java.util.Collection,java.io.OutputStream)>" -> "<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void writePost(java.util.Collection,java.io.OutputStream)>" -> "<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>" -> "<org.jsoup.Connection$Method: void <clinit>()>";
"<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Response: java.lang.String getRequestCookieString(org.jsoup.Connection$Request)>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.net.URL: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>";
"<java.net.MalformedURLException: void <init>(java.lang.String)>" -> "<java.io.IOException: void <init>()>";
"<java.net.MalformedURLException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.jsoup.helper.DataUtil: void <clinit>()>" -> "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.nio.charset.Charset: boolean isSupported(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.ByteArrayOutputStream: void <init>(int)>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.ByteArrayOutputStream: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.Connection$Method: org.jsoup.Connection$Method valueOf(java.lang.String)>" -> "<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>";
"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>" -> "<java.io.Writer: void <init>()>";
"<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: java.lang.String getRequestCookieString(org.jsoup.Connection$Request)>" -> "<java.lang.StringBuilder: void <init>()>";
"<java.io.IOException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.Writer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Writer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: java.lang.String getRequestCookieString(org.jsoup.Connection$Request)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: java.lang.String getRequestCookieString(org.jsoup.Connection$Request)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: java.lang.String getRequestCookieString(org.jsoup.Connection$Request)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.net.URL: java.lang.String getProtocol()>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.net.URL: java.lang.String getAuthority()>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.net.URL: java.lang.String getPath()>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.net.URL: java.lang.String getQuery()>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.net.URL: java.lang.String getQuery()>";
"<java.net.URL: java.lang.String getProtocol()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.URL: java.lang.String getAuthority()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.URL: java.lang.String getPath()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.URL: java.lang.String getQuery()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void writePost(java.util.Collection,java.io.OutputStream)>" -> "<java.io.Writer: java.io.Writer append(char)>";
"<org.jsoup.helper.HttpConnection$Response: void writePost(java.util.Collection,java.io.OutputStream)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void writePost(java.util.Collection,java.io.OutputStream)>" -> "<java.io.OutputStreamWriter: void write(int)>";
"<org.jsoup.helper.HttpConnection$Response: void writePost(java.util.Collection,java.io.OutputStream)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void writePost(java.util.Collection,java.io.OutputStream)>" -> "<java.io.OutputStreamWriter: void close()>";
"<java.io.Writer: java.io.Writer append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.Writer: void write(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStreamWriter: void write(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStreamWriter: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void <init>(org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: java.net.URL url()>";
"<org.jsoup.helper.HttpConnection$Response: java.net.URL url()>" -> "<org.jsoup.helper.HttpConnection$Base: java.net.URL url()>";
"<org.jsoup.helper.HttpConnection$Response: void setupFromConnection(java.net.HttpURLConnection,org.jsoup.Connection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: java.util.Map cookies()>";
"<org.jsoup.helper.HttpConnection$Response: java.util.Map cookies()>" -> "<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies()>";
"<org.jsoup.helper.HttpConnection$Response: void setupFromConnection(java.net.HttpURLConnection,org.jsoup.Connection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: void processResponseHeaders(java.util.Map)>";
"<org.jsoup.helper.HttpConnection$Response: void setupFromConnection(java.net.HttpURLConnection,org.jsoup.Connection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: boolean hasCookie(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void setupFromConnection(java.net.HttpURLConnection,org.jsoup.Connection$Response)>" -> "<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base cookie(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void processResponseHeaders(java.util.Map)>" -> "<org.jsoup.parser.TokenQueue: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: boolean hasCookie(java.lang.String)>" -> "<org.jsoup.helper.HttpConnection$Base: boolean hasCookie(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base cookie(java.lang.String,java.lang.String)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base cookie(java.lang.String,java.lang.String)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>";
"<org.jsoup.parser.TokenQueue: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.parser.TokenQueue: void <init>(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.helper.HttpConnection$Base: boolean hasCookie(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>";
"<org.jsoup.helper.Validate: void notNull(java.lang.Object)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>" -> "<java.lang.String: int length()>";
"<java.lang.String: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void processResponseHeaders(java.util.Map)>" -> "<org.jsoup.parser.TokenQueue: java.lang.String chompTo(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void processResponseHeaders(java.util.Map)>" -> "<org.jsoup.parser.TokenQueue: java.lang.String consumeTo(java.lang.String)>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeTo(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeTo(java.lang.String)>" -> "<java.lang.String: int length()>";
"<java.lang.String: java.lang.String substring(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeTo(java.lang.String)>" -> "<org.jsoup.parser.TokenQueue: java.lang.String remainder()>";
"<org.jsoup.parser.TokenQueue: java.lang.String remainder()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.TokenQueue: java.lang.String remainder()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokenQueue: java.lang.String remainder()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokenQueue: java.lang.String remainder()>" -> "<org.jsoup.parser.TokenQueue: boolean isEmpty()>";
"<org.jsoup.parser.TokenQueue: java.lang.String remainder()>" -> "<org.jsoup.parser.TokenQueue: char consume()>";
"<org.jsoup.parser.TokenQueue: boolean isEmpty()>" -> "<org.jsoup.parser.TokenQueue: int remainingLength()>";
"<org.jsoup.parser.TokenQueue: java.lang.String chompTo(java.lang.String)>" -> "<org.jsoup.parser.TokenQueue: java.lang.String consumeTo(java.lang.String)>";
"<org.jsoup.parser.TokenQueue: java.lang.String chompTo(java.lang.String)>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>" -> "<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>";
"<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.helper.HttpConnection$Response: void processResponseHeaders(java.util.Map)>" -> "<java.lang.String: java.lang.String trim()>";
"<java.lang.String: java.lang.String trim()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void processResponseHeaders(java.util.Map)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void processResponseHeaders(java.util.Map)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.jsoup.helper.HttpConnection$Response: void processResponseHeaders(java.util.Map)>" -> "<java.lang.String: int length()>";
"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void processResponseHeaders(java.util.Map)>" -> "<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base cookie(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void processResponseHeaders(java.util.Map)>" -> "<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base header(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base header(java.lang.String,java.lang.String)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base header(java.lang.String,java.lang.String)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base header(java.lang.String,java.lang.String)>" -> "<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base removeHeader(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base removeHeader(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base removeHeader(java.lang.String)>" -> "<org.jsoup.helper.HttpConnection$Base: java.util.Map$Entry scanHeaders(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: java.util.Map$Entry scanHeaders(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<java.lang.String: java.lang.String toLowerCase()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)>" -> "<java.io.ByteArrayOutputStream: void write(byte[],int,int)>";
"<org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)>" -> "<java.io.ByteArrayOutputStream: void write(byte[],int,int)>";
"<java.io.ByteArrayOutputStream: byte[] toByteArray()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.ByteArrayOutputStream: void write(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)>" -> "<java.io.FilterInputStream: int read(byte[])>";
"<java.io.FilterInputStream: int read(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.io.BufferedInputStream: void close()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.io.BufferedInputStream: void close()>";
"<java.io.BufferedInputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.net.URL: java.lang.String getProtocol()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.net.URL: java.lang.String toString()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.net.URL: java.lang.String toString()>";
"<java.net.URL: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: java.lang.String header(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: java.lang.String contentType()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: boolean hasHeader(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Response: java.lang.String header(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: java.lang.String header(java.lang.String)>" -> "<org.jsoup.helper.HttpConnection$Base: java.lang.String header(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: boolean hasHeader(java.lang.String)>" -> "<org.jsoup.helper.HttpConnection$Base: boolean hasHeader(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: java.lang.String header(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: java.lang.String header(java.lang.String)>" -> "<org.jsoup.helper.HttpConnection$Base: java.lang.String getHeaderCaseInsensitive(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: boolean hasHeader(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: boolean hasHeader(java.lang.String)>" -> "<org.jsoup.helper.HttpConnection$Base: java.lang.String getHeaderCaseInsensitive(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: java.lang.String getHeaderCaseInsensitive(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: java.lang.String getHeaderCaseInsensitive(java.lang.String)>" -> "<org.jsoup.helper.HttpConnection$Base: java.util.Map$Entry scanHeaders(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: java.lang.String getHeaderCaseInsensitive(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: boolean startsWith(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.DataUtil: java.lang.String getCharsetFromContentType(java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.jsoup.helper.DataUtil: java.lang.String getCharsetFromContentType(java.lang.String)>" -> "<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>";
"<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Request: java.net.URL url()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Request: org.jsoup.Connection$Method method()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Request: java.util.Collection data()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Request: org.jsoup.Connection$Method method()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Request: java.util.Collection data()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Request: boolean followRedirects()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base method(org.jsoup.Connection$Method)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Request: java.util.Collection data()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Request: java.net.URL url()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base url(java.net.URL)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base cookie(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Request: boolean ignoreHttpErrors()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Request: java.net.URL url()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Request: boolean ignoreContentType()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Request: java.net.URL url()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<org.jsoup.helper.HttpConnection$Request: int maxBodySize()>";
"<org.jsoup.helper.HttpConnection$Request: java.net.URL url()>" -> "<org.jsoup.helper.HttpConnection$Base: java.net.URL url()>";
"<org.jsoup.helper.HttpConnection$Request: org.jsoup.Connection$Method method()>" -> "<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Method method()>";
"<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base method(org.jsoup.Connection$Method)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base url(java.net.URL)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base cookie(java.lang.String,java.lang.String)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.util.ArrayList: int size()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.util.ArrayList: void clear()>";
"<java.util.ArrayList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Request: java.net.URL url()>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Request: java.util.Collection data()>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base url(java.net.URL)>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Request: java.util.Collection data()>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>" -> "<java.util.ArrayList: void clear()>";
"<java.util.ArrayList: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Request: java.net.URL url()>";
"<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Request: org.jsoup.Connection$Method method()>";
"<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Request: int timeout()>";
"<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Request: int timeout()>";
"<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Request: org.jsoup.Connection$Method method()>";
"<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Request: java.util.Map cookies()>";
"<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Request: java.util.Map headers()>";
"<org.jsoup.helper.HttpConnection$Request: java.util.Map cookies()>" -> "<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies()>";
"<org.jsoup.helper.HttpConnection$Request: java.util.Map headers()>" -> "<org.jsoup.helper.HttpConnection$Base: java.util.Map headers()>";
"<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>" -> "<java.lang.Enum: java.lang.String name()>";
"<java.lang.Enum: java.lang.String name()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>" -> "<java.net.URL: java.net.URLConnection openConnection()>";
"<java.net.URL: java.net.URLConnection openConnection()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>" -> "<java.util.HashMap: int size()>";
"<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>" -> "<java.util.LinkedHashMap: java.util.Set entrySet()>";
"<java.util.HashMap: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.LinkedHashMap: java.util.Set entrySet()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: void setupFromConnection(java.net.HttpURLConnection,org.jsoup.Connection$Response)>" -> "<java.util.LinkedHashMap: java.util.Set entrySet()>";
"<org.jsoup.helper.HttpConnection$Response: void processResponseHeaders(java.util.Map)>" -> "<java.util.LinkedHashMap: java.util.Set entrySet()>";
"<org.jsoup.helper.HttpConnection$Response: java.lang.String getRequestCookieString(org.jsoup.Connection$Request)>" -> "<org.jsoup.helper.HttpConnection$Request: java.util.Map cookies()>";
"<org.jsoup.helper.HttpConnection$Response: java.lang.String getRequestCookieString(org.jsoup.Connection$Request)>" -> "<java.util.LinkedHashMap: java.util.Set entrySet()>";
"<org.jsoup.helper.HttpConnection$Response: void writePost(java.util.Collection,java.io.OutputStream)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()>" -> "<org.jsoup.helper.HttpConnection$Response: org.jsoup.nodes.Document parse()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.nodes.Document parse()>" -> "<org.jsoup.helper.DataUtil: void <clinit>()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.nodes.Document parse()>" -> "<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.nodes.Document parse()>" -> "<org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<org.jsoup.helper.DataUtil: void <clinit>()>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<org.jsoup.helper.DataUtil: java.lang.String getCharsetFromContentType(java.lang.String)>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>";
"<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<java.lang.String: int length()>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<java.lang.String: int length()>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<java.lang.String: char charAt(int)>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: java.lang.String substring(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()>" -> "<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base method(org.jsoup.Connection$Method)>";
"<org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.examples.HtmlToPlainText: void main(java.lang.String[])>" -> "<org.jsoup.examples.HtmlToPlainText: java.lang.String getPlainText(org.jsoup.nodes.Element)>";
"<org.jsoup.examples.HtmlToPlainText: java.lang.String getPlainText(org.jsoup.nodes.Element)>" -> "<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void <init>(org.jsoup.examples.HtmlToPlainText,org.jsoup.examples.HtmlToPlainText$1)>";
"<org.jsoup.examples.HtmlToPlainText: java.lang.String getPlainText(org.jsoup.nodes.Element)>" -> "<org.jsoup.select.NodeTraversor: void <init>(org.jsoup.select.NodeVisitor)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void <init>(org.jsoup.examples.HtmlToPlainText,org.jsoup.examples.HtmlToPlainText$1)>" -> "<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void <init>(org.jsoup.examples.HtmlToPlainText)>";
"<org.jsoup.select.NodeTraversor: void <init>(org.jsoup.select.NodeVisitor)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void <init>(org.jsoup.examples.HtmlToPlainText)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void <init>(org.jsoup.examples.HtmlToPlainText)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.examples.HtmlToPlainText: java.lang.String getPlainText(org.jsoup.nodes.Element)>" -> "<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void head(org.jsoup.nodes.Node,int)>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void head(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void head(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.helper.StringUtil: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.StringBuilder: int length()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<java.lang.StringBuilder: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.String: java.lang.String[] split(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.String: int length()>";
"<java.lang.String: java.lang.String[] split(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.StringBuilder: int length()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String substring(int)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String substring(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText: java.lang.String getPlainText(org.jsoup.nodes.Element)>" -> "<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: java.lang.String toString()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.helper.HttpConnection$Base: java.lang.String getHeaderCaseInsensitive(java.lang.String)>" -> "<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
"<org.jsoup.helper.HttpConnection$Base: java.lang.String getHeaderCaseInsensitive(java.lang.String)>" -> "<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: java.util.Map$Entry scanHeaders(java.lang.String)>" -> "<java.util.LinkedHashMap: java.util.Set entrySet()>";
"<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base removeHeader(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object remove(java.lang.Object)>";
"<java.util.HashMap: java.lang.Object remove(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base header(java.lang.String,java.lang.String)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>" -> "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>";
"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.TokenQueue: int remainingLength()>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.TokenQueue: char consume()>" -> "<java.lang.String: char charAt(int)>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeTo(java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String,int)>";
"<java.lang.String: int indexOf(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Base: boolean hasCookie(java.lang.String)>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<java.util.HashMap: boolean containsKey(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>" -> "<java.util.LinkedHashMap: java.util.Set entrySet()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.nodes.Document parse()>" -> "<org.jsoup.helper.HttpConnection$Request: org.jsoup.parser.Parser parser()>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<org.jsoup.parser.Parser: org.jsoup.nodes.Document parseInput(java.lang.String,java.lang.String)>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<org.jsoup.parser.Parser: org.jsoup.nodes.Document parseInput(java.lang.String,java.lang.String)>";
"<org.jsoup.parser.Parser: org.jsoup.nodes.Document parseInput(java.lang.String,java.lang.String)>" -> "<org.jsoup.parser.ParseErrorList: org.jsoup.parser.ParseErrorList tracking(int)>";
"<org.jsoup.parser.Parser: org.jsoup.nodes.Document parseInput(java.lang.String,java.lang.String)>" -> "<org.jsoup.parser.ParseErrorList: org.jsoup.parser.ParseErrorList noTracking()>";
"<org.jsoup.parser.ParseErrorList: org.jsoup.parser.ParseErrorList tracking(int)>" -> "<org.jsoup.parser.ParseErrorList: void <init>(int,int)>";
"<org.jsoup.parser.ParseErrorList: org.jsoup.parser.ParseErrorList noTracking()>" -> "<org.jsoup.parser.ParseErrorList: void <init>(int,int)>";
"<org.jsoup.parser.ParseErrorList: void <init>(int,int)>" -> "<java.util.ArrayList: void <init>(int)>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.Parser: org.jsoup.nodes.Document parseInput(java.lang.String,java.lang.String)>" -> "<org.jsoup.parser.Parser: boolean isTrackErrors()>";
"<org.jsoup.parser.Parser: org.jsoup.nodes.Document parseInput(java.lang.String,java.lang.String)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<java.lang.String: java.lang.String valueOf(char)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$23: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$22: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$21: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$20: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$19: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$18: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$17: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$16: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$15: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$14: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$13: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$12: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$11: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$10: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$9: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$8: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$7: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$6: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$5: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$4: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$3: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$2: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>" -> "<org.jsoup.parser.HtmlTreeBuilderState$1: void <init>(java.lang.String,int)>";
"<java.lang.String: java.lang.String valueOf(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$23: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>" -> "<org.jsoup.parser.TreeBuilder: void initialiseParse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>";
"<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>" -> "<org.jsoup.parser.TreeBuilder: void runParser()>";
"<org.jsoup.parser.TreeBuilder: void initialiseParse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>";
"<org.jsoup.parser.TreeBuilder: void initialiseParse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>" -> "<org.jsoup.helper.DescendableLinkedList: void <init>()>";
"<org.jsoup.parser.TreeBuilder: void initialiseParse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>" -> "<org.jsoup.parser.Tokeniser: void <init>(org.jsoup.parser.CharacterReader,org.jsoup.parser.ParseErrorList)>";
"<org.jsoup.parser.TreeBuilder: void initialiseParse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>" -> "<org.jsoup.parser.CharacterReader: void <init>(java.lang.String)>";
"<org.jsoup.parser.TreeBuilder: void initialiseParse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>" -> "<org.jsoup.nodes.Document: void <init>(java.lang.String)>";
"<org.jsoup.parser.TreeBuilder: void initialiseParse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>";
"<org.jsoup.parser.TreeBuilder: void runParser()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.Tokeniser: void <init>(org.jsoup.parser.CharacterReader,org.jsoup.parser.ParseErrorList)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.Tokeniser: void <init>(org.jsoup.parser.CharacterReader,org.jsoup.parser.ParseErrorList)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.Tokeniser: void <init>(org.jsoup.parser.CharacterReader,org.jsoup.parser.ParseErrorList)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.parser.CharacterReader: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.parser.CharacterReader: void <init>(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.nodes.Document: void <init>(java.lang.String)>" -> "<org.jsoup.parser.Tag: void <clinit>()>";
"<org.jsoup.nodes.Document: void <init>(java.lang.String)>" -> "<org.jsoup.nodes.Document$OutputSettings: void <init>()>";
"<org.jsoup.nodes.Document: void <init>(java.lang.String)>" -> "<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String)>";
"<org.jsoup.nodes.Document: void <init>(java.lang.String)>" -> "<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>";
"<org.jsoup.nodes.Document: void <init>(java.lang.String)>" -> "<org.jsoup.nodes.Document$QuirksMode: void <clinit>()>";
"<org.jsoup.parser.Token$TokenType: void <clinit>()>" -> "<org.jsoup.parser.Token$TokenType: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.Token$TokenType: void <clinit>()>" -> "<org.jsoup.parser.Token$TokenType: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.Token$TokenType: void <clinit>()>" -> "<org.jsoup.parser.Token$TokenType: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.Token$TokenType: void <clinit>()>" -> "<org.jsoup.parser.Token$TokenType: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.Token$TokenType: void <clinit>()>" -> "<org.jsoup.parser.Token$TokenType: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.Token$TokenType: void <clinit>()>" -> "<org.jsoup.parser.Token$TokenType: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<java.lang.String: java.lang.String valueOf(char)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$67: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$66: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$65: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$64: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$63: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$62: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$61: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$60: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$59: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$58: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$57: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$56: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$55: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$54: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$53: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$52: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$51: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$50: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$49: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$48: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$47: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$46: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$45: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$44: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$43: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$42: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$41: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$40: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$39: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$38: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$37: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$36: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$35: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$34: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$33: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$32: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$31: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$30: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$29: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$28: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$27: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$26: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$25: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$24: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$23: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$22: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$21: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$20: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$19: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$18: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$17: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$16: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$15: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$14: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$13: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$12: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$11: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$10: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$9: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$8: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$7: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$6: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$5: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$4: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$3: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$2: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <clinit>()>" -> "<org.jsoup.parser.TokeniserState$1: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.Tag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.Tag: void <clinit>()>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.parser.Tag: void <clinit>()>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.parser.Tag: void <clinit>()>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.parser.Tag: void <clinit>()>" -> "<org.jsoup.parser.Tag: void register(org.jsoup.parser.Tag)>";
"<org.jsoup.parser.Tag: void <clinit>()>" -> "<org.jsoup.parser.Tag: void <init>(java.lang.String)>";
"<org.jsoup.parser.Tag: void <clinit>()>" -> "<org.jsoup.parser.Tag: void register(org.jsoup.parser.Tag)>";
"<org.jsoup.parser.Tag: void <clinit>()>" -> "<org.jsoup.parser.Tag: void <init>(java.lang.String)>";
"<org.jsoup.parser.Tag: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<org.jsoup.nodes.Document$OutputSettings: void <init>()>" -> "<org.jsoup.nodes.Entities$EscapeMode: void <clinit>()>";
"<org.jsoup.nodes.Document$OutputSettings: void <init>()>" -> "<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>";
"<org.jsoup.nodes.Document$OutputSettings: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String)>" -> "<org.jsoup.nodes.Attributes: void <init>()>";
"<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String)>" -> "<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String,org.jsoup.nodes.Attributes)>";
"<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>" -> "<org.jsoup.parser.Tag: void <clinit>()>";
"<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>" -> "<org.jsoup.parser.Tag: void <init>(java.lang.String)>";
"<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>";
"<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.nodes.Document$QuirksMode: void <clinit>()>" -> "<org.jsoup.nodes.Document$QuirksMode: void <init>(java.lang.String,int)>";
"<org.jsoup.nodes.Document$QuirksMode: void <clinit>()>" -> "<org.jsoup.nodes.Document$QuirksMode: void <init>(java.lang.String,int)>";
"<org.jsoup.nodes.Document$QuirksMode: void <clinit>()>" -> "<org.jsoup.nodes.Document$QuirksMode: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.Token$TokenType: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState$67: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$66: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$65: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$64: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$63: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$62: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$61: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$60: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$59: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$58: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$57: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$56: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$55: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$54: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$53: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$52: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$51: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$50: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$49: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$48: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$47: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$46: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$45: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$44: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$43: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$42: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$41: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$40: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$39: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$38: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$37: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$36: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$35: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$34: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$33: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$32: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$31: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$30: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$29: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$28: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$27: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$26: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$25: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$24: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$23: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$22: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$21: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$20: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$19: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$18: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$17: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$16: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$15: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$14: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$13: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$12: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$11: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$10: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$9: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$8: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$7: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$6: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$5: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$4: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$3: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$2: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.TokeniserState$1: void <init>(java.lang.String,int)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>";
"<org.jsoup.parser.Tag: void register(org.jsoup.parser.Tag)>" -> "<org.jsoup.parser.Tag: void <clinit>()>";
"<org.jsoup.parser.Tag: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.nodes.Entities$EscapeMode: void <clinit>()>" -> "<org.jsoup.nodes.Entities: void <clinit>()>";
"<org.jsoup.nodes.Entities$EscapeMode: void <clinit>()>" -> "<org.jsoup.nodes.Entities$EscapeMode: void <init>(java.lang.String,int,java.util.Map)>";
"<org.jsoup.nodes.Entities$EscapeMode: void <clinit>()>" -> "<org.jsoup.nodes.Entities: java.util.Map access$200()>";
"<org.jsoup.nodes.Entities$EscapeMode: void <clinit>()>" -> "<org.jsoup.nodes.Entities$EscapeMode: void <init>(java.lang.String,int,java.util.Map)>";
"<org.jsoup.nodes.Entities$EscapeMode: void <clinit>()>" -> "<org.jsoup.nodes.Entities: java.util.Map access$100()>";
"<org.jsoup.nodes.Entities$EscapeMode: void <clinit>()>" -> "<org.jsoup.nodes.Entities$EscapeMode: void <init>(java.lang.String,int,java.util.Map)>";
"<org.jsoup.nodes.Entities$EscapeMode: void <clinit>()>" -> "<org.jsoup.nodes.Entities: java.util.Map access$000()>";
"<org.jsoup.nodes.Attributes: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String,org.jsoup.nodes.Attributes)>" -> "<org.jsoup.nodes.Node: void <init>(java.lang.String,org.jsoup.nodes.Attributes)>";
"<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String,org.jsoup.nodes.Attributes)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.nodes.Document$QuirksMode: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int,org.jsoup.parser.TokeniserState$1)>" -> "<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<java.lang.Character: java.lang.Character valueOf(char)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<org.jsoup.nodes.Entities: java.util.Map toCharacterKey(java.util.Map)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<org.jsoup.nodes.Entities: java.util.Map toCharacterKey(java.util.Map)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<java.lang.Character: void <clinit>()>";
"<org.jsoup.nodes.Entities$EscapeMode: void <init>(java.lang.String,int,java.util.Map)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<org.jsoup.nodes.Entities: java.util.Map access$200()>" -> "<org.jsoup.nodes.Entities: void <clinit>()>";
"<org.jsoup.nodes.Entities: java.util.Map access$100()>" -> "<org.jsoup.nodes.Entities: void <clinit>()>";
"<org.jsoup.nodes.Entities: java.util.Map access$000()>" -> "<org.jsoup.nodes.Entities: void <clinit>()>";
"<org.jsoup.nodes.Node: void <init>(java.lang.String,org.jsoup.nodes.Attributes)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.nodes.Node: void <init>(java.lang.String,org.jsoup.nodes.Attributes)>" -> "<java.util.ArrayList: void <init>(int)>";
"<org.jsoup.nodes.Node: void <init>(java.lang.String,org.jsoup.nodes.Attributes)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.nodes.Node: void <init>(java.lang.String,org.jsoup.nodes.Attributes)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.parser.TokeniserState: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<java.lang.Character: java.lang.Character valueOf(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Entities: java.util.Map toCharacterKey(java.util.Map)>" -> "<java.util.HashMap: void <init>()>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.lang.Character: java.lang.Character valueOf(char)>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.util.HashMap: void <init>()>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.util.Properties: void <init>()>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<java.lang.Integer: java.lang.Integer valueOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: int parseInt(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Properties: void <init>()>" -> "<java.util.Hashtable: void <init>()>";
"<java.util.Properties: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Hashtable: void <init>()>" -> "<java.util.Dictionary: void <init>()>";
"<java.util.Hashtable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<java.lang.Throwable: java.lang.String getMessage()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>";
"<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.util.Properties: void load(java.io.InputStream)>";
"<org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>" -> "<java.util.Properties: java.util.Set entrySet()>";
"<java.util.Properties: void load(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Properties: java.util.Set entrySet()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Entities: java.util.Map toCharacterKey(java.util.Map)>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<org.jsoup.nodes.Entities: java.util.Map toCharacterKey(java.util.Map)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jsoup.nodes.Entities: java.util.Map toCharacterKey(java.util.Map)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jsoup.nodes.Entities: java.util.Map toCharacterKey(java.util.Map)>" -> "<java.util.HashMap: java.util.Set entrySet()>";
"<java.util.HashMap: java.util.Set entrySet()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Entities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jsoup.parser.Tag: void register(org.jsoup.parser.Tag)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.parser.Tag: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.parser.Tag: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.jsoup.parser.Tag: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.jsoup.parser.Tag: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.jsoup.parser.TreeBuilder: void runParser()>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.DocumentType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document$QuirksMode: void <clinit>()>";
"<org.jsoup.nodes.DocumentType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jsoup.nodes.Node: void <init>(java.lang.String)>";
"<org.jsoup.nodes.DocumentType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean isWhitespace(org.jsoup.parser.Token)>";
"<org.jsoup.nodes.Node: void <init>(java.lang.String)>" -> "<org.jsoup.nodes.Attributes: void <init>()>";
"<org.jsoup.nodes.Node: void <init>(java.lang.String)>" -> "<org.jsoup.nodes.Node: void <init>(java.lang.String,org.jsoup.nodes.Attributes)>";
"<org.jsoup.parser.HtmlTreeBuilderState: boolean isWhitespace(org.jsoup.parser.Token)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState: boolean isWhitespace(org.jsoup.parser.Token)>" -> "<org.jsoup.helper.StringUtil: boolean isWhitespace(int)>";
"<org.jsoup.nodes.DocumentType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jsoup.nodes.Node: org.jsoup.nodes.Node attr(java.lang.String,java.lang.String)>";
"<org.jsoup.nodes.DocumentType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jsoup.nodes.Node: org.jsoup.nodes.Node attr(java.lang.String,java.lang.String)>";
"<org.jsoup.nodes.DocumentType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jsoup.nodes.Node: org.jsoup.nodes.Node attr(java.lang.String,java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: java.lang.String getBaseUri()>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document getDocument()>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document getDocument()>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>" -> "<org.jsoup.nodes.Comment: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>";
"<org.jsoup.nodes.Comment: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.nodes.Node: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean isFosterInserts()>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insertInFosterParent(org.jsoup.nodes.Node)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertInFosterParent(org.jsoup.nodes.Node)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertInFosterParent(org.jsoup.nodes.Node)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getFromStack(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertInFosterParent(org.jsoup.nodes.Node)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)>" -> "<java.lang.AssertionError: void <init>()>";
"<java.lang.AssertionError: void <init>()>" -> "<java.lang.Error: void <init>()>";
"<java.lang.AssertionError: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Error: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean onStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean onStack(org.jsoup.nodes.Element)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean isElementInQueue(org.jsoup.helper.DescendableLinkedList,org.jsoup.nodes.Element)>";
"<org.jsoup.parser.CharacterReader: void <init>(java.lang.String)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)>" -> "<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base url(java.net.URL)>";
"<org.jsoup.helper.HttpConnection$Request: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean isElementInQueue(org.jsoup.helper.DescendableLinkedList,org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void <init>(org.jsoup.helper.DescendableLinkedList,int,org.jsoup.helper.DescendableLinkedList$1)>";
"<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void <init>(org.jsoup.helper.DescendableLinkedList,int,org.jsoup.helper.DescendableLinkedList$1)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void <init>(org.jsoup.helper.DescendableLinkedList,int)>";
"<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void <init>(org.jsoup.helper.DescendableLinkedList,int)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean isElementInQueue(org.jsoup.helper.DescendableLinkedList,org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean isElementInQueue(org.jsoup.helper.DescendableLinkedList,org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>" -> "<java.util.LinkedList: int size()>";
"<java.util.LinkedList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void <init>(org.jsoup.helper.DescendableLinkedList,int)>" -> "<java.util.LinkedList: java.util.ListIterator listIterator(int)>";
"<java.util.LinkedList: java.util.ListIterator listIterator(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getFromStack(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getFromStack(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getFromStack(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>" -> "<java.util.LinkedList: java.lang.Object getLast()>";
"<java.util.LinkedList: java.lang.Object getLast()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertInFosterParent(org.jsoup.nodes.Node)>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<java.util.LinkedList: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>";
"<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Node: void addChildren(org.jsoup.nodes.Node[])>";
"<org.jsoup.nodes.Node: void addChildren(org.jsoup.nodes.Node[])>" -> "<org.jsoup.nodes.Node: void reparentChild(org.jsoup.nodes.Node)>";
"<org.jsoup.nodes.Node: void addChildren(org.jsoup.nodes.Node[])>" -> "<org.jsoup.nodes.Node: void setSiblingIndex(int)>";
"<org.jsoup.nodes.Node: void reparentChild(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Node: void setParentNode(org.jsoup.nodes.Node)>";
"<org.jsoup.nodes.Node: void addChildren(org.jsoup.nodes.Node[])>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.nodes.Node: void addChildren(org.jsoup.nodes.Node[])>" -> "<java.util.ArrayList: int size()>";
"<java.util.ArrayList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>" -> "<java.util.LinkedList: int size()>";
"<org.jsoup.nodes.Comment: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.nodes.Attributes: void put(java.lang.String,java.lang.String)>";
"<org.jsoup.nodes.Attributes: void put(java.lang.String,java.lang.String)>" -> "<org.jsoup.nodes.Attribute: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.nodes.Attribute: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.nodes.Attribute: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.nodes.Attribute: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>";
"<org.jsoup.nodes.Attribute: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.jsoup.nodes.Attribute: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.nodes.Attributes: void put(java.lang.String,java.lang.String)>" -> "<org.jsoup.nodes.Attributes: void put(org.jsoup.nodes.Attribute)>";
"<org.jsoup.nodes.Attributes: void put(org.jsoup.nodes.Attribute)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.nodes.Attributes: void put(org.jsoup.nodes.Attribute)>" -> "<java.util.LinkedHashMap: void <init>(int)>";
"<java.util.LinkedHashMap: void <init>(int)>" -> "<java.util.HashMap: void <init>()>";
"<java.util.LinkedHashMap: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Attributes: void put(org.jsoup.nodes.Attribute)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.jsoup.nodes.Attributes: void put(org.jsoup.nodes.Attribute)>" -> "<org.jsoup.nodes.Attribute: java.lang.String getKey()>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document: org.jsoup.nodes.Document quirksMode(org.jsoup.nodes.Document$QuirksMode)>";
"<org.jsoup.nodes.Node: org.jsoup.nodes.Node attr(java.lang.String,java.lang.String)>" -> "<org.jsoup.nodes.Attributes: void put(java.lang.String,java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$2: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$2: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Tag: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String,org.jsoup.nodes.Attributes)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>" -> "<org.jsoup.parser.Token$EndTag: void <init>()>";
"<org.jsoup.parser.Token$EndTag: void <init>()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.Token$EndTag: void <init>()>" -> "<org.jsoup.parser.Token$Tag: void <init>()>";
"<org.jsoup.parser.Token$Tag: void <init>()>" -> "<org.jsoup.parser.Token: void <init>(org.jsoup.parser.Token$1)>";
"<org.jsoup.parser.Token: void <init>(org.jsoup.parser.Token$1)>" -> "<org.jsoup.parser.Token: void <init>()>";
"<org.jsoup.parser.Token: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.nodes.Element: java.lang.String tagName()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Tag: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String,org.jsoup.nodes.Attributes)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.nodes.Element)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Tag: boolean isKnownTag()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Tag: boolean isSelfClosing()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Tag: org.jsoup.parser.Tag setSelfClosing()>";
"<org.jsoup.parser.Tag: boolean isKnownTag()>" -> "<org.jsoup.parser.Tag: void <clinit>()>";
"<org.jsoup.parser.Tag: boolean isKnownTag()>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.nodes.Element)>" -> "<java.util.LinkedList: boolean add(java.lang.Object)>";
"<java.util.LinkedList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Tokeniser: void acknowledgeSelfClosingFlag()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Tokeniser: void acknowledgeSelfClosingFlag()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>";
"<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.Tokeniser: void error(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>" -> "<org.jsoup.helper.Validate: void isFalse(boolean,java.lang.String)>";
"<org.jsoup.parser.Tokeniser: void error(java.lang.String)>" -> "<org.jsoup.parser.ParseError: void <init>(int,java.lang.String)>";
"<org.jsoup.helper.Validate: void isFalse(boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.jsoup.parser.ParseError: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.parser.Tokeniser: void error(java.lang.String)>" -> "<org.jsoup.parser.CharacterReader: int pos()>";
"<org.jsoup.parser.Tokeniser: void error(java.lang.String)>" -> "<org.jsoup.parser.ParseErrorList: boolean canAddError()>";
"<org.jsoup.parser.Tokeniser: void error(java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.parser.ParseErrorList: boolean canAddError()>" -> "<java.util.ArrayList: int size()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>" -> "<java.util.LinkedList: boolean add(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.CharacterReader: int pos()>";
"<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.ParseErrorList: boolean canAddError()>";
"<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(java.lang.String)>" -> "<org.jsoup.parser.Tag: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(java.lang.String)>" -> "<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(java.lang.String)>" -> "<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(java.lang.String)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.nodes.Element)>";
"<org.jsoup.nodes.Node: void <init>(java.lang.String,org.jsoup.nodes.Attributes)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.jsoup.parser.TreeBuilder: void runParser()>" -> "<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.Tokeniser: void error(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.Token$Character: void <init>(java.lang.String)>";
"<org.jsoup.parser.Token$Character: void <init>(java.lang.String)>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.Token$Character: void <init>(java.lang.String)>" -> "<org.jsoup.parser.Token: void <init>(org.jsoup.parser.Token$1)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<java.lang.StringBuilder: int length()>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<java.lang.StringBuilder: int length()>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>";
"<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$1: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$1: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$1: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$EOF: void <init>()>";
"<org.jsoup.parser.TokeniserState$1: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.Token$EOF: void <init>()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.Token$EOF: void <init>()>" -> "<org.jsoup.parser.Token: void <init>(org.jsoup.parser.Token$1)>";
"<org.jsoup.parser.TokeniserState$1: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$1: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>";
"<org.jsoup.parser.TokeniserState$1: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>" -> "<java.lang.String: void <init>(char[],int,int)>";
"<java.lang.String: void <init>(char[],int,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(char[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.CharacterReader: char consume()>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.CharacterReader: char current()>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.TokeniserState$1: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$1: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$1: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$1: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$1: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$1: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>";
"<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>" -> "<java.lang.Character: void <clinit>()>";
"<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>" -> "<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>";
"<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>" -> "<java.lang.Character: java.lang.Character valueOf(char)>";
"<org.jsoup.parser.Tokeniser: void emit(char)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>" -> "<org.jsoup.parser.CharacterReader: int pos()>";
"<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>" -> "<org.jsoup.parser.ParseErrorList: boolean canAddError()>";
"<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>" -> "<org.jsoup.parser.CharacterReader: void advance()>";
"<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isDoctype()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.Token: boolean isDoctype()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.Token: boolean isComment()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.Token: boolean isStartTag()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.Token: boolean isEndTag()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.Token$Tag: java.lang.String name()>" -> "<org.jsoup.helper.Validate: void isFalse(boolean)>";
"<org.jsoup.helper.Validate: void isFalse(boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState: boolean isWhitespace(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.Token: boolean isCharacter()>";
"<org.jsoup.parser.HtmlTreeBuilderState: boolean isWhitespace(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Character asCharacter()>";
"<org.jsoup.parser.Token: boolean isCharacter()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState: boolean isWhitespace(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.Token$Character: java.lang.String getData()>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isDoctype()>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Doctype asDoctype()>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<org.jsoup.nodes.Element: org.jsoup.select.Elements select(java.lang.String)>";
"<org.jsoup.nodes.Element: org.jsoup.select.Elements select(java.lang.String)>" -> "<org.jsoup.select.Selector: org.jsoup.select.Elements select(java.lang.String,org.jsoup.nodes.Element)>";
"<org.jsoup.select.Selector: org.jsoup.select.Elements select(java.lang.String,org.jsoup.nodes.Element)>" -> "<org.jsoup.select.Selector: void <init>(java.lang.String,org.jsoup.nodes.Element)>";
"<org.jsoup.select.Selector: org.jsoup.select.Elements select(java.lang.String,org.jsoup.nodes.Element)>" -> "<org.jsoup.select.Selector: org.jsoup.select.Elements select()>";
"<org.jsoup.select.Selector: void <init>(java.lang.String,org.jsoup.nodes.Element)>" -> "<org.jsoup.select.QueryParser: void <clinit>()>";
"<org.jsoup.select.Selector: void <init>(java.lang.String,org.jsoup.nodes.Element)>" -> "<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse(java.lang.String)>";
"<org.jsoup.select.Selector: void <init>(java.lang.String,org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.select.Selector: void <init>(java.lang.String,org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>";
"<org.jsoup.select.Selector: void <init>(java.lang.String,org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.select.Selector: void <init>(java.lang.String,org.jsoup.nodes.Element)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.select.Selector: org.jsoup.select.Elements select()>" -> "<org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>";
"<org.jsoup.select.QueryParser: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.select.QueryParser: void <clinit>()>" -> "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
"<org.jsoup.select.QueryParser: void <clinit>()>" -> "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse(java.lang.String)>" -> "<org.jsoup.select.QueryParser: void <clinit>()>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse(java.lang.String)>" -> "<org.jsoup.select.QueryParser: void <init>(java.lang.String)>";
"<org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>" -> "<org.jsoup.select.Elements: void <init>()>";
"<org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>" -> "<org.jsoup.select.NodeTraversor: void <init>(org.jsoup.select.NodeVisitor)>";
"<org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>" -> "<org.jsoup.select.Collector$Accumulator: void <init>(org.jsoup.nodes.Element,org.jsoup.select.Elements,org.jsoup.select.Evaluator)>";
"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.select.QueryParser: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.select.QueryParser: void <init>(java.lang.String)>" -> "<org.jsoup.parser.TokenQueue: void <init>(java.lang.String)>";
"<org.jsoup.select.QueryParser: void <init>(java.lang.String)>" -> "<java.util.ArrayList: void <init>()>";
"<org.jsoup.select.Elements: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.select.Elements: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<org.jsoup.select.Collector$Accumulator: void <init>(org.jsoup.nodes.Element,org.jsoup.select.Elements,org.jsoup.select.Evaluator)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>" -> "<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse(java.lang.String)>" -> "<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.select.QueryParser: void <clinit>()>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.select.CombiningEvaluator$And: void <init>(java.util.Collection)>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.select.QueryParser: void findElements()>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.select.QueryParser: void combinator(char)>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.select.QueryParser: void findElements()>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.select.QueryParser: void combinator(char)>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.select.QueryParser: void combinator(char)>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.select.StructuralEvaluator$Root: void <init>()>";
"<org.jsoup.select.CombiningEvaluator$And: void <init>(java.util.Collection)>" -> "<org.jsoup.select.CombiningEvaluator: void <init>(java.util.Collection)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void byId()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.Selector$SelectorParseException: void <init>(java.lang.String,java.lang.Object[])>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.Evaluator$IsRoot: void <init>()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.Evaluator$IsEmpty: void <init>()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.Evaluator$IsOnlyOfType: void <init>()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.Evaluator$IsOnlyChild: void <init>()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.Evaluator$IsLastOfType: void <init>()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.Evaluator$IsFirstOfType: void <init>()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.Evaluator$IsLastChild: void <init>()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.Evaluator$IsFirstChild: void <init>()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void not()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void matches(boolean)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void matches(boolean)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void contains(boolean)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void contains(boolean)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void has()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void indexEquals()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void indexGreaterThan()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void indexLessThan()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void allElements()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void byAttribute()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void byTag()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.select.QueryParser: void byClass()>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.QueryParser: void <clinit>()>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.Selector$SelectorParseException: void <init>(java.lang.String,java.lang.Object[])>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.CombiningEvaluator$Or: void <init>()>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.CombiningEvaluator$And: void <init>(org.jsoup.select.Evaluator[])>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.StructuralEvaluator$PreviousSibling: void <init>(org.jsoup.select.Evaluator)>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.CombiningEvaluator$And: void <init>(org.jsoup.select.Evaluator[])>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling: void <init>(org.jsoup.select.Evaluator)>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.CombiningEvaluator$And: void <init>(org.jsoup.select.Evaluator[])>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.StructuralEvaluator$Parent: void <init>(org.jsoup.select.Evaluator)>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.CombiningEvaluator$And: void <init>(java.util.Collection)>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.CombiningEvaluator$And: void <init>(org.jsoup.select.Evaluator[])>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.StructuralEvaluator$ImmediateParent: void <init>(org.jsoup.select.Evaluator)>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse(java.lang.String)>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>";
"<org.jsoup.select.StructuralEvaluator$Root: void <init>()>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.CombiningEvaluator: void <init>(java.util.Collection)>" -> "<org.jsoup.select.CombiningEvaluator: void <init>()>";
"<org.jsoup.select.QueryParser: void byId()>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byId()>" -> "<org.jsoup.select.Evaluator$Id: void <init>(java.lang.String)>";
"<org.jsoup.select.Selector$SelectorParseException: void <init>(java.lang.String,java.lang.Object[])>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.select.Selector$SelectorParseException: void <init>(java.lang.String,java.lang.Object[])>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.jsoup.select.Selector$SelectorParseException: void <init>(java.lang.String,java.lang.Object[])>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.jsoup.select.Evaluator$IsRoot: void <init>()>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$IsEmpty: void <init>()>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$IsOnlyOfType: void <init>()>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$IsOnlyChild: void <init>()>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$IsLastOfType: void <init>()>" -> "<org.jsoup.select.Evaluator$IsNthLastOfType: void <init>(int,int)>";
"<org.jsoup.select.Evaluator$IsFirstOfType: void <init>()>" -> "<org.jsoup.select.Evaluator$IsNthOfType: void <init>(int,int)>";
"<org.jsoup.select.Evaluator$IsLastChild: void <init>()>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$IsFirstChild: void <init>()>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<org.jsoup.select.QueryParser: void <clinit>()>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<org.jsoup.select.Evaluator$IsNthChild: void <init>(int,int)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<org.jsoup.select.Evaluator$IsNthLastChild: void <init>(int,int)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<org.jsoup.select.Evaluator$IsNthOfType: void <init>(int,int)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<org.jsoup.select.Selector$SelectorParseException: void <init>(java.lang.String,java.lang.Object[])>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<org.jsoup.select.Evaluator$IsNthLastOfType: void <init>(int,int)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jsoup.select.QueryParser: void not()>" -> "<org.jsoup.select.QueryParser: void <clinit>()>";
"<org.jsoup.select.QueryParser: void not()>" -> "<org.jsoup.select.StructuralEvaluator$Not: void <init>(org.jsoup.select.Evaluator)>";
"<org.jsoup.select.QueryParser: void not()>" -> "<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse(java.lang.String)>";
"<org.jsoup.select.QueryParser: void not()>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>";
"<org.jsoup.select.QueryParser: void matches(boolean)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>";
"<org.jsoup.select.QueryParser: void matches(boolean)>" -> "<org.jsoup.select.Evaluator$Matches: void <init>(java.util.regex.Pattern)>";
"<org.jsoup.select.QueryParser: void matches(boolean)>" -> "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
"<org.jsoup.select.QueryParser: void matches(boolean)>" -> "<org.jsoup.select.Evaluator$MatchesOwn: void <init>(java.util.regex.Pattern)>";
"<org.jsoup.select.QueryParser: void matches(boolean)>" -> "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
"<org.jsoup.select.QueryParser: void contains(boolean)>" -> "<org.jsoup.parser.TokenQueue: java.lang.String unescape(java.lang.String)>";
"<org.jsoup.select.QueryParser: void contains(boolean)>" -> "<org.jsoup.select.Evaluator$ContainsText: void <init>(java.lang.String)>";
"<org.jsoup.select.QueryParser: void contains(boolean)>" -> "<org.jsoup.select.Evaluator$ContainsOwnText: void <init>(java.lang.String)>";
"<org.jsoup.select.QueryParser: void contains(boolean)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>";
"<org.jsoup.select.QueryParser: void has()>" -> "<org.jsoup.select.QueryParser: void <clinit>()>";
"<org.jsoup.select.QueryParser: void has()>" -> "<org.jsoup.select.StructuralEvaluator$Has: void <init>(org.jsoup.select.Evaluator)>";
"<org.jsoup.select.QueryParser: void has()>" -> "<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse(java.lang.String)>";
"<org.jsoup.select.QueryParser: void has()>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>";
"<org.jsoup.select.QueryParser: void indexEquals()>" -> "<org.jsoup.select.QueryParser: int consumeIndex()>";
"<org.jsoup.select.QueryParser: void indexEquals()>" -> "<org.jsoup.select.Evaluator$IndexEquals: void <init>(int)>";
"<org.jsoup.select.QueryParser: void indexGreaterThan()>" -> "<org.jsoup.select.QueryParser: int consumeIndex()>";
"<org.jsoup.select.QueryParser: void indexGreaterThan()>" -> "<org.jsoup.select.Evaluator$IndexGreaterThan: void <init>(int)>";
"<org.jsoup.select.QueryParser: void indexLessThan()>" -> "<org.jsoup.select.QueryParser: int consumeIndex()>";
"<org.jsoup.select.QueryParser: void indexLessThan()>" -> "<org.jsoup.select.Evaluator$IndexLessThan: void <init>(int)>";
"<org.jsoup.select.QueryParser: void allElements()>" -> "<org.jsoup.select.Evaluator$AllElements: void <init>()>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.select.Selector$SelectorParseException: void <init>(java.lang.String,java.lang.Object[])>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.select.Evaluator$AttributeWithValueMatching: void <init>(java.lang.String,java.util.regex.Pattern)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.select.Evaluator$AttributeWithValueContaining: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.select.Evaluator$AttributeWithValueEnding: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.select.Evaluator$AttributeWithValueStarting: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.select.Evaluator$AttributeWithValueNot: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.select.Evaluator$AttributeWithValue: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.select.Evaluator$Attribute: void <init>(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.select.Evaluator$AttributeStarting: void <init>(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: void <init>(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byTag()>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byTag()>" -> "<org.jsoup.select.Evaluator$Tag: void <init>(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byClass()>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byClass()>" -> "<org.jsoup.select.Evaluator$Class: void <init>(java.lang.String)>";
"<org.jsoup.select.CombiningEvaluator$Or: void <init>()>" -> "<org.jsoup.select.CombiningEvaluator: void <init>()>";
"<org.jsoup.select.CombiningEvaluator$And: void <init>(org.jsoup.select.Evaluator[])>" -> "<java.util.Arrays: java.util.List asList(java.lang.Object[])>";
"<org.jsoup.select.CombiningEvaluator$And: void <init>(org.jsoup.select.Evaluator[])>" -> "<org.jsoup.select.CombiningEvaluator$And: void <init>(java.util.Collection)>";
"<org.jsoup.select.StructuralEvaluator$PreviousSibling: void <init>(org.jsoup.select.Evaluator)>" -> "<org.jsoup.select.StructuralEvaluator: void <init>()>";
"<org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling: void <init>(org.jsoup.select.Evaluator)>" -> "<org.jsoup.select.StructuralEvaluator: void <init>()>";
"<org.jsoup.select.StructuralEvaluator$Parent: void <init>(org.jsoup.select.Evaluator)>" -> "<org.jsoup.select.StructuralEvaluator: void <init>()>";
"<org.jsoup.select.StructuralEvaluator$ImmediateParent: void <init>(org.jsoup.select.Evaluator)>" -> "<org.jsoup.select.StructuralEvaluator: void <init>()>";
"<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>" -> "<org.jsoup.select.QueryParser: void <clinit>()>";
"<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.select.Evaluator: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.select.CombiningEvaluator: void <init>()>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.CombiningEvaluator: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<org.jsoup.select.Evaluator$Id: void <init>(java.lang.String)>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.select.Evaluator$IsNthLastOfType: void <init>(int,int)>" -> "<org.jsoup.select.Evaluator$CssNthEvaluator: void <init>(int,int)>";
"<org.jsoup.select.Evaluator$IsNthOfType: void <init>(int,int)>" -> "<org.jsoup.select.Evaluator$CssNthEvaluator: void <init>(int,int)>";
"<org.jsoup.select.Evaluator$IsNthChild: void <init>(int,int)>" -> "<org.jsoup.select.Evaluator$CssNthEvaluator: void <init>(int,int)>";
"<org.jsoup.select.Evaluator$IsNthLastChild: void <init>(int,int)>" -> "<org.jsoup.select.Evaluator$CssNthEvaluator: void <init>(int,int)>";
"<java.lang.Integer: int parseInt(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.select.StructuralEvaluator$Not: void <init>(org.jsoup.select.Evaluator)>" -> "<org.jsoup.select.StructuralEvaluator: void <init>()>";
"<org.jsoup.select.Evaluator$Matches: void <init>(java.util.regex.Pattern)>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$MatchesOwn: void <init>(java.util.regex.Pattern)>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.parser.TokenQueue: java.lang.String unescape(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.select.Evaluator$ContainsText: void <init>(java.lang.String)>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$ContainsOwnText: void <init>(java.lang.String)>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.StructuralEvaluator$Has: void <init>(org.jsoup.select.Evaluator)>" -> "<org.jsoup.select.StructuralEvaluator: void <init>()>";
"<org.jsoup.select.QueryParser: int consumeIndex()>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.select.QueryParser: int consumeIndex()>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.jsoup.select.QueryParser: int consumeIndex()>" -> "<org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>";
"<org.jsoup.select.QueryParser: int consumeIndex()>" -> "<org.jsoup.helper.StringUtil: boolean isNumeric(java.lang.String)>";
"<org.jsoup.select.QueryParser: int consumeIndex()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jsoup.select.Evaluator$IndexEquals: void <init>(int)>" -> "<org.jsoup.select.Evaluator$IndexEvaluator: void <init>(int)>";
"<org.jsoup.select.Evaluator$IndexGreaterThan: void <init>(int)>" -> "<org.jsoup.select.Evaluator$IndexEvaluator: void <init>(int)>";
"<org.jsoup.select.Evaluator$IndexLessThan: void <init>(int)>" -> "<org.jsoup.select.Evaluator$IndexEvaluator: void <init>(int)>";
"<org.jsoup.select.Evaluator$AllElements: void <init>()>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$AttributeWithValueMatching: void <init>(java.lang.String,java.util.regex.Pattern)>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$AttributeWithValueContaining: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.select.Evaluator$AttributeKeyPair: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.select.Evaluator$AttributeWithValueEnding: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.select.Evaluator$AttributeKeyPair: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.select.Evaluator$AttributeWithValueStarting: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.select.Evaluator$AttributeKeyPair: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.select.Evaluator$AttributeWithValueNot: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.select.Evaluator$AttributeKeyPair: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.select.Evaluator$AttributeWithValue: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.select.Evaluator$AttributeKeyPair: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.select.Evaluator$Attribute: void <init>(java.lang.String)>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$AttributeStarting: void <init>(java.lang.String)>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$Tag: void <init>(java.lang.String)>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$Class: void <init>(java.lang.String)>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<java.util.Arrays: java.util.List asList(java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.select.StructuralEvaluator: void <init>()>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$CssNthEvaluator: void <init>(int,int)>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.helper.StringUtil: boolean isNumeric(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.jsoup.helper.StringUtil: boolean isNumeric(java.lang.String)>" -> "<java.lang.Character: boolean isDigit(int)>";
"<org.jsoup.select.Evaluator$IndexEvaluator: void <init>(int)>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$AttributeKeyPair: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.select.Evaluator: void <init>()>";
"<org.jsoup.select.Evaluator$AttributeKeyPair: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>";
"<org.jsoup.select.Evaluator$AttributeKeyPair: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>";
"<java.lang.Character: boolean isDigit(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.select.Evaluator$ContainsOwnText: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.select.Evaluator$ContainsText: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.parser.TokenQueue: java.lang.String unescape(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokenQueue: java.lang.String unescape(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokenQueue: java.lang.String unescape(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokenQueue: java.lang.String unescape(java.lang.String)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String consumeToAny(java.lang.String[])>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: boolean consumeWhitespace()>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: boolean isEmpty()>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String remainder()>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String remainder()>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String remainder()>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String remainder()>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String remainder()>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String remainder()>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String remainder()>";
"<org.jsoup.parser.TokenQueue: boolean consumeWhitespace()>" -> "<org.jsoup.parser.TokenQueue: boolean matchesWhitespace()>";
"<org.jsoup.parser.TokenQueue: boolean matchesWhitespace()>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.TokenQueue: boolean matchesWhitespace()>" -> "<org.jsoup.helper.StringUtil: boolean isWhitespace(int)>";
"<org.jsoup.parser.TokenQueue: boolean matchesWhitespace()>" -> "<org.jsoup.parser.TokenQueue: boolean isEmpty()>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeToAny(java.lang.String[])>" -> "<org.jsoup.parser.TokenQueue: boolean isEmpty()>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeToAny(java.lang.String[])>" -> "<org.jsoup.parser.TokenQueue: boolean matchesAny(java.lang.String[])>";
"<org.jsoup.parser.TokenQueue: boolean matchesAny(java.lang.String[])>" -> "<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.CombiningEvaluator$Or: void add(org.jsoup.select.Evaluator)>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.CombiningEvaluator$Or: void add(org.jsoup.select.Evaluator)>";
"<org.jsoup.select.CombiningEvaluator$Or: void add(org.jsoup.select.Evaluator)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.CombiningEvaluator: org.jsoup.select.Evaluator rightMostEvaluator()>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.CombiningEvaluator: void replaceRightMostEvaluator(org.jsoup.select.Evaluator)>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.select.CombiningEvaluator$Or: void add(org.jsoup.select.Evaluator)>";
"<org.jsoup.select.CombiningEvaluator: void replaceRightMostEvaluator(org.jsoup.select.Evaluator)>" -> "<java.util.ArrayList: int size()>";
"<org.jsoup.select.CombiningEvaluator: void replaceRightMostEvaluator(org.jsoup.select.Evaluator)>" -> "<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.select.CombiningEvaluator: org.jsoup.select.Evaluator rightMostEvaluator()>" -> "<java.util.ArrayList: int size()>";
"<org.jsoup.select.CombiningEvaluator: org.jsoup.select.Evaluator rightMostEvaluator()>" -> "<java.util.ArrayList: int size()>";
"<org.jsoup.select.CombiningEvaluator: org.jsoup.select.Evaluator rightMostEvaluator()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<java.util.ArrayList: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>" -> "<org.jsoup.parser.TokenQueue: boolean isEmpty()>";
"<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>" -> "<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>";
"<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>";
"<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>" -> "<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>";
"<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>";
"<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>" -> "<org.jsoup.parser.TokenQueue: boolean matchesAny(java.lang.String[])>";
"<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>" -> "<org.jsoup.parser.TokenQueue: char consume()>";
"<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>" -> "<java.lang.Character: void <clinit>()>";
"<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>" -> "<java.lang.Character: java.lang.Character valueOf(char)>";
"<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>" -> "<java.lang.Character: java.lang.Character valueOf(char)>";
"<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>" -> "<java.lang.Character: java.lang.Character valueOf(char)>";
"<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>" -> "<org.jsoup.parser.TokenQueue: boolean isEmpty()>";
"<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>" -> "<org.jsoup.parser.TokenQueue: char consume()>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<java.util.ArrayList: int size()>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<java.util.ArrayList: void clear()>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void combinator(char)>" -> "<org.jsoup.parser.TokenQueue: boolean consumeWhitespace()>";
"<org.jsoup.select.QueryParser: void byClass()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void byClass()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String consumeCssIdentifier()>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeCssIdentifier()>" -> "<org.jsoup.parser.TokenQueue: boolean isEmpty()>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeCssIdentifier()>" -> "<org.jsoup.parser.TokenQueue: boolean matchesWord()>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeCssIdentifier()>" -> "<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>";
"<org.jsoup.parser.TokenQueue: boolean matchesWord()>" -> "<java.lang.Character: void <clinit>()>";
"<org.jsoup.parser.TokenQueue: boolean matchesWord()>" -> "<java.lang.Character: boolean isLetterOrDigit(char)>";
"<java.lang.Character: boolean isLetterOrDigit(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>" -> "<org.jsoup.parser.TokenQueue: boolean isEmpty()>";
"<org.jsoup.parser.TokenQueue: boolean matchesWord()>" -> "<org.jsoup.parser.TokenQueue: boolean isEmpty()>";
"<org.jsoup.select.QueryParser: void byTag()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void byTag()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String consumeElementSelector()>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeElementSelector()>" -> "<org.jsoup.parser.TokenQueue: boolean isEmpty()>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeElementSelector()>" -> "<org.jsoup.parser.TokenQueue: boolean matchesWord()>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeElementSelector()>" -> "<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>";
"<org.jsoup.select.QueryParser: void allElements()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: int consumeIndex()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String chompTo(java.lang.String)>";
"<org.jsoup.select.QueryParser: int consumeIndex()>" -> "<java.lang.String: java.lang.String trim()>";
"<org.jsoup.helper.StringUtil: boolean isNumeric(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.helper.StringUtil: boolean isNumeric(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.helper.StringUtil: boolean isNumeric(java.lang.String)>" -> "<java.lang.String: int codePointAt(int)>";
"<java.lang.String: int codePointAt(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.select.QueryParser: void indexLessThan()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void indexGreaterThan()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void indexEquals()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void has()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void has()>" -> "<org.jsoup.parser.TokenQueue: void consume(java.lang.String)>";
"<org.jsoup.select.QueryParser: void has()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>";
"<org.jsoup.parser.TokenQueue: void consume(java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.jsoup.parser.TokenQueue: void consume(java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.jsoup.parser.TokenQueue: void consume(java.lang.String)>" -> "<org.jsoup.parser.TokenQueue: int remainingLength()>";
"<org.jsoup.parser.TokenQueue: void consume(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.TokenQueue: void consume(java.lang.String)>" -> "<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>";
"<org.jsoup.select.QueryParser: void contains(boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void contains(boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void contains(boolean)>" -> "<org.jsoup.parser.TokenQueue: void consume(java.lang.String)>";
"<org.jsoup.select.QueryParser: void contains(boolean)>" -> "<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>";
"<org.jsoup.select.QueryParser: void matches(boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void matches(boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void matches(boolean)>" -> "<org.jsoup.parser.TokenQueue: void consume(java.lang.String)>";
"<org.jsoup.select.QueryParser: void matches(boolean)>" -> "<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>";
"<org.jsoup.select.QueryParser: void not()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void not()>" -> "<org.jsoup.parser.TokenQueue: void consume(java.lang.String)>";
"<org.jsoup.select.QueryParser: void not()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<org.jsoup.parser.TokenQueue: java.lang.String chompTo(java.lang.String)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>";
"<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>" -> "<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>";
"<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byId()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void byId()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String consumeCssIdentifier()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchesWord()>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>";
"<org.jsoup.select.QueryParser: void findElements()>" -> "<org.jsoup.parser.TokenQueue: java.lang.String remainder()>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<java.util.ArrayList: int size()>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.parser.TokenQueue: boolean consumeWhitespace()>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.parser.TokenQueue: boolean matchesAny(java.lang.String[])>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.parser.TokenQueue: char consume()>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.parser.TokenQueue: boolean isEmpty()>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.parser.TokenQueue: boolean consumeWhitespace()>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.parser.TokenQueue: boolean matchesAny(java.lang.String[])>";
"<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>" -> "<org.jsoup.parser.TokenQueue: char consume()>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<org.jsoup.select.Elements: org.jsoup.nodes.Element first()>";
"<org.jsoup.select.Elements: org.jsoup.nodes.Element first()>" -> "<java.util.ArrayList: boolean isEmpty()>";
"<org.jsoup.select.Elements: org.jsoup.nodes.Element first()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<java.util.ArrayList: boolean isEmpty()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.select.Selector: void <init>(java.lang.String,org.jsoup.nodes.Element)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>";
"<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>" -> "<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings charset(java.lang.String)>";
"<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings charset(java.lang.String)>" -> "<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>";
"<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings charset(java.lang.String)>" -> "<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings charset(java.nio.charset.Charset)>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.nodes.Document parse()>" -> "<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>";
"<org.jsoup.helper.HttpConnection$Response: org.jsoup.nodes.Document parse()>" -> "<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.Charset charset()>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Node: int childNodeSize()>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Node: org.jsoup.nodes.Node childNode(int)>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Node: org.jsoup.nodes.Node nextSibling()>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Node: org.jsoup.nodes.Node nextSibling()>";
"<org.jsoup.nodes.Node: org.jsoup.nodes.Node nextSibling()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jsoup.nodes.Node: org.jsoup.nodes.Node nextSibling()>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.nodes.Node: org.jsoup.nodes.Node nextSibling()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.jsoup.nodes.Node: org.jsoup.nodes.Node nextSibling()>" -> "<org.jsoup.nodes.Node: int siblingIndex()>";
"<org.jsoup.nodes.Node: org.jsoup.nodes.Node childNode(int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.jsoup.nodes.Node: int childNodeSize()>" -> "<java.util.ArrayList: int size()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.nodes.Document: java.lang.String nodeName()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<java.net.URL: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<java.net.URL: void <init>(java.net.URL,java.lang.String)>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<java.net.URL: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<java.net.URL: java.lang.String toExternalForm()>";
"<java.net.URL: java.lang.String toExternalForm()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<java.net.URL: java.lang.String getPath()>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<java.net.URL: java.lang.String toExternalForm()>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>";
"<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>" -> "<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>";
"<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>" -> "<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>";
"<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>" -> "<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>";
"<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>" -> "<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>";
"<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>" -> "<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>";
"<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>" -> "<org.jsoup.nodes.Attributes: java.lang.String get(java.lang.String)>";
"<org.jsoup.nodes.Attributes: java.lang.String get(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notEmpty(java.lang.String)>";
"<org.jsoup.nodes.Attributes: java.lang.String get(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.nodes.Attributes: java.lang.String get(java.lang.String)>" -> "<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
"<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void head(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.nodes.Document: java.lang.String nodeName()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void head(org.jsoup.nodes.Node,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeElementSelector()>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>" -> "<java.lang.String: char charAt(int)>";
"<org.jsoup.parser.TokenQueue: boolean matchesWord()>" -> "<java.lang.String: char charAt(int)>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeCssIdentifier()>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.jsoup.parser.TokenQueue: boolean matchesWhitespace()>" -> "<java.lang.String: char charAt(int)>";
"<org.jsoup.parser.TokenQueue: java.lang.String consumeToAny(java.lang.String[])>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.jsoup.select.QueryParser: void byClass()>" -> "<java.lang.String: java.lang.String trim()>";
"<org.jsoup.select.QueryParser: void byClass()>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.select.QueryParser: void byTag()>" -> "<java.lang.String: boolean contains(java.lang.CharSequence)>";
"<org.jsoup.select.QueryParser: void byTag()>" -> "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>";
"<org.jsoup.select.QueryParser: void byTag()>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<java.lang.String: boolean contains(java.lang.CharSequence)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byTag()>" -> "<java.lang.String: java.lang.String trim()>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.jsoup.select.QueryParser: void byAttribute()>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.jsoup.select.Evaluator$AttributeKeyPair: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.jsoup.select.Evaluator$AttributeKeyPair: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.select.Evaluator$AttributeKeyPair: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.select.Evaluator$AttributeWithValueMatching: void <init>(java.lang.String,java.util.regex.Pattern)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.jsoup.select.Evaluator$AttributeWithValueMatching: void <init>(java.lang.String,java.util.regex.Pattern)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.select.CombiningEvaluator: void <init>(java.util.Collection)>" -> "<java.util.ArrayList: boolean addAll(java.util.Collection)>";
"<java.util.ArrayList: boolean addAll(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$2: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$2: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.CharacterReader: boolean matchesLetter()>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag createTagPending(boolean)>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$8: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag createTagPending(boolean)>" -> "<org.jsoup.parser.Token$StartTag: void <init>()>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag createTagPending(boolean)>" -> "<org.jsoup.parser.Token$EndTag: void <init>()>";
"<org.jsoup.parser.Token$StartTag: void <init>()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.Token$StartTag: void <init>()>" -> "<org.jsoup.nodes.Attributes: void <init>()>";
"<org.jsoup.parser.Token$StartTag: void <init>()>" -> "<org.jsoup.parser.Token$Tag: void <init>()>";
"<org.jsoup.parser.TokeniserState$2: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>";
"<org.jsoup.parser.TokeniserState$2: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$2: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$2: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char[])>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.nodes.Entities: java.lang.Character getCharacterByName(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.nodes.Entities: boolean isNamedEntity(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.nodes.Entities: boolean isBaseNamedEntity(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<java.lang.Character: char[] toChars(int)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.nodes.Entities: void <clinit>()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<java.lang.Character: void <clinit>()>";
"<org.jsoup.nodes.Entities: java.lang.Character getCharacterByName(java.lang.String)>" -> "<org.jsoup.nodes.Entities: void <clinit>()>";
"<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>" -> "<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>";
"<org.jsoup.nodes.Entities: boolean isNamedEntity(java.lang.String)>" -> "<org.jsoup.nodes.Entities: void <clinit>()>";
"<org.jsoup.nodes.Entities: boolean isBaseNamedEntity(java.lang.String)>" -> "<org.jsoup.nodes.Entities: void <clinit>()>";
"<java.lang.Character: char[] toChars(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Entities: boolean isBaseNamedEntity(java.lang.String)>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<org.jsoup.nodes.Entities: boolean isNamedEntity(java.lang.String)>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<org.jsoup.nodes.Entities: java.lang.Character getCharacterByName(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.jsoup.parser.Tokeniser: void emit(char[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>" -> "<org.jsoup.parser.CharacterReader: int pos()>";
"<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>" -> "<org.jsoup.parser.ParseErrorList: boolean canAddError()>";
"<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesAny(char[])>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: void mark()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: boolean matchConsumeIgnoreCase(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeHexSequence()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: void rewindToMark()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeDigitSequence()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterThenDigitSequence()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: boolean matches(char)>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: void rewindToMark()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesDigit()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesAny(char[])>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: void rewindToMark()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeHexSequence()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeHexSequence()>" -> "<java.lang.String: void <init>(char[],int,int)>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeDigitSequence()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeDigitSequence()>" -> "<java.lang.String: void <init>(char[],int,int)>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterThenDigitSequence()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterThenDigitSequence()>" -> "<java.lang.String: void <init>(char[],int,int)>";
"<org.jsoup.parser.CharacterReader: boolean matchesDigit()>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.CharacterReader: boolean matches(char)>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterThenDigitSequence()>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.CharacterReader: boolean matchConsumeIgnoreCase(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.CharacterReader: boolean matchConsumeIgnoreCase(java.lang.String)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesIgnoreCase(java.lang.String)>";
"<org.jsoup.parser.CharacterReader: boolean matchesIgnoreCase(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.jsoup.parser.CharacterReader: boolean matchesIgnoreCase(java.lang.String)>" -> "<java.lang.Character: char toUpperCase(char)>";
"<org.jsoup.parser.CharacterReader: boolean matchesIgnoreCase(java.lang.String)>" -> "<java.lang.Character: char toUpperCase(char)>";
"<java.lang.Character: char toUpperCase(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.CharacterReader: boolean matchesIgnoreCase(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.CharacterReader: boolean matchesIgnoreCase(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>" -> "<org.jsoup.parser.CharacterReader: boolean matches(java.lang.String)>";
"<org.jsoup.parser.CharacterReader: boolean matches(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.CharacterReader: boolean matches(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.jsoup.parser.CharacterReader: boolean matchesAny(char[])>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>" -> "<java.lang.String: int length()>";
"<org.jsoup.nodes.Element: java.lang.String tagName()>" -> "<org.jsoup.parser.Tag: java.lang.String getName()>";
"<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.Token: java.lang.String tokenType()>";
"<org.jsoup.parser.Token: java.lang.String tokenType()>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<java.lang.Object: java.lang.Class getClass()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Node: void setParentNode(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>";
"<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>" -> "<org.jsoup.helper.Validate: void isTrue(boolean)>";
"<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Node: void reindexChildren()>";
"<org.jsoup.helper.Validate: void isTrue(boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Node: int siblingIndex()>";
"<org.jsoup.nodes.Node: void reindexChildren()>" -> "<java.util.ArrayList: int size()>";
"<org.jsoup.nodes.Node: void reindexChildren()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>" -> "<java.util.ArrayList: java.lang.Object remove(int)>";
"<java.util.ArrayList: java.lang.Object remove(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Node: void reparentChild(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String)>" -> "<org.jsoup.parser.Token$StartTag: void <init>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void access$300(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void access$300(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void access$300(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String,org.jsoup.nodes.Attributes)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Attributes: void <init>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Character: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: java.lang.String access$400()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Tag: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Tag: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document$QuirksMode: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$4: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$4: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void access$300(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void access$200(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$4: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>" -> "<org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType[] values()>";
"<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState: void access$300(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState: void access$300(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void handleRawtext(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String,org.jsoup.nodes.Attributes)>" -> "<org.jsoup.parser.Token$StartTag: void <init>()>";
"<org.jsoup.parser.HtmlTreeBuilderState: java.lang.String access$400()>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void access$200(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState: void access$200(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void handleRcData(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType[] values()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState: void handleRawtext(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState: void handleRawtext(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState: void handleRcData(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState: void handleRcData(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType[] values()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<java.lang.Object: java.lang.Object clone()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<java.lang.Enum: int ordinal()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$5: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$5: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$6: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$6: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$6: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Node: void remove()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Node: void remove()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Node: void remove()>";
"<org.jsoup.nodes.Node: void remove()>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document: java.lang.String nodeName()>";
"<org.jsoup.nodes.Element: java.lang.String nodeName()>" -> "<org.jsoup.parser.Tag: java.lang.String getName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Node: java.util.List childNodes()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Node: int childNodeSize()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document: java.lang.String nodeName()>";
"<org.jsoup.nodes.Node: java.util.List childNodes()>" -> "<java.util.Collections: void <clinit>()>";
"<org.jsoup.nodes.Node: java.util.List childNodes()>" -> "<java.util.Collections: java.util.List unmodifiableList(java.util.List)>";
"<java.util.Collections: java.util.List unmodifiableList(java.util.List)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Attributes: java.util.Iterator iterator()>";
"<org.jsoup.nodes.Attributes: java.util.Iterator iterator()>" -> "<org.jsoup.nodes.Attributes: java.util.List asList()>";
"<org.jsoup.nodes.Attributes: java.util.List asList()>" -> "<java.util.Collections: void <clinit>()>";
"<org.jsoup.nodes.Attributes: java.util.List asList()>" -> "<java.util.Collections: java.util.List unmodifiableList(java.util.List)>";
"<org.jsoup.nodes.Attributes: java.util.List asList()>" -> "<java.util.ArrayList: void <init>(int)>";
"<org.jsoup.nodes.Attributes: java.util.List asList()>" -> "<java.util.Collections: java.util.List emptyList()>";
"<org.jsoup.nodes.Attributes: java.util.List asList()>" -> "<java.util.Collections: void <clinit>()>";
"<java.util.Collections: java.util.List emptyList()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Attributes: java.util.List asList()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Attributes: java.util.Iterator iterator()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Attributes: void put(org.jsoup.nodes.Attribute)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Attributes: java.util.Iterator iterator()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Attributes: void put(org.jsoup.nodes.Attribute)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Attributes: java.lang.String get(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Attributes: java.lang.String get(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Attributes: void put(org.jsoup.nodes.Attribute)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Attributes: void put(java.lang.String,java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.Enum: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.Enum: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.Enum: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.Enum: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.Enum: boolean equals(java.lang.Object)>";
"<java.lang.Enum: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void setHeadElement(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void maybeSetBaseUri(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void markInsertionMode()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>" -> "<org.jsoup.nodes.TextNode: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>" -> "<org.jsoup.nodes.DataNode: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>" -> "<org.jsoup.helper.Validate: void isFalse(boolean,java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>" -> "<org.jsoup.helper.Validate: void isFalse(boolean,java.lang.String)>";
"<org.jsoup.nodes.TextNode: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.nodes.Node: void <init>()>";
"<org.jsoup.nodes.DataNode: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.nodes.Node: void <init>(java.lang.String)>";
"<org.jsoup.nodes.Node: void <init>()>" -> "<java.util.Collections: void <clinit>()>";
"<org.jsoup.nodes.Node: void <init>()>" -> "<java.util.Collections: java.util.List emptyList()>";
"<org.jsoup.nodes.Node: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>" -> "<java.lang.Enum: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>" -> "<org.jsoup.helper.DescendableLinkedList: java.lang.Object peekLast()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>" -> "<org.jsoup.helper.DescendableLinkedList: java.lang.Object peekLast()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>" -> "<org.jsoup.helper.DescendableLinkedList: java.lang.Object pollLast()>";
"<org.jsoup.helper.DescendableLinkedList: java.lang.Object pollLast()>" -> "<java.util.LinkedList: int size()>";
"<org.jsoup.helper.DescendableLinkedList: java.lang.Object pollLast()>" -> "<java.util.LinkedList: java.lang.Object removeLast()>";
"<java.util.LinkedList: java.lang.Object removeLast()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.helper.DescendableLinkedList: java.lang.Object peekLast()>" -> "<java.util.LinkedList: int size()>";
"<org.jsoup.helper.DescendableLinkedList: java.lang.Object peekLast()>" -> "<java.util.LinkedList: java.lang.Object getLast()>";
"<org.jsoup.parser.HtmlTreeBuilder: void maybeSetBaseUri(org.jsoup.nodes.Element)>" -> "<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void maybeSetBaseUri(org.jsoup.nodes.Element)>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.HtmlTreeBuilder: void maybeSetBaseUri(org.jsoup.nodes.Element)>" -> "<org.jsoup.nodes.Node: void setBaseUri(java.lang.String)>";
"<org.jsoup.nodes.Node: void setBaseUri(java.lang.String)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.nodes.Node: void setBaseUri(java.lang.String)>" -> "<org.jsoup.nodes.Node$1: void <init>(org.jsoup.nodes.Node,java.lang.String)>";
"<org.jsoup.nodes.Node$1: void <init>(org.jsoup.nodes.Node,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.jsoup.nodes.Node: void setBaseUri(java.lang.String)>" -> "<org.jsoup.nodes.Node: org.jsoup.nodes.Node traverse(org.jsoup.select.NodeVisitor)>";
"<org.jsoup.nodes.Node: org.jsoup.nodes.Node traverse(org.jsoup.select.NodeVisitor)>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.nodes.Node: org.jsoup.nodes.Node traverse(org.jsoup.select.NodeVisitor)>" -> "<org.jsoup.select.NodeTraversor: void <init>(org.jsoup.select.NodeVisitor)>";
"<org.jsoup.nodes.Node: org.jsoup.nodes.Node traverse(org.jsoup.select.NodeVisitor)>" -> "<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getHeadElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void push(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean removeFromStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean removeFromStack(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean removeFromStack(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean removeFromStack(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean removeFromStack(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void remove()>";
"<org.jsoup.parser.HtmlTreeBuilder: void push(org.jsoup.nodes.Element)>" -> "<java.util.LinkedList: boolean add(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean isFragmentParsing()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState originalState()>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState originalState()>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void handleRcData(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void handleRcData(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void markInsertionMode()>";
"<org.jsoup.parser.HtmlTreeBuilderState: void handleRcData(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void handleRcData(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void handleRawtext(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void handleRawtext(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void markInsertionMode()>";
"<org.jsoup.parser.HtmlTreeBuilderState: void handleRawtext(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState: void handleRawtext(org.jsoup.parser.Token$StartTag,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList getStack()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList getStack()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList getStack()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean framesetOk()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getFormElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void setFormElement(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList getStack()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean isSpecial(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList getStack()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean isSpecial(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getActiveFormattingElement(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getFromStack(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void removeFromActiveFormattingElements(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean removeFromStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void pushActiveFormattingElements(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void pushActiveFormattingElements(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void pushActiveFormattingElements(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insertMarkerToFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document getDocument()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getFormElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getFormElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void markInsertionMode()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void framesetOk(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void popStackToBefore(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getFormElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void setFormElement(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean removeFromStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inListItemScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getActiveFormattingElement(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean onStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void removeFromActiveFormattingElements(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList getStack()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean isSpecial(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void removeFromActiveFormattingElements(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean onStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean isInActiveFormattingElements(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean removeFromStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insertInFosterParent(org.jsoup.nodes.Node)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: java.lang.String getBaseUri()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: java.lang.String getBaseUri()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void replaceActiveFormattingElement(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void replaceOnStack(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void removeFromActiveFormattingElements(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean removeFromStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insertOnStackAfter(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearFormattingElementsToLastMarker()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<org.jsoup.helper.Validate: void notNull(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean isSpecial(org.jsoup.nodes.Element)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean isSpecial(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean isSpecial(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void pushActiveFormattingElements(org.jsoup.nodes.Element)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean isSameFormattingElement(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inListItemScope(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String[])>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String[])>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String[])>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String[])>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean isInActiveFormattingElements(org.jsoup.nodes.Element)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean isElementInQueue(org.jsoup.helper.DescendableLinkedList,org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilder: void replaceActiveFormattingElement(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void replaceInQueue(java.util.LinkedList,org.jsoup.nodes.Element,org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilder: void replaceOnStack(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void replaceInQueue(java.util.LinkedList,org.jsoup.nodes.Element,org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertOnStackAfter(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.Validate: void isTrue(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>" -> "<org.jsoup.helper.Validate: void fail(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: void replaceInQueue(java.util.LinkedList,org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.Validate: void isTrue(boolean)>";
"<org.jsoup.helper.Validate: void fail(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document: org.jsoup.nodes.Document$QuirksMode quirksMode()>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearFormattingElementsToLastMarker()>" -> "<java.util.AbstractCollection: boolean isEmpty()>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearFormattingElementsToLastMarker()>" -> "<org.jsoup.helper.DescendableLinkedList: java.lang.Object peekLast()>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearFormattingElementsToLastMarker()>" -> "<java.util.LinkedList: java.lang.Object removeLast()>";
"<java.util.AbstractCollection: boolean isEmpty()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertOnStackAfter(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<java.util.LinkedList: int lastIndexOf(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertOnStackAfter(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<java.util.LinkedList: void add(int,java.lang.Object)>";
"<java.util.LinkedList: int lastIndexOf(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.LinkedList: void add(int,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void replaceInQueue(java.util.LinkedList,org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<java.util.LinkedList: int lastIndexOf(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void replaceInQueue(java.util.LinkedList,org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<java.util.LinkedList: java.lang.Object remove(int)>";
"<org.jsoup.parser.HtmlTreeBuilder: void replaceInQueue(java.util.LinkedList,org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<java.util.LinkedList: void add(int,java.lang.Object)>";
"<java.util.LinkedList: java.lang.Object remove(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String[])>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String[])>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String[])>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String[])>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void remove()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String[])>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void remove()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inListItemScope(java.lang.String)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String,java.lang.String[])>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String,java.lang.String[])>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String,java.lang.String[],java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String,java.lang.String[],java.lang.String[])>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String,java.lang.String[],java.lang.String[])>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void remove()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void remove()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToBefore(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToBefore(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToBefore(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilder: void popStackToBefore(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void remove()>";
"<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertMarkerToFormattingElements()>" -> "<java.util.LinkedList: boolean add(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean isSameFormattingElement(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean isSameFormattingElement(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean isSameFormattingElement(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean isSameFormattingElement(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<org.jsoup.nodes.Attributes: boolean equals(java.lang.Object)>";
"<org.jsoup.nodes.Attributes: boolean equals(java.lang.Object)>" -> "<java.util.AbstractMap: boolean equals(java.lang.Object)>";
"<java.util.AbstractMap: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void pushActiveFormattingElements(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilder: void pushActiveFormattingElements(org.jsoup.nodes.Element)>" -> "<java.util.LinkedList: boolean add(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void pushActiveFormattingElements(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: void pushActiveFormattingElements(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilder: void pushActiveFormattingElements(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void remove()>";
"<org.jsoup.parser.HtmlTreeBuilder: void removeFromActiveFormattingElements(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilder: void removeFromActiveFormattingElements(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: void removeFromActiveFormattingElements(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilder: void removeFromActiveFormattingElements(org.jsoup.nodes.Element)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void remove()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getActiveFormattingElement(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getActiveFormattingElement(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getActiveFormattingElement(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean isSpecial(org.jsoup.nodes.Element)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean isSpecial(org.jsoup.nodes.Element)>" -> "<org.jsoup.nodes.Document: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inButtonScope(java.lang.String)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: java.lang.Object getFirst()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: int size()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: int size()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: int size()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: int size()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: int size()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: java.lang.Object removeLast()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: int size()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: int size()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: int size()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<java.util.LinkedList: java.lang.Object getFirst()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean onStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean onStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes()>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<org.jsoup.nodes.Attributes: void addAll(org.jsoup.nodes.Attributes)>";
"<org.jsoup.nodes.Attributes: void addAll(org.jsoup.nodes.Attributes)>" -> "<java.util.LinkedHashMap: void <init>(int)>";
"<org.jsoup.nodes.Attributes: void addAll(org.jsoup.nodes.Attributes)>" -> "<java.util.HashMap: void putAll(java.util.Map)>";
"<java.util.HashMap: void putAll(java.util.Map)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<java.util.LinkedList: int size()>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<java.util.LinkedList: java.lang.Object getLast()>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<java.util.LinkedList: java.lang.Object getLast()>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<java.util.LinkedList: java.lang.Object getLast()>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<java.util.LinkedList: void add(int,java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<java.util.LinkedList: java.lang.Object remove(int)>";
"<org.jsoup.parser.HtmlTreeBuilder: void reconstructFormattingElements()>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$16: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$16: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: java.lang.String access$400()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$16: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean isFragmentParsing()>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inSelectScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inSelectScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSelectScope(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSelectScope(java.lang.String)>" -> "<org.jsoup.helper.Validate: void fail(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSelectScope(java.lang.String)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSelectScope(java.lang.String)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSelectScope(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSelectScope(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inSelectScope(java.lang.String)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String,java.lang.String[],java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void newPendingTableCharacters()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void markInsertionMode()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableContext()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insertMarkerToFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableContext()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableContext()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getFormElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void setFormElement(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void newPendingTableCharacters()>" -> "<java.util.ArrayList: void <init>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableContext()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableContext()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: void remove()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void setFosterInserts(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void setFosterInserts(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: java.lang.String access$400()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$12: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$12: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$12: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$12: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$24: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$13: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$13: boolean exitTableBody(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$13: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$13: boolean exitTableBody(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$StartTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$13: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean exitTableBody(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableBodyContext()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableBodyContext()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableBodyContext()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableBodyContext()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean exitTableBody(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean exitTableBody(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean exitTableBody(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean exitTableBody(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean exitTableBody(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableBodyContext()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean exitTableBody(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean exitTableBody(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean exitTableBody(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearFormattingElementsToLastMarker()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: java.util.List getPendingTableCharacters()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: java.util.List getPendingTableCharacters()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void setFosterInserts(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void setFosterInserts(boolean)>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: java.util.List getPendingTableCharacters()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void newPendingTableCharacters()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState originalState()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.ArrayList: int size()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList getStack()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean isSpecial(org.jsoup.nodes.Element)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: boolean hasNext()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.DescendableLinkedList$DescendingIterator: java.lang.Object next()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Tokeniser: void acknowledgeSelfClosingFlag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Tokeniser: void acknowledgeSelfClosingFlag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Tokeniser: void acknowledgeSelfClosingFlag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Node: void remove()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: org.jsoup.nodes.Element attr(java.lang.String,java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.nodes.Element: org.jsoup.nodes.Element attr(java.lang.String,java.lang.String)>" -> "<org.jsoup.nodes.Node: org.jsoup.nodes.Node attr(java.lang.String,java.lang.String)>";
"<org.jsoup.nodes.Node: void remove()>" -> "<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>";
"<org.jsoup.nodes.Attributes: java.util.List asList()>" -> "<java.util.HashMap: int size()>";
"<org.jsoup.nodes.Attributes: java.util.List asList()>" -> "<java.util.LinkedHashMap: java.util.Set entrySet()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isDoctype()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Character asCharacter()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>" -> "<org.jsoup.parser.Token$Character: java.lang.String getData()>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>" -> "<org.jsoup.parser.Token$Character: java.lang.String getData()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Character asCharacter()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isDoctype()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.Enum: int ordinal()>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Character asCharacter()>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.Enum: int ordinal()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Character asCharacter()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Character: java.lang.String getData()>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.Enum: int ordinal()>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isDoctype()>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEOF()>";
"<org.jsoup.parser.Token: boolean isEOF()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isDoctype()>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEOF()>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Character asCharacter()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Character: java.lang.String getData()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.Enum: int ordinal()>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isCharacter()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isDoctype()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEOF()>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isDoctype()>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEOF()>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Character asCharacter()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isDoctype()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEOF()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Character asCharacter()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isDoctype()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEOF()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isCharacter()>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Character asCharacter()>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEOF()>";
"<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isDoctype()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.Enum: int ordinal()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Character asCharacter()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Character: java.lang.String getData()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.Enum: int ordinal()>";
"<org.jsoup.parser.Token$Tag: java.lang.String name()>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean anyOtherEndTag(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$3: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Token$Tag: boolean isSelfClosing()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Token$Tag: boolean isSelfClosing()>";
"<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Document: java.lang.String nodeName()>";
"<org.jsoup.parser.HtmlTreeBuilder: void insertInFosterParent(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>";
"<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState: boolean isWhitespace(org.jsoup.parser.Token)>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.HtmlTreeBuilderState: boolean isWhitespace(org.jsoup.parser.Token)>" -> "<java.lang.String: char charAt(int)>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.nodes.Attributes: java.lang.String get(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: org.jsoup.nodes.Attributes getAttributes()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: org.jsoup.nodes.Attributes getAttributes()>";
"<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: org.jsoup.parser.Token$Tag name(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$2: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.select.Collector$Accumulator: void head(org.jsoup.nodes.Node,int)>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.select.Collector$Accumulator: void tail(org.jsoup.nodes.Node,int)>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.select.Collector$Accumulator: void tail(org.jsoup.nodes.Node,int)>";
"<org.jsoup.select.Collector$Accumulator: void head(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.select.Elements: boolean add(org.jsoup.nodes.Element)>";
"<org.jsoup.select.Elements: boolean add(org.jsoup.nodes.Element)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.select.Collector$Accumulator: void head(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.select.CombiningEvaluator$And: boolean matches(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>";
"<org.jsoup.select.CombiningEvaluator$And: boolean matches(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<java.util.ArrayList: int size()>";
"<org.jsoup.select.CombiningEvaluator$And: boolean matches(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.jsoup.nodes.Node: org.jsoup.nodes.Node nextSibling()>" -> "<java.util.ArrayList: int size()>";
"<org.jsoup.nodes.Node: org.jsoup.nodes.Node nextSibling()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void tail(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void head(org.jsoup.nodes.Node,int)>" -> "<org.jsoup.nodes.Element: java.lang.String nodeName()>";
"<org.jsoup.nodes.DataNode: void <init>(java.lang.String,java.lang.String)>" -> "<org.jsoup.nodes.Attributes: void put(java.lang.String,java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$14: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$14: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$14: boolean handleMissingTr(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$14: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$14: boolean handleMissingTr(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$15: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$15: void closeCell(org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$15: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$15: void closeCell(org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.helper.StringUtil: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean handleMissingTr(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilderState: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: void closeCell(org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: void closeCell(org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Element currentElement()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void popStackToClose(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearFormattingElementsToLastMarker()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: void closeCell(org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: void closeCell(org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: void closeCell(org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableRowContext()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void insertMarkerToFormattingElements()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableRowContext()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean inTableScope(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableRowContext()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.HtmlTreeBuilder: void clearStackToTableRowContext()>" -> "<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean handleMissingTr(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean handleMissingTr(org.jsoup.parser.Token,org.jsoup.parser.TreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean anythingElse(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: boolean isEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>";
"<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Tag: java.lang.String name()>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$43: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$3: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$5: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$6: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$7: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: java.lang.String access$100()>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$43: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$43: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Comment: void <init>()>";
"<org.jsoup.parser.TokeniserState$3: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$3: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$EOF: void <init>()>";
"<org.jsoup.parser.TokeniserState$3: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$5: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$5: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$EOF: void <init>()>";
"<org.jsoup.parser.TokeniserState$6: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$6: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$EOF: void <init>()>";
"<org.jsoup.parser.TokeniserState$7: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$EOF: void <init>()>";
"<org.jsoup.parser.TokeniserState: java.lang.String access$100()>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.Token$Comment: void <init>()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.Token$Comment: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.Token$Comment: void <init>()>" -> "<org.jsoup.parser.Token: void <init>(org.jsoup.parser.Token$1)>";
"<org.jsoup.parser.TokeniserState$7: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$7: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(char)>";
"<org.jsoup.parser.TokeniserState$7: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void advance()>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(char)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(char)>" -> "<java.lang.String: void <init>(char[],int,int)>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(char)>" -> "<org.jsoup.parser.CharacterReader: int nextIndexOf(char)>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(char)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToEnd()>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeToEnd()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeToEnd()>" -> "<java.lang.String: void <init>(char[],int,int)>";
"<org.jsoup.parser.TokeniserState$7: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$7: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$7: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$7: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>";
"<org.jsoup.parser.TokeniserState$6: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$6: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>";
"<org.jsoup.parser.TokeniserState$6: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void advance()>";
"<org.jsoup.parser.TokeniserState$6: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$6: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$6: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$6: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$6: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>";
"<org.jsoup.parser.TokeniserState$5: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$5: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>";
"<org.jsoup.parser.TokeniserState$5: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void advance()>";
"<org.jsoup.parser.TokeniserState$5: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$5: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$5: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$5: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$5: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>";
"<org.jsoup.parser.TokeniserState$3: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$3: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>";
"<org.jsoup.parser.TokeniserState$3: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void advance()>";
"<org.jsoup.parser.TokeniserState$3: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$3: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$3: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$3: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$3: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$3: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>";
"<org.jsoup.parser.TokeniserState$43: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$43: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void unconsume()>";
"<org.jsoup.parser.TokeniserState$43: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(char)>";
"<org.jsoup.parser.TokeniserState$43: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>";
"<org.jsoup.parser.TokeniserState$43: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matches(char)>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag createTagPending(boolean)>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$9: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>" -> "<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>";
"<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>" -> "<org.jsoup.parser.CharacterReader: int pos()>";
"<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>" -> "<org.jsoup.parser.ParseErrorList: boolean canAddError()>";
"<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchConsumeIgnoreCase(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void createCommentPending()>";
"<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$44: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.Tokeniser: void createCommentPending()>" -> "<org.jsoup.parser.Token$Comment: void <init>()>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitTagPending()>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.Tokeniser: void emitTagPending()>" -> "<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>";
"<org.jsoup.parser.Tokeniser: void emitTagPending()>" -> "<org.jsoup.parser.Token$Tag: void finaliseTag()>";
"<org.jsoup.parser.Token$Tag: void finaliseTag()>" -> "<org.jsoup.parser.Token$Tag: void newAttribute()>";
"<org.jsoup.parser.Token$Tag: void newAttribute()>" -> "<org.jsoup.nodes.Attributes: void <init>()>";
"<org.jsoup.parser.Token$Tag: void newAttribute()>" -> "<org.jsoup.nodes.Attribute: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.parser.Token$Tag: void newAttribute()>" -> "<org.jsoup.nodes.Attribute: void <init>(java.lang.String,java.lang.String)>";
"<org.jsoup.parser.Token$Tag: void newAttribute()>" -> "<org.jsoup.nodes.Attributes: void put(org.jsoup.nodes.Attribute)>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendTagName(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$10: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendTagName(java.lang.String)>";
"<org.jsoup.parser.Token$Tag: void appendTagName(java.lang.String)>" -> "<java.lang.String: java.lang.String concat(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$4: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$5: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$6: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$7: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$8: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$9: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$10: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$11: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$12: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$13: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$14: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$15: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$16: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$17: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$18: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$19: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$20: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$21: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>" -> "<org.jsoup.parser.HtmlTreeBuilderState$22: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Node$1: void head(org.jsoup.nodes.Node,int)>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Node$1: void tail(org.jsoup.nodes.Node,int)>";
"<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>" -> "<org.jsoup.nodes.Node$1: void tail(org.jsoup.nodes.Node,int)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$51: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$67: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$42: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$17: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$14: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$4: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$51: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$51: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$51: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$67: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$42: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$42: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$42: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$17: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$17: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$17: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$14: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$14: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$4: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matches(char)>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean containsIgnoreCase(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void unconsume()>";
"<org.jsoup.parser.CharacterReader: boolean containsIgnoreCase(java.lang.String)>" -> "<java.util.Locale: void <clinit>()>";
"<org.jsoup.parser.CharacterReader: boolean containsIgnoreCase(java.lang.String)>" -> "<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>";
"<org.jsoup.parser.CharacterReader: boolean containsIgnoreCase(java.lang.String)>" -> "<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void createTempBuffer()>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: java.lang.String appropriateEndTagName()>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: java.lang.String appropriateEndTagName()>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitTagPending()>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$11: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.Tokeniser: void createTempBuffer()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.CharacterReader: boolean containsIgnoreCase(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>";
"<org.jsoup.parser.CharacterReader: boolean containsIgnoreCase(java.lang.String)>" -> "<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>";
"<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>" -> "<java.lang.String: char charAt(int)>";
"<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>" -> "<java.lang.String: char charAt(int)>";
"<org.jsoup.parser.TokeniserState$4: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>";
"<org.jsoup.parser.TokeniserState$4: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$4: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$4: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char[])>";
"<org.jsoup.parser.TokeniserState$14: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matches(char)>";
"<org.jsoup.parser.TokeniserState$14: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void createTempBuffer()>";
"<org.jsoup.parser.TokeniserState$14: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$14: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$14: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$17: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$17: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void unconsume()>";
"<org.jsoup.parser.TokeniserState$17: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$17: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$17: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void createTempBuffer()>";
"<org.jsoup.parser.TokeniserState$17: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$17: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$17: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$42: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$42: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$42: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$42: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitTagPending()>";
"<org.jsoup.parser.TokeniserState$42: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$42: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$42: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void unconsume()>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void unconsume()>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitTagPending()>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void newAttribute()>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void newAttribute()>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void newAttribute()>";
"<org.jsoup.parser.TokeniserState$34: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeName(char)>";
"<org.jsoup.parser.Token$Tag: void appendAttributeName(char)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.Token$Tag: void appendAttributeName(char)>" -> "<java.lang.String: java.lang.String valueOf(char)>";
"<org.jsoup.parser.Token$Tag: void appendAttributeName(char)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeName(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$67: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$67: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(java.lang.String)>" -> "<java.lang.String: void <init>(char[],int,int)>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(java.lang.String)>" -> "<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(java.lang.String)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToEnd()>";
"<org.jsoup.parser.TokeniserState$67: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$67: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$51: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$51: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$51: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$51: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$51: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$51: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void createDoctypePending()>";
"<org.jsoup.parser.TokeniserState$51: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$51: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.Tokeniser: void createDoctypePending()>" -> "<org.jsoup.parser.Token$Doctype: void <init>()>";
"<org.jsoup.parser.Token$Doctype: void <init>()>" -> "<org.jsoup.parser.Token$TokenType: void <clinit>()>";
"<org.jsoup.parser.Token$Doctype: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.Token$Doctype: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.Token$Doctype: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.Token$Doctype: void <init>()>" -> "<org.jsoup.parser.Token: void <init>(org.jsoup.parser.Token$1)>";
"<org.jsoup.parser.Tokeniser: void emitDoctypePending()>" -> "<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitCommentPending()>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitCommentPending()>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.Tokeniser: void emitCommentPending()>" -> "<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$45: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>" -> "<org.jsoup.parser.Token$Comment: java.lang.String getData()>";
"<org.jsoup.parser.Token$Comment: java.lang.String getData()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$15: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$18: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$20: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$47: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.Character: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.Character: char toLowerCase(char)>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.Character: char toLowerCase(char)>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$15: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$15: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$18: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$18: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$20: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$20: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$47: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$47: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<java.lang.Character: char toLowerCase(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void createDoctypePending()>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void createDoctypePending()>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void createDoctypePending()>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$52: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$47: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$47: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>";
"<org.jsoup.parser.TokeniserState$47: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void advance()>";
"<org.jsoup.parser.TokeniserState$47: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$47: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$47: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$47: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitCommentPending()>";
"<org.jsoup.parser.TokeniserState$47: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$47: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$47: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitCommentPending()>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitCommentPending()>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$46: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitTagPending()>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeName(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeName(char)>";
"<org.jsoup.parser.TokeniserState$35: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeName(char)>";
"<org.jsoup.parser.TokeniserState$20: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matches(char)>";
"<org.jsoup.parser.TokeniserState$20: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$20: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$20: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$18: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$18: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag createTagPending(boolean)>";
"<org.jsoup.parser.TokeniserState$18: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$18: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$18: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$15: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$15: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag createTagPending(boolean)>";
"<org.jsoup.parser.TokeniserState$15: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$15: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$15: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag createTagPending(boolean)>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$12: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendTagName(char)>";
"<org.jsoup.parser.Token$Tag: void appendTagName(char)>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.Token$Tag: void appendTagName(char)>" -> "<java.lang.String: java.lang.String valueOf(char)>";
"<org.jsoup.parser.Token$Tag: void appendTagName(char)>" -> "<org.jsoup.parser.Token$Tag: void appendTagName(java.lang.String)>";
"<org.jsoup.parser.Token$Tag: void appendAttributeName(java.lang.String)>" -> "<java.lang.String: java.lang.String concat(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$21: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState$13: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState$13: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState$13: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState$13: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState$16: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState$16: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState$19: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState$19: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$21: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$21: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$13: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$13: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.TokeniserState$16: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$16: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.TokeniserState$19: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$19: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.TokeniserState$19: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$19: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$19: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokeniserState$16: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$16: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$16: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokeniserState$13: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$13: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$13: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterSequence()>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterSequence()>" -> "<java.lang.String: void <clinit>()>";
"<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterSequence()>" -> "<java.lang.String: void <init>(char[],int,int)>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$53: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitCommentPending()>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$48: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void unconsume()>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void unconsume()>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitTagPending()>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(char)>";
"<org.jsoup.parser.TokeniserState$37: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(char)>";
"<org.jsoup.parser.Token$Tag: void appendAttributeValue(char)>" -> "<org.jsoup.parser.Token$Tag: void ensureAttributeValue()>";
"<org.jsoup.parser.Token$Tag: void ensureAttributeValue()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void unconsume()>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitTagPending()>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void newAttribute()>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeName(char)>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void newAttribute()>";
"<org.jsoup.parser.TokeniserState$36: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeName(char)>";
"<org.jsoup.parser.TokeniserState$21: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matches(char)>";
"<org.jsoup.parser.TokeniserState$21: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$21: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$21: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterSequence()>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: boolean isAppropriateEndTagToken()>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitTagPending()>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.Tokeniser: boolean isAppropriateEndTagToken()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.TokeniserState$19: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$19: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$19: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$19: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendTagName(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterSequence()>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: boolean isAppropriateEndTagToken()>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitTagPending()>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$16: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$16: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$16: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$16: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendTagName(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterSequence()>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.parser.TokeniserState$13: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void unconsume()>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: boolean isAppropriateEndTagToken()>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: boolean isAppropriateEndTagToken()>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: boolean isAppropriateEndTagToken()>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitTagPending()>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$13: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$13: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$13: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$13: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendTagName(java.lang.String)>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Doctype: java.lang.String getName()>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Doctype: java.lang.String getPublicIdentifier()>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Doctype: java.lang.String getSystemIdentifier()>";
"<org.jsoup.parser.HtmlTreeBuilderState$1: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>" -> "<org.jsoup.parser.Token$Doctype: boolean isForceQuirks()>";
"<org.jsoup.parser.Token$Doctype: java.lang.String getSystemIdentifier()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.Token$Doctype: java.lang.String getPublicIdentifier()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.Token$Doctype: java.lang.String getName()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.Token$Tag: void appendAttributeValue(char)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.Token$Tag: void newAttribute()>" -> "<java.lang.StringBuilder: int length()>";
"<org.jsoup.parser.Token$Tag: void newAttribute()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>";
"<org.jsoup.parser.Token$Tag: void newAttribute()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.Character: java.lang.Character valueOf(char)>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.Character: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.Character: java.lang.Character valueOf(char)>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.Character: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.Character: java.lang.Character valueOf(char)>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.Character: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesAny(char[])>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void advance()>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matches(char)>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchConsumeIgnoreCase(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchConsumeIgnoreCase(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$54: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitCommentPending()>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitCommentPending()>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$49: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitTagPending()>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(char[])>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(char)>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(char)>";
"<org.jsoup.parser.TokeniserState$40: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(char)>";
"<org.jsoup.parser.Token$Tag: void appendAttributeValue(java.lang.String)>" -> "<org.jsoup.parser.Token$Tag: void ensureAttributeValue()>";
"<org.jsoup.parser.Token$Tag: void appendAttributeValue(char[])>" -> "<org.jsoup.parser.Token$Tag: void ensureAttributeValue()>";
"<org.jsoup.parser.Token$Tag: void appendAttributeValue(char[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>";
"<org.jsoup.parser.Token$Tag: void appendAttributeValue(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(char[])>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(char)>";
"<org.jsoup.parser.TokeniserState$39: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(char)>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: int length()>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(char[])>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(char)>";
"<org.jsoup.parser.TokeniserState$38: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendAttributeValue(char)>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$24: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$66: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.Character: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.Character: char toLowerCase(char)>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$66: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$66: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$66: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$66: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$66: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$66: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$66: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$61: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$55: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitCommentPending()>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitCommentPending()>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$50: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void unconsume()>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitTagPending()>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$41: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matches(char)>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void createTempBuffer()>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void createTempBuffer()>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$25: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void advance()>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$22: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.Character: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.Character: char toLowerCase(char)>";
"<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$64: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$63: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$62: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$58: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$57: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$56: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterSequence()>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void unconsume()>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$28: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag createTagPending(boolean)>";
"<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$26: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendTagName(char)>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$23: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$65: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState$27: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState$27: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$65: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$65: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$65: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$27: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$27: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.jsoup.parser.TokeniserState$27: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$27: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$27: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokeniserState$65: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$65: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$65: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$65: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$65: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$65: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$65: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$65: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$59: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char current()>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void advance()>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$29: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterSequence()>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean isEmpty()>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: boolean isAppropriateEndTagToken()>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitTagPending()>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$27: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$27: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$27: void anythingElse(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<org.jsoup.parser.TokeniserState$27: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Token$Tag: void appendTagName(java.lang.String)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$32: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$32: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$32: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emitDoctypePending()>";
"<org.jsoup.parser.TokeniserState$60: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$32: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matches(char)>";
"<org.jsoup.parser.TokeniserState$32: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$32: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void createTempBuffer()>";
"<org.jsoup.parser.TokeniserState$32: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void advanceTransition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$32: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$30: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>" -> "<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.TokeniserState: void <clinit>()>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: boolean matchesLetter()>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterSequence()>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: void unconsume()>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.jsoup.parser.TokeniserState$33: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.CharacterReader: char consume()>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void error(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void emit(char)>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void eofError(org.jsoup.parser.TokeniserState)>";
"<org.jsoup.parser.TokeniserState$31: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>" -> "<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>";
}
