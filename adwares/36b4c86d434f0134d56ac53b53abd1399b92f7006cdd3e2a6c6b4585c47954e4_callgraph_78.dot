digraph CallGraph {
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<com.nothome.delta.Delta: void <init>()>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<com.nothome.delta.GDiffWriter: void <init>(java.io.DataOutputStream)>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.io.DataOutputStream: void <init>(java.io.OutputStream)>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.io.FileOutputStream: void <init>(java.io.File)>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<com.nothome.delta.DebugDiffWriter: void <init>()>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.nothome.delta.GDiffWriter: void <init>(java.io.DataOutputStream)>" -> "<java.lang.Object: void <init>()>";
"<com.nothome.delta.GDiffWriter: void <init>(java.io.DataOutputStream)>" -> "<java.io.ByteArrayOutputStream: void <init>()>";
"<java.io.DataOutputStream: void <init>(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>";
"<java.io.DataOutputStream: void <init>(java.io.OutputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>";
"<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.io.File)>" -> "<java.io.FileOutputStream: void finalize()>";
"<java.io.FileOutputStream: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.io.File)>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.DebugDiffWriter: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.nothome.delta.DebugDiffWriter: void <init>()>" -> "<java.io.ByteArrayOutputStream: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.ByteArrayOutputStream: void <init>()>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.ByteArrayOutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<com.nothome.delta.Delta: void compute(java.io.File,java.io.File,com.nothome.delta.DiffWriter)>";
"<com.nothome.delta.Delta: void compute(java.io.File,java.io.File,com.nothome.delta.DiffWriter)>" -> "<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>";
"<com.nothome.delta.Delta: void compute(java.io.File,java.io.File,com.nothome.delta.DiffWriter)>" -> "<java.io.BufferedInputStream: void <init>(java.io.InputStream)>";
"<com.nothome.delta.Delta: void compute(java.io.File,java.io.File,com.nothome.delta.DiffWriter)>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<com.nothome.delta.Delta: void compute(java.io.File,java.io.File,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.RandomAccessFileSeekableSource: void <init>(java.io.RandomAccessFile)>";
"<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>" -> "<java.io.RandomAccessFile: void finalize()>";
"<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.FileInputStream: void finalize()>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.InputStream: void <init>()>";
"<com.nothome.delta.RandomAccessFileSeekableSource: void <init>(java.io.RandomAccessFile)>" -> "<java.lang.Object: void <init>()>";
"<com.nothome.delta.RandomAccessFileSeekableSource: void <init>(java.io.RandomAccessFile)>" -> "<java.lang.NullPointerException: void <init>(java.lang.String)>";
"<java.io.RandomAccessFile: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.NullPointerException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.NullPointerException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void compute(java.io.File,java.io.File,com.nothome.delta.DiffWriter)>" -> "<java.io.BufferedInputStream: void close()>";
"<com.nothome.delta.Delta: void compute(java.io.File,java.io.File,com.nothome.delta.DiffWriter)>" -> "<java.io.BufferedInputStream: void close()>";
"<java.io.BufferedInputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void compute(java.io.File,java.io.File,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.RandomAccessFileSeekableSource: void close()>";
"<com.nothome.delta.Delta: void compute(java.io.File,java.io.File,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.RandomAccessFileSeekableSource: void close()>";
"<com.nothome.delta.RandomAccessFileSeekableSource: void close()>" -> "<java.io.RandomAccessFile: void close()>";
"<java.io.RandomAccessFile: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void compute(java.io.File,java.io.File,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.Delta$SourceState: void <init>(com.nothome.delta.Delta,com.nothome.delta.SeekableSource)>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.Delta: void addData()>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.Delta: void addData()>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.Delta$TargetState: java.nio.ByteBuffer access$000(com.nothome.delta.Delta$TargetState)>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.Delta$TargetState: java.nio.ByteBuffer access$000(com.nothome.delta.Delta$TargetState)>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.Delta: void debug(java.lang.String)>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.Delta$TargetState: void <init>(com.nothome.delta.Delta,java.io.InputStream)>";
"<com.nothome.delta.Delta$SourceState: void <init>(com.nothome.delta.Delta,com.nothome.delta.SeekableSource)>" -> "<com.nothome.delta.Checksum: void <clinit>()>";
"<com.nothome.delta.Delta$SourceState: void <init>(com.nothome.delta.Delta,com.nothome.delta.SeekableSource)>" -> "<com.nothome.delta.Checksum: void <init>(com.nothome.delta.SeekableSource,int)>";
"<com.nothome.delta.Delta$SourceState: void <init>(com.nothome.delta.Delta,com.nothome.delta.SeekableSource)>" -> "<com.nothome.delta.Delta: int access$100(com.nothome.delta.Delta)>";
"<com.nothome.delta.Delta$SourceState: void <init>(com.nothome.delta.Delta,com.nothome.delta.SeekableSource)>" -> "<java.lang.Object: void <init>()>";
"<com.nothome.delta.Delta$TargetState: void <init>(com.nothome.delta.Delta,java.io.InputStream)>" -> "<java.lang.Object: void <init>()>";
"<com.nothome.delta.Delta$TargetState: void <init>(com.nothome.delta.Delta,java.io.InputStream)>" -> "<java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>";
"<com.nothome.delta.Delta$TargetState: void <init>(com.nothome.delta.Delta,java.io.InputStream)>" -> "<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>";
"<com.nothome.delta.Delta$TargetState: void <init>(com.nothome.delta.Delta,java.io.InputStream)>" -> "<com.nothome.delta.Delta$TargetState: int blocksize()>";
"<com.nothome.delta.Delta$TargetState: void <init>(com.nothome.delta.Delta,java.io.InputStream)>" -> "<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>";
"<com.nothome.delta.Delta$TargetState: void <init>(com.nothome.delta.Delta,java.io.InputStream)>" -> "<com.nothome.delta.Delta$TargetState: int blocksize()>";
"<com.nothome.delta.Checksum: void <init>(com.nothome.delta.SeekableSource,int)>" -> "<com.nothome.delta.Checksum: void <clinit>()>";
"<com.nothome.delta.Checksum: void <init>(com.nothome.delta.SeekableSource,int)>" -> "<com.nothome.delta.Checksum: long queryChecksum0(java.nio.ByteBuffer,int)>";
"<com.nothome.delta.Checksum: void <init>(com.nothome.delta.SeekableSource,int)>" -> "<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>";
"<com.nothome.delta.Checksum: void <init>(com.nothome.delta.SeekableSource,int)>" -> "<gnu.trove.TLongIntHashMap: void <init>()>";
"<com.nothome.delta.Checksum: void <init>(com.nothome.delta.SeekableSource,int)>" -> "<java.lang.Object: void <init>()>";
"<java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta$TargetState: int blocksize()>" -> "<com.nothome.delta.Delta: int access$100(com.nothome.delta.Delta)>";
"<com.nothome.delta.Delta$TargetState: int blocksize()>" -> "<java.lang.Math: int min(int,int)>";
"<com.nothome.delta.Checksum: long queryChecksum0(java.nio.ByteBuffer,int)>" -> "<com.nothome.delta.Checksum: void <clinit>()>";
"<java.lang.Math: int min(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta$SourceState: void <init>(com.nothome.delta.Delta,com.nothome.delta.SeekableSource)>" -> "<com.nothome.delta.RandomAccessFileSeekableSource: void seek(long)>";
"<com.nothome.delta.RandomAccessFileSeekableSource: void seek(long)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<java.io.RandomAccessFile: void seek(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.Checksum: void <init>(com.nothome.delta.SeekableSource,int)>" -> "<com.nothome.delta.RandomAccessFileSeekableSource: int read(java.nio.ByteBuffer)>";
"<com.nothome.delta.RandomAccessFileSeekableSource: int read(java.nio.ByteBuffer)>" -> "<java.io.RandomAccessFile: int read(byte[],int,int)>";
"<java.io.RandomAccessFile: int read(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void addData()>" -> "<com.nothome.delta.Delta$TargetState: int read()>";
"<com.nothome.delta.Delta$TargetState: int read()>" -> "<com.nothome.delta.Checksum: void <clinit>()>";
"<com.nothome.delta.Delta$TargetState: int read()>" -> "<com.nothome.delta.Delta: void access$200(com.nothome.delta.Delta,java.lang.String)>";
"<com.nothome.delta.Delta$TargetState: int read()>" -> "<com.nothome.delta.Checksum: long incrementChecksum(long,byte,byte,int)>";
"<com.nothome.delta.Delta$TargetState: int read()>" -> "<com.nothome.delta.Delta: int access$100(com.nothome.delta.Delta)>";
"<com.nothome.delta.Delta$TargetState: int read()>" -> "<com.nothome.delta.Delta: int access$100(com.nothome.delta.Delta)>";
"<com.nothome.delta.Delta$TargetState: int read()>" -> "<com.nothome.delta.Delta: int access$100(com.nothome.delta.Delta)>";
"<com.nothome.delta.Delta$TargetState: int read()>" -> "<com.nothome.delta.Delta$TargetState: void readMore()>";
"<com.nothome.delta.Delta$TargetState: int read()>" -> "<com.nothome.delta.Delta: int access$100(com.nothome.delta.Delta)>";
"<com.nothome.delta.Delta: void access$200(com.nothome.delta.Delta,java.lang.String)>" -> "<com.nothome.delta.Delta: void debug(java.lang.String)>";
"<com.nothome.delta.Checksum: long incrementChecksum(long,byte,byte,int)>" -> "<com.nothome.delta.Checksum: void <clinit>()>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.Delta$SourceState: void seek(long)>";
"<com.nothome.delta.Delta$SourceState: void seek(long)>" -> "<com.nothome.delta.RandomAccessFileSeekableSource: void seek(long)>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.Delta$TargetState: boolean eof()>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.Delta$TargetState: int find(com.nothome.delta.Delta$SourceState)>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.Delta$TargetState: int longestMatch(com.nothome.delta.Delta$SourceState)>";
"<com.nothome.delta.Delta$TargetState: int find(com.nothome.delta.Delta$SourceState)>" -> "<com.nothome.delta.Checksum: void <clinit>()>";
"<com.nothome.delta.Delta$TargetState: int find(com.nothome.delta.Delta$SourceState)>" -> "<com.nothome.delta.Delta$SourceState: com.nothome.delta.Checksum access$300(com.nothome.delta.Delta$SourceState)>";
"<com.nothome.delta.Delta$TargetState: int find(com.nothome.delta.Delta$SourceState)>" -> "<com.nothome.delta.Checksum: long queryChecksum(java.nio.ByteBuffer,int)>";
"<com.nothome.delta.Delta$TargetState: int find(com.nothome.delta.Delta$SourceState)>" -> "<com.nothome.delta.Delta: int access$100(com.nothome.delta.Delta)>";
"<com.nothome.delta.Delta$TargetState: int find(com.nothome.delta.Delta$SourceState)>" -> "<com.nothome.delta.Delta: void access$200(com.nothome.delta.Delta,java.lang.String)>";
"<com.nothome.delta.Delta$TargetState: int find(com.nothome.delta.Delta$SourceState)>" -> "<com.nothome.delta.Delta: int access$100(com.nothome.delta.Delta)>";
"<com.nothome.delta.Delta$TargetState: int find(com.nothome.delta.Delta$SourceState)>" -> "<com.nothome.delta.Delta: void access$200(com.nothome.delta.Delta,java.lang.String)>";
"<com.nothome.delta.Delta$TargetState: int longestMatch(com.nothome.delta.Delta$SourceState)>" -> "<com.nothome.delta.Delta: void access$200(com.nothome.delta.Delta,java.lang.String)>";
"<com.nothome.delta.Delta$TargetState: int longestMatch(com.nothome.delta.Delta$SourceState)>" -> "<com.nothome.delta.Delta: void access$200(com.nothome.delta.Delta,java.lang.String)>";
"<com.nothome.delta.Delta$TargetState: int longestMatch(com.nothome.delta.Delta$SourceState)>" -> "<com.nothome.delta.Delta$TargetState: void readMore()>";
"<com.nothome.delta.Delta$TargetState: int longestMatch(com.nothome.delta.Delta$SourceState)>" -> "<com.nothome.delta.Delta$SourceState: com.nothome.delta.SeekableSource access$400(com.nothome.delta.Delta$SourceState)>";
"<com.nothome.delta.Checksum: long queryChecksum(java.nio.ByteBuffer,int)>" -> "<com.nothome.delta.Checksum: void <clinit>()>";
"<com.nothome.delta.Checksum: long queryChecksum(java.nio.ByteBuffer,int)>" -> "<com.nothome.delta.Checksum: long queryChecksum0(java.nio.ByteBuffer,int)>";
"<com.nothome.delta.Delta$TargetState: int longestMatch(com.nothome.delta.Delta$SourceState)>" -> "<com.nothome.delta.RandomAccessFileSeekableSource: int read(java.nio.ByteBuffer)>";
"<com.nothome.delta.Delta$TargetState: int find(com.nothome.delta.Delta$SourceState)>" -> "<com.nothome.delta.Checksum: int findChecksumIndex(long)>";
"<com.nothome.delta.Delta: void <init>()>" -> "<com.nothome.delta.Delta: void setChunkSize(int)>";
"<com.nothome.delta.Delta: void setChunkSize(int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.GDiffWriter: void <init>(java.io.DataOutputStream)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void <init>(java.io.DataOutputStream)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void <init>(java.io.DataOutputStream)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void <init>(java.io.DataOutputStream)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void <init>(java.io.DataOutputStream)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<java.io.DataOutputStream: void writeByte(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<com.nothome.delta.GDiffWriter: void flush()>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<com.nothome.delta.GDiffWriter: void close()>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<com.nothome.delta.DebugDiffWriter: void flush()>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<com.nothome.delta.DebugDiffWriter: void close()>";
"<com.nothome.delta.GDiffWriter: void flush()>" -> "<com.nothome.delta.GDiffWriter: void writeBuf()>";
"<com.nothome.delta.DebugDiffWriter: void flush()>" -> "<java.lang.System: void <clinit>()>";
"<com.nothome.delta.DebugDiffWriter: void close()>" -> "<java.lang.System: void <clinit>()>";
"<com.nothome.delta.GDiffWriter: void close()>" -> "<com.nothome.delta.GDiffWriter: void flush()>";
"<com.nothome.delta.GDiffWriter: void close()>" -> "<java.io.DataOutputStream: void write(int)>";
"<com.nothome.delta.GDiffWriter: void close()>" -> "<java.io.FilterOutputStream: void close()>";
"<java.io.DataOutputStream: void write(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FilterOutputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.GDiffWriter: void writeBuf()>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void writeBuf()>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void writeBuf()>" -> "<java.io.DataOutputStream: void writeShort(int)>";
"<com.nothome.delta.GDiffWriter: void writeBuf()>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void writeBuf()>" -> "<java.io.DataOutputStream: void writeInt(int)>";
"<java.io.DataOutputStream: void writeShort(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.DataOutputStream: void writeInt(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.GDiffWriter: void writeBuf()>" -> "<java.io.ByteArrayOutputStream: int size()>";
"<com.nothome.delta.GDiffWriter: void writeBuf()>" -> "<java.io.ByteArrayOutputStream: int size()>";
"<com.nothome.delta.GDiffWriter: void writeBuf()>" -> "<java.io.ByteArrayOutputStream: int size()>";
"<com.nothome.delta.GDiffWriter: void writeBuf()>" -> "<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>";
"<com.nothome.delta.GDiffWriter: void writeBuf()>" -> "<java.io.ByteArrayOutputStream: void reset()>";
"<com.nothome.delta.GDiffWriter: void writeBuf()>" -> "<java.io.ByteArrayOutputStream: int size()>";
"<com.nothome.delta.GDiffWriter: void writeBuf()>" -> "<java.io.ByteArrayOutputStream: int size()>";
"<com.nothome.delta.GDiffWriter: void writeBuf()>" -> "<java.io.ByteArrayOutputStream: int size()>";
"<java.io.ByteArrayOutputStream: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.ByteArrayOutputStream: void reset()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.GDiffWriter: void flush()>" -> "<java.io.DataOutputStream: void flush()>";
"<java.io.DataOutputStream: void flush()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.GDiffWriter: void addCopy(long,int)>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.GDiffWriter: void close()>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.DebugDiffWriter: void addCopy(long,int)>";
"<com.nothome.delta.Delta: void compute(com.nothome.delta.SeekableSource,java.io.InputStream,com.nothome.delta.DiffWriter)>" -> "<com.nothome.delta.DebugDiffWriter: void close()>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.lang.System: void <clinit>()>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<com.nothome.delta.GDiffWriter: void writeBuf()>";
"<com.nothome.delta.DebugDiffWriter: void addCopy(long,int)>" -> "<java.lang.System: void <clinit>()>";
"<com.nothome.delta.DebugDiffWriter: void addCopy(long,int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.nothome.delta.DebugDiffWriter: void addCopy(long,int)>" -> "<com.nothome.delta.DebugDiffWriter: void writeBuf()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.DebugDiffWriter: void writeBuf()>" -> "<java.lang.System: void <clinit>()>";
"<com.nothome.delta.DebugDiffWriter: void writeBuf()>" -> "<java.lang.String: java.lang.String valueOf(char)>";
"<com.nothome.delta.DebugDiffWriter: void writeBuf()>" -> "<java.lang.String: void <clinit>()>";
"<java.lang.String: java.lang.String valueOf(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.DebugDiffWriter: void addCopy(long,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.nothome.delta.DebugDiffWriter: void addCopy(long,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
"<com.nothome.delta.DebugDiffWriter: void addCopy(long,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.nothome.delta.DebugDiffWriter: void addCopy(long,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<com.nothome.delta.DebugDiffWriter: void addCopy(long,int)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeLong(long)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeInt(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeShort(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeShort(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeInt(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeShort(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeShort(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeInt(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeInt(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeInt(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeByte(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeInt(int)>";
"<com.nothome.delta.GDiffWriter: void addCopy(long,int)>" -> "<java.io.DataOutputStream: void writeShort(int)>";
"<java.io.DataOutputStream: void writeLong(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.io.File: long length()>";
"<java.io.File: long length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.io.File: long length()>";
"<com.nothome.delta.Delta: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.DebugDiffWriter: void writeBuf()>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<com.nothome.delta.DebugDiffWriter: void writeBuf()>" -> "<java.io.ByteArrayOutputStream: void reset()>";
"<java.io.ByteArrayOutputStream: byte[] toByteArray()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.DebugDiffWriter: void addCopy(long,int)>" -> "<java.io.ByteArrayOutputStream: int size()>";
"<com.nothome.delta.Delta: void addData()>" -> "<com.nothome.delta.GDiffWriter: void addData(byte)>";
"<com.nothome.delta.Delta: void addData()>" -> "<com.nothome.delta.DebugDiffWriter: void addData(byte)>";
"<com.nothome.delta.GDiffWriter: void addData(byte)>" -> "<com.nothome.delta.GDiffWriter: void writeBuf()>";
"<com.nothome.delta.DebugDiffWriter: void addData(byte)>" -> "<com.nothome.delta.DebugDiffWriter: void writeBuf()>";
"<com.nothome.delta.DebugDiffWriter: void addData(byte)>" -> "<java.io.ByteArrayOutputStream: void write(int)>";
"<java.io.ByteArrayOutputStream: void write(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.nothome.delta.GDiffWriter: void addData(byte)>" -> "<java.io.ByteArrayOutputStream: void write(int)>";
"<com.nothome.delta.GDiffWriter: void addData(byte)>" -> "<java.io.ByteArrayOutputStream: int size()>";
}
