digraph CallGraph {
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<org.htmlparser.Parser: void <init>(java.lang.String)>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<org.htmlparser.filters.AndFilter: void <init>(org.htmlparser.NodeFilter,org.htmlparser.NodeFilter)>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<org.htmlparser.parserapplications.LinkExtractor$1: void <init>()>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<org.htmlparser.filters.NodeClassFilter: void <init>(java.lang.Class)>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<org.htmlparser.parserapplications.LinkExtractor: java.lang.Class class$(java.lang.String)>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<javax.swing.JOptionPane: java.lang.Object showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<org.htmlparser.Parser: void <clinit>()>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: void exit(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.Parser: void <init>(java.lang.String)>" -> "<org.htmlparser.Parser: void <clinit>()>";
"<org.htmlparser.Parser: void <init>(java.lang.String)>" -> "<org.htmlparser.Parser: void <init>(java.lang.String,org.htmlparser.util.ParserFeedback)>";
"<org.htmlparser.filters.AndFilter: void <init>(org.htmlparser.NodeFilter,org.htmlparser.NodeFilter)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.parserapplications.LinkExtractor$1: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.filters.NodeClassFilter: void <init>(java.lang.Class)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.parserapplications.LinkExtractor: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.htmlparser.parserapplications.LinkExtractor: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>()>";
"<org.htmlparser.Parser: void <clinit>()>" -> "<org.htmlparser.http.ConnectionManager: void <clinit>()>";
"<org.htmlparser.Parser: void <clinit>()>" -> "<org.htmlparser.Parser: double getVersionNumber()>";
"<org.htmlparser.Parser: void <clinit>()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.Parser: void <clinit>()>" -> "<org.htmlparser.http.ConnectionManager: java.util.Hashtable getDefaultRequestProperties()>";
"<org.htmlparser.Parser: void <clinit>()>" -> "<org.htmlparser.Parser: org.htmlparser.http.ConnectionManager getConnectionManager()>";
"<org.htmlparser.Parser: void <clinit>()>" -> "<org.htmlparser.util.DefaultParserFeedback: void <init>()>";
"<org.htmlparser.Parser: void <clinit>()>" -> "<org.htmlparser.util.DefaultParserFeedback: void <init>(int)>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.Parser: void <init>(java.lang.String,org.htmlparser.util.ParserFeedback)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.Parser: void <init>(java.lang.String,org.htmlparser.util.ParserFeedback)>" -> "<org.htmlparser.PrototypicalNodeFactory: void <init>()>";
"<java.lang.Class: java.lang.Class forName(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.NoClassDefFoundError: void <init>()>" -> "<java.lang.LinkageError: void <init>()>";
"<java.lang.NoClassDefFoundError: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.http.ConnectionManager: void <clinit>()>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void <clinit>()>" -> "<java.util.Hashtable: void <init>()>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.util.Hashtable getDefaultRequestProperties()>" -> "<org.htmlparser.http.ConnectionManager: void <clinit>()>";
"<org.htmlparser.Parser: org.htmlparser.http.ConnectionManager getConnectionManager()>" -> "<org.htmlparser.lexer.Page: void <clinit>()>";
"<org.htmlparser.Parser: org.htmlparser.http.ConnectionManager getConnectionManager()>" -> "<org.htmlparser.lexer.Page: org.htmlparser.http.ConnectionManager getConnectionManager()>";
"<org.htmlparser.util.DefaultParserFeedback: void <init>()>" -> "<org.htmlparser.util.DefaultParserFeedback: void <init>(int)>";
"<org.htmlparser.util.DefaultParserFeedback: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.util.DefaultParserFeedback: void <init>(int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.htmlparser.util.DefaultParserFeedback: void <init>(int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.PrototypicalNodeFactory: void <init>()>" -> "<org.htmlparser.PrototypicalNodeFactory: void <init>(boolean)>";
"<java.lang.LinkageError: void <init>()>" -> "<java.lang.Error: void <init>()>";
"<java.lang.LinkageError: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.SimpleDateFormat: void <init>(java.lang.String)>" -> "<java.text.DateFormat: void <init>()>";
"<java.text.SimpleDateFormat: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Hashtable: void <init>()>" -> "<java.util.Dictionary: void <init>()>";
"<java.util.Hashtable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Page: void <clinit>()>" -> "<org.htmlparser.http.ConnectionManager: void <clinit>()>";
"<org.htmlparser.lexer.Page: void <clinit>()>" -> "<org.htmlparser.http.ConnectionManager: void <init>()>";
"<org.htmlparser.lexer.Page: org.htmlparser.http.ConnectionManager getConnectionManager()>" -> "<org.htmlparser.lexer.Page: void <clinit>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.PrototypicalNodeFactory: void <init>(boolean)>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: void <init>(boolean)>" -> "<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>";
"<org.htmlparser.PrototypicalNodeFactory: void <init>(boolean)>" -> "<org.htmlparser.nodes.RemarkNode: void <init>(org.htmlparser.lexer.Page,int,int)>";
"<org.htmlparser.PrototypicalNodeFactory: void <init>(boolean)>" -> "<org.htmlparser.nodes.TextNode: void <init>(org.htmlparser.lexer.Page,int,int)>";
"<org.htmlparser.PrototypicalNodeFactory: void <init>(boolean)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.DateFormat: void <init>()>" -> "<java.text.Format: void <init>()>";
"<java.text.DateFormat: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void <init>()>" -> "<org.htmlparser.http.ConnectionManager: void <clinit>()>";
"<org.htmlparser.http.ConnectionManager: void <init>()>" -> "<org.htmlparser.http.ConnectionManager: void <init>(java.util.Hashtable)>";
"<org.htmlparser.http.ConnectionManager: void <init>()>" -> "<org.htmlparser.http.ConnectionManager: java.util.Hashtable getDefaultRequestProperties()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: void <init>(int)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<org.htmlparser.scanners.TagScanner: void <init>()>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.lang.Boolean: void <clinit>()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.AbstractNode: void <init>(org.htmlparser.lexer.Page,int,int)>";
"<org.htmlparser.nodes.RemarkNode: void <init>(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.AbstractNode: void <init>(org.htmlparser.lexer.Page,int,int)>";
"<org.htmlparser.nodes.TextNode: void <init>(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.AbstractNode: void <init>(org.htmlparser.lexer.Page,int,int)>";
"<java.text.Format: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.text.Format: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void <init>(java.util.Hashtable)>" -> "<java.lang.Object: void <init>()>";
"<java.util.Hashtable: void <init>(int)>" -> "<java.util.Dictionary: void <init>()>";
"<java.util.Hashtable: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.scanners.TagScanner: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.nodes.AbstractNode: void <init>(org.htmlparser.lexer.Page,int,int)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.TagNode: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.TagNode: void setTagName(java.lang.String)>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.TagNode: void setTagName(java.lang.String)>";
"<org.htmlparser.nodes.TagNode: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.nodes.TagNode: void setTagName(java.lang.String)>" -> "<org.htmlparser.Attribute: void <init>(java.lang.String,java.lang.String,char)>";
"<org.htmlparser.nodes.TagNode: void setTagName(java.lang.String)>" -> "<java.util.Vector: void <init>()>";
"<org.htmlparser.Attribute: void <init>(java.lang.String,java.lang.String,char)>" -> "<org.htmlparser.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String,char)>";
"<java.util.Vector: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.Vector: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String,char)>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String,char)>" -> "<org.htmlparser.Attribute: void setName(java.lang.String)>";
"<org.htmlparser.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String,char)>" -> "<org.htmlparser.Attribute: void setAssignment(java.lang.String)>";
"<org.htmlparser.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String,char)>" -> "<org.htmlparser.Attribute: void setRawValue(java.lang.String)>";
"<org.htmlparser.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String,char)>" -> "<org.htmlparser.Attribute: void setValue(java.lang.String)>";
"<org.htmlparser.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String,char)>" -> "<org.htmlparser.Attribute: void setQuote(char)>";
"<org.htmlparser.Attribute: void setRawValue(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlparser.Attribute: void setRawValue(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<org.htmlparser.Attribute: void setRawValue(java.lang.String)>" -> "<java.lang.Character: boolean isLetterOrDigit(char)>";
"<java.lang.StringBuffer: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Character: boolean isLetterOrDigit(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.Attribute: void setRawValue(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.Attribute: void setRawValue(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.htmlparser.Attribute: void setRawValue(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.Attribute: void setRawValue(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlparser.Attribute: void setRawValue(java.lang.String)>" -> "<java.lang.String: int length()>";
"<java.lang.String: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.Attribute: void setRawValue(java.lang.String)>" -> "<org.htmlparser.Attribute: void setValue(java.lang.String)>";
"<org.htmlparser.Attribute: void setRawValue(java.lang.String)>" -> "<org.htmlparser.Attribute: void setQuote(char)>";
"<org.htmlparser.nodes.TagNode: void setTagName(java.lang.String)>" -> "<java.util.Vector: int size()>";
"<org.htmlparser.nodes.TagNode: void setTagName(java.lang.String)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.nodes.TagNode: void setTagName(java.lang.String)>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<org.htmlparser.nodes.TagNode: void setTagName(java.lang.String)>" -> "<java.util.Vector: void setElementAt(java.lang.Object,int)>";
"<org.htmlparser.nodes.TagNode: void setTagName(java.lang.String)>" -> "<java.util.Vector: void insertElementAt(java.lang.Object,int)>";
"<java.util.Vector: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: void addElement(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: java.lang.Object elementAt(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: void setElementAt(java.lang.Object,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: void insertElementAt(java.lang.Object,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.nodes.TagNode: void setTagName(java.lang.String)>" -> "<org.htmlparser.nodes.TagNode: java.util.Vector getAttributesEx()>";
"<org.htmlparser.nodes.TagNode: void setTagName(java.lang.String)>" -> "<org.htmlparser.nodes.TagNode: void setAttributesEx(java.util.Vector)>";
"<org.htmlparser.util.DefaultParserFeedback: void <init>(int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.util.DefaultParserFeedback: void <init>(int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.htmlparser.util.DefaultParserFeedback: void <init>(int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.util.DefaultParserFeedback: void <init>(int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void <clinit>()>" -> "<java.lang.String: char[] toCharArray()>";
"<org.htmlparser.http.ConnectionManager: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.Parser: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.PrototypicalNodeFactory: void <init>(boolean)>" -> "<org.htmlparser.PrototypicalNodeFactory: void clear()>";
"<org.htmlparser.PrototypicalNodeFactory: void <init>(boolean)>" -> "<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>";
"<org.htmlparser.PrototypicalNodeFactory: void clear()>" -> "<java.util.Hashtable: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.AppletTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.Html: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.HeadTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.BodyTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.Span: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.Div: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.TitleTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.TextareaTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.TableTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.TableRow: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.TableHeader: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.TableColumn: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.StyleTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.SelectTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.ScriptTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.ProcessingInstructionTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.ParagraphTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.OptionTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.ObjectTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.MetaTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.LinkTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.LabelTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.JspTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.InputTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.ImageTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.HeadingTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.FrameTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.FrameSetTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.FormTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.DoctypeTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.DefinitionListBullet: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.DefinitionList: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.BulletList: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.Bullet: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.BaseHrefTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.AppletTag: void <init>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.Html: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.HeadTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.BodyTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.Span: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.Div: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.TitleTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.TextareaTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.TableTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.TableRow: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.TableHeader: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.TableColumn: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.StyleTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.SelectTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.ScriptTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.ProcessingInstructionTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.ParagraphTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.OptionTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.ObjectTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.MetaTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.LinkTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.LabelTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.JspTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.InputTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.ImageTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.HeadingTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.FrameTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.FrameSetTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.FormTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.DoctypeTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.DefinitionListBullet: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.DefinitionList: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.BulletList: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.Bullet: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.BaseHrefTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.AppletTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.AppletTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.AppletTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.Html: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.HeadTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.BodyTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.Span: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.Div: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.TitleTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.TextareaTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.TableTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.TableRow: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.TableHeader: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.TableColumn: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.StyleTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.StyleTag: void <init>()>" -> "<org.htmlparser.scanners.StyleScanner: void <init>()>";
"<org.htmlparser.tags.SelectTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.ScriptTag: void <init>()>" -> "<org.htmlparser.scanners.ScriptScanner: void <clinit>()>";
"<org.htmlparser.tags.ScriptTag: void <init>()>" -> "<org.htmlparser.scanners.ScriptScanner: void <init>()>";
"<org.htmlparser.tags.ScriptTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.ProcessingInstructionTag: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void <init>()>";
"<org.htmlparser.tags.ParagraphTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.OptionTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.ObjectTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.MetaTag: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void <init>()>";
"<org.htmlparser.tags.LinkTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.LabelTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.JspTag: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void <init>()>";
"<org.htmlparser.tags.InputTag: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void <init>()>";
"<org.htmlparser.tags.ImageTag: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void <init>()>";
"<org.htmlparser.tags.HeadingTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.FrameTag: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void <init>()>";
"<org.htmlparser.tags.FrameSetTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.FormTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.DoctypeTag: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void <init>()>";
"<org.htmlparser.tags.DefinitionListBullet: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.DefinitionList: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.BulletList: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.Bullet: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.BaseHrefTag: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void <init>()>";
"<org.htmlparser.tags.AppletTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <init>()>";
"<org.htmlparser.tags.CompositeTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.CompositeTag: void <clinit>()>" -> "<org.htmlparser.scanners.CompositeTagScanner: void <init>()>";
"<org.htmlparser.tags.Html: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.Html: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.Html: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.HeadTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.HeadTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.HeadTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.BodyTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.BodyTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.BodyTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.Span: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.Span: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.Span: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.Div: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.Div: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.Div: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.TitleTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.TitleTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.TitleTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.TextareaTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.TextareaTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.TextareaTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.TableTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.TableTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.TableTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.TableRow: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.TableRow: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.TableRow: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.TableHeader: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.TableHeader: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.TableHeader: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.TableColumn: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.TableColumn: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.TableColumn: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.StyleTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.StyleTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.StyleTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.SelectTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.SelectTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.SelectTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.ScriptTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.ScriptTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.ScriptTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.ProcessingInstructionTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.ProcessingInstructionTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.ParagraphTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.ParagraphTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.ParagraphTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.OptionTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.OptionTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.OptionTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.ObjectTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.ObjectTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.ObjectTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.MetaTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.MetaTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.LinkTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.LinkTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.LinkTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.LabelTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.LabelTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.LabelTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.JspTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.JspTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.InputTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.InputTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.ImageTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.ImageTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.HeadingTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.HeadingTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.HeadingTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.FrameTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.FrameTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.FrameSetTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.FrameSetTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.FrameSetTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.FormTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.FormTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.FormTag: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.DoctypeTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.DoctypeTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.DefinitionListBullet: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.DefinitionListBullet: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.DefinitionListBullet: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.DefinitionList: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.DefinitionList: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.DefinitionList: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.BulletList: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.BulletList: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.BulletList: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.Bullet: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.Bullet: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.Bullet: void <clinit>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.BaseHrefTag: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.tags.BaseHrefTag: void <clinit>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.CompositeTag: void <init>()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.CompositeTag: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void <init>()>";
"<org.htmlparser.tags.CompositeTag: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.scanners.StyleScanner: void <init>()>" -> "<org.htmlparser.scanners.CompositeTagScanner: void <init>()>";
"<org.htmlparser.scanners.ScriptScanner: void <init>()>" -> "<org.htmlparser.scanners.CompositeTagScanner: void <init>()>";
"<org.htmlparser.nodes.TagNode: void <init>()>" -> "<java.util.Vector: void <init>()>";
"<org.htmlparser.nodes.TagNode: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>";
"<org.htmlparser.scanners.CompositeTagScanner: void <init>()>" -> "<org.htmlparser.scanners.TagScanner: void <init>()>";
"<org.htmlparser.tags.CompositeTag: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void setThisScanner(org.htmlparser.scanners.Scanner)>";
"<org.htmlparser.tags.ScriptTag: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void setThisScanner(org.htmlparser.scanners.Scanner)>";
"<org.htmlparser.tags.StyleTag: void <init>()>" -> "<org.htmlparser.nodes.TagNode: void setThisScanner(org.htmlparser.scanners.Scanner)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.PrototypicalNodeFactory registerTags()>" -> "<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<java.util.Locale: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.AppletTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.BaseHrefTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.Bullet: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.BulletList: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.DefinitionList: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.DefinitionListBullet: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.DoctypeTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.FormTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.FrameSetTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.FrameTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.HeadingTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.ImageTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.InputTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.JspTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.LabelTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.LinkTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.MetaTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.ObjectTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.OptionTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.ParagraphTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.ProcessingInstructionTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.ScriptTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.SelectTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.StyleTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.TableColumn: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.TableHeader: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.TableRow: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.TableTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.TextareaTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.TitleTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.Div: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.Span: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.BodyTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.HeadTag: java.lang.String[] getIds()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.tags.Html: java.lang.String[] getIds()>";
"<org.htmlparser.tags.AppletTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.AppletTag: void <clinit>()>";
"<org.htmlparser.tags.AppletTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.AppletTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.BaseHrefTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.BaseHrefTag: void <clinit>()>";
"<org.htmlparser.tags.BaseHrefTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.Bullet: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.Bullet: void <clinit>()>";
"<org.htmlparser.tags.Bullet: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.Bullet: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.BulletList: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.BulletList: void <clinit>()>";
"<org.htmlparser.tags.BulletList: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.BulletList: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.DefinitionList: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.DefinitionList: void <clinit>()>";
"<org.htmlparser.tags.DefinitionList: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.DefinitionList: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.DefinitionListBullet: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.DefinitionListBullet: void <clinit>()>";
"<org.htmlparser.tags.DefinitionListBullet: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.DefinitionListBullet: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.DoctypeTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.DoctypeTag: void <clinit>()>";
"<org.htmlparser.tags.DoctypeTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.FormTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.FormTag: void <clinit>()>";
"<org.htmlparser.tags.FormTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.FormTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.FrameSetTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.FrameSetTag: void <clinit>()>";
"<org.htmlparser.tags.FrameSetTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.FrameSetTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.FrameTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.FrameTag: void <clinit>()>";
"<org.htmlparser.tags.FrameTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.HeadingTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.HeadingTag: void <clinit>()>";
"<org.htmlparser.tags.HeadingTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.HeadingTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.ImageTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.ImageTag: void <clinit>()>";
"<org.htmlparser.tags.ImageTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.InputTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.InputTag: void <clinit>()>";
"<org.htmlparser.tags.InputTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.JspTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.JspTag: void <clinit>()>";
"<org.htmlparser.tags.JspTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.LabelTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.LabelTag: void <clinit>()>";
"<org.htmlparser.tags.LabelTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.LabelTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.LinkTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.LinkTag: void <clinit>()>";
"<org.htmlparser.tags.LinkTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.LinkTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.MetaTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.MetaTag: void <clinit>()>";
"<org.htmlparser.tags.MetaTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.ObjectTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.ObjectTag: void <clinit>()>";
"<org.htmlparser.tags.ObjectTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.ObjectTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.OptionTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.OptionTag: void <clinit>()>";
"<org.htmlparser.tags.OptionTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.OptionTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.ParagraphTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.ParagraphTag: void <clinit>()>";
"<org.htmlparser.tags.ParagraphTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.ParagraphTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.ProcessingInstructionTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.ProcessingInstructionTag: void <clinit>()>";
"<org.htmlparser.tags.ProcessingInstructionTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.ScriptTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.ScriptTag: void <clinit>()>";
"<org.htmlparser.tags.ScriptTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.ScriptTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.SelectTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.SelectTag: void <clinit>()>";
"<org.htmlparser.tags.SelectTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.SelectTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.StyleTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.StyleTag: void <clinit>()>";
"<org.htmlparser.tags.StyleTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.StyleTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.TableColumn: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.TableColumn: void <clinit>()>";
"<org.htmlparser.tags.TableColumn: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.TableColumn: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.TableHeader: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.TableHeader: void <clinit>()>";
"<org.htmlparser.tags.TableHeader: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.TableHeader: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.TableRow: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.TableRow: void <clinit>()>";
"<org.htmlparser.tags.TableRow: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.TableRow: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.TableTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.TableTag: void <clinit>()>";
"<org.htmlparser.tags.TableTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.TableTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.TextareaTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.TextareaTag: void <clinit>()>";
"<org.htmlparser.tags.TextareaTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.TextareaTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.TitleTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.TitleTag: void <clinit>()>";
"<org.htmlparser.tags.TitleTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.TitleTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.Div: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.Div: void <clinit>()>";
"<org.htmlparser.tags.Div: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.Div: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.Span: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.Span: void <clinit>()>";
"<org.htmlparser.tags.Span: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.Span: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.BodyTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.BodyTag: void <clinit>()>";
"<org.htmlparser.tags.BodyTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.BodyTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.HeadTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.HeadTag: void <clinit>()>";
"<org.htmlparser.tags.HeadTag: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.HeadTag: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.tags.Html: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.Html: void <clinit>()>";
"<org.htmlparser.tags.Html: java.lang.String[] getIds()>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.tags.Html: java.lang.String[] getIds()>" -> "<org.htmlparser.tags.CompositeTag: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>";
"<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.PrototypicalNodeFactory: void registerTag(org.htmlparser.Tag)>" -> "<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag put(java.lang.String,org.htmlparser.Tag)>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<java.util.Vector: int size()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.AppletTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.BaseHrefTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.Bullet: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.BulletList: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.DefinitionList: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.DefinitionListBullet: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.DoctypeTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.FormTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.FrameSetTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.FrameTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.HeadingTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.ImageTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.InputTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.JspTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.LabelTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.LinkTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.MetaTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.ObjectTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.OptionTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.ParagraphTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.ProcessingInstructionTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.ScriptTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.SelectTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.StyleTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.TableColumn: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.TableHeader: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.TableRow: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.TableTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.TextareaTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.TitleTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.Div: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.Span: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.BodyTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.HeadTag: java.lang.String[] getIds()>";
"<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.tags.Html: java.lang.String[] getIds()>";
"<org.htmlparser.Parser: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.Parser: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(double)>";
"<org.htmlparser.Parser: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(double)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.parserapplications.LinkExtractor: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>";
"<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<org.htmlparser.Parser: org.htmlparser.util.NodeList extractAllNodesThatMatch(org.htmlparser.NodeFilter)>";
"<org.htmlparser.Parser: org.htmlparser.util.NodeList extractAllNodesThatMatch(org.htmlparser.NodeFilter)>" -> "<org.htmlparser.util.NodeList: void <init>()>";
"<org.htmlparser.util.NodeList: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<org.htmlparser.util.NodeList: int size()>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<org.htmlparser.util.NodeList: org.htmlparser.Node elementAt(int)>";
"<org.htmlparser.util.NodeList: void <init>()>" -> "<org.htmlparser.util.NodeList: void removeAll()>";
"<org.htmlparser.util.NodeList: void removeAll()>" -> "<org.htmlparser.util.NodeList: org.htmlparser.Node[] newNodeArrayFor(int)>";
"<org.htmlparser.Parser: org.htmlparser.util.NodeList extractAllNodesThatMatch(org.htmlparser.NodeFilter)>" -> "<org.htmlparser.Parser: org.htmlparser.util.NodeIterator elements()>";
"<org.htmlparser.Parser: org.htmlparser.util.NodeIterator elements()>" -> "<org.htmlparser.util.IteratorImpl: void <init>(org.htmlparser.lexer.Lexer,org.htmlparser.util.ParserFeedback)>";
"<org.htmlparser.util.IteratorImpl: void <init>(org.htmlparser.lexer.Lexer,org.htmlparser.util.ParserFeedback)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.util.IteratorImpl: void <init>(org.htmlparser.lexer.Lexer,org.htmlparser.util.ParserFeedback)>" -> "<org.htmlparser.lexer.Cursor: void <init>(org.htmlparser.lexer.Page,int)>";
"<org.htmlparser.lexer.Cursor: void <init>(org.htmlparser.lexer.Page,int)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.Parser: org.htmlparser.util.NodeList extractAllNodesThatMatch(org.htmlparser.NodeFilter)>" -> "<org.htmlparser.util.IteratorImpl: boolean hasMoreNodes()>";
"<org.htmlparser.Parser: org.htmlparser.util.NodeList extractAllNodesThatMatch(org.htmlparser.NodeFilter)>" -> "<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<org.htmlparser.util.NodeList: void <init>()>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<org.htmlparser.util.ChainedException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.util.ChainedException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.Parser: org.htmlparser.util.NodeIterator elements()>" -> "<org.htmlparser.Parser: org.htmlparser.lexer.Lexer getLexer()>";
"<org.htmlparser.Parser: org.htmlparser.util.NodeIterator elements()>" -> "<org.htmlparser.Parser: org.htmlparser.util.ParserFeedback getFeedback()>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<org.htmlparser.util.ChainedException: void printStackTrace()>";
"<org.htmlparser.util.ChainedException: void printStackTrace()>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.util.ChainedException: void printStackTrace()>" -> "<org.htmlparser.util.ChainedException: void printStackTrace(java.io.PrintStream)>";
"<org.htmlparser.util.ChainedException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.util.ChainedException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>";
"<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.util.ChainedException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.util.ChainedException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.util.ChainedException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.util.ChainedException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.util.ChainedException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.util.ChainedException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>";
"<org.htmlparser.util.ChainedException: void printStackTrace(java.io.PrintStream)>" -> "<org.htmlparser.util.ChainedException: void printStackTrace(java.io.PrintStream)>";
"<org.htmlparser.util.ChainedException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<org.htmlparser.util.ChainedException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<java.lang.Object: java.lang.Class getClass()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: java.lang.String getMessage()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.Parser: void <init>(java.lang.String,org.htmlparser.util.ParserFeedback)>" -> "<org.htmlparser.Parser: void setFeedback(org.htmlparser.util.ParserFeedback)>";
"<org.htmlparser.Parser: void <init>(java.lang.String,org.htmlparser.util.ParserFeedback)>" -> "<org.htmlparser.Parser: void setResource(java.lang.String)>";
"<org.htmlparser.Parser: void <init>(java.lang.String,org.htmlparser.util.ParserFeedback)>" -> "<org.htmlparser.Parser: void setNodeFactory(org.htmlparser.NodeFactory)>";
"<org.htmlparser.Parser: void setFeedback(org.htmlparser.util.ParserFeedback)>" -> "<org.htmlparser.Parser: void <clinit>()>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<org.htmlparser.lexer.Lexer: void <init>(java.net.URLConnection)>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<org.htmlparser.Parser: org.htmlparser.http.ConnectionManager getConnectionManager()>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<org.htmlparser.lexer.Lexer: void <init>(org.htmlparser.lexer.Page)>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<org.htmlparser.lexer.Page: void <init>(java.lang.String)>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<org.htmlparser.Parser: void <clinit>()>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<org.htmlparser.lexer.Lexer: void <clinit>()>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<org.htmlparser.lexer.Page: void <clinit>()>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<org.htmlparser.lexer.Lexer: void <clinit>()>";
"<org.htmlparser.Parser: void setNodeFactory(org.htmlparser.NodeFactory)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: void <init>(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Page: void <clinit>()>";
"<org.htmlparser.lexer.Lexer: void <init>(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Lexer: void <init>(org.htmlparser.lexer.Page)>";
"<org.htmlparser.lexer.Lexer: void <init>(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Page: void <init>(java.net.URLConnection)>";
"<org.htmlparser.lexer.Lexer: void <init>(org.htmlparser.lexer.Page)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.lexer.Lexer: void <init>(org.htmlparser.lexer.Page)>" -> "<org.htmlparser.lexer.Cursor: void <init>(org.htmlparser.lexer.Page,int)>";
"<org.htmlparser.lexer.Page: void <init>(java.lang.String)>" -> "<org.htmlparser.lexer.Page: void finalize()>";
"<org.htmlparser.lexer.Page: void <init>(java.lang.String)>" -> "<org.htmlparser.lexer.Page: void <init>(java.lang.String,java.lang.String)>";
"<java.lang.Character: boolean isWhitespace(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Page: void <init>(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Page: void finalize()>";
"<org.htmlparser.lexer.Page: void <init>(java.net.URLConnection)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Page: void <init>(java.net.URLConnection)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.lexer.Page: void <init>(java.lang.String,java.lang.String)>" -> "<org.htmlparser.lexer.Page: void finalize()>";
"<org.htmlparser.lexer.Page: void <init>(java.lang.String,java.lang.String)>" -> "<org.htmlparser.lexer.PageIndex: void <init>(org.htmlparser.lexer.Page)>";
"<org.htmlparser.lexer.Page: void <init>(java.lang.String,java.lang.String)>" -> "<org.htmlparser.lexer.StringSource: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlparser.lexer.Page: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Page: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.lexer.PageIndex: void <init>(org.htmlparser.lexer.Page)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.lexer.StringSource: void <init>(java.lang.String,java.lang.String)>" -> "<org.htmlparser.lexer.Source: void <init>()>";
"<org.htmlparser.lexer.Source: void <init>()>" -> "<java.io.Reader: void <init>()>";
"<java.io.Reader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Reader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.net.URL: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.net.URL: void <init>(java.lang.String)>";
"<java.net.URL: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.net.URL: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.io.File: java.lang.String getCanonicalPath()>";
"<java.io.File: java.lang.String getCanonicalPath()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String fixSpaces(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String fixSpaces(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String fixSpaces(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.Math: double random()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.System: void setProperties(java.util.Properties)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.System: java.util.Properties getProperties()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.net.URL: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String encode(byte[])>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String encode(byte[])>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.System: void setProperties(java.util.Properties)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.System: java.util.Properties getProperties()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.System: void setProperties(java.util.Properties)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.System: java.util.Properties getProperties()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: void <clinit>()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: void <clinit>()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: void <clinit>()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.Integer: void <clinit>()>";
"<java.lang.Math: double random()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: void setProperties(java.util.Properties)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: java.util.Properties getProperties()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String encode(byte[])>" -> "<org.htmlparser.http.ConnectionManager: void <clinit>()>";
"<org.htmlparser.http.ConnectionManager: java.lang.String encode(byte[])>" -> "<java.lang.String: void <init>(char[])>";
"<org.htmlparser.http.ConnectionManager: java.lang.String encode(byte[])>" -> "<java.lang.String: void <clinit>()>";
"<java.lang.Integer: java.lang.String toString(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: void <init>(char[])>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(char[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<java.lang.String: byte[] getBytes(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.net.URL: java.net.URLConnection openConnection()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.net.URL: java.lang.String toExternalForm()>";
"<java.net.URL: java.net.URLConnection openConnection()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.URL: java.lang.String toExternalForm()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getProxyHost()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: int getProxyPort()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getProxyHost()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: int getProxyPort()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getProxyHost()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: int getProxyPort()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: boolean getRedirectionProcessingEnabled()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.util.Hashtable getRequestProperties()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getProxyHost()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: int getProxyPort()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getProxyUser()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getProxyPassword()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getProxyUser()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getProxyPassword()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getUser()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getPassword()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getUser()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getPassword()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: boolean getCookieProcessingEnabled()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: void addCookies(java.net.URLConnection)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: org.htmlparser.http.ConnectionMonitor getMonitor()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: org.htmlparser.http.ConnectionMonitor getMonitor()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: org.htmlparser.http.ConnectionMonitor getMonitor()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: org.htmlparser.http.ConnectionMonitor getMonitor()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: boolean getCookieProcessingEnabled()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getLocation(java.net.HttpURLConnection)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getProxyHost()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<org.htmlparser.http.ConnectionManager: int getProxyPort()>";
"<org.htmlparser.http.ConnectionManager: void addCookies(java.net.URLConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.ConnectionManager: void <clinit>()>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.util.Date: void <init>()>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.util.Vector: void <init>()>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<org.htmlparser.http.Cookie: boolean isToken(java.lang.String)>";
"<java.lang.Integer: int parseInt(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Date: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Date: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>" -> "<java.lang.Object: void <init>()>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.Cookie: boolean isToken(java.lang.String)>" -> "<java.lang.String: int indexOf(int)>";
"<java.lang.String: int indexOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlparser.http.Cookie: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.Cookie: boolean isToken(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlparser.http.Cookie: boolean isToken(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.util.Date: long getTime()>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.util.Date: void setTime(long)>";
"<java.util.Date: long getTime()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Date: void setTime(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.text.DateFormat: java.util.Date parse(java.lang.String)>";
"<java.text.DateFormat: java.util.Date parse(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: java.lang.String toLowerCase()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.Cookie: void setExpiryDate(java.util.Date)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.Cookie: void setExpiryDate(java.util.Date)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.Cookie: void setDomain(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.Cookie: void setPath(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.Cookie: void setSecure(boolean)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.Cookie: void setComment(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.Cookie: void setVersion(int)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.Cookie: void setExpiryDate(java.util.Date)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<java.util.StringTokenizer: boolean hasMoreTokens()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.StringTokenizer: java.lang.String nextToken()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.util.Vector: int size()>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void parseCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.ConnectionManager: void saveCookies(java.util.Vector,java.net.URLConnection)>";
"<org.htmlparser.http.ConnectionManager: void saveCookies(java.util.Vector,java.net.URLConnection)>" -> "<java.util.Vector: int size()>";
"<org.htmlparser.http.ConnectionManager: void saveCookies(java.util.Vector,java.net.URLConnection)>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<org.htmlparser.http.ConnectionManager: void saveCookies(java.util.Vector,java.net.URLConnection)>" -> "<org.htmlparser.http.ConnectionManager: void setCookie(org.htmlparser.http.Cookie,java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void setCookie(org.htmlparser.http.Cookie,java.lang.String)>" -> "<java.util.Hashtable: void <init>()>";
"<org.htmlparser.http.ConnectionManager: void setCookie(org.htmlparser.http.Cookie,java.lang.String)>" -> "<java.util.Vector: void <init>()>";
"<org.htmlparser.http.ConnectionManager: void setCookie(org.htmlparser.http.Cookie,java.lang.String)>" -> "<java.util.Vector: int size()>";
"<org.htmlparser.http.ConnectionManager: void setCookie(org.htmlparser.http.Cookie,java.lang.String)>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<org.htmlparser.http.ConnectionManager: void setCookie(org.htmlparser.http.Cookie,java.lang.String)>" -> "<java.util.Vector: void setElementAt(java.lang.Object,int)>";
"<org.htmlparser.http.ConnectionManager: void setCookie(org.htmlparser.http.Cookie,java.lang.String)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void setCookie(org.htmlparser.http.Cookie,java.lang.String)>" -> "<java.util.Vector: void insertElementAt(java.lang.Object,int)>";
"<org.htmlparser.http.ConnectionManager: void setCookie(org.htmlparser.http.Cookie,java.lang.String)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void setCookie(org.htmlparser.http.Cookie,java.lang.String)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void setCookie(org.htmlparser.http.Cookie,java.lang.String)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void addCookies(java.net.URLConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void addCookies(java.net.URLConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void addCookies(java.net.URLConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.http.ConnectionManager: void addCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.ConnectionManager: java.util.Vector addCookies(java.util.Vector,java.lang.String,java.util.Vector)>";
"<org.htmlparser.http.ConnectionManager: void addCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String getDomain(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void addCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.ConnectionManager: java.util.Vector addCookies(java.util.Vector,java.lang.String,java.util.Vector)>";
"<org.htmlparser.http.ConnectionManager: void addCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>";
"<org.htmlparser.http.ConnectionManager: void addCookies(java.net.URLConnection)>" -> "<org.htmlparser.http.ConnectionManager: java.util.Vector addCookies(java.util.Vector,java.lang.String,java.util.Vector)>";
"<org.htmlparser.http.ConnectionManager: java.util.Vector addCookies(java.util.Vector,java.lang.String,java.util.Vector)>" -> "<java.util.Date: void <init>()>";
"<org.htmlparser.http.ConnectionManager: java.util.Vector addCookies(java.util.Vector,java.lang.String,java.util.Vector)>" -> "<java.util.Vector: void <init>()>";
"<org.htmlparser.http.ConnectionManager: java.lang.String getDomain(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlparser.http.ConnectionManager: java.lang.String getDomain(java.lang.String)>" -> "<java.lang.Character: boolean isDigit(char)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String getDomain(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.Math: int max(int,int)>";
"<java.lang.Character: boolean isDigit(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Math: int max(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.String: int length()>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.String: int length()>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: int length()>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: int length()>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.util.Vector: int size()>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.util.Vector: int size()>";
"<org.htmlparser.http.ConnectionManager: java.lang.String generateCookieProperty(java.util.Vector)>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String getDomain(java.lang.String)>" -> "<java.util.StringTokenizer: int countTokens()>";
"<org.htmlparser.http.ConnectionManager: java.lang.String getDomain(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<java.util.StringTokenizer: int countTokens()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.util.Vector addCookies(java.util.Vector,java.lang.String,java.util.Vector)>" -> "<java.util.Date: boolean before(java.util.Date)>";
"<java.util.Date: boolean before(java.util.Date)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.util.Vector addCookies(java.util.Vector,java.lang.String,java.util.Vector)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: java.util.Vector addCookies(java.util.Vector,java.lang.String,java.util.Vector)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<java.lang.String: boolean startsWith(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.util.Vector addCookies(java.util.Vector,java.lang.String,java.util.Vector)>" -> "<java.util.Vector: int size()>";
"<org.htmlparser.http.ConnectionManager: java.util.Vector addCookies(java.util.Vector,java.lang.String,java.util.Vector)>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<org.htmlparser.http.ConnectionManager: java.util.Vector addCookies(java.util.Vector,java.lang.String,java.util.Vector)>" -> "<java.util.Vector: java.lang.Object remove(int)>";
"<java.util.Vector: java.lang.Object remove(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: void addCookies(java.net.URLConnection)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void addCookies(java.net.URLConnection)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: void addCookies(java.net.URLConnection)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.util.Hashtable: java.util.Enumeration keys()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<java.util.Hashtable: java.util.Enumeration keys()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String fixSpaces(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String fixSpaces(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String fixSpaces(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String fixSpaces(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.lexer.Page: void finalize()>" -> "<org.htmlparser.lexer.Page: void close()>";
"<org.htmlparser.lexer.Page: void close()>" -> "<org.htmlparser.lexer.Page: org.htmlparser.lexer.Source getSource()>";
"<org.htmlparser.lexer.Page: void close()>" -> "<org.htmlparser.lexer.Page: org.htmlparser.lexer.Source getSource()>";
"<org.htmlparser.lexer.Page: void <init>(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.InputStreamSource: void <clinit>()>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.InputStreamSource: void <init>(java.io.InputStream,java.lang.String)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Stream: void <init>(java.io.InputStream)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Stream: void <init>(java.io.InputStream)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<java.util.zip.Inflater: void <init>(boolean)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.PageIndex: void <init>(org.htmlparser.lexer.Page)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.InputStreamSource: void <init>(java.io.InputStream,java.lang.String)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Stream: void <init>(java.io.InputStream)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.InputStreamSource: void <clinit>()>";
"<org.htmlparser.lexer.InputStreamSource: void <init>(java.io.InputStream,java.lang.String)>" -> "<org.htmlparser.lexer.InputStreamSource: void <clinit>()>";
"<org.htmlparser.lexer.InputStreamSource: void <init>(java.io.InputStream,java.lang.String)>" -> "<org.htmlparser.lexer.InputStreamSource: void <init>(java.io.InputStream,java.lang.String,int)>";
"<org.htmlparser.lexer.Stream: void <init>(java.io.InputStream)>" -> "<org.htmlparser.lexer.Stream: void <init>(java.io.InputStream,int)>";
"<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.zip.Inflater: void <init>(boolean)>" -> "<java.lang.Object: void <init>()>";
"<java.util.zip.Inflater: void <init>(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>" -> "<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>";
"<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.InputStreamSource: void <init>(java.io.InputStream,java.lang.String,int)>" -> "<org.htmlparser.lexer.Source: void <init>()>";
"<org.htmlparser.lexer.InputStreamSource: void <init>(java.io.InputStream,java.lang.String,int)>" -> "<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>";
"<org.htmlparser.lexer.InputStreamSource: void <init>(java.io.InputStream,java.lang.String,int)>" -> "<org.htmlparser.lexer.Stream: void <init>(java.io.InputStream)>";
"<org.htmlparser.lexer.InputStreamSource: void <init>(java.io.InputStream,java.lang.String,int)>" -> "<java.io.InputStreamReader: void <init>(java.io.InputStream)>";
"<org.htmlparser.lexer.InputStreamSource: void <init>(java.io.InputStream,java.lang.String,int)>" -> "<org.htmlparser.lexer.Stream: void <init>(java.io.InputStream)>";
"<org.htmlparser.lexer.Stream: void <init>(java.io.InputStream,int)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>" -> "<java.io.Reader: void <init>()>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream)>" -> "<java.io.Reader: void <init>()>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.InputStreamSource: void <init>(java.io.InputStream,java.lang.String,int)>" -> "<org.htmlparser.lexer.Stream: boolean markSupported()>";
"<org.htmlparser.lexer.InputStreamSource: void <init>(java.io.InputStream,java.lang.String,int)>" -> "<java.io.InputStreamReader: java.lang.String getEncoding()>";
"<java.io.InputStreamReader: java.lang.String getEncoding()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Page: java.net.URLConnection getConnection()>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Page: java.lang.String getContentType()>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Page: java.net.URLConnection getConnection()>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Page: java.net.URLConnection getConnection()>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<org.htmlparser.lexer.Page: java.net.URLConnection getConnection()>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<org.htmlparser.lexer.Page: void <clinit>()>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<org.htmlparser.lexer.Page: java.lang.String findCharset(java.lang.String,java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String findCharset(java.lang.String,java.lang.String)>" -> "<org.htmlparser.lexer.Page: void <clinit>()>";
"<org.htmlparser.lexer.Page: java.lang.String findCharset(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Page: java.lang.String findCharset(java.lang.String,java.lang.String)>" -> "<org.htmlparser.lexer.Page: java.lang.Class class$(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String findCharset(java.lang.String,java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String findCharset(java.lang.String,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.lexer.Page: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>" -> "<java.lang.LinkageError: void <init>()>";
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String findCharset(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String findCharset(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String findCharset(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String findCharset(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String findCharset(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<java.lang.String: boolean endsWith(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<java.lang.String: int indexOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String trim()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getCharset(java.lang.String)>" -> "<org.htmlparser.lexer.InputStreamSource: java.lang.String getEncoding()>";
"<org.htmlparser.lexer.Page: java.lang.String getContentType()>" -> "<org.htmlparser.lexer.Page: java.net.URLConnection getConnection()>";
"<org.htmlparser.lexer.Lexer: void <init>(org.htmlparser.lexer.Page)>" -> "<org.htmlparser.lexer.Lexer: void setPage(org.htmlparser.lexer.Page)>";
"<org.htmlparser.lexer.Lexer: void <init>(org.htmlparser.lexer.Page)>" -> "<org.htmlparser.lexer.Lexer: void setCursor(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: void <init>(org.htmlparser.lexer.Page)>" -> "<org.htmlparser.lexer.Lexer: void setNodeFactory(org.htmlparser.NodeFactory)>";
"<org.htmlparser.lexer.Lexer: void setPage(org.htmlparser.lexer.Page)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: void setCursor(org.htmlparser.lexer.Cursor)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: void setNodeFactory(org.htmlparser.NodeFactory)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.htmlparser.Parser: void setNodeFactory(org.htmlparser.NodeFactory)>" -> "<org.htmlparser.Parser: org.htmlparser.lexer.Lexer getLexer()>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<org.htmlparser.lexer.Lexer: void setNodeFactory(org.htmlparser.NodeFactory)>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.lexer.Page getPage()>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.lexer.Page getPage()>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<org.htmlparser.lexer.Page: java.lang.String getContentType()>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<org.htmlparser.lexer.Page: java.lang.String getUrl()>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<org.htmlparser.Parser: org.htmlparser.lexer.Lexer getLexer()>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<org.htmlparser.Parser: org.htmlparser.lexer.Lexer getLexer()>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<org.htmlparser.Parser: org.htmlparser.util.ParserFeedback getFeedback()>";
"<org.htmlparser.filters.AndFilter: void <init>(org.htmlparser.NodeFilter,org.htmlparser.NodeFilter)>" -> "<org.htmlparser.filters.AndFilter: void setPredicates(org.htmlparser.NodeFilter[])>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlparser.Parser: void setResource(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String fixSpaces(java.lang.String)>" -> "<java.lang.String: int indexOf(int)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String fixSpaces(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlparser.http.ConnectionManager: java.lang.String fixSpaces(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.htmlparser.http.ConnectionManager: java.lang.String fixSpaces(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlparser.lexer.Page: void close()>" -> "<org.htmlparser.lexer.StringSource: void destroy()>";
"<org.htmlparser.lexer.Page: void close()>" -> "<org.htmlparser.lexer.InputStreamSource: void destroy()>";
"<org.htmlparser.lexer.InputStreamSource: void destroy()>" -> "<java.io.InputStreamReader: void close()>";
"<java.io.InputStreamReader: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<org.htmlparser.util.DefaultParserFeedback: void warning(java.lang.String)>";
"<org.htmlparser.util.DefaultParserFeedback: void warning(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.util.DefaultParserFeedback: void warning(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.util.DefaultParserFeedback: void warning(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.util.DefaultParserFeedback: void warning(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.util.DefaultParserFeedback: void warning(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.Parser: void setLexer(org.htmlparser.lexer.Lexer)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.NodeFactory getNodeFactory()>";
"<org.htmlparser.Parser: void setNodeFactory(org.htmlparser.NodeFactory)>" -> "<org.htmlparser.lexer.Lexer: void setNodeFactory(org.htmlparser.NodeFactory)>";
"<org.htmlparser.util.IteratorImpl: boolean hasMoreNodes()>" -> "<org.htmlparser.lexer.Cursor: void setPosition(int)>";
"<org.htmlparser.util.IteratorImpl: void <init>(org.htmlparser.lexer.Lexer,org.htmlparser.util.ParserFeedback)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.lexer.Page getPage()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag put(java.lang.String,org.htmlparser.Tag)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<org.htmlparser.util.DefaultParserFeedback: void error(java.lang.String,org.htmlparser.util.ParserException)>";
"<org.htmlparser.util.DefaultParserFeedback: void error(java.lang.String,org.htmlparser.util.ParserException)>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.util.DefaultParserFeedback: void error(java.lang.String,org.htmlparser.util.ParserException)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.util.DefaultParserFeedback: void error(java.lang.String,org.htmlparser.util.ParserException)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.util.DefaultParserFeedback: void error(java.lang.String,org.htmlparser.util.ParserException)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.util.DefaultParserFeedback: void error(java.lang.String,org.htmlparser.util.ParserException)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.util.DefaultParserFeedback: void error(java.lang.String,org.htmlparser.util.ParserException)>" -> "<org.htmlparser.util.ChainedException: void printStackTrace()>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode()>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.lexer.Page getPage()>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<org.htmlparser.lexer.Page: java.lang.String getUrl()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode()>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Lexer: void <clinit>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<java.lang.Character: boolean isLetter(char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<java.lang.Character: void <clinit>()>";
"<java.lang.Character: boolean isLetter(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.lexer.Page getPage()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeString(int,int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeString(int,int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeRemark(int,int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<java.lang.Character: boolean isLetter(char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<java.util.Vector: void <init>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<java.util.Vector: void <init>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Lexer: void standalone(java.util.Vector,int[])>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Lexer: void standalone(java.util.Vector,int[])>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Lexer: void double_quote(java.util.Vector,int[])>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Lexer: void double_quote(java.util.Vector,int[])>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Lexer: void single_quote(java.util.Vector,int[])>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Lexer: void single_quote(java.util.Vector,int[])>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Lexer: void naked(java.util.Vector,int[])>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Lexer: void naked(java.util.Vector,int[])>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Lexer: void empty(java.util.Vector,int[])>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Lexer: void standalone(java.util.Vector,int[])>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Lexer: void whitespace(java.util.Vector,int[])>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Lexer: void whitespace(java.util.Vector,int[])>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.util.Vector: void <init>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<org.htmlparser.lexer.Lexer: void <clinit>()>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>" -> "<org.htmlparser.Attribute: void <init>()>";
"<org.htmlparser.lexer.Lexer: void standalone(java.util.Vector,int[])>" -> "<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>";
"<org.htmlparser.lexer.Lexer: void double_quote(java.util.Vector,int[])>" -> "<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>";
"<org.htmlparser.lexer.Lexer: void single_quote(java.util.Vector,int[])>" -> "<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>";
"<org.htmlparser.lexer.Lexer: void naked(java.util.Vector,int[])>" -> "<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>";
"<org.htmlparser.lexer.Lexer: void empty(java.util.Vector,int[])>" -> "<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>";
"<org.htmlparser.lexer.Lexer: void whitespace(java.util.Vector,int[])>" -> "<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>";
"<org.htmlparser.Attribute: void <init>()>" -> "<org.htmlparser.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String,char)>";
"<org.htmlparser.lexer.Lexer: void whitespace(java.util.Vector,int[])>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.lexer.Lexer: void empty(java.util.Vector,int[])>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.lexer.Lexer: void naked(java.util.Vector,int[])>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.lexer.Lexer: void single_quote(java.util.Vector,int[])>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.lexer.Lexer: void double_quote(java.util.Vector,int[])>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.lexer.Lexer: void standalone(java.util.Vector,int[])>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>" -> "<org.htmlparser.Attribute: void setName(java.lang.String)>";
"<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>" -> "<org.htmlparser.Attribute: void setAssignment(java.lang.String)>";
"<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>" -> "<org.htmlparser.Attribute: void setValue(java.lang.String)>";
"<org.htmlparser.lexer.PageAttribute: void <init>(org.htmlparser.lexer.Page,int,int,int,int,char)>" -> "<org.htmlparser.Attribute: void setQuote(char)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeRemark(int,int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseRemark(int,boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.util.ParserException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlparser.util.ParserException: void <init>(java.lang.String)>" -> "<org.htmlparser.util.ChainedException: void <init>(java.lang.String)>";
"<org.htmlparser.util.ChainedException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: void retreat()>";
"<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: void retreat()>";
"<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.StringSource: char getCharacter(int)>";
"<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.StringSource: char getCharacter(int)>";
"<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.InputStreamSource: char getCharacter(int)>";
"<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.InputStreamSource: char getCharacter(int)>";
"<org.htmlparser.lexer.StringSource: char getCharacter(int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.StringSource: char getCharacter(int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.InputStreamSource: char getCharacter(int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.InputStreamSource: char getCharacter(int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.StringSource: char getCharacter(int)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: void advance()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: void advance()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: void advance()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: void advance()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.PageIndex: int add(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.PageIndex: int add(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.util.sort.Sort: int bsearch(org.htmlparser.util.sort.Sortable,org.htmlparser.util.sort.Ordered)>";
"<org.htmlparser.util.sort.Sort: int bsearch(org.htmlparser.util.sort.Sortable,org.htmlparser.util.sort.Ordered)>" -> "<org.htmlparser.util.sort.Sort: int bsearch(org.htmlparser.util.sort.Sortable,org.htmlparser.util.sort.Ordered,int,int)>";
"<org.htmlparser.lexer.PageIndex: int add(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.util.sort.Sort: int bsearch(org.htmlparser.util.sort.Sortable,org.htmlparser.util.sort.Ordered,int,int)>" -> "<org.htmlparser.lexer.Cursor: int compare(java.lang.Object)>";
"<org.htmlparser.lexer.Cursor: int compare(java.lang.Object)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.PageIndex: int add(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>";
"<org.htmlparser.lexer.PageIndex: int add(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>";
"<org.htmlparser.lexer.PageIndex: int add(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.PageIndex: int size()>";
"<org.htmlparser.lexer.PageIndex: int add(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<java.lang.Math: int max(int,int)>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<org.htmlparser.lexer.PageIndex: int capacity()>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<org.htmlparser.lexer.PageIndex: int size()>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<org.htmlparser.lexer.PageIndex: int capacity()>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<org.htmlparser.lexer.PageIndex: int capacity()>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<org.htmlparser.lexer.PageIndex: int capacity()>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<org.htmlparser.lexer.PageIndex: int capacity()>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<org.htmlparser.lexer.PageIndex: int capacity()>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<org.htmlparser.lexer.PageIndex: int size()>";
"<org.htmlparser.lexer.PageIndex: void insertElementAt(int,int)>" -> "<org.htmlparser.lexer.PageIndex: int capacity()>";
"<org.htmlparser.util.sort.Sort: int bsearch(org.htmlparser.util.sort.Sortable,org.htmlparser.util.sort.Ordered)>" -> "<org.htmlparser.lexer.PageIndex: int first()>";
"<org.htmlparser.util.sort.Sort: int bsearch(org.htmlparser.util.sort.Sortable,org.htmlparser.util.sort.Ordered)>" -> "<org.htmlparser.lexer.PageIndex: int last()>";
"<org.htmlparser.util.sort.Sort: int bsearch(org.htmlparser.util.sort.Sortable,org.htmlparser.util.sort.Ordered,int,int)>" -> "<org.htmlparser.lexer.PageIndex: org.htmlparser.util.sort.Ordered fetch(int,org.htmlparser.util.sort.Ordered)>";
"<org.htmlparser.lexer.PageIndex: org.htmlparser.util.sort.Ordered fetch(int,org.htmlparser.util.sort.Ordered)>" -> "<org.htmlparser.lexer.Cursor: void <init>(org.htmlparser.lexer.Page,int)>";
"<org.htmlparser.lexer.PageIndex: org.htmlparser.util.sort.Ordered fetch(int,org.htmlparser.util.sort.Ordered)>" -> "<org.htmlparser.lexer.PageIndex: org.htmlparser.lexer.Page getPage()>";
"<org.htmlparser.lexer.PageIndex: org.htmlparser.util.sort.Ordered fetch(int,org.htmlparser.util.sort.Ordered)>" -> "<org.htmlparser.lexer.PageIndex: org.htmlparser.lexer.Page getPage()>";
"<org.htmlparser.lexer.Cursor: int compare(java.lang.Object)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.InputStreamSource: int offset()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.InputStreamSource: int read()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.InputStreamSource: int offset()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.InputStreamSource: int read()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.InputStreamSource: char getCharacter(int)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.InputStreamSource: int offset()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.InputStreamSource: void unread()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.InputStreamSource: char getCharacter(int)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.StringSource: int offset()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.StringSource: int read()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.StringSource: int offset()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.StringSource: int read()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.StringSource: char getCharacter(int)>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.StringSource: int offset()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.StringSource: void unread()>";
"<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.StringSource: char getCharacter(int)>";
"<org.htmlparser.lexer.InputStreamSource: int read()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.InputStreamSource: void unread()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.InputStreamSource: void unread()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.StringSource: int read()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.StringSource: void unread()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.StringSource: void unread()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.StringSource: int read()>" -> "<java.lang.String: int length()>";
"<org.htmlparser.lexer.StringSource: int read()>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlparser.lexer.InputStreamSource: int read()>" -> "<org.htmlparser.lexer.InputStreamSource: void fill(int)>";
"<org.htmlparser.lexer.InputStreamSource: void fill(int)>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.lexer.InputStreamSource: void fill(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.htmlparser.lexer.InputStreamSource: void fill(int)>" -> "<java.io.InputStreamReader: int read(char[],int,int)>";
"<org.htmlparser.lexer.InputStreamSource: void fill(int)>" -> "<java.io.InputStreamReader: void close()>";
"<java.io.InputStreamReader: int read(char[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeRemark(int,int)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeString(int,int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeRemark(int,int)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.NodeFactory getNodeFactory()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeRemark(int,int)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.lexer.Page getPage()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeRemark(int,int)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Remark createRemarkNode(org.htmlparser.lexer.Page,int,int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeRemark(int,int)>" -> "<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Remark createRemarkNode(org.htmlparser.lexer.Page,int,int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Remark createRemarkNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.RemarkNode: void <init>(org.htmlparser.lexer.Page,int,int)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Remark createRemarkNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.RemarkNode: void <init>(org.htmlparser.lexer.Page,int,int)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Remark createRemarkNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Remark getRemarkPrototype()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Remark createRemarkNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.AbstractNode: java.lang.Object clone()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Remark createRemarkNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.AbstractNode: void setPage(org.htmlparser.lexer.Page)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Remark createRemarkNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.AbstractNode: void setStartPosition(int)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Remark createRemarkNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.AbstractNode: void setEndPosition(int)>";
"<org.htmlparser.nodes.AbstractNode: java.lang.Object clone()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<java.lang.Object: java.lang.Object clone()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeTag(int,int,java.util.Vector)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeTag(int,int,java.util.Vector)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeString(int,int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeTag(int,int,java.util.Vector)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.NodeFactory getNodeFactory()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeTag(int,int,java.util.Vector)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.lexer.Page getPage()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeTag(int,int,java.util.Vector)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeTag(int,int,java.util.Vector)>" -> "<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<java.util.Locale: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.TagNode: void <init>(org.htmlparser.lexer.Page,int,int,java.util.Vector)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.TagNode: void <clinit>()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<java.util.Vector: int size()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag getTagPrototype()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.AbstractNode: java.lang.Object clone()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.AbstractNode: void setPage(org.htmlparser.lexer.Page)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.AbstractNode: void setStartPosition(int)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.AbstractNode: void setEndPosition(int)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Tag createTagNode(org.htmlparser.lexer.Page,int,int,java.util.Vector)>" -> "<org.htmlparser.nodes.TagNode: void setAttributesEx(java.util.Vector)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseTag(int)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeTag(int,int,java.util.Vector)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parsePI(int)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeTag(int,int,java.util.Vector)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseJsp(int)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeString(int,int)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.NodeFactory getNodeFactory()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeString(int,int)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.lexer.Page getPage()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeString(int,int)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Text createStringNode(org.htmlparser.lexer.Page,int,int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeString(int,int)>" -> "<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Text createStringNode(org.htmlparser.lexer.Page,int,int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Text createStringNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.TextNode: void <init>(org.htmlparser.lexer.Page,int,int)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Text createStringNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.TextNode: void <init>(org.htmlparser.lexer.Page,int,int)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Text createStringNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Text getTextPrototype()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Text createStringNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.AbstractNode: java.lang.Object clone()>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Text createStringNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.AbstractNode: void setPage(org.htmlparser.lexer.Page)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Text createStringNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.AbstractNode: void setStartPosition(int)>";
"<org.htmlparser.PrototypicalNodeFactory: org.htmlparser.Text createStringNode(org.htmlparser.lexer.Page,int,int)>" -> "<org.htmlparser.nodes.AbstractNode: void setEndPosition(int)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Lexer: void scanJIS(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.Node makeString(int,int)>";
"<org.htmlparser.lexer.Lexer: void scanJIS(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Lexer: void scanJIS(org.htmlparser.lexer.Cursor)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: void scanJIS(org.htmlparser.lexer.Cursor)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Lexer: void scanJIS(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node parseString(int,boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Page: int row(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Page: void ungetCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Page: int row(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.PageIndex: int row(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.PageIndex: int row(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.util.sort.Sort: int bsearch(org.htmlparser.util.sort.Sortable,org.htmlparser.util.sort.Ordered)>";
"<org.htmlparser.lexer.PageIndex: int row(org.htmlparser.lexer.Cursor)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Lexer: org.htmlparser.Node nextNode(boolean)>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<org.htmlparser.nodes.TagNode: boolean isEndTag()>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<org.htmlparser.nodes.TagNode: org.htmlparser.scanners.Scanner getThisScanner()>";
"<org.htmlparser.util.IteratorImpl: org.htmlparser.Node nextNode()>" -> "<org.htmlparser.scanners.TagScanner: org.htmlparser.Tag scan(org.htmlparser.Tag,org.htmlparser.lexer.Lexer,org.htmlparser.util.NodeList)>";
"<org.htmlparser.scanners.TagScanner: org.htmlparser.Tag scan(org.htmlparser.Tag,org.htmlparser.lexer.Lexer,org.htmlparser.util.NodeList)>" -> "<org.htmlparser.nodes.AbstractNode: void doSemanticAction()>";
"<org.htmlparser.nodes.TagNode: boolean isEndTag()>" -> "<org.htmlparser.nodes.TagNode: java.lang.String getRawTagName()>";
"<org.htmlparser.nodes.TagNode: java.lang.String getRawTagName()>" -> "<org.htmlparser.nodes.TagNode: java.util.Vector getAttributesEx()>";
"<org.htmlparser.nodes.TagNode: java.lang.String getRawTagName()>" -> "<java.util.Vector: int size()>";
"<org.htmlparser.nodes.TagNode: java.lang.String getRawTagName()>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<org.htmlparser.Parser: org.htmlparser.util.NodeList extractAllNodesThatMatch(org.htmlparser.NodeFilter)>" -> "<org.htmlparser.nodes.AbstractNode: void collectInto(org.htmlparser.util.NodeList,org.htmlparser.NodeFilter)>";
"<org.htmlparser.nodes.AbstractNode: void collectInto(org.htmlparser.util.NodeList,org.htmlparser.NodeFilter)>" -> "<org.htmlparser.filters.AndFilter: boolean accept(org.htmlparser.Node)>";
"<org.htmlparser.nodes.AbstractNode: void collectInto(org.htmlparser.util.NodeList,org.htmlparser.NodeFilter)>" -> "<org.htmlparser.filters.NodeClassFilter: boolean accept(org.htmlparser.Node)>";
"<org.htmlparser.filters.AndFilter: boolean accept(org.htmlparser.Node)>" -> "<org.htmlparser.parserapplications.LinkExtractor$1: boolean accept(org.htmlparser.Node)>";
"<org.htmlparser.filters.AndFilter: boolean accept(org.htmlparser.Node)>" -> "<org.htmlparser.filters.NodeClassFilter: boolean accept(org.htmlparser.Node)>";
"<org.htmlparser.nodes.AbstractNode: void collectInto(org.htmlparser.util.NodeList,org.htmlparser.NodeFilter)>" -> "<org.htmlparser.util.NodeList: void add(org.htmlparser.Node)>";
"<org.htmlparser.util.NodeList: void add(org.htmlparser.Node)>" -> "<org.htmlparser.util.NodeList: void adjustVectorCapacity()>";
"<org.htmlparser.util.NodeList: void adjustVectorCapacity()>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlparser.util.NodeList: void adjustVectorCapacity()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.htmlparser.util.NodeList: void adjustVectorCapacity()>" -> "<org.htmlparser.util.NodeList: org.htmlparser.Node[] newNodeArrayFor(int)>";
"<org.htmlparser.filters.NodeClassFilter: boolean accept(org.htmlparser.Node)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<org.htmlparser.util.IteratorImpl: boolean hasMoreNodes()>" -> "<org.htmlparser.lexer.Lexer: int getPosition()>";
"<org.htmlparser.util.IteratorImpl: boolean hasMoreNodes()>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.lexer.Page getPage()>";
"<org.htmlparser.util.IteratorImpl: boolean hasMoreNodes()>" -> "<org.htmlparser.lexer.Page: char getCharacter(org.htmlparser.lexer.Cursor)>";
"<org.htmlparser.lexer.Lexer: int getPosition()>" -> "<org.htmlparser.lexer.Lexer: org.htmlparser.lexer.Cursor getCursor()>";
"<org.htmlparser.lexer.Lexer: int getPosition()>" -> "<org.htmlparser.lexer.Cursor: int getPosition()>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.htmlparser.lexer.Page: void setConnection(java.net.URLConnection)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.htmlparser.http.ConnectionManager: java.net.URLConnection openConnection(java.net.URL)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.htmlparser.parserapplications.LinkExtractor: void main(java.lang.String[])>" -> "<org.htmlparser.nodes.AbstractNode: java.lang.String toHtml()>";
"<org.htmlparser.nodes.AbstractNode: java.lang.String toHtml()>" -> "<org.htmlparser.nodes.RemarkNode: java.lang.String toHtml(boolean)>";
"<org.htmlparser.nodes.AbstractNode: java.lang.String toHtml()>" -> "<org.htmlparser.nodes.TagNode: java.lang.String toHtml(boolean)>";
"<org.htmlparser.nodes.AbstractNode: java.lang.String toHtml()>" -> "<org.htmlparser.nodes.TextNode: java.lang.String toHtml(boolean)>";
"<org.htmlparser.nodes.RemarkNode: java.lang.String toHtml(boolean)>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<org.htmlparser.nodes.TagNode: java.lang.String toHtml(boolean)>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<org.htmlparser.nodes.TextNode: java.lang.String toHtml(boolean)>" -> "<org.htmlparser.nodes.AbstractNode: int getStartPosition()>";
"<org.htmlparser.nodes.TextNode: java.lang.String toHtml(boolean)>" -> "<org.htmlparser.nodes.AbstractNode: int getEndPosition()>";
"<org.htmlparser.nodes.TextNode: java.lang.String toHtml(boolean)>" -> "<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>";
"<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>" -> "<org.htmlparser.lexer.InputStreamSource: java.lang.String getString(int,int)>";
"<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>" -> "<org.htmlparser.lexer.StringSource: java.lang.String getString(int,int)>";
"<org.htmlparser.lexer.InputStreamSource: java.lang.String getString(int,int)>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlparser.lexer.InputStreamSource: java.lang.String getString(int,int)>" -> "<java.lang.String: void <init>(char[],int,int)>";
"<org.htmlparser.lexer.InputStreamSource: java.lang.String getString(int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.InputStreamSource: java.lang.String getString(int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.StringSource: java.lang.String getString(int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.StringSource: java.lang.String getString(int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<java.lang.String: void <init>(char[],int,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(char[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlparser.lexer.StringSource: java.lang.String getString(int,int)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.htmlparser.nodes.TagNode: java.lang.String toHtml(boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.nodes.TagNode: java.lang.String toHtml(boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.nodes.TagNode: java.lang.String toHtml(boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.nodes.TagNode: java.lang.String toHtml(boolean)>" -> "<org.htmlparser.nodes.TagNode: java.util.Vector getAttributesEx()>";
"<org.htmlparser.nodes.TagNode: java.lang.String toHtml(boolean)>" -> "<java.util.Vector: int size()>";
"<org.htmlparser.nodes.TagNode: java.lang.String toHtml(boolean)>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<org.htmlparser.nodes.TagNode: java.lang.String toHtml(boolean)>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<org.htmlparser.nodes.RemarkNode: java.lang.String toHtml(boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.nodes.RemarkNode: java.lang.String toHtml(boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.nodes.RemarkNode: java.lang.String toHtml(boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlparser.nodes.RemarkNode: java.lang.String toHtml(boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlparser.nodes.RemarkNode: java.lang.String toHtml(boolean)>" -> "<org.htmlparser.nodes.AbstractNode: int getStartPosition()>";
"<org.htmlparser.nodes.RemarkNode: java.lang.String toHtml(boolean)>" -> "<org.htmlparser.nodes.AbstractNode: int getEndPosition()>";
"<org.htmlparser.nodes.RemarkNode: java.lang.String toHtml(boolean)>" -> "<org.htmlparser.lexer.Page: java.lang.String getText(int,int)>";
"<org.htmlparser.nodes.RemarkNode: java.lang.String toHtml(boolean)>" -> "<java.lang.String: int length()>";
}
