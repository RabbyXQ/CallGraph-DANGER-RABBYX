digraph CallGraph {
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.Demo: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.XML: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.FileOutputStream: void <init>(java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.WriteAccess: void <init>(java.io.File)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.EscherDrawingGroup: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.Write: void <init>(java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.Workbook: java.lang.String getVersion()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.Demo: void displayHelp()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.Demo: void displayHelp()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.ReadWrite: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.Demo: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.Demo: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.demo.Demo: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.demo.Demo: void <clinit>()>" -> "<jxl.demo.Demo: java.lang.Class class$(java.lang.String)>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.XML: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.lang.Object: void <init>()>";
"<jxl.demo.XML: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<jxl.demo.XML: void writeXML()>";
"<jxl.demo.XML: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<jxl.demo.XML: void writeFormattedXML()>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.io.BufferedWriter: void <init>(java.io.Writer)>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.lang.Object: void <init>()>";
"<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File)>" -> "<jxl.WorkbookSettings: void <clinit>()>";
"<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File)>" -> "<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File,jxl.WorkbookSettings)>";
"<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File)>" -> "<jxl.WorkbookSettings: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<jxl.WorkbookSettings: void <init>()>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<java.io.BufferedWriter: void <init>(java.io.Writer)>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<java.lang.Object: void <init>()>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<jxl.WorkbookSettings: void <clinit>()>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<jxl.read.biff.CompoundFile: void <clinit>()>";
"<java.io.FileOutputStream: void <init>(java.lang.String)>" -> "<java.io.FileOutputStream: void finalize()>";
"<java.io.FileOutputStream: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.lang.String)>" -> "<java.io.OutputStream: void <init>()>";
"<jxl.demo.WriteAccess: void <init>(java.io.File)>" -> "<jxl.WorkbookSettings: void <clinit>()>";
"<jxl.demo.WriteAccess: void <init>(java.io.File)>" -> "<jxl.demo.WriteAccess: void display(jxl.WorkbookSettings)>";
"<jxl.demo.WriteAccess: void <init>(java.io.File)>" -> "<jxl.read.biff.BiffRecordReader: void <init>(jxl.read.biff.File)>";
"<jxl.demo.WriteAccess: void <init>(java.io.File)>" -> "<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>";
"<jxl.demo.WriteAccess: void <init>(java.io.File)>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<jxl.demo.WriteAccess: void <init>(java.io.File)>" -> "<jxl.WorkbookSettings: void <init>()>";
"<jxl.demo.WriteAccess: void <init>(java.io.File)>" -> "<java.lang.Object: void <init>()>";
"<jxl.demo.WriteAccess: void <init>(java.io.File)>" -> "<jxl.read.biff.File: void <clinit>()>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<jxl.read.biff.File: void <clinit>()>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<jxl.demo.BiffDump: void dump()>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<jxl.demo.BiffDump: void buildNameHash()>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<jxl.read.biff.BiffRecordReader: void <init>(jxl.read.biff.File)>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<jxl.WorkbookSettings: void <init>()>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<java.io.BufferedWriter: void <init>(java.io.Writer)>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<java.lang.Object: void <init>()>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<jxl.WorkbookSettings: void <clinit>()>";
"<jxl.demo.EscherDrawingGroup: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.EscherDrawingGroup: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.biff.drawing.EscherDisplay: void <init>(jxl.biff.drawing.EscherStream,java.io.BufferedWriter)>";
"<jxl.demo.EscherDrawingGroup: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void <init>(java.io.Writer)>";
"<jxl.demo.EscherDrawingGroup: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>";
"<jxl.demo.EscherDrawingGroup: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.biff.drawing.EscherDisplay: void <init>(jxl.biff.drawing.EscherStream,java.io.BufferedWriter)>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void <init>(java.io.Writer)>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.CellReferenceHelper: void getCellReference(int,int,java.lang.StringBuffer)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void <init>(java.io.Writer)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: void getCellReference(int,int,java.lang.StringBuffer)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void <init>(java.io.Writer)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Boolean: void <clinit>()>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<jxl.demo.ReadWrite: void <clinit>()>";
"<jxl.demo.Write: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.System: void exit(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.Demo: void displayHelp()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.ReadWrite: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.demo.ReadWrite: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.demo.ReadWrite: void <clinit>()>" -> "<jxl.demo.ReadWrite: java.lang.Class class$(java.lang.String)>";
"<common.Logger: common.Logger getLogger(java.lang.Class)>" -> "<common.Logger: void <clinit>()>";
"<common.Logger: common.Logger getLogger(java.lang.Class)>" -> "<common.Logger: void initializeLogger()>";
"<jxl.demo.Demo: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.demo.Demo: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void <init>(java.io.Writer)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void <init>(java.io.Writer)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<jxl.format.BorderLineStyle: void <clinit>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<jxl.format.Border: void <clinit>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<jxl.format.Pattern: void <clinit>()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<jxl.format.Colour: void <clinit>()>";
"<java.io.BufferedWriter: void <init>(java.io.Writer)>" -> "<java.io.Writer: void <init>()>";
"<java.io.BufferedWriter: void <init>(java.io.Writer)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>" -> "<java.io.Writer: void <init>()>";
"<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.WorkbookSettings: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.WorkbookSettings: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.WorkbookSettings: void <clinit>()>" -> "<jxl.WorkbookSettings: java.lang.Class class$(java.lang.String)>";
"<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File,jxl.WorkbookSettings)>" -> "<jxl.read.biff.File: void <clinit>()>";
"<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: void <init>(jxl.read.biff.File,jxl.WorkbookSettings)>";
"<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File,jxl.WorkbookSettings)>" -> "<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>";
"<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File,jxl.WorkbookSettings)>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: void <clinit>()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<jxl.biff.CountryCode: void <clinit>()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.util.Locale: java.util.Locale getDefault()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.util.Locale: void <init>(java.lang.String,java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.util.Locale: java.util.Locale getDefault()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.util.Locale: void <clinit>()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<jxl.WorkbookSettings: void <clinit>()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.util.Locale: void <clinit>()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<jxl.WorkbookSettings: void <clinit>()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.util.Locale: void <clinit>()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<java.lang.Boolean: void <clinit>()>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.CompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.CompoundFile: void readPropertySets()>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.CompoundFile: byte[] readData(int)>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.CompoundFile: void readSmallBlockDepot()>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.CompoundFile: void readBigBlockDepot()>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.BiffException: void <init>(jxl.read.biff.BiffException$BiffMessage)>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.BaseCompoundFile: void <init>()>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.BiffException: void <clinit>()>";
"<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.FileInputStream: void finalize()>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>" -> "<java.io.Writer: void <init>()>";
"<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.BaseCompoundFile: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.BaseCompoundFile: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.BaseCompoundFile: void <clinit>()>" -> "<jxl.biff.BaseCompoundFile: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.BaseCompoundFile: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<jxl.read.biff.CompoundFile: void <clinit>()>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.read.biff.CompoundFile: void <clinit>()>" -> "<jxl.read.biff.CompoundFile: java.lang.Class class$(java.lang.String)>";
"<jxl.read.biff.CompoundFile: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<java.io.FileOutputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.WriteAccess: void display(jxl.WorkbookSettings)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.demo.WriteAccess: void display(jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>";
"<jxl.demo.WriteAccess: void display(jxl.WorkbookSettings)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.WriteAccess: void display(jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.demo.WriteAccess: void display(jxl.WorkbookSettings)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.BiffRecordReader: void <init>(jxl.read.biff.File)>" -> "<java.lang.Object: void <init>()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<java.lang.System: void gc()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<jxl.read.biff.CompoundFile: void <init>(byte[],jxl.WorkbookSettings)>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<jxl.read.biff.BiffException: void <init>(jxl.read.biff.BiffException$BiffMessage)>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<java.io.InterruptedIOException: void <init>()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<java.lang.Thread: java.lang.Thread currentThread()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<java.io.InterruptedIOException: void <init>()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<java.lang.Thread: java.lang.Thread currentThread()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<java.lang.Object: void <init>()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<jxl.read.biff.CompoundFile: void <clinit>()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<jxl.read.biff.BiffException: void <clinit>()>";
"<jxl.read.biff.File: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.read.biff.File: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.read.biff.File: void <clinit>()>" -> "<jxl.read.biff.File: java.lang.Class class$(java.lang.String)>";
"<jxl.demo.BiffDump: void dump()>" -> "<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: void <init>(int)>";
"<jxl.biff.drawing.EscherDisplay: void <init>(jxl.biff.drawing.EscherStream,java.io.BufferedWriter)>" -> "<java.lang.Object: void <init>()>";
"<jxl.CellReferenceHelper: void getCellReference(int,int,java.lang.StringBuffer)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.CellReferenceHelper: void getCellReference(int,int,java.lang.StringBuffer)>" -> "<jxl.biff.CellReferenceHelper: void getCellReference(int,int,java.lang.StringBuffer)>";
"<jxl.CellType: void <clinit>()>" -> "<jxl.CellType: void <init>(java.lang.String)>";
"<jxl.CellType: void <clinit>()>" -> "<jxl.CellType: void <init>(java.lang.String)>";
"<jxl.CellType: void <clinit>()>" -> "<jxl.CellType: void <init>(java.lang.String)>";
"<jxl.CellType: void <clinit>()>" -> "<jxl.CellType: void <init>(java.lang.String)>";
"<jxl.CellType: void <clinit>()>" -> "<jxl.CellType: void <init>(java.lang.String)>";
"<jxl.CellType: void <clinit>()>" -> "<jxl.CellType: void <init>(java.lang.String)>";
"<jxl.CellType: void <clinit>()>" -> "<jxl.CellType: void <init>(java.lang.String)>";
"<jxl.CellType: void <clinit>()>" -> "<jxl.CellType: void <init>(java.lang.String)>";
"<jxl.CellType: void <clinit>()>" -> "<jxl.CellType: void <init>(java.lang.String)>";
"<jxl.CellType: void <clinit>()>" -> "<jxl.CellType: void <init>(java.lang.String)>";
"<jxl.CellType: void <clinit>()>" -> "<jxl.CellType: void <init>(java.lang.String)>";
"<jxl.biff.CellReferenceHelper: void getCellReference(int,int,java.lang.StringBuffer)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.biff.CellReferenceHelper: void getCellReference(int,int,java.lang.StringBuffer)>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<jxl.biff.CellReferenceHelper: void getCellReference(int,int,java.lang.StringBuffer)>" -> "<jxl.biff.CellReferenceHelper: void getColumnReference(int,java.lang.StringBuffer)>";
"<jxl.biff.CellReferenceHelper: void getCellReference(int,int,java.lang.StringBuffer)>" -> "<java.lang.Integer: void <clinit>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.CellReferenceHelper: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.CellReferenceHelper: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.CellReferenceHelper: void <clinit>()>" -> "<jxl.biff.CellReferenceHelper: java.lang.Class class$(java.lang.String)>";
"<java.lang.Boolean: boolean getBoolean(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.ReadWrite: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.demo.ReadWrite: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<common.Logger: void <clinit>()>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: void <init>()>";
"<common.Logger: void initializeLogger()>" -> "<common.log.SimpleLogger: void <init>()>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: void <init>()>";
"<common.Logger: void initializeLogger()>" -> "<common.log.SimpleLogger: void <init>()>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: void <init>()>";
"<common.Logger: void initializeLogger()>" -> "<common.log.SimpleLogger: void <init>()>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: void <init>()>";
"<common.Logger: void initializeLogger()>" -> "<common.log.SimpleLogger: void <init>()>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<common.Logger: void <clinit>()>";
"<common.Logger: void initializeLogger()>" -> "<common.Logger: void <clinit>()>";
"<common.Logger: void initializeLogger()>" -> "<common.Logger: void <clinit>()>";
"<common.Logger: void initializeLogger()>" -> "<common.Logger: void <clinit>()>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.System: void <clinit>()>";
"<common.Logger: void initializeLogger()>" -> "<common.log.LoggerName: void <clinit>()>";
"<java.lang.Class: java.lang.Class forName(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>" -> "<java.lang.LinkageError: void <init>()>";
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.format.Border: void <clinit>()>" -> "<jxl.format.Border: void <init>(java.lang.String)>";
"<jxl.format.Border: void <clinit>()>" -> "<jxl.format.Border: void <init>(java.lang.String)>";
"<jxl.format.Border: void <clinit>()>" -> "<jxl.format.Border: void <init>(java.lang.String)>";
"<jxl.format.Border: void <clinit>()>" -> "<jxl.format.Border: void <init>(java.lang.String)>";
"<jxl.format.Border: void <clinit>()>" -> "<jxl.format.Border: void <init>(java.lang.String)>";
"<jxl.format.Border: void <clinit>()>" -> "<jxl.format.Border: void <init>(java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.BorderLineStyle: void <clinit>()>" -> "<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Pattern: void <clinit>()>" -> "<jxl.format.Pattern: void <init>(int,java.lang.String)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<jxl.format.Colour: void <clinit>()>" -> "<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>";
"<java.io.Writer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Writer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.WorkbookSettings: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.WorkbookSettings: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.read.biff.WorkbookParser: void <init>(jxl.read.biff.File,jxl.WorkbookSettings)>" -> "<jxl.biff.FormattingRecords: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void <init>(jxl.read.biff.File,jxl.WorkbookSettings)>" -> "<java.util.HashMap: void <init>()>";
"<jxl.read.biff.WorkbookParser: void <init>(jxl.read.biff.File,jxl.WorkbookSettings)>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.read.biff.WorkbookParser: void <init>(jxl.read.biff.File,jxl.WorkbookSettings)>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.read.biff.WorkbookParser: void <init>(jxl.read.biff.File,jxl.WorkbookSettings)>" -> "<jxl.biff.FormattingRecords: void <init>(jxl.biff.Fonts)>";
"<jxl.read.biff.WorkbookParser: void <init>(jxl.read.biff.File,jxl.WorkbookSettings)>" -> "<jxl.biff.Fonts: void <init>()>";
"<jxl.read.biff.WorkbookParser: void <init>(jxl.read.biff.File,jxl.WorkbookSettings)>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.read.biff.WorkbookParser: void <init>(jxl.read.biff.File,jxl.WorkbookSettings)>" -> "<jxl.Workbook: void <init>()>";
"<jxl.read.biff.WorkbookParser: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.read.biff.WorkbookParser: void <clinit>()>" -> "<jxl.read.biff.WorkbookParser: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.CountryCode: void <clinit>()>" -> "<jxl.biff.CountryCode: java.lang.Class class$(java.lang.String)>";
"<java.util.Locale: java.util.Locale getDefault()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Locale: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.util.Locale: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<jxl.read.biff.CompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<jxl.read.biff.CompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: byte[] readData(int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.CompoundFile: byte[] readData(int)>" -> "<jxl.read.biff.BiffException: void <init>(jxl.read.biff.BiffException$BiffMessage)>";
"<jxl.read.biff.CompoundFile: byte[] readData(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.CompoundFile: byte[] readData(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.CompoundFile: byte[] readData(int)>" -> "<jxl.read.biff.BiffException: void <clinit>()>";
"<jxl.read.biff.CompoundFile: void readSmallBlockDepot()>" -> "<jxl.read.biff.CompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: void readSmallBlockDepot()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.CompoundFile: void readSmallBlockDepot()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.CompoundFile: void readSmallBlockDepot()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.CompoundFile: void readSmallBlockDepot()>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: void readBigBlockDepot()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<java.lang.Math: int min(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.read.biff.BiffException: void <init>(jxl.read.biff.BiffException$BiffMessage)>" -> "<jxl.JXLException: void <init>(java.lang.String)>";
"<jxl.biff.BaseCompoundFile: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.read.biff.BiffException: void <clinit>()>" -> "<jxl.read.biff.BiffException$BiffMessage: void <init>(java.lang.String)>";
"<jxl.read.biff.BiffException: void <clinit>()>" -> "<jxl.read.biff.BiffException$BiffMessage: void <init>(java.lang.String)>";
"<jxl.read.biff.BiffException: void <clinit>()>" -> "<jxl.read.biff.BiffException$BiffMessage: void <init>(java.lang.String)>";
"<jxl.read.biff.BiffException: void <clinit>()>" -> "<jxl.read.biff.BiffException$BiffMessage: void <init>(java.lang.String)>";
"<jxl.read.biff.BiffException: void <clinit>()>" -> "<jxl.read.biff.BiffException$BiffMessage: void <init>(java.lang.String)>";
"<jxl.read.biff.BiffException: void <clinit>()>" -> "<jxl.read.biff.BiffException$BiffMessage: void <init>(java.lang.String)>";
"<jxl.read.biff.BiffException: void <clinit>()>" -> "<jxl.read.biff.BiffException$BiffMessage: void <init>(java.lang.String)>";
"<jxl.read.biff.BiffException: void <clinit>()>" -> "<jxl.read.biff.BiffException$BiffMessage: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.BaseCompoundFile: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.BaseCompoundFile: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.read.biff.CompoundFile: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.read.biff.CompoundFile: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type$ArbitraryType: void <init>(jxl.biff.Type$1)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.Type: void <clinit>()>" -> "<jxl.biff.Type: void <init>(int)>";
"<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>" -> "<java.lang.String: void <clinit>()>";
"<jxl.biff.StringHelper: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.StringHelper: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.StringHelper: void <clinit>()>" -> "<jxl.biff.StringHelper: java.lang.Class class$(java.lang.String)>";
"<java.lang.System: void gc()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InterruptedIOException: void <init>()>" -> "<java.io.IOException: void <init>()>";
"<java.io.InterruptedIOException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.read.biff.File: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.read.biff.File: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.demo.BiffDump: void writeByte(byte,java.lang.StringBuffer)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.demo.BiffDump: void writeSixDigitValue(int,java.lang.StringBuffer)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.demo.BiffDump: void writeSixDigitValue(int,java.lang.StringBuffer)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.biff.Type: void <clinit>()>";
"<java.util.HashMap: void <init>(int)>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.CellType: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Integer: java.lang.String toString(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.CellReferenceHelper: void getColumnReference(int,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.CellReferenceHelper: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.CellReferenceHelper: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<common.log.SimpleLogger: void <init>()>" -> "<common.Logger: void <init>()>";
"<common.log.LoggerName: void <clinit>()>" -> "<common.log.LoggerName: java.lang.Class class$(java.lang.String)>";
"<java.lang.LinkageError: void <init>()>" -> "<java.lang.Error: void <init>()>";
"<java.lang.LinkageError: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.format.Border: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>" -> "<jxl.format.BorderLineStyle: void <clinit>()>";
"<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.format.BorderLineStyle: void <init>(int,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.format.Pattern: void <init>(int,java.lang.String)>" -> "<jxl.format.Pattern: void <clinit>()>";
"<jxl.format.Pattern: void <init>(int,java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.format.Pattern: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.format.Pattern: void <init>(int,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>" -> "<jxl.format.RGB: void <init>(int,int,int)>";
"<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.format.Colour: void <init>(int,java.lang.String,int,int,int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.FormattingRecords: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.FormattingRecords: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.FormattingRecords: void <clinit>()>" -> "<jxl.biff.FormattingRecords: java.lang.Class class$(java.lang.String)>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.FormattingRecords: void <init>(jxl.biff.Fonts)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.FormattingRecords: void <init>(jxl.biff.Fonts)>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.biff.FormattingRecords: void <init>(jxl.biff.Fonts)>" -> "<java.util.HashMap: void <init>(int)>";
"<jxl.biff.FormattingRecords: void <init>(jxl.biff.Fonts)>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.biff.Fonts: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.Fonts: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.Workbook: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.read.biff.WorkbookParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.read.biff.WorkbookParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>" -> "<jxl.biff.CountryCode: void <clinit>()>";
"<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.CountryCode: void <init>(int,java.lang.String,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.CountryCode: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.CountryCode: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>" -> "<jxl.biff.BaseCompoundFile: common.Logger access$000()>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>" -> "<java.lang.Object: void <init>()>";
"<jxl.JXLException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<jxl.read.biff.BiffException$BiffMessage: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.Type$ArbitraryType: void <init>(jxl.biff.Type$1)>" -> "<jxl.biff.Type$ArbitraryType: void <init>()>";
"<jxl.biff.Type: void <init>(int)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.Type: void <init>(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.Type: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.Type: void <init>(int)>" -> "<java.lang.System: void <clinit>()>";
"<java.lang.String: void <init>(byte[],java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[],java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.StringHelper: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.StringHelper: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.io.IOException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.BiffDump: void writeByte(byte,java.lang.StringBuffer)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.demo.BiffDump: void writeByte(byte,java.lang.StringBuffer)>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<jxl.demo.BiffDump: void writeSixDigitValue(int,java.lang.StringBuffer)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.demo.BiffDump: void writeSixDigitValue(int,java.lang.StringBuffer)>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<java.lang.Integer: java.lang.String toHexString(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<common.Logger: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<common.log.LoggerName: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<common.log.LoggerName: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.lang.Error: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.format.RGB: void <init>(int,int,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.FormattingRecords: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.FormattingRecords: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.BaseCompoundFile: common.Logger access$000()>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.Type$ArbitraryType: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.CellReferenceHelper: void getColumnReference(int,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.biff.CellReferenceHelper: void getColumnReference(int,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.biff.CellReferenceHelper: void getColumnReference(int,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: int length()>";
"<jxl.biff.CellReferenceHelper: void getColumnReference(int,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: char charAt(int)>";
"<java.lang.StringBuffer: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: char charAt(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.BiffDump: void writeByte(byte,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.demo.BiffDump: void writeByte(byte,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.BiffDump: void writeSixDigitValue(int,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.demo.BiffDump: void writeSixDigitValue(int,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<java.lang.Thread: boolean isInterrupted()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<java.lang.Thread: boolean isInterrupted()>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.String: int length()>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<java.lang.String: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<common.Logger: void initializeLogger()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.demo.BiffDump: void buildNameHash()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<jxl.read.biff.CompoundFile: byte[] getStream(java.lang.String)>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<jxl.read.biff.CompoundFile: int getNumberOfPropertySets()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<jxl.read.biff.CompoundFile: byte[] getStream(java.lang.String)>";
"<jxl.read.biff.CompoundFile: byte[] getStream(java.lang.String)>" -> "<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage findPropertyStorage(java.lang.String,jxl.biff.BaseCompoundFile$PropertyStorage)>";
"<jxl.read.biff.CompoundFile: byte[] getStream(java.lang.String)>" -> "<jxl.read.biff.CompoundFile: byte[] getSmallBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>";
"<jxl.read.biff.CompoundFile: byte[] getStream(java.lang.String)>" -> "<jxl.read.biff.CompoundFile: byte[] getBigBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>";
"<jxl.read.biff.CompoundFile: byte[] getStream(java.lang.String)>" -> "<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(java.lang.String)>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage findPropertyStorage(java.lang.String,jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(int)>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage findPropertyStorage(java.lang.String,jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage findPropertyStorage(java.lang.String,jxl.biff.BaseCompoundFile$PropertyStorage)>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage findPropertyStorage(java.lang.String,jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(int)>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage findPropertyStorage(java.lang.String,jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(int)>";
"<jxl.read.biff.CompoundFile: byte[] getSmallBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.CompoundFile: byte[] getSmallBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.read.biff.CompoundFile: byte[] getSmallBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.CompoundFile: byte[] getSmallBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.CompoundFile: byte[] getSmallBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<jxl.read.biff.CompoundFile: byte[] readData(int)>";
"<jxl.read.biff.CompoundFile: byte[] getSmallBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: byte[] getSmallBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<jxl.read.biff.CompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: byte[] getBigBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.CompoundFile: byte[] getBigBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.CompoundFile: byte[] getBigBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: byte[] getBigBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<jxl.read.biff.CompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(java.lang.String)>" -> "<jxl.read.biff.CompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(java.lang.String)>" -> "<jxl.read.biff.BiffException: void <init>(jxl.read.biff.BiffException$BiffMessage)>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(java.lang.String)>" -> "<jxl.read.biff.BiffException: void <clinit>()>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(java.lang.String)>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.read.biff.CompoundFile: byte[] getSmallBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.CompoundFile: byte[] getStream(java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<jxl.biff.CountryCode: java.lang.String getCode()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<jxl.biff.CountryCode: java.lang.String getCode()>";
"<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: void parse()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BiffException: void <init>(jxl.read.biff.BiffException$BiffMessage)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.ButtonPropertySetRecord: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.drawing.DrawingGroup: void <init>(jxl.biff.drawing.Origin)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.drawing.MsoDrawingGroupRecord: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.CountryRecord: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.ProtectRecord: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.ExternalNameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.SupbookRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.CodepageRecord: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.read.biff.ExternalSheetRecord$Biff7)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.BoundsheetRecord$Biff7)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<common.Assert: void verify(boolean,java.lang.String)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<common.Assert: void verify(boolean,java.lang.String)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.NineteenFourRecord: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.PaletteRecord: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FontRecord$Biff7)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.PasswordException: void <init>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BiffException: void <init>(jxl.read.biff.BiffException$BiffMessage)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BiffException: void <init>(jxl.read.biff.BiffException$BiffMessage)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.BuiltInName: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.WorkbookParser: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.WorkbookParser: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.SheetImpl: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.SheetImpl: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BiffException: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.ButtonPropertySetRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.drawing.DrawingGroup: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.CountryRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.ExternalNameRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.SupbookRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.CodepageRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.ExternalSheetRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.ExternalSheetRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BoundsheetRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BoundsheetRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.FormatRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.FormatRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.NameRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.NameRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BiffException: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BiffException: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BiffException: void <clinit>()>";
"<jxl.read.biff.BOFRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.read.biff.BOFRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.read.biff.BOFRecord: void <clinit>()>" -> "<jxl.read.biff.BOFRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>" -> "<java.lang.Object: void <init>()>";
"<jxl.read.biff.BOFRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.BOFRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.BOFRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.ButtonPropertySetRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.biff.drawing.DrawingGroup: void <init>(jxl.biff.drawing.Origin)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void <init>(jxl.biff.drawing.Origin)>" -> "<java.util.HashMap: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: void <init>(jxl.biff.drawing.Origin)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: void <init>(jxl.biff.drawing.Origin)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.MsoDrawingGroupRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.CountryRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.CountryRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.CountryRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.ProtectRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.ProtectRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.ExternalNameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.read.biff.ExternalNameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>";
"<jxl.read.biff.ExternalNameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: java.lang.String getUnicodeString(byte[],int,int)>";
"<jxl.read.biff.ExternalNameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.ExternalNameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.ExternalNameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.read.biff.SupbookRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.read.biff.SupbookRecord: void <clinit>()>";
"<jxl.read.biff.SupbookRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>";
"<jxl.read.biff.SupbookRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.SupbookRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.SupbookRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.read.biff.SupbookRecord: void <clinit>()>";
"<jxl.read.biff.SupbookRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.read.biff.SupbookRecord: void <clinit>()>";
"<jxl.read.biff.SupbookRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.read.biff.SupbookRecord: void <clinit>()>";
"<jxl.read.biff.SupbookRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.read.biff.SupbookRecord: void <clinit>()>";
"<jxl.read.biff.CodepageRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.CodepageRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.read.biff.ExternalSheetRecord$Biff7)>" -> "<jxl.read.biff.ExternalSheetRecord: void <clinit>()>";
"<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.read.biff.ExternalSheetRecord$Biff7)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.read.biff.ExternalSheetRecord: void <clinit>()>";
"<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.read.biff.ExternalSheetRecord$XTI: void <init>(int,int,int)>";
"<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.BoundsheetRecord$Biff7)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.BoundsheetRecord$Biff7)>" -> "<java.lang.String: void <init>(byte[])>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.BoundsheetRecord$Biff7)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.BoundsheetRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.BoundsheetRecord$Biff7)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.BoundsheetRecord$Biff7)>" -> "<java.lang.String: void <clinit>()>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record)>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record)>" -> "<java.lang.String: void <init>(byte[])>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record)>" -> "<java.lang.String: void <clinit>()>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record)>" -> "<java.lang.String: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>" -> "<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>";
"<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<common.Assert: void verify(boolean,java.lang.String)>" -> "<common.AssertionFailed: void <init>(java.lang.String)>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<jxl.biff.FormatRecord: void <clinit>()>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<java.lang.String: void <init>(byte[])>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<jxl.biff.StringHelper: java.lang.String getUnicodeString(byte[],int,int)>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<java.lang.String: void <clinit>()>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.read.biff.NineteenFourRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.biff.PaletteRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FontRecord$Biff7)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FontRecord$Biff7)>" -> "<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FontRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FontRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FontRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FontRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FontRecord$Biff7)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: java.lang.String getUnicodeString(byte[],int,int)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.read.biff.NameRecord$NameRange: void <init>(jxl.read.biff.NameRecord,int,int,int,int,int)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.read.biff.NameRecord$NameRange: void <init>(jxl.read.biff.NameRecord,int,int,int,int,int)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.read.biff.NameRecord$NameRange: void <init>(jxl.read.biff.NameRecord,int,int,int,int,int)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.read.biff.NameRecord: void <clinit>()>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.BuiltInName: void <clinit>()>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.read.biff.NameRecord$NameRange: void <init>(jxl.read.biff.NameRecord,int,int,int,int,int)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.read.biff.NameRecord$NameRange: void <init>(jxl.read.biff.NameRecord,int,int,int,int,int)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.read.biff.NameRecord$NameRange: void <init>(jxl.read.biff.NameRecord,int,int,int,int,int)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.BuiltInName: jxl.biff.BuiltInName getBuiltInName(int)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.read.biff.NameRecord: void <clinit>()>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.read.biff.PasswordException: void <init>()>" -> "<jxl.read.biff.BiffException: void <clinit>()>";
"<jxl.read.biff.PasswordException: void <init>()>" -> "<jxl.read.biff.BiffException: void <init>(jxl.read.biff.BiffException$BiffMessage)>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.SSTRecord: void readStrings(byte[],int,jxl.WorkbookSettings)>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<java.lang.String: void <clinit>()>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInName: void <clinit>()>" -> "<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>";
"<jxl.read.biff.SheetImpl: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.read.biff.SheetImpl: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.read.biff.SheetImpl: void <clinit>()>" -> "<jxl.read.biff.SheetImpl: java.lang.Class class$(java.lang.String)>";
"<jxl.read.biff.ButtonPropertySetRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.read.biff.ButtonPropertySetRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.read.biff.ButtonPropertySetRecord: void <clinit>()>" -> "<jxl.read.biff.ButtonPropertySetRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.Origin: void <clinit>()>" -> "<jxl.biff.drawing.Origin: void <init>()>";
"<jxl.biff.drawing.Origin: void <clinit>()>" -> "<jxl.biff.drawing.Origin: void <init>()>";
"<jxl.biff.drawing.Origin: void <clinit>()>" -> "<jxl.biff.drawing.Origin: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.DrawingGroup: void <clinit>()>" -> "<jxl.biff.drawing.DrawingGroup: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.WritableRecordData: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.WritableRecordData: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.WritableRecordData: void <clinit>()>" -> "<jxl.biff.WritableRecordData: java.lang.Class class$(java.lang.String)>";
"<jxl.read.biff.CountryRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.read.biff.CountryRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.read.biff.CountryRecord: void <clinit>()>" -> "<jxl.read.biff.CountryRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.read.biff.ExternalNameRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.read.biff.ExternalNameRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.read.biff.ExternalNameRecord: void <clinit>()>" -> "<jxl.read.biff.ExternalNameRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.read.biff.SupbookRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.read.biff.SupbookRecord: void <clinit>()>" -> "<jxl.read.biff.SupbookRecord$Type: void <init>(jxl.read.biff.SupbookRecord$1)>";
"<jxl.read.biff.SupbookRecord: void <clinit>()>" -> "<jxl.read.biff.SupbookRecord$Type: void <init>(jxl.read.biff.SupbookRecord$1)>";
"<jxl.read.biff.SupbookRecord: void <clinit>()>" -> "<jxl.read.biff.SupbookRecord$Type: void <init>(jxl.read.biff.SupbookRecord$1)>";
"<jxl.read.biff.SupbookRecord: void <clinit>()>" -> "<jxl.read.biff.SupbookRecord$Type: void <init>(jxl.read.biff.SupbookRecord$1)>";
"<jxl.read.biff.SupbookRecord: void <clinit>()>" -> "<jxl.read.biff.SupbookRecord$Type: void <init>(jxl.read.biff.SupbookRecord$1)>";
"<jxl.read.biff.SupbookRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.read.biff.SupbookRecord: void <clinit>()>" -> "<jxl.read.biff.SupbookRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.read.biff.CodepageRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.read.biff.CodepageRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.read.biff.CodepageRecord: void <clinit>()>" -> "<jxl.read.biff.CodepageRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.read.biff.ExternalSheetRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.read.biff.ExternalSheetRecord: void <clinit>()>" -> "<jxl.read.biff.ExternalSheetRecord$Biff7: void <init>(jxl.read.biff.ExternalSheetRecord$1)>";
"<jxl.read.biff.ExternalSheetRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.read.biff.ExternalSheetRecord: void <clinit>()>" -> "<jxl.read.biff.ExternalSheetRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.read.biff.BoundsheetRecord: void <clinit>()>" -> "<jxl.read.biff.BoundsheetRecord$Biff7: void <init>(jxl.read.biff.BoundsheetRecord$1)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<jxl.biff.XFRecord$XFType: void <init>(jxl.biff.XFRecord$1)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<jxl.biff.XFRecord$XFType: void <init>(jxl.biff.XFRecord$1)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<jxl.biff.XFRecord$BiffType: void <init>(jxl.biff.XFRecord$1)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<jxl.biff.XFRecord$BiffType: void <init>(jxl.biff.XFRecord$1)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DateFormat: java.text.DateFormat getDateInstance(int)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<java.text.DateFormat: java.text.DateFormat getDateInstance(int)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<jxl.biff.XFRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.XFRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.FormatRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.FormatRecord: void <clinit>()>" -> "<jxl.biff.FormatRecord$BiffType: void <init>(jxl.biff.FormatRecord$1)>";
"<jxl.biff.FormatRecord: void <clinit>()>" -> "<jxl.biff.FormatRecord$BiffType: void <init>(jxl.biff.FormatRecord$1)>";
"<jxl.biff.FormatRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.FormatRecord: void <clinit>()>" -> "<jxl.biff.FormatRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.FormatRecord: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<jxl.biff.FormatRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.FontRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.FontRecord: void <clinit>()>" -> "<jxl.biff.FontRecord$Biff7: void <init>(jxl.biff.FontRecord$1)>";
"<jxl.biff.FontRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.FontRecord: void <clinit>()>" -> "<jxl.biff.FontRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.FontRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.read.biff.NameRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.read.biff.NameRecord: void <clinit>()>" -> "<jxl.read.biff.NameRecord$Biff7: void <init>(jxl.read.biff.NameRecord$1)>";
"<jxl.read.biff.NameRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.read.biff.NameRecord: void <clinit>()>" -> "<jxl.read.biff.NameRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.read.biff.Record: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.read.biff.Record: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.read.biff.Record: void <clinit>()>" -> "<jxl.read.biff.Record: java.lang.Class class$(java.lang.String)>";
"<jxl.read.biff.BOFRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.read.biff.BOFRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.WritableRecordData: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>";
"<jxl.biff.StringHelper: java.lang.String getUnicodeString(byte[],int,int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.StringHelper: java.lang.String getUnicodeString(byte[],int,int)>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<jxl.biff.StringHelper: java.lang.String getUnicodeString(byte[],int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.StringHelper: java.lang.String getUnicodeString(byte[],int,int)>" -> "<java.lang.String: void <clinit>()>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: java.lang.String getUnicodeString(byte[],int,int)>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.SupbookRecord: java.lang.String getUnicodeEncodedFilename(byte[],int,int)>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: java.lang.String getUnicodeString(byte[],int,int)>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.SupbookRecord: java.lang.String getEncodedFilename(byte[],int,int)>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.read.biff.SupbookRecord: void readExternal(byte[],jxl.WorkbookSettings)>" -> "<java.lang.String: void <clinit>()>";
"<jxl.read.biff.ExternalSheetRecord$XTI: void <init>(int,int,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>" -> "<java.lang.Object: void <init>()>";
"<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<common.AssertionFailed: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.read.biff.NameRecord$NameRange: void <init>(jxl.read.biff.NameRecord,int,int,int,int,int)>" -> "<java.lang.Object: void <init>()>";
"<common.Assert: void verify(boolean)>" -> "<common.AssertionFailed: void <init>()>";
"<jxl.biff.BuiltInName: jxl.biff.BuiltInName getBuiltInName(int)>" -> "<jxl.biff.BuiltInName: void <clinit>()>";
"<jxl.read.biff.SSTRecord: void readStrings(byte[],int,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.read.biff.SSTRecord: void readStrings(byte[],int,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: java.lang.String getUnicodeString(byte[],int,int)>";
"<jxl.read.biff.SSTRecord: void readStrings(byte[],int,jxl.WorkbookSettings)>" -> "<common.Assert: void verify(boolean,java.lang.String)>";
"<jxl.read.biff.SSTRecord: void readStrings(byte[],int,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>";
"<jxl.read.biff.SSTRecord: void readStrings(byte[],int,jxl.WorkbookSettings)>" -> "<jxl.read.biff.SSTRecord: int getChars(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>";
"<jxl.read.biff.SSTRecord: void readStrings(byte[],int,jxl.WorkbookSettings)>" -> "<jxl.read.biff.SSTRecord$BooleanHolder: void <init>(jxl.read.biff.SSTRecord$1)>";
"<jxl.read.biff.SSTRecord: void readStrings(byte[],int,jxl.WorkbookSettings)>" -> "<jxl.read.biff.SSTRecord$ByteArrayHolder: void <init>(jxl.read.biff.SSTRecord$1)>";
"<jxl.read.biff.SSTRecord: void readStrings(byte[],int,jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.read.biff.SSTRecord: void readStrings(byte[],int,jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.SSTRecord: void readStrings(byte[],int,jxl.WorkbookSettings)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.SSTRecord: void readStrings(byte[],int,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>" -> "<jxl.biff.BuiltInName: void <clinit>()>";
"<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.BuiltInName: void <init>(java.lang.String,int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.SheetImpl: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.read.biff.SheetImpl: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.read.biff.ButtonPropertySetRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.read.biff.ButtonPropertySetRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.Origin: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.DrawingGroup: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.WritableRecordData: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.WritableRecordData: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.read.biff.CountryRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.read.biff.CountryRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.read.biff.ExternalNameRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.read.biff.ExternalNameRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.read.biff.SupbookRecord$Type: void <init>(jxl.read.biff.SupbookRecord$1)>" -> "<jxl.read.biff.SupbookRecord$Type: void <init>()>";
"<jxl.read.biff.SupbookRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.read.biff.SupbookRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.read.biff.CodepageRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.read.biff.CodepageRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.read.biff.ExternalSheetRecord$Biff7: void <init>(jxl.read.biff.ExternalSheetRecord$1)>" -> "<jxl.read.biff.ExternalSheetRecord$Biff7: void <init>()>";
"<jxl.read.biff.ExternalSheetRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.read.biff.ExternalSheetRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.read.biff.BoundsheetRecord$Biff7: void <init>(jxl.read.biff.BoundsheetRecord$1)>" -> "<jxl.read.biff.BoundsheetRecord$Biff7: void <init>()>";
"<jxl.biff.XFRecord$XFType: void <init>(jxl.biff.XFRecord$1)>" -> "<jxl.biff.XFRecord$XFType: void <init>()>";
"<jxl.biff.XFRecord$BiffType: void <init>(jxl.biff.XFRecord$1)>" -> "<jxl.biff.XFRecord$BiffType: void <init>()>";
"<java.text.DecimalFormat: void <init>(java.lang.String)>" -> "<java.text.NumberFormat: void <init>()>";
"<java.text.DecimalFormat: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.SimpleDateFormat: void <init>(java.lang.String)>" -> "<java.text.DateFormat: void <init>()>";
"<java.text.SimpleDateFormat: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.DateFormat: java.text.DateFormat getDateInstance(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.XFRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.FormatRecord$BiffType: void <init>(jxl.biff.FormatRecord$1)>" -> "<jxl.biff.FormatRecord$BiffType: void <init>()>";
"<jxl.biff.FormatRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.FormatRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.FontRecord$Biff7: void <init>(jxl.biff.FontRecord$1)>" -> "<jxl.biff.FontRecord$Biff7: void <init>()>";
"<jxl.biff.FontRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.FontRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.read.biff.NameRecord$Biff7: void <init>(jxl.read.biff.NameRecord$1)>" -> "<jxl.read.biff.NameRecord$Biff7: void <init>()>";
"<jxl.read.biff.NameRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.read.biff.NameRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.read.biff.Record: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.read.biff.Record: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getUnicodeEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.read.biff.SupbookRecord: java.lang.String getUnicodeEncodedFilename(byte[],int,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getUnicodeEncodedFilename(byte[],int,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<common.AssertionFailed: void <init>()>" -> "<java.lang.RuntimeException: void <init>()>";
"<jxl.read.biff.SSTRecord: int getChars(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.SSTRecord: int getChars(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<jxl.read.biff.SSTRecord: int getContinuedString(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>";
"<jxl.read.biff.SSTRecord: int getChars(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.SSTRecord: int getChars(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.SSTRecord: int getChars(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.SSTRecord$BooleanHolder: void <init>(jxl.read.biff.SSTRecord$1)>" -> "<jxl.read.biff.SSTRecord$BooleanHolder: void <init>()>";
"<jxl.read.biff.SSTRecord$ByteArrayHolder: void <init>(jxl.read.biff.SSTRecord$1)>" -> "<jxl.read.biff.SSTRecord$ByteArrayHolder: void <init>()>";
"<jxl.read.biff.SupbookRecord$Type: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.read.biff.ExternalSheetRecord$Biff7: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.read.biff.BoundsheetRecord$Biff7: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.XFRecord$XFType: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.XFRecord$BiffType: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.text.NumberFormat: void <init>()>" -> "<java.text.Format: void <init>()>";
"<java.text.NumberFormat: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.DateFormat: void <init>()>" -> "<java.text.Format: void <init>()>";
"<java.text.DateFormat: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.FormatRecord$BiffType: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.FontRecord$Biff7: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.read.biff.NameRecord$Biff7: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.read.biff.SSTRecord: int getContinuedString(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.SSTRecord: int getContinuedString(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.read.biff.SSTRecord: int getContinuedString(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.SSTRecord: int getContinuedString(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.read.biff.SSTRecord: int getContinuedString(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.read.biff.SSTRecord: int getContinuedString(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.SSTRecord: int getContinuedString(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.read.biff.SSTRecord: int getContinuedString(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.SSTRecord: int getContinuedString(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<common.Assert: void verify(boolean,java.lang.String)>";
"<jxl.read.biff.SSTRecord: int getContinuedString(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.SSTRecord: int getContinuedString(byte[],jxl.read.biff.SSTRecord$ByteArrayHolder,int,int,jxl.read.biff.SSTRecord$BooleanHolder,int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.SSTRecord$BooleanHolder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.read.biff.SSTRecord$ByteArrayHolder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.text.Format: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.text.Format: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<common.AssertionFailed: void <init>()>" -> "<java.lang.Throwable: void printStackTrace()>";
"<java.lang.Throwable: void printStackTrace()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.read.biff.SupbookRecord: java.lang.String getUnicodeEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getUnicodeEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getUnicodeEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getUnicodeEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getUnicodeEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getUnicodeEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.read.biff.SupbookRecord: java.lang.String getUnicodeEncodedFilename(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.biff.BuiltInName: jxl.biff.BuiltInName getBuiltInName(int)>" -> "<jxl.biff.BuiltInName: int getValue()>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FontRecord$Biff7)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.NineteenFourRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<java.lang.String: int indexOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<java.lang.String: java.lang.String toUpperCase()>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<java.lang.String: int indexOf(int)>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<java.lang.String: int indexOf(int)>";
"<java.lang.String: java.lang.String toUpperCase()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: int indexOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>" -> "<java.text.DecimalFormat: java.lang.Object clone()>";
"<java.text.DecimalFormat: java.lang.Object clone()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.BoundsheetRecord$Biff7)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.SupbookRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.ExternalNameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.ProtectRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.BOFRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>" -> "<jxl.read.biff.BOFRecord: boolean isChart()>";
"<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>" -> "<jxl.read.biff.BOFRecord: int getLength()>";
"<jxl.read.biff.BOFRecord: int getLength()>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.SheetImpl: void setName(java.lang.String)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.SheetImpl: void setHidden(boolean)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.SheetImpl: void setName(java.lang.String)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.SheetImpl: void setHidden(boolean)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.ProtectRecord: boolean isProtected()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.ExternalNameRecord: boolean isAddInFunction()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.ExternalNameRecord: java.lang.String getName()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.CodepageRecord: int getCharacterSet()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BoundsheetRecord: boolean isSheet()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BoundsheetRecord: boolean isChart()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BoundsheetRecord: java.lang.String getName()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BoundsheetRecord: boolean isHidden()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BoundsheetRecord: java.lang.String getName()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BoundsheetRecord: boolean isHidden()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.NineteenFourRecord: boolean is1904()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.NameRecord: boolean isGlobal()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.NameRecord: java.lang.String getName()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.NameRecord: jxl.biff.BuiltInName getBuiltInName()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.NameRecord: jxl.biff.BuiltInName getBuiltInName()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.NameRecord: int getSheetRef()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: void clear()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: int size()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: int size()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<java.util.ArrayList: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<java.util.ArrayList: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: boolean isWorkbookGlobals()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: boolean isBiff8()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: boolean isBiff8()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: boolean isBiff8()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: boolean isBiff8()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: boolean isBiff8()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: boolean isBiff8()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: boolean isBiff8()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: boolean isBiff7()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: boolean isWorksheet()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: boolean isChart()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: boolean isBiff8()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.BOFRecord: boolean isBiff7()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.WorkbookParser: int getNumberOfSheets()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.WorkbookParser: int getNumberOfSheets()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.WorkbookParser: void addSheet(jxl.Sheet)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.WorkbookParser: int getNumberOfSheets()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.WorkbookParser: void addSheet(jxl.Sheet)>";
"<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>" -> "<jxl.read.biff.WorkbookParser: jxl.WorkbookSettings getSettings()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.MsoDrawingGroupRecord)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.drawing.DrawingGroup: void add(jxl.read.biff.Record)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.MsoDrawingGroupRecord)>" -> "<jxl.biff.drawing.DrawingGroup: void addData(byte[])>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.read.biff.Record)>" -> "<jxl.biff.drawing.DrawingGroup: void addData(byte[])>";
"<jxl.biff.drawing.DrawingGroup: void addData(byte[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void addData(byte[])>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.drawing.DrawingGroup: void addData(byte[])>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.drawing.DrawingGroup: void addData(byte[])>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.drawing.DrawingGroup: void addData(byte[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.MsoDrawingGroupRecord)>" -> "<jxl.biff.drawing.MsoDrawingGroupRecord: byte[] getData()>";
"<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File,jxl.WorkbookSettings)>" -> "<java.io.FileInputStream: void close()>";
"<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File,jxl.WorkbookSettings)>" -> "<java.io.FileInputStream: void close()>";
"<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File,jxl.WorkbookSettings)>" -> "<java.io.FileInputStream: void close()>";
"<java.io.FileInputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.io.BufferedWriter: void close()>";
"<java.io.Writer: void write(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedWriter: void newLine()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedWriter: void flush()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedWriter: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.XML: void writeXML()>" -> "<java.io.BufferedWriter: void close()>";
"<common.Logger: void initializeLogger()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<common.Logger: void initializeLogger()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<common.Logger: void initializeLogger()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<common.Logger: void initializeLogger()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<common.log.SimpleLogger: void warn(java.lang.Object)>" -> "<java.lang.System: void <clinit>()>";
"<common.Logger: common.Logger getLogger(java.lang.Class)>" -> "<common.log.SimpleLogger: common.Logger getLoggerImpl(java.lang.Class)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.read.biff.ExternalSheetRecord$Biff7)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,byte[])>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(java.lang.String)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.read.biff.CompoundFile: byte[] getBigBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.read.biff.CompoundFile: byte[] getSmallBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.read.biff.CompoundFile: void readSmallBlockDepot()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object,java.lang.Throwable)>";
"<jxl.WorkbookSettings: void <init>()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object,java.lang.Throwable)>";
"<common.log.SimpleLogger: void warn(java.lang.Object,java.lang.Throwable)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<common.log.SimpleLogger: void setSuppressWarnings(boolean)>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<common.log.SimpleLogger: void info(java.lang.Object)>";
"<jxl.demo.ReadWrite: void <init>(java.lang.String,java.lang.String)>" -> "<common.log.SimpleLogger: void info(java.lang.Object)>";
"<common.log.SimpleLogger: void info(java.lang.Object)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void close()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.biff.CellReferenceHelper: void getCellReference(int,int,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.CellReferenceHelper: void getColumnReference(int,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void close()>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.biff.drawing.EscherDisplay: void display()>";
"<jxl.biff.drawing.EscherDisplay: void display()>" -> "<jxl.biff.drawing.EscherRecordData: void <clinit>()>";
"<jxl.biff.drawing.EscherDisplay: void display()>" -> "<jxl.biff.drawing.EscherDisplay: void displayContainer(jxl.biff.drawing.EscherContainer,int)>";
"<jxl.biff.drawing.EscherDisplay: void display()>" -> "<jxl.biff.drawing.EscherContainer: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherDisplay: void display()>" -> "<jxl.biff.drawing.EscherRecordData: void <init>(jxl.biff.drawing.EscherStream,int)>";
"<jxl.biff.drawing.EscherDisplay: void display()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherDisplay: void display()>" -> "<jxl.biff.drawing.EscherContainer: void <clinit>()>";
"<jxl.biff.drawing.EscherRecordData: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.EscherRecordData: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.EscherRecordData: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordData: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayContainer(jxl.biff.drawing.EscherContainer,int)>" -> "<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>";
"<jxl.biff.drawing.EscherDisplay: void displayContainer(jxl.biff.drawing.EscherContainer,int)>" -> "<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>";
"<jxl.biff.drawing.EscherDisplay: void displayContainer(jxl.biff.drawing.EscherContainer,int)>" -> "<jxl.biff.drawing.EscherDisplay: void displayContainer(jxl.biff.drawing.EscherContainer,int)>";
"<jxl.biff.drawing.EscherContainer: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherRecord: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.biff.drawing.EscherRecordData: void <init>(jxl.biff.drawing.EscherStream,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.EscherRecordData: void <init>(jxl.biff.drawing.EscherStream,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.drawing.EscherRecordData: void <init>(jxl.biff.drawing.EscherStream,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.EscherRecordData: void <init>(jxl.biff.drawing.EscherStream,int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.EscherRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.EscherRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.EscherRecord: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.EscherContainer: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.EscherContainer: void <clinit>()>" -> "<jxl.biff.drawing.EscherContainer: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.EscherContainer: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.EscherRecordData: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.EscherRecordData: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.lang.Integer: java.lang.String toString(int,int)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<jxl.biff.drawing.EscherDisplay: void indent(int)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.EscherRecord: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.EscherRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.EscherRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.EscherContainer: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.EscherContainer: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.lang.Integer: java.lang.String toString(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecordType: void <init>(int)>";
"<jxl.biff.drawing.EscherRecordType: void <init>(int)>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.EscherRecordType: void <init>(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.drawing.EscherRecordType: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.EscherRecordType: void <init>(int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.drawing.EscherDisplay: void displayContainer(jxl.biff.drawing.EscherContainer,int)>" -> "<jxl.biff.drawing.EscherContainer: jxl.biff.drawing.EscherRecord[] getChildren()>";
"<jxl.biff.drawing.EscherContainer: jxl.biff.drawing.EscherRecord[] getChildren()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: jxl.biff.drawing.EscherRecord[] getChildren()>" -> "<jxl.biff.drawing.EscherContainer: void initialize()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecordData: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.ClientTextBox: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.SplitMenuColors: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.Opt: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.ClientData: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.ClientAnchor: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.Sp: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.Spgr: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.SpContainer: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.SpgrContainer: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.BStoreContainer: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.Dg: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.Dgg: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecordData: void <init>(jxl.biff.drawing.EscherStream,int)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.ClientTextBox: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.Opt: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.BlipStoreEntry: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.ClientData: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.ClientAnchor: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.Sp: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherContainer: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherContainer: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.SpgrContainer: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherContainer: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.BStoreContainer: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.Dgg: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherRecord: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.ClientTextBox: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.SplitMenuColors: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.Opt: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.Opt: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.Opt: void readProperties()>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.BlipType: void <clinit>()>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.BlipType: jxl.biff.drawing.BlipType getType(int)>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.ClientData: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.ClientAnchor: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.ClientAnchor: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.ClientAnchor: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.ClientAnchor: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.ClientAnchor: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.ClientAnchor: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.ClientAnchor: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.ClientAnchor: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.ClientAnchor: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.ClientAnchor: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.Sp: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.Sp: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.drawing.Sp: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.drawing.Spgr: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.SpContainer: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherContainer: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.SpgrContainer: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherContainer: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.BStoreContainer: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherContainer: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.Dg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.Dg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.drawing.Dg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.drawing.Dgg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.Dgg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.Dgg$Cluster: void <init>(int,int)>";
"<jxl.biff.drawing.Dgg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.Dgg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.Dgg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.drawing.Dgg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.drawing.Dgg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.drawing.Dgg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.drawing.Dgg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.biff.drawing.EscherAtom: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.EscherAtom: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.EscherAtom: void <clinit>()>" -> "<jxl.biff.drawing.EscherAtom: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.EscherAtom: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.ClientTextBox: void <clinit>()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.ClientTextBox: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.ClientTextBox: void <clinit>()>" -> "<jxl.biff.drawing.ClientTextBox: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.ClientTextBox: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.ClientTextBox: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.Opt: void <clinit>()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.Opt: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.Opt: void <clinit>()>" -> "<jxl.biff.drawing.Opt: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.Opt: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.Opt: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.BlipStoreEntry: void <clinit>()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.BlipStoreEntry: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.BlipStoreEntry: void <clinit>()>" -> "<jxl.biff.drawing.BlipStoreEntry: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.BlipStoreEntry: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.BlipStoreEntry: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.ClientData: void <clinit>()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.ClientData: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.ClientData: void <clinit>()>" -> "<jxl.biff.drawing.ClientData: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.ClientData: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.ClientData: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.ClientAnchor: void <clinit>()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.ClientAnchor: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.ClientAnchor: void <clinit>()>" -> "<jxl.biff.drawing.ClientAnchor: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.ClientAnchor: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.ClientAnchor: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.Sp: void <clinit>()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.Sp: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.Sp: void <clinit>()>" -> "<jxl.biff.drawing.Sp: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.Sp: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.Sp: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.SpgrContainer: void <clinit>()>" -> "<jxl.biff.drawing.EscherContainer: void <clinit>()>";
"<jxl.biff.drawing.SpgrContainer: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.SpgrContainer: void <clinit>()>" -> "<jxl.biff.drawing.SpgrContainer: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.SpgrContainer: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.SpgrContainer: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.BStoreContainer: void <clinit>()>" -> "<jxl.biff.drawing.EscherContainer: void <clinit>()>";
"<jxl.biff.drawing.BStoreContainer: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.BStoreContainer: void <clinit>()>" -> "<jxl.biff.drawing.BStoreContainer: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.BStoreContainer: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.BStoreContainer: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.Dgg: void <clinit>()>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.Dgg: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.Dgg: void <clinit>()>" -> "<jxl.biff.drawing.Dgg: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.Dgg: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.Dgg: void <clinit>()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.Opt: void readProperties()>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.drawing.Opt: void readProperties()>" -> "<jxl.biff.StringHelper: java.lang.String getUnicodeString(byte[],int,int)>";
"<jxl.biff.drawing.Opt: void readProperties()>" -> "<jxl.biff.drawing.Opt$Property: void <init>(int,boolean,boolean,int)>";
"<jxl.biff.drawing.Opt: void readProperties()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.drawing.Opt: void readProperties()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.drawing.Opt: void readProperties()>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.biff.drawing.BlipType: void <clinit>()>" -> "<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>";
"<jxl.biff.drawing.BlipType: void <clinit>()>" -> "<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>";
"<jxl.biff.drawing.BlipType: void <clinit>()>" -> "<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>";
"<jxl.biff.drawing.BlipType: void <clinit>()>" -> "<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>";
"<jxl.biff.drawing.BlipType: void <clinit>()>" -> "<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>";
"<jxl.biff.drawing.BlipType: void <clinit>()>" -> "<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>";
"<jxl.biff.drawing.BlipType: void <clinit>()>" -> "<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>";
"<jxl.biff.drawing.BlipType: void <clinit>()>" -> "<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>";
"<jxl.biff.drawing.BlipType: void <clinit>()>" -> "<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>";
"<jxl.biff.drawing.BlipType: void <clinit>()>" -> "<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>";
"<jxl.biff.drawing.BlipType: jxl.biff.drawing.BlipType getType(int)>" -> "<jxl.biff.drawing.BlipType: void <clinit>()>";
"<jxl.biff.drawing.Dgg$Cluster: void <init>(int,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.EscherAtom: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.EscherAtom: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.ClientTextBox: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.ClientTextBox: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.Opt: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.Opt: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.BlipStoreEntry: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.BlipStoreEntry: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.ClientData: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.ClientData: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.ClientAnchor: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.ClientAnchor: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.Sp: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.Sp: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.SpgrContainer: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.SpgrContainer: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.BStoreContainer: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.BStoreContainer: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.Dgg: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.Dgg: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.Opt$Property: void <init>(int,boolean,boolean,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>" -> "<jxl.biff.drawing.BlipType: void <clinit>()>";
"<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.BlipType: void <init>(int,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.drawing.Dgg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.drawing.Dgg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherRecord: byte[] getBytes()>";
"<jxl.biff.drawing.Dg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherRecord: int getInstance()>";
"<jxl.biff.drawing.Dg: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherRecord: byte[] getBytes()>";
"<jxl.biff.drawing.BStoreContainer: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherRecord: int getInstance()>";
"<jxl.biff.drawing.Sp: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherRecord: int getInstance()>";
"<jxl.biff.drawing.Sp: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherRecord: byte[] getBytes()>";
"<jxl.biff.drawing.ClientAnchor: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherRecord: byte[] getBytes()>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherRecord: int getInstance()>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherRecord: byte[] getBytes()>";
"<jxl.biff.drawing.Opt: void <init>(jxl.biff.drawing.EscherRecordData)>" -> "<jxl.biff.drawing.EscherRecord: int getInstance()>";
"<jxl.biff.drawing.Opt: void readProperties()>" -> "<jxl.biff.drawing.EscherRecord: byte[] getBytes()>";
"<jxl.biff.drawing.Opt: void readProperties()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.drawing.Opt: void readProperties()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: int getLength()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecordData: jxl.biff.drawing.EscherRecordType getType()>";
"<jxl.biff.drawing.EscherRecordData: jxl.biff.drawing.EscherRecordType getType()>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.EscherRecordData: jxl.biff.drawing.EscherRecordType getType()>" -> "<jxl.biff.drawing.EscherRecordType: jxl.biff.drawing.EscherRecordType getType(int)>";
"<jxl.biff.drawing.EscherRecordType: jxl.biff.drawing.EscherRecordType getType(int)>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: int getPos()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: int getPos()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: int getLength()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: int getStreamLength()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: jxl.biff.drawing.EscherStream getEscherStream()>";
"<jxl.biff.drawing.EscherRecord: jxl.biff.drawing.EscherStream getEscherStream()>" -> "<jxl.biff.drawing.EscherRecordData: jxl.biff.drawing.EscherStream getEscherStream()>";
"<jxl.biff.drawing.EscherRecord: int getStreamLength()>" -> "<jxl.biff.drawing.EscherRecordData: int getStreamLength()>";
"<jxl.biff.drawing.EscherRecord: int getPos()>" -> "<jxl.biff.drawing.EscherRecordData: int getPos()>";
"<jxl.biff.drawing.EscherRecord: int getLength()>" -> "<jxl.biff.drawing.EscherRecordData: int getLength()>";
"<jxl.biff.drawing.EscherContainer: void initialize()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.drawing.EscherContainer: jxl.biff.drawing.EscherRecord[] getChildren()>" -> "<java.util.ArrayList: int size()>";
"<jxl.biff.drawing.EscherContainer: jxl.biff.drawing.EscherRecord[] getChildren()>" -> "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<jxl.biff.drawing.EscherRecord: jxl.biff.drawing.EscherRecordType getType()>";
"<jxl.biff.drawing.EscherRecord: jxl.biff.drawing.EscherRecordType getType()>" -> "<jxl.biff.drawing.EscherRecordData: jxl.biff.drawing.EscherRecordType getType()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<jxl.biff.drawing.EscherRecordType: int getValue()>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void close()>";
"<jxl.demo.EscherDrawingGroup: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.biff.drawing.EscherDisplay: void display()>";
"<jxl.demo.EscherDrawingGroup: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.EscherDrawingGroup: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.EscherDrawingGroup: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.EscherDrawingGroup: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.io.BufferedWriter: void close()>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<java.io.FileInputStream: void close()>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.BiffDump: void <init>(java.io.File,java.io.OutputStream)>" -> "<java.io.BufferedWriter: void close()>";
"<jxl.demo.WriteAccess: void <init>(java.io.File)>" -> "<java.io.FileInputStream: void close()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<java.io.FileInputStream: int read(byte[])>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<java.io.FileInputStream: int read(byte[],int,int)>";
"<java.io.FileInputStream: int read(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: int read(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>" -> "<jxl.WorkbookSettings: java.lang.String getEncoding()>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.read.biff.CompoundFile: void readPropertySets()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<java.io.FileInputStream: int read(byte[])>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<java.io.FileInputStream: int read(byte[],int,int)>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<java.io.FileInputStream: void close()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<jxl.WorkbookSettings: boolean getPropertySetsDisabled()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<jxl.WorkbookSettings: boolean getGCDisabled()>";
"<jxl.WorkbookSettings: void <init>()>" -> "<jxl.WorkbookSettings: void setSuppressWarnings(boolean)>";
"<jxl.WorkbookSettings: void setSuppressWarnings(boolean)>" -> "<jxl.WorkbookSettings: void <clinit>()>";
"<jxl.WorkbookSettings: void setSuppressWarnings(boolean)>" -> "<common.log.SimpleLogger: void setSuppressWarnings(boolean)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.read.biff.WorkbookParser: void close()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.read.biff.WorkbookParser: void close()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.read.biff.WorkbookParser: void close()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.read.biff.WorkbookParser: void close()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.read.biff.WorkbookParser: void close()>";
"<jxl.read.biff.WorkbookParser: void close()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: void close()>" -> "<java.lang.System: void gc()>";
"<jxl.read.biff.WorkbookParser: void close()>" -> "<jxl.WorkbookSettings: boolean getGCDisabled()>";
"<jxl.read.biff.WorkbookParser: void close()>" -> "<jxl.read.biff.File: void clear()>";
"<jxl.demo.EscherDrawingGroup: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.read.biff.WorkbookParser: jxl.biff.drawing.DrawingGroup getDrawingGroup()>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.read.biff.WorkbookParser: int getNumberOfSheets()>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.read.biff.WorkbookParser: jxl.Sheet getSheet(int)>";
"<jxl.read.biff.WorkbookParser: jxl.Sheet getSheet(int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: jxl.Sheet getSheet(int)>" -> "<java.lang.System: void gc()>";
"<jxl.read.biff.WorkbookParser: jxl.Sheet getSheet(int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.read.biff.WorkbookParser: jxl.Sheet getSheet(int)>" -> "<jxl.WorkbookSettings: boolean getGCDisabled()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.read.biff.WorkbookParser: int getNumberOfSheets()>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.read.biff.WorkbookParser: jxl.Sheet getSheet(int)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.read.biff.WorkbookParser: int getNumberOfSheets()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<jxl.read.biff.WorkbookParser: jxl.Sheet getSheet(int)>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.io.BufferedWriter: void write(int)>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.io.BufferedWriter: void close()>";
"<java.io.BufferedWriter: void write(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<jxl.read.biff.WorkbookParser: int getNumberOfSheets()>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<jxl.read.biff.WorkbookParser: jxl.Sheet getSheet(int)>";
"<jxl.demo.XML: void writeXML()>" -> "<jxl.read.biff.WorkbookParser: int getNumberOfSheets()>";
"<jxl.demo.XML: void writeXML()>" -> "<jxl.read.biff.WorkbookParser: jxl.Sheet getSheet(int)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<jxl.read.biff.WorkbookParser: int getNumberOfSheets()>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<jxl.read.biff.WorkbookParser: jxl.Sheet getSheet(int)>";
"<jxl.demo.XML: void writeFormattedXML()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<jxl.demo.PropertySetsReader: void displaySets()>";
"<jxl.demo.PropertySetsReader: void <init>(java.io.File,java.lang.String,java.io.OutputStream)>" -> "<jxl.demo.PropertySetsReader: void displayPropertySet(java.lang.String,java.io.OutputStream)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<jxl.demo.PropertySetsReader: void displayPropertySet(java.lang.String,java.io.OutputStream)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displayPropertySet(java.lang.String,java.io.OutputStream)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displayPropertySet(java.lang.String,java.io.OutputStream)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displayPropertySet(java.lang.String,java.io.OutputStream)>" -> "<jxl.read.biff.CompoundFile: byte[] getStream(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.BufferedWriter: void flush()>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<java.io.BufferedWriter: void close()>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<jxl.read.biff.CompoundFile: int getNumberOfPropertySets()>";
"<jxl.demo.PropertySetsReader: void displaySets()>" -> "<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertySet(int)>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertySet(int)>" -> "<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(int)>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.read.biff.CompoundFile: int getNumberOfPropertySets()>" -> "<java.util.ArrayList: int size()>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(java.lang.String)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage findPropertyStorage(java.lang.String,jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage findPropertyStorage(java.lang.String,jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage findPropertyStorage(java.lang.String,jxl.biff.BaseCompoundFile$PropertyStorage)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<jxl.demo.WriteAccess: void display(jxl.WorkbookSettings)>" -> "<jxl.read.biff.BiffRecordReader: boolean hasNext()>";
"<jxl.demo.WriteAccess: void display(jxl.WorkbookSettings)>" -> "<jxl.read.biff.BiffRecordReader: jxl.read.biff.Record next()>";
"<jxl.read.biff.BiffRecordReader: jxl.read.biff.Record next()>" -> "<jxl.read.biff.File: jxl.read.biff.Record next()>";
"<jxl.read.biff.File: jxl.read.biff.Record next()>" -> "<jxl.read.biff.Record: void <clinit>()>";
"<jxl.read.biff.File: jxl.read.biff.Record next()>" -> "<jxl.read.biff.Record: void <init>(byte[],int,jxl.read.biff.File)>";
"<jxl.read.biff.Record: void <init>(byte[],int,jxl.read.biff.File)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.read.biff.Record: void <init>(byte[],int,jxl.read.biff.File)>" -> "<jxl.biff.Type: jxl.biff.Type getType(int)>";
"<jxl.read.biff.Record: void <init>(byte[],int,jxl.read.biff.File)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.Record: void <init>(byte[],int,jxl.read.biff.File)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.read.biff.Record: void <init>(byte[],int,jxl.read.biff.File)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.Type: jxl.biff.Type getType(int)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.read.biff.Record: void <init>(byte[],int,jxl.read.biff.File)>" -> "<jxl.read.biff.File: int getPos()>";
"<jxl.read.biff.Record: void <init>(byte[],int,jxl.read.biff.File)>" -> "<jxl.read.biff.File: void skip(int)>";
"<jxl.read.biff.BiffRecordReader: boolean hasNext()>" -> "<jxl.read.biff.File: boolean hasNext()>";
"<jxl.demo.WriteAccess: void display(jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.demo.WriteAccess: void display(jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.Record: byte[] getData()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.Record: byte[] getData()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.Record: byte[] getData()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.Record: byte[] getData()>" -> "<jxl.read.biff.File: byte[] read(int,int)>";
"<jxl.read.biff.File: byte[] read(int,int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.read.biff.File: byte[] read(int,int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.read.biff.File: byte[] read(int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.read.biff.File: byte[] read(int,int)>" -> "<jxl.read.biff.File: void <clinit>()>";
"<jxl.read.biff.File: byte[] read(int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.File: byte[] read(int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.read.biff.File: byte[] read(int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.read.biff.File: byte[] read(int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.read.biff.File: byte[] read(int,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.read.biff.File: byte[] read(int,int)>" -> "<common.log.SimpleLogger: void error(java.lang.Object)>";
"<common.log.SimpleLogger: void error(java.lang.Object)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.BiffDump: void dump()>" -> "<jxl.read.biff.BiffRecordReader: boolean hasNext()>";
"<jxl.demo.BiffDump: void dump()>" -> "<jxl.read.biff.BiffRecordReader: jxl.read.biff.Record next()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: int getCode()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: int getLength()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: int getLength()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.BiffDump: boolean writeRecord(jxl.read.biff.Record)>" -> "<jxl.read.biff.BiffRecordReader: int getPos()>";
"<jxl.read.biff.BiffRecordReader: int getPos()>" -> "<jxl.read.biff.Record: int getLength()>";
"<jxl.read.biff.BiffRecordReader: int getPos()>" -> "<jxl.read.biff.File: int getPos()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.Throwable: java.lang.String toString()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.Throwable: void printStackTrace()>";
"<java.lang.Throwable: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.ReadWrite: void readWrite()>";
"<jxl.demo.ReadWrite: void readWrite()>" -> "<jxl.demo.ReadWrite: void <clinit>()>";
"<jxl.demo.ReadWrite: void readWrite()>" -> "<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>";
"<jxl.demo.ReadWrite: void readWrite()>" -> "<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.Workbook)>";
"<jxl.demo.ReadWrite: void readWrite()>" -> "<jxl.Workbook: jxl.Workbook getWorkbook(java.io.File)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.demo.ReadWrite: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFeatures: void <init>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Blank: void <init>(int,int)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFeatures: void <init>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Blank: void <init>(int,int)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableImage: void <init>(double,double,double,double,java.io.File)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Number: void <init>(int,int,double)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.format.CellFormat)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.net.URL: void <init>(java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.util.Calendar: java.util.Calendar getInstance()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.DateFormat: void <init>(java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.biff.BaseCellFeatures: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFeatures: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.biff.BlankRecord: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.biff.drawing.Drawing: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableImage: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.biff.NumberRecord: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.biff.FormulaRecord: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.biff.LabelRecord: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.demo.ReadWrite: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.DateFormats: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.biff.FormatRecord: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.biff.NumberFormatRecord: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.NumberFormat: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.format.UnderlineStyle: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableFont: void <clinit>()>";
"<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.Workbook)>" -> "<jxl.WorkbookSettings: void <clinit>()>";
"<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.Workbook)>" -> "<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.Workbook,jxl.WorkbookSettings)>";
"<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.Workbook)>" -> "<jxl.WorkbookSettings: void <init>()>";
"<jxl.write.WritableCellFeatures: void <init>()>" -> "<jxl.CellFeatures: void <init>()>";
"<jxl.write.Blank: void <init>(int,int)>" -> "<jxl.write.biff.BlankRecord: void <init>(int,int)>";
"<jxl.write.Label: void <init>(int,int,java.lang.String)>" -> "<jxl.write.biff.LabelRecord: void <init>(int,int,java.lang.String)>";
"<jxl.write.WritableImage: void <init>(double,double,double,double,java.io.File)>" -> "<jxl.biff.drawing.Drawing: void <init>(double,double,double,double,java.io.File)>";
"<jxl.write.Formula: void <init>(int,int,java.lang.String)>" -> "<jxl.write.biff.FormulaRecord: void <init>(int,int,java.lang.String)>";
"<jxl.write.Number: void <init>(int,int,double)>" -> "<jxl.write.biff.NumberRecord: void <init>(int,int,double)>";
"<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>" -> "<jxl.write.biff.LabelRecord: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.write.WritableCellFormat: void <init>(jxl.format.CellFormat)>" -> "<jxl.write.biff.CellXFRecord: void <init>(jxl.format.CellFormat)>";
"<java.net.URL: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.net.URL: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Calendar: java.util.Calendar getInstance()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont,jxl.biff.DisplayFormat)>";
"<jxl.write.DateFormat: void <init>(java.lang.String)>" -> "<jxl.write.biff.DateFormatRecord: void <init>(java.lang.String)>";
"<jxl.write.DateFormat: void <init>(java.lang.String)>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<jxl.write.NumberFormat: void <init>(java.lang.String)>" -> "<jxl.write.biff.NumberFormatRecord: void <init>(java.lang.String)>";
"<jxl.write.NumberFormat: void <init>(java.lang.String)>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>" -> "<jxl.write.NumberFormats: void <clinit>()>";
"<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont,jxl.biff.DisplayFormat)>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>" -> "<jxl.write.WritableFont: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour,jxl.format.ScriptStyle)>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>" -> "<jxl.format.ScriptStyle: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>" -> "<jxl.format.UnderlineStyle: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour,jxl.format.ScriptStyle)>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle)>" -> "<jxl.format.ScriptStyle: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle)>" -> "<jxl.format.UnderlineStyle: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour,jxl.format.ScriptStyle)>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle)>" -> "<jxl.format.ScriptStyle: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.biff.BaseCellFeatures: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.BaseCellFeatures: void <clinit>()>" -> "<jxl.biff.BaseCellFeatures$ValidationCondition: void <init>(jxl.biff.DVParser$Condition)>";
"<jxl.biff.BaseCellFeatures: void <clinit>()>" -> "<jxl.biff.BaseCellFeatures$ValidationCondition: void <init>(jxl.biff.DVParser$Condition)>";
"<jxl.biff.BaseCellFeatures: void <clinit>()>" -> "<jxl.biff.BaseCellFeatures$ValidationCondition: void <init>(jxl.biff.DVParser$Condition)>";
"<jxl.biff.BaseCellFeatures: void <clinit>()>" -> "<jxl.biff.BaseCellFeatures$ValidationCondition: void <init>(jxl.biff.DVParser$Condition)>";
"<jxl.biff.BaseCellFeatures: void <clinit>()>" -> "<jxl.biff.BaseCellFeatures$ValidationCondition: void <init>(jxl.biff.DVParser$Condition)>";
"<jxl.biff.BaseCellFeatures: void <clinit>()>" -> "<jxl.biff.BaseCellFeatures$ValidationCondition: void <init>(jxl.biff.DVParser$Condition)>";
"<jxl.biff.BaseCellFeatures: void <clinit>()>" -> "<jxl.biff.BaseCellFeatures$ValidationCondition: void <init>(jxl.biff.DVParser$Condition)>";
"<jxl.biff.BaseCellFeatures: void <clinit>()>" -> "<jxl.biff.BaseCellFeatures$ValidationCondition: void <init>(jxl.biff.DVParser$Condition)>";
"<jxl.biff.BaseCellFeatures: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.BaseCellFeatures: void <clinit>()>" -> "<jxl.biff.BaseCellFeatures: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.BaseCellFeatures: void <clinit>()>" -> "<jxl.biff.DVParser: void <clinit>()>";
"<jxl.biff.BaseCellFeatures: void <clinit>()>" -> "<jxl.biff.BaseCellFeatures$ValidationCondition: void <clinit>()>";
"<jxl.write.WritableCellFeatures: void <clinit>()>" -> "<jxl.biff.BaseCellFeatures: void <clinit>()>";
"<jxl.write.biff.CellValue: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.CellValue: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.CellValue: void <clinit>()>" -> "<jxl.write.biff.CellValue: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.CellValue: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.BlankRecord: void <clinit>()>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.BlankRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.BlankRecord: void <clinit>()>" -> "<jxl.write.biff.BlankRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.BlankRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.BlankRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.LabelRecord: void <clinit>()>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.LabelRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.LabelRecord: void <clinit>()>" -> "<jxl.write.biff.LabelRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.LabelRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.LabelRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void <clinit>()>" -> "<jxl.biff.drawing.Drawing$ImageAnchorProperties: void <init>(int)>";
"<jxl.biff.drawing.Drawing: void <clinit>()>" -> "<jxl.biff.drawing.Drawing$ImageAnchorProperties: void <init>(int)>";
"<jxl.biff.drawing.Drawing: void <clinit>()>" -> "<jxl.biff.drawing.Drawing$ImageAnchorProperties: void <init>(int)>";
"<jxl.biff.drawing.Drawing: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.Drawing: void <clinit>()>" -> "<jxl.biff.drawing.Drawing: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.Drawing: void <clinit>()>" -> "<jxl.biff.drawing.Drawing$ImageAnchorProperties: void <clinit>()>";
"<jxl.write.WritableImage: void <clinit>()>" -> "<jxl.biff.drawing.Drawing: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void <clinit>()>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.FormulaRecord: void <clinit>()>" -> "<jxl.write.biff.FormulaRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.FormulaRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.NumberRecord: void <clinit>()>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.NumberRecord: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.write.biff.NumberRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.DateFormats: void <clinit>()>" -> "<jxl.write.DateFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.DateFormats: void <clinit>()>" -> "<jxl.write.DateFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.DateFormats: void <clinit>()>" -> "<jxl.write.DateFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.DateFormats: void <clinit>()>" -> "<jxl.write.DateFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.DateFormats: void <clinit>()>" -> "<jxl.write.DateFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.DateFormats: void <clinit>()>" -> "<jxl.write.DateFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.DateFormats: void <clinit>()>" -> "<jxl.write.DateFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.DateFormats: void <clinit>()>" -> "<jxl.write.DateFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.DateFormats: void <clinit>()>" -> "<jxl.write.DateFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.DateFormats: void <clinit>()>" -> "<jxl.write.DateFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.DateFormats: void <clinit>()>" -> "<jxl.write.DateFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.DateFormats: void <clinit>()>" -> "<jxl.write.DateFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.write.WritableFont: void <clinit>()>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.write.DateFormat: void <init>(java.lang.String)>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont,jxl.biff.DisplayFormat)>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour)>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName)>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.biff.FormatRecord: void <clinit>()>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.write.NumberFormats: void <clinit>()>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.format.UnderlineStyle: void <clinit>()>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.WritableWorkbook: void <clinit>()>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.write.biff.NumberFormatRecord: void <clinit>()>" -> "<jxl.biff.FormatRecord: void <clinit>()>";
"<jxl.write.biff.NumberFormatRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.NumberFormatRecord: void <clinit>()>" -> "<jxl.write.biff.NumberFormatRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.NumberFormatRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.NumberFormatRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.NumberFormat: void <clinit>()>" -> "<jxl.write.biff.NumberFormatRecord: void <clinit>()>";
"<jxl.write.NumberFormat: void <clinit>()>" -> "<jxl.write.biff.NumberFormatRecord$NonValidatingFormat: void <init>()>";
"<jxl.write.NumberFormat: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.NumberFormat: void <clinit>()>" -> "<jxl.biff.FormatRecord: void <clinit>()>";
"<jxl.write.WritableFont: void <clinit>()>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.write.WritableFont: void <clinit>()>" -> "<jxl.write.WritableFont$BoldStyle: void <init>(int)>";
"<jxl.write.WritableFont: void <clinit>()>" -> "<jxl.write.WritableFont$BoldStyle: void <init>(int)>";
"<jxl.write.WritableFont: void <clinit>()>" -> "<jxl.write.WritableFont$FontName: void <init>(java.lang.String)>";
"<jxl.write.WritableFont: void <clinit>()>" -> "<jxl.write.WritableFont$FontName: void <init>(java.lang.String)>";
"<jxl.write.WritableFont: void <clinit>()>" -> "<jxl.write.WritableFont$FontName: void <init>(java.lang.String)>";
"<jxl.write.WritableFont: void <clinit>()>" -> "<jxl.write.WritableFont$FontName: void <init>(java.lang.String)>";
"<jxl.write.WritableFont: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.format.UnderlineStyle: void <clinit>()>" -> "<jxl.format.UnderlineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.UnderlineStyle: void <clinit>()>" -> "<jxl.format.UnderlineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.UnderlineStyle: void <clinit>()>" -> "<jxl.format.UnderlineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.UnderlineStyle: void <clinit>()>" -> "<jxl.format.UnderlineStyle: void <init>(int,java.lang.String)>";
"<jxl.format.UnderlineStyle: void <clinit>()>" -> "<jxl.format.UnderlineStyle: void <init>(int,java.lang.String)>";
"<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.Workbook,jxl.WorkbookSettings)>" -> "<jxl.write.biff.WritableWorkbookImpl: void <clinit>()>";
"<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.Workbook,jxl.WorkbookSettings)>" -> "<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>";
"<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.Workbook,jxl.WorkbookSettings)>" -> "<java.io.FileOutputStream: void <init>(java.io.File)>";
"<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.Workbook,jxl.WorkbookSettings)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.CellFeatures: void <init>()>" -> "<jxl.biff.BaseCellFeatures: void <init>()>";
"<jxl.write.biff.BlankRecord: void <init>(int,int)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.BlankRecord: void <init>(int,int)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int)>";
"<jxl.write.biff.LabelRecord: void <init>(int,int,java.lang.String)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.LabelRecord: void <init>(int,int,java.lang.String)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int)>";
"<jxl.biff.drawing.Drawing: void <init>(double,double,double,double,java.io.File)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void <init>(double,double,double,double,java.io.File)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.Drawing: void <init>(double,double,double,double,java.io.File)>" -> "<jxl.biff.drawing.ShapeType: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void <init>(double,double,double,double,java.io.File)>" -> "<jxl.biff.drawing.Drawing: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void <init>(int,int,java.lang.String)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void <init>(int,int,java.lang.String)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int)>";
"<jxl.write.biff.NumberRecord: void <init>(int,int,double)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.NumberRecord: void <init>(int,int,double)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int)>";
"<jxl.write.biff.LabelRecord: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.LabelRecord: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int,jxl.format.CellFormat)>";
"<jxl.write.biff.CellXFRecord: void <init>(jxl.format.CellFormat)>" -> "<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>";
"<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont,jxl.biff.DisplayFormat)>" -> "<jxl.write.biff.CellXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.DateFormatRecord: void <init>(java.lang.String)>" -> "<jxl.biff.FormatRecord: void <init>()>";
"<jxl.write.biff.NumberFormatRecord: void <init>(java.lang.String)>" -> "<jxl.biff.FormatRecord: void <init>()>";
"<jxl.write.biff.NumberFormatRecord: void <init>(java.lang.String)>" -> "<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.NumberFormats: void <clinit>()>" -> "<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour,jxl.format.ScriptStyle)>" -> "<jxl.write.biff.WritableFontRecord: void <init>(java.lang.String,int,int,boolean,int,int,int)>";
"<jxl.format.ScriptStyle: void <clinit>()>" -> "<jxl.format.ScriptStyle: void <init>(int,java.lang.String)>";
"<jxl.format.ScriptStyle: void <clinit>()>" -> "<jxl.format.ScriptStyle: void <init>(int,java.lang.String)>";
"<jxl.format.ScriptStyle: void <clinit>()>" -> "<jxl.format.ScriptStyle: void <init>(int,java.lang.String)>";
"<jxl.biff.BaseCellFeatures$ValidationCondition: void <init>(jxl.biff.DVParser$Condition)>" -> "<jxl.biff.BaseCellFeatures$ValidationCondition: void <clinit>()>";
"<jxl.biff.BaseCellFeatures$ValidationCondition: void <init>(jxl.biff.DVParser$Condition)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.BaseCellFeatures$ValidationCondition: void <init>(jxl.biff.DVParser$Condition)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.BaseCellFeatures$ValidationCondition: void <init>(jxl.biff.DVParser$Condition)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.BaseCellFeatures: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.BaseCellFeatures: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<java.text.DecimalFormat: void <init>(java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$Condition: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$Condition: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$Condition: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$Condition: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$Condition: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$Condition: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$Condition: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$Condition: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$ErrorStyle: void <init>(int)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$ErrorStyle: void <init>(int)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$ErrorStyle: void <init>(int)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$DVType: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$DVType: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$DVType: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$DVType: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$DVType: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$DVType: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$DVType: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$DVType: void <init>(int,java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$Condition: void <clinit>()>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$ErrorStyle: void <clinit>()>";
"<jxl.biff.DVParser: void <clinit>()>" -> "<jxl.biff.DVParser$DVType: void <clinit>()>";
"<jxl.write.biff.CellValue: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.CellValue: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.BlankRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.BlankRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.LabelRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.LabelRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.Drawing$ImageAnchorProperties: void <init>(int)>" -> "<jxl.biff.drawing.Drawing$ImageAnchorProperties: void <clinit>()>";
"<jxl.biff.drawing.Drawing$ImageAnchorProperties: void <init>(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.drawing.Drawing$ImageAnchorProperties: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.Drawing$ImageAnchorProperties: void <init>(int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.drawing.Drawing: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.Drawing: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.FormulaRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.FormulaRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.DateFormats$BuiltInFormat: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour)>" -> "<jxl.format.ScriptStyle: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour,jxl.format.ScriptStyle)>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName)>" -> "<jxl.write.WritableFont: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour,jxl.format.ScriptStyle)>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName)>" -> "<jxl.format.ScriptStyle: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName)>" -> "<jxl.format.UnderlineStyle: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName)>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.write.biff.NumberFormatRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.NumberFormatRecord$NonValidatingFormat: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.WritableFont$BoldStyle: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.WritableFont$FontName: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.format.UnderlineStyle: void <init>(int,java.lang.String)>" -> "<jxl.format.UnderlineStyle: void <clinit>()>";
"<jxl.format.UnderlineStyle: void <init>(int,java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.format.UnderlineStyle: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.format.UnderlineStyle: void <init>(int,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <clinit>()>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.WritableWorkbookImpl: void <clinit>()>" -> "<jxl.write.biff.WritableWorkbookImpl: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.WritableWorkbookImpl: void copyWorkbook(jxl.Workbook)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.NameRecord: void <init>(jxl.read.biff.NameRecord,int)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.ButtonPropertySetRecord: void <init>(jxl.read.biff.ButtonPropertySetRecord)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.drawing.DrawingGroup: void <init>(jxl.biff.drawing.DrawingGroup)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.SupbookRecord: void <init>(jxl.read.biff.SupbookRecord,jxl.WorkbookSettings)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.ExternalSheetRecord: void <init>(jxl.read.biff.ExternalSheetRecord)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.CountryRecord: void <init>(jxl.read.biff.CountryRecord)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.File: void <init>(java.io.OutputStream,jxl.WorkbookSettings,jxl.read.biff.CompoundFile)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.Styles: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<java.util.HashMap: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.SharedStrings: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.WritableWorkbook: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.WritableWorkbookImpl: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.drawing.DrawingGroup: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.WritableWorkbookImpl: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.File: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.Styles: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.DateRecord: void <clinit>()>";
"<java.io.FileOutputStream: void <init>(java.io.File)>" -> "<java.io.FileOutputStream: void finalize()>";
"<java.io.FileOutputStream: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.io.File)>" -> "<java.io.OutputStream: void <init>()>";
"<jxl.biff.BaseCellFeatures: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int,jxl.format.CellFormat)>";
"<jxl.biff.drawing.ShapeType: void <clinit>()>" -> "<jxl.biff.drawing.ShapeType: void <init>(int)>";
"<jxl.biff.drawing.ShapeType: void <clinit>()>" -> "<jxl.biff.drawing.ShapeType: void <init>(int)>";
"<jxl.biff.drawing.ShapeType: void <clinit>()>" -> "<jxl.biff.drawing.ShapeType: void <init>(int)>";
"<jxl.biff.drawing.ShapeType: void <clinit>()>" -> "<jxl.biff.drawing.ShapeType: void <init>(int)>";
"<jxl.biff.drawing.ShapeType: void <clinit>()>" -> "<jxl.biff.drawing.ShapeType: void <init>(int)>";
"<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int,jxl.format.CellFormat)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<jxl.biff.FormatRecord: void <init>(jxl.biff.FormatRecord)>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<jxl.biff.FormatRecord: void <init>(jxl.biff.FormatRecord)>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<jxl.biff.FontRecord: void <init>(jxl.format.Font)>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<jxl.biff.XFRecord: void initializeFormatInformation()>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<jxl.biff.FormatRecord: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<jxl.biff.FormatRecord: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.format.CellFormat)>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.write.biff.CellXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.write.biff.CellXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.CellXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.FormatRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.FormatRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.NumberFormats$BuiltInFormat: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.WritableFontRecord: void <init>(java.lang.String,int,int,boolean,int,int,int)>" -> "<jxl.biff.FontRecord: void <init>(java.lang.String,int,int,boolean,int,int,int)>";
"<jxl.format.ScriptStyle: void <init>(int,java.lang.String)>" -> "<jxl.format.ScriptStyle: void <clinit>()>";
"<jxl.format.ScriptStyle: void <init>(int,java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.format.ScriptStyle: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.format.ScriptStyle: void <init>(int,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.DVParser$Condition: void <init>(int,java.lang.String)>" -> "<jxl.biff.DVParser$Condition: void <clinit>()>";
"<jxl.biff.DVParser$Condition: void <init>(int,java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.DVParser$Condition: void <init>(int,java.lang.String)>" -> "<java.text.MessageFormat: void <init>(java.lang.String)>";
"<jxl.biff.DVParser$Condition: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.DVParser$Condition: void <init>(int,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.DVParser$ErrorStyle: void <init>(int)>" -> "<jxl.biff.DVParser$ErrorStyle: void <clinit>()>";
"<jxl.biff.DVParser$ErrorStyle: void <init>(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.DVParser$ErrorStyle: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.DVParser$ErrorStyle: void <init>(int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.DVParser$DVType: void <init>(int,java.lang.String)>" -> "<jxl.biff.DVParser$DVType: void <clinit>()>";
"<jxl.biff.DVParser$DVType: void <init>(int,java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.DVParser$DVType: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.DVParser$DVType: void <init>(int,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.DVParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.DVParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void copyWorkbook(jxl.Workbook)>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>";
"<jxl.write.biff.NameRecord: void <init>(jxl.read.biff.NameRecord,int)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.NameRecord: void <init>(jxl.read.biff.NameRecord,int)>" -> "<jxl.write.biff.NameRecord$NameRange: void <init>(jxl.write.biff.NameRecord,jxl.read.biff.NameRecord$NameRange)>";
"<jxl.write.biff.NameRecord: void <init>(jxl.read.biff.NameRecord,int)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.ButtonPropertySetRecord: void <init>(jxl.read.biff.ButtonPropertySetRecord)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.ButtonPropertySetRecord: void <init>(jxl.read.biff.ButtonPropertySetRecord)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.drawing.DrawingGroup: void <init>(jxl.biff.drawing.DrawingGroup)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: void <init>(jxl.biff.drawing.DrawingGroup)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.SupbookRecord: void <init>(jxl.read.biff.SupbookRecord,jxl.WorkbookSettings)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(jxl.read.biff.SupbookRecord,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.SupbookRecord: void <init>(jxl.read.biff.SupbookRecord,jxl.WorkbookSettings)>" -> "<java.lang.String: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(jxl.read.biff.SupbookRecord,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(jxl.read.biff.SupbookRecord,jxl.WorkbookSettings)>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(jxl.read.biff.SupbookRecord,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(jxl.read.biff.SupbookRecord,jxl.WorkbookSettings)>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(jxl.read.biff.SupbookRecord,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(jxl.read.biff.SupbookRecord,jxl.WorkbookSettings)>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(jxl.read.biff.SupbookRecord,jxl.WorkbookSettings)>" -> "<jxl.read.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.ExternalSheetRecord: void <init>(jxl.read.biff.ExternalSheetRecord)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.ExternalSheetRecord: void <init>(jxl.read.biff.ExternalSheetRecord)>" -> "<jxl.write.biff.ExternalSheetRecord$XTI: void <init>(int,int,int)>";
"<jxl.write.biff.ExternalSheetRecord: void <init>(jxl.read.biff.ExternalSheetRecord)>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.write.biff.ExternalSheetRecord: void <init>(jxl.read.biff.ExternalSheetRecord)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.CountryRecord: void <init>(jxl.read.biff.CountryRecord)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.CountryRecord: void <init>(jxl.read.biff.CountryRecord)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.File: void <init>(java.io.OutputStream,jxl.WorkbookSettings,jxl.read.biff.CompoundFile)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.Styles: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.SharedStrings: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.SharedStrings: void <init>()>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.write.biff.SharedStrings: void <init>()>" -> "<java.util.HashMap: void <init>(int)>";
"<jxl.write.WritableWorkbook: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.SupbookRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <clinit>()>" -> "<jxl.write.biff.SupbookRecord$SupbookType: void <init>(jxl.write.biff.SupbookRecord$1)>";
"<jxl.write.biff.SupbookRecord: void <clinit>()>" -> "<jxl.write.biff.SupbookRecord$SupbookType: void <init>(jxl.write.biff.SupbookRecord$1)>";
"<jxl.write.biff.SupbookRecord: void <clinit>()>" -> "<jxl.write.biff.SupbookRecord$SupbookType: void <init>(jxl.write.biff.SupbookRecord$1)>";
"<jxl.write.biff.SupbookRecord: void <clinit>()>" -> "<jxl.write.biff.SupbookRecord$SupbookType: void <init>(jxl.write.biff.SupbookRecord$1)>";
"<jxl.write.biff.SupbookRecord: void <clinit>()>" -> "<jxl.write.biff.SupbookRecord$SupbookType: void <init>(jxl.write.biff.SupbookRecord$1)>";
"<jxl.write.biff.SupbookRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.SupbookRecord: void <clinit>()>" -> "<jxl.write.biff.SupbookRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.SupbookRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.File: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.File: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.File: void <clinit>()>" -> "<jxl.write.biff.File: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.Styles: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.Styles: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.Styles: void <clinit>()>" -> "<jxl.write.biff.Styles: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.DateRecord: void <clinit>()>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.DateRecord: void <clinit>()>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.write.biff.DateRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.DateRecord: void <clinit>()>" -> "<jxl.write.biff.DateRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.DateRecord: void <clinit>()>" -> "<jxl.write.DateFormats: void <clinit>()>";
"<jxl.write.biff.DateRecord: void <clinit>()>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.write.biff.DateRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.DateRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.drawing.ShapeType: void <init>(int)>" -> "<jxl.biff.drawing.ShapeType: void <clinit>()>";
"<jxl.biff.drawing.ShapeType: void <init>(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.drawing.ShapeType: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.ShapeType: void <init>(int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>" -> "<jxl.biff.RecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.FormatRecord: void <init>(jxl.biff.FormatRecord)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.FormatRecord: void <init>(jxl.biff.FormatRecord)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.BuiltInFormat: void <clinit>()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.Colour: jxl.format.Colour getInternalColour(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.Pattern: jxl.format.Pattern getPattern(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.Colour: jxl.format.Colour getInternalColour(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.Colour: jxl.format.Colour getInternalColour(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.Colour: jxl.format.Colour getInternalColour(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.Colour: jxl.format.Colour getInternalColour(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.BorderLineStyle: jxl.format.BorderLineStyle getStyle(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.BorderLineStyle: jxl.format.BorderLineStyle getStyle(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.BorderLineStyle: jxl.format.BorderLineStyle getStyle(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.BorderLineStyle: jxl.format.BorderLineStyle getStyle(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.Orientation: jxl.format.Orientation getOrientation(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.VerticalAlignment: jxl.format.VerticalAlignment getAlignment(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.Alignment: jxl.format.Alignment getAlignment(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.Pattern: void <clinit>()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.Pattern: void <clinit>()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.BorderLineStyle: void <clinit>()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.Orientation: void <clinit>()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.VerticalAlignment: void <clinit>()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.format.Alignment: void <clinit>()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.format.Pattern: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.format.BorderLineStyle: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.format.Orientation: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.format.VerticalAlignment: void <clinit>()>";
"<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.format.Alignment: void <clinit>()>";
"<java.lang.Math: int max(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.FontRecord: void <init>(java.lang.String,int,int,boolean,int,int,int)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.FontRecord: void <init>(java.lang.String,int,int,boolean,int,int,int)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<java.text.MessageFormat: void <init>(java.lang.String)>" -> "<java.text.Format: void <init>()>";
"<java.text.MessageFormat: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>" -> "<jxl.write.biff.WritableSheetImpl: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>" -> "<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.NameRecord$NameRange: void <init>(jxl.write.biff.NameRecord,jxl.read.biff.NameRecord$NameRange)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.ExternalSheetRecord$XTI: void <init>(int,int,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.SupbookRecord$SupbookType: void <init>(jxl.write.biff.SupbookRecord$1)>" -> "<jxl.write.biff.SupbookRecord$SupbookType: void <init>()>";
"<jxl.write.biff.SupbookRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.SupbookRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.File: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.File: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.Styles: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.Styles: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.DateRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.DateRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.RecordData: void <init>(jxl.biff.Type)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.biff.BuiltInFormat: void <clinit>()>" -> "<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>";
"<jxl.format.Colour: jxl.format.Colour getInternalColour(int)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.format.Pattern: jxl.format.Pattern getPattern(int)>" -> "<jxl.format.Pattern: void <clinit>()>";
"<jxl.format.BorderLineStyle: jxl.format.BorderLineStyle getStyle(int)>" -> "<jxl.format.BorderLineStyle: void <clinit>()>";
"<jxl.format.Orientation: jxl.format.Orientation getOrientation(int)>" -> "<jxl.format.Orientation: void <clinit>()>";
"<jxl.format.VerticalAlignment: jxl.format.VerticalAlignment getAlignment(int)>" -> "<jxl.format.VerticalAlignment: void <clinit>()>";
"<jxl.format.Alignment: jxl.format.Alignment getAlignment(int)>" -> "<jxl.format.Alignment: void <clinit>()>";
"<jxl.format.Orientation: void <clinit>()>" -> "<jxl.format.Orientation: void <init>(int,java.lang.String)>";
"<jxl.format.Orientation: void <clinit>()>" -> "<jxl.format.Orientation: void <init>(int,java.lang.String)>";
"<jxl.format.Orientation: void <clinit>()>" -> "<jxl.format.Orientation: void <init>(int,java.lang.String)>";
"<jxl.format.Orientation: void <clinit>()>" -> "<jxl.format.Orientation: void <init>(int,java.lang.String)>";
"<jxl.format.Orientation: void <clinit>()>" -> "<jxl.format.Orientation: void <init>(int,java.lang.String)>";
"<jxl.format.Orientation: void <clinit>()>" -> "<jxl.format.Orientation: void <init>(int,java.lang.String)>";
"<jxl.format.Orientation: void <clinit>()>" -> "<jxl.format.Orientation: void <init>(int,java.lang.String)>";
"<jxl.format.VerticalAlignment: void <clinit>()>" -> "<jxl.format.VerticalAlignment: void <init>(int,java.lang.String)>";
"<jxl.format.VerticalAlignment: void <clinit>()>" -> "<jxl.format.VerticalAlignment: void <init>(int,java.lang.String)>";
"<jxl.format.VerticalAlignment: void <clinit>()>" -> "<jxl.format.VerticalAlignment: void <init>(int,java.lang.String)>";
"<jxl.format.VerticalAlignment: void <clinit>()>" -> "<jxl.format.VerticalAlignment: void <init>(int,java.lang.String)>";
"<jxl.format.Alignment: void <clinit>()>" -> "<jxl.format.Alignment: void <init>(int,java.lang.String)>";
"<jxl.format.Alignment: void <clinit>()>" -> "<jxl.format.Alignment: void <init>(int,java.lang.String)>";
"<jxl.format.Alignment: void <clinit>()>" -> "<jxl.format.Alignment: void <init>(int,java.lang.String)>";
"<jxl.format.Alignment: void <clinit>()>" -> "<jxl.format.Alignment: void <init>(int,java.lang.String)>";
"<jxl.format.Alignment: void <clinit>()>" -> "<jxl.format.Alignment: void <init>(int,java.lang.String)>";
"<jxl.format.Alignment: void <clinit>()>" -> "<jxl.format.Alignment: void <init>(int,java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.WritableSheetImpl: void <clinit>()>" -> "<jxl.write.biff.WritableSheetImpl: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.write.biff.RowRecord: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.write.biff.SheetWriter: void <init>(jxl.write.biff.File,jxl.write.biff.WritableSheetImpl,jxl.WorkbookSettings)>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.SheetSettings: void <init>(jxl.Sheet)>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.write.biff.MergedCells: void <init>(jxl.write.WritableSheet)>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<java.util.TreeSet: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<java.util.TreeSet: void <init>(java.util.Comparator)>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.write.biff.WritableSheetImpl$ColumnInfoComparator: void <init>(jxl.write.biff.WritableSheetImpl$1)>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.write.biff.SheetWriter: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.SheetSettings: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.write.biff.MergedCells: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void <init>(java.lang.String,jxl.write.biff.File,jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.WorkbookSettings,jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SupbookRecord$SupbookType: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.BuiltInFormat: void <init>(java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.format.Orientation: void <init>(int,java.lang.String)>" -> "<jxl.format.Orientation: void <clinit>()>";
"<jxl.format.Orientation: void <init>(int,java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.format.Orientation: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.format.Orientation: void <init>(int,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.format.VerticalAlignment: void <init>(int,java.lang.String)>" -> "<jxl.format.VerticalAlignment: void <clinit>()>";
"<jxl.format.VerticalAlignment: void <init>(int,java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.format.VerticalAlignment: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.format.VerticalAlignment: void <init>(int,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.format.Alignment: void <init>(int,java.lang.String)>" -> "<jxl.format.Alignment: void <clinit>()>";
"<jxl.format.Alignment: void <init>(int,java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.format.Alignment: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.format.Alignment: void <init>(int,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.RowRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.RowRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.RowRecord: void <clinit>()>" -> "<jxl.write.biff.RowRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.RowRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.SheetWriter: void <init>(jxl.write.biff.File,jxl.write.biff.WritableSheetImpl,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetWriter: void <init>(jxl.write.biff.File,jxl.write.biff.WritableSheetImpl,jxl.WorkbookSettings)>" -> "<jxl.biff.drawing.SheetDrawingWriter: void <init>(jxl.WorkbookSettings)>";
"<jxl.write.biff.SheetWriter: void <init>(jxl.write.biff.File,jxl.write.biff.WritableSheetImpl,jxl.WorkbookSettings)>" -> "<jxl.biff.WorkspaceInformationRecord: void <init>()>";
"<jxl.write.biff.SheetWriter: void <init>(jxl.write.biff.File,jxl.write.biff.WritableSheetImpl,jxl.WorkbookSettings)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.SheetWriter: void <init>(jxl.write.biff.File,jxl.write.biff.WritableSheetImpl,jxl.WorkbookSettings)>" -> "<jxl.biff.drawing.SheetDrawingWriter: void <clinit>()>";
"<jxl.SheetSettings: void <init>(jxl.Sheet)>" -> "<jxl.SheetSettings: void <clinit>()>";
"<jxl.SheetSettings: void <init>(jxl.Sheet)>" -> "<jxl.HeaderFooter: void <init>()>";
"<jxl.SheetSettings: void <init>(jxl.Sheet)>" -> "<jxl.HeaderFooter: void <init>()>";
"<jxl.SheetSettings: void <init>(jxl.Sheet)>" -> "<java.lang.Object: void <init>()>";
"<jxl.SheetSettings: void <init>(jxl.Sheet)>" -> "<jxl.biff.HeaderFooter: void <clinit>()>";
"<jxl.write.biff.MergedCells: void <init>(jxl.write.WritableSheet)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.MergedCells: void <init>(jxl.write.WritableSheet)>" -> "<java.util.ArrayList: void <init>()>";
"<java.util.TreeSet: void <init>()>" -> "<java.util.AbstractSet: void <init>()>";
"<java.util.TreeSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.TreeSet: void <init>(java.util.Comparator)>" -> "<java.util.AbstractSet: void <init>()>";
"<java.util.TreeSet: void <init>(java.util.Comparator)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl$ColumnInfoComparator: void <init>(jxl.write.biff.WritableSheetImpl$1)>" -> "<jxl.write.biff.WritableSheetImpl$ColumnInfoComparator: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<jxl.write.biff.WritableSheetImpl: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<jxl.write.biff.WritableSheetImpl: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<jxl.write.biff.WritableSheetImpl: void <clinit>()>";
"<jxl.write.biff.SheetWriter: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.SheetWriter: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.SheetWriter: void <clinit>()>" -> "<jxl.write.biff.SheetWriter: java.lang.Class class$(java.lang.String)>";
"<jxl.SheetSettings: void <clinit>()>" -> "<jxl.format.PageOrientation: void <clinit>()>";
"<jxl.SheetSettings: void <clinit>()>" -> "<jxl.format.PaperSize: void <clinit>()>";
"<jxl.write.biff.MergedCells: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.MergedCells: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.MergedCells: void <clinit>()>" -> "<jxl.write.biff.MergedCells: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.RowRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.RowRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.SheetDrawingWriter: void <init>(jxl.WorkbookSettings)>" -> "<jxl.biff.drawing.Chart: void <clinit>()>";
"<jxl.biff.drawing.SheetDrawingWriter: void <init>(jxl.WorkbookSettings)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.WorkspaceInformationRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.WorkspaceInformationRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.drawing.SheetDrawingWriter: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.SheetDrawingWriter: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.SheetDrawingWriter: void <clinit>()>" -> "<jxl.biff.drawing.SheetDrawingWriter: java.lang.Class class$(java.lang.String)>";
"<jxl.HeaderFooter: void <init>()>" -> "<jxl.biff.HeaderFooter: void <init>()>";
"<jxl.biff.HeaderFooter: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.HeaderFooter: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.HeaderFooter: void <clinit>()>" -> "<jxl.biff.HeaderFooter: java.lang.Class class$(java.lang.String)>";
"<java.util.AbstractSet: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl$ColumnInfoComparator: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.SheetWriter: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.SheetWriter: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.format.PageOrientation: void <clinit>()>" -> "<jxl.format.PageOrientation: void <init>()>";
"<jxl.format.PageOrientation: void <clinit>()>" -> "<jxl.format.PageOrientation: void <init>()>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.format.PaperSize: void <clinit>()>" -> "<jxl.format.PaperSize: void <init>(int)>";
"<jxl.write.biff.MergedCells: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.MergedCells: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.Chart: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.Chart: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.Chart: void <clinit>()>" -> "<jxl.biff.drawing.Chart: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.SheetDrawingWriter: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.SheetDrawingWriter: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.HeaderFooter: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.HeaderFooter: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.HeaderFooter: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.format.PageOrientation: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.format.PaperSize: void <init>(int)>" -> "<jxl.format.PaperSize: void <init>(int,boolean)>";
"<jxl.biff.drawing.Chart: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.Chart: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.format.PaperSize: void <init>(int,boolean)>" -> "<jxl.format.PaperSize: void <clinit>()>";
"<jxl.format.PaperSize: void <init>(int,boolean)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.format.PaperSize: void <init>(int,boolean)>" -> "<java.lang.Object: void <init>()>";
"<jxl.format.PaperSize: void <init>(int,boolean)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.HeaderFooter: void <init>()>" -> "<jxl.HeaderFooter: jxl.biff.HeaderFooter$Contents createContents()>";
"<jxl.biff.HeaderFooter: void <init>()>" -> "<jxl.HeaderFooter: jxl.biff.HeaderFooter$Contents createContents()>";
"<jxl.biff.HeaderFooter: void <init>()>" -> "<jxl.HeaderFooter: jxl.biff.HeaderFooter$Contents createContents()>";
"<jxl.HeaderFooter: jxl.biff.HeaderFooter$Contents createContents()>" -> "<jxl.HeaderFooter$Contents: void <init>()>";
"<jxl.HeaderFooter$Contents: void <init>()>" -> "<jxl.biff.HeaderFooter$Contents: void <init>()>";
"<jxl.biff.HeaderFooter$Contents: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.HeaderFooter$Contents: void <init>()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.format.Alignment: jxl.format.Alignment getAlignment(int)>" -> "<jxl.format.Alignment: int getValue()>";
"<jxl.format.VerticalAlignment: jxl.format.VerticalAlignment getAlignment(int)>" -> "<jxl.format.VerticalAlignment: int getValue()>";
"<jxl.format.Orientation: jxl.format.Orientation getOrientation(int)>" -> "<jxl.format.Orientation: int getValue()>";
"<jxl.format.BorderLineStyle: jxl.format.BorderLineStyle getStyle(int)>" -> "<jxl.format.BorderLineStyle: int getValue()>";
"<jxl.format.Pattern: jxl.format.Pattern getPattern(int)>" -> "<jxl.format.Pattern: int getValue()>";
"<jxl.format.Colour: jxl.format.Colour getInternalColour(int)>" -> "<jxl.format.Colour: int getValue()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.ExternalSheetRecord: void <init>(jxl.read.biff.ExternalSheetRecord)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SupbookRecord: void <init>(jxl.read.biff.SupbookRecord,jxl.WorkbookSettings)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: void copyWorkbook(jxl.Workbook)>" -> "<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.SheetSettings: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: void <init>(jxl.Sheet,jxl.write.WritableSheet)>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.SheetSettings: void <init>(jxl.SheetSettings,jxl.Sheet)>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void <init>(jxl.Sheet,jxl.write.WritableSheet)>" -> "<java.lang.Object: void <init>()>";
"<jxl.SheetSettings: void <init>(jxl.SheetSettings,jxl.Sheet)>" -> "<jxl.biff.HeaderFooter: void <clinit>()>";
"<jxl.SheetSettings: void <init>(jxl.SheetSettings,jxl.Sheet)>" -> "<jxl.biff.SheetRangeImpl: void <init>(jxl.Sheet,int,int,int,int)>";
"<jxl.SheetSettings: void <init>(jxl.SheetSettings,jxl.Sheet)>" -> "<jxl.HeaderFooter: void <init>(jxl.HeaderFooter)>";
"<jxl.SheetSettings: void <init>(jxl.SheetSettings,jxl.Sheet)>" -> "<jxl.HeaderFooter: void <init>(jxl.HeaderFooter)>";
"<jxl.SheetSettings: void <init>(jxl.SheetSettings,jxl.Sheet)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.SheetSettings: void <init>(jxl.SheetSettings,jxl.Sheet)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.SheetCopier: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.SheetCopier: void <clinit>()>" -> "<jxl.write.biff.SheetCopier: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.SheetRangeImpl: void <init>(jxl.Sheet,int,int,int,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.HeaderFooter: void <init>(jxl.HeaderFooter)>" -> "<jxl.biff.HeaderFooter: void <init>(jxl.biff.HeaderFooter)>";
"<jxl.write.biff.SheetCopier: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.SheetCopier: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.HeaderFooter: void <init>(jxl.biff.HeaderFooter)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.HeaderFooter: void <init>(jxl.biff.HeaderFooter)>" -> "<jxl.HeaderFooter: jxl.biff.HeaderFooter$Contents createContents(jxl.biff.HeaderFooter$Contents)>";
"<jxl.biff.HeaderFooter: void <init>(jxl.biff.HeaderFooter)>" -> "<jxl.HeaderFooter: jxl.biff.HeaderFooter$Contents createContents(jxl.biff.HeaderFooter$Contents)>";
"<jxl.biff.HeaderFooter: void <init>(jxl.biff.HeaderFooter)>" -> "<jxl.HeaderFooter: jxl.biff.HeaderFooter$Contents createContents(jxl.biff.HeaderFooter$Contents)>";
"<jxl.HeaderFooter: jxl.biff.HeaderFooter$Contents createContents(jxl.biff.HeaderFooter$Contents)>" -> "<jxl.HeaderFooter$Contents: void <init>(jxl.HeaderFooter$Contents)>";
"<jxl.HeaderFooter$Contents: void <init>(jxl.HeaderFooter$Contents)>" -> "<jxl.biff.HeaderFooter$Contents: void <init>(jxl.biff.HeaderFooter$Contents)>";
"<jxl.biff.HeaderFooter$Contents: void <init>(jxl.biff.HeaderFooter$Contents)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.HeaderFooter$Contents: void <init>(jxl.biff.HeaderFooter$Contents)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<jxl.biff.HeaderFooter$Contents: void <init>(jxl.biff.HeaderFooter$Contents)>" -> "<jxl.biff.HeaderFooter$Contents: java.lang.String getContents()>";
"<jxl.biff.HeaderFooter$Contents: java.lang.String getContents()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: void setColumnFormats(java.util.TreeSet)>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: void setFormatRecords(jxl.biff.FormattingRecords)>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: void setHyperlinks(java.util.ArrayList)>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: void setMergedCells(jxl.write.biff.MergedCells)>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: void setRowBreaks(java.util.ArrayList)>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: void setColumnBreaks(java.util.ArrayList)>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: void setSheetWriter(jxl.write.biff.SheetWriter)>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: void setDrawings(java.util.ArrayList)>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: void setImages(java.util.ArrayList)>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: void setConditionalFormats(java.util.ArrayList)>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: void copySheet()>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: jxl.biff.DataValidation getDataValidation()>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: jxl.biff.drawing.ComboBox getComboBox()>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: jxl.write.biff.PLSRecord getPLSRecord()>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: boolean isChartOnly()>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: jxl.write.biff.ButtonPropertySetRecord getButtonPropertySet()>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: int getRows()>";
"<jxl.write.biff.WritableSheetImpl: void copy(jxl.Sheet)>" -> "<jxl.write.biff.SheetCopier: jxl.biff.AutoFilter getAutoFilter()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.PLSRecord: void <init>(jxl.read.biff.PLSRecord)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.ButtonPropertySetRecord: void <init>(jxl.read.biff.ButtonPropertySetRecord)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.DataValidation: void <init>(jxl.biff.DataValidation,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.drawing.ComboBox: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.drawing.Button: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.drawing.Comment: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.WritableImage: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.SheetRangeImpl: void <init>(jxl.biff.SheetRangeImpl,jxl.Sheet)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.WritableHyperlink: void <init>(jxl.Hyperlink,jxl.write.WritableSheet)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.ColumnInfoRecord: void <init>(jxl.read.biff.ColumnInfoRecord,int,jxl.biff.FormattingRecords)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.SheetCopier: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.DataValidation: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.drawing.ComboBox: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.drawing.Button: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.drawing.Comment: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.drawing.Drawing: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.WritableImage: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.HyperlinkRecord: void <clinit>()>";
"<jxl.write.biff.PLSRecord: void <init>(jxl.read.biff.PLSRecord)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.PLSRecord: void <init>(jxl.read.biff.PLSRecord)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.DataValidation: void <init>(jxl.biff.DataValidation,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.DataValidation: void <init>(jxl.biff.DataValidation,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.DataValiditySettingsRecord: void <init>(jxl.biff.DataValiditySettingsRecord,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>";
"<jxl.biff.DataValidation: void <init>(jxl.biff.DataValidation,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.biff.DataValidation: void <init>(jxl.biff.DataValidation,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.DataValidityListRecord: void <init>(jxl.biff.DataValidityListRecord)>";
"<jxl.biff.DataValidation: void <init>(jxl.biff.DataValidation,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.DataValidation: void <init>(jxl.biff.DataValidation,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.DataValiditySettingsRecord: void <clinit>()>";
"<jxl.biff.drawing.ComboBox: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.ComboBox: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.drawing.ComboBox: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.Button: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.Button: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.drawing.Button: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.Comment: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.Comment: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.drawing.Comment: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.WritableImage: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup)>" -> "<jxl.biff.drawing.Drawing: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup)>";
"<java.lang.Integer: void <init>(int)>" -> "<java.lang.Number: void <init>()>";
"<java.lang.Integer: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.SheetRangeImpl: void <init>(jxl.biff.SheetRangeImpl,jxl.Sheet)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.WritableHyperlink: void <init>(jxl.Hyperlink,jxl.write.WritableSheet)>" -> "<jxl.write.biff.HyperlinkRecord: void <init>(jxl.Hyperlink,jxl.write.WritableSheet)>";
"<jxl.write.biff.ColumnInfoRecord: void <init>(jxl.read.biff.ColumnInfoRecord,int,jxl.biff.FormattingRecords)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.ColumnInfoRecord: void <init>(jxl.read.biff.ColumnInfoRecord,int,jxl.biff.FormattingRecords)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.DataValidation: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.DataValidation: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.DataValidation: void <clinit>()>" -> "<jxl.biff.DataValidation: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.ComboBox: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.ComboBox: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.ComboBox: void <clinit>()>" -> "<jxl.biff.drawing.ComboBox: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.Button: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.Button: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.Button: void <clinit>()>" -> "<jxl.biff.drawing.Button: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.drawing.Comment: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.Comment: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.drawing.Comment: void <clinit>()>" -> "<jxl.biff.drawing.Comment: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.HyperlinkRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void <clinit>()>" -> "<jxl.write.biff.HyperlinkRecord$LinkType: void <init>(jxl.write.biff.HyperlinkRecord$1)>";
"<jxl.write.biff.HyperlinkRecord: void <clinit>()>" -> "<jxl.write.biff.HyperlinkRecord$LinkType: void <init>(jxl.write.biff.HyperlinkRecord$1)>";
"<jxl.write.biff.HyperlinkRecord: void <clinit>()>" -> "<jxl.write.biff.HyperlinkRecord$LinkType: void <init>(jxl.write.biff.HyperlinkRecord$1)>";
"<jxl.write.biff.HyperlinkRecord: void <clinit>()>" -> "<jxl.write.biff.HyperlinkRecord$LinkType: void <init>(jxl.write.biff.HyperlinkRecord$1)>";
"<jxl.write.biff.HyperlinkRecord: void <clinit>()>" -> "<jxl.write.biff.HyperlinkRecord$LinkType: void <init>(jxl.write.biff.HyperlinkRecord$1)>";
"<jxl.write.biff.HyperlinkRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.HyperlinkRecord: void <clinit>()>" -> "<jxl.write.biff.HyperlinkRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.HyperlinkRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.DataValiditySettingsRecord: void <init>(jxl.biff.DataValiditySettingsRecord,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.DataValiditySettingsRecord: void <init>(jxl.biff.DataValiditySettingsRecord,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.DataValiditySettingsRecord: void <init>(jxl.biff.DataValiditySettingsRecord,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.DataValiditySettingsRecord: void <init>(jxl.biff.DataValiditySettingsRecord,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.DataValiditySettingsRecord: void <init>(jxl.biff.DataValiditySettingsRecord,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.DataValiditySettingsRecord: void <init>(jxl.biff.DataValiditySettingsRecord,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.DataValidityListRecord: void <init>(jxl.biff.DataValidityListRecord)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.DataValidityListRecord: void <init>(jxl.biff.DataValidityListRecord)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.DataValiditySettingsRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.DataValiditySettingsRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.DataValiditySettingsRecord: void <clinit>()>" -> "<jxl.biff.DataValiditySettingsRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.DataValiditySettingsRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.drawing.Drawing: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Number: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Number: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(jxl.Hyperlink,jxl.write.WritableSheet)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void <init>(jxl.Hyperlink,jxl.write.WritableSheet)>" -> "<jxl.biff.SheetRangeImpl: void <init>(jxl.Sheet,int,int,int,int)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(jxl.Hyperlink,jxl.write.WritableSheet)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(jxl.Hyperlink,jxl.write.WritableSheet)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(jxl.Hyperlink,jxl.write.WritableSheet)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void <init>(jxl.Hyperlink,jxl.write.WritableSheet)>" -> "<jxl.write.biff.HyperlinkRecord: void <clinit>()>";
"<jxl.biff.DataValidation: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.DataValidation: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.ComboBox: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.ComboBox: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.Button: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.Button: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.drawing.Comment: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.drawing.Comment: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.HyperlinkRecord$LinkType: void <init>(jxl.write.biff.HyperlinkRecord$1)>" -> "<jxl.write.biff.HyperlinkRecord$LinkType: void <init>()>";
"<jxl.write.biff.HyperlinkRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.HyperlinkRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.DataValiditySettingsRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.DataValiditySettingsRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.HyperlinkRecord$LinkType: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.DataValidation: void <init>(jxl.biff.DataValidation,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.drawing.Comment: int getColumn()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.drawing.Comment: int getRow()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.ColumnInfoRecord: void setHidden(boolean)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.SheetCopier: void shallowCopyCells()>";
"<jxl.write.biff.SheetCopier: void shallowCopyCells()>" -> "<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>";
"<jxl.write.biff.SheetCopier: void shallowCopyCells()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.Blank: void <init>(jxl.Cell)>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.ReadErrorFormulaRecord: void <init>(jxl.biff.FormulaData)>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.ReadDateFormulaRecord: void <init>(jxl.biff.FormulaData)>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.ReadBooleanFormulaRecord: void <init>(jxl.biff.FormulaData)>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.ReadStringFormulaRecord: void <init>(jxl.biff.FormulaData)>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.ReadNumberFormulaRecord: void <init>(jxl.biff.FormulaData)>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.Boolean: void <init>(jxl.BooleanCell)>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.DateTime: void <init>(jxl.DateCell)>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.Number: void <init>(jxl.NumberCell)>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.Label: void <init>(jxl.LabelCell)>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.BlankRecord: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.ReadFormulaRecord: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.ReadErrorFormulaRecord: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.ReadFormulaRecord: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.ReadFormulaRecord: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.ReadFormulaRecord: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.ReadStringFormulaRecord: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.ReadFormulaRecord: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.ReadNumberFormulaRecord: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.DateRecord: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.DateTime: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.NumberRecord: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.SheetCopier: jxl.write.WritableCell shallowCopyCell(jxl.Cell)>" -> "<jxl.write.biff.LabelRecord: void <clinit>()>";
"<jxl.write.Blank: void <init>(jxl.Cell)>" -> "<jxl.write.biff.BlankRecord: void <init>(jxl.Cell)>";
"<jxl.write.biff.ReadErrorFormulaRecord: void <init>(jxl.biff.FormulaData)>" -> "<jxl.write.biff.ReadFormulaRecord: void <init>(jxl.biff.FormulaData)>";
"<jxl.write.biff.ReadDateFormulaRecord: void <init>(jxl.biff.FormulaData)>" -> "<jxl.write.biff.ReadFormulaRecord: void <init>(jxl.biff.FormulaData)>";
"<jxl.write.biff.ReadBooleanFormulaRecord: void <init>(jxl.biff.FormulaData)>" -> "<jxl.write.biff.ReadFormulaRecord: void <init>(jxl.biff.FormulaData)>";
"<jxl.write.biff.ReadStringFormulaRecord: void <init>(jxl.biff.FormulaData)>" -> "<jxl.write.biff.ReadFormulaRecord: void <init>(jxl.biff.FormulaData)>";
"<jxl.write.biff.ReadNumberFormulaRecord: void <init>(jxl.biff.FormulaData)>" -> "<jxl.write.biff.ReadFormulaRecord: void <init>(jxl.biff.FormulaData)>";
"<jxl.write.Boolean: void <init>(jxl.BooleanCell)>" -> "<jxl.write.biff.BooleanRecord: void <init>(jxl.BooleanCell)>";
"<jxl.write.DateTime: void <init>(jxl.DateCell)>" -> "<jxl.write.biff.DateRecord: void <init>(jxl.DateCell)>";
"<jxl.write.Number: void <init>(jxl.NumberCell)>" -> "<jxl.write.biff.NumberRecord: void <init>(jxl.NumberCell)>";
"<jxl.write.Label: void <init>(jxl.LabelCell)>" -> "<jxl.write.biff.LabelRecord: void <init>(jxl.LabelCell)>";
"<jxl.write.biff.ReadFormulaRecord: void <clinit>()>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.ReadFormulaRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.ReadFormulaRecord: void <clinit>()>" -> "<jxl.write.biff.ReadFormulaRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.ReadFormulaRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.ReadFormulaRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.ReadErrorFormulaRecord: void <clinit>()>" -> "<jxl.write.biff.ReadFormulaRecord: void <clinit>()>";
"<jxl.write.biff.ReadErrorFormulaRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.ReadErrorFormulaRecord: void <clinit>()>" -> "<jxl.write.biff.ReadErrorFormulaRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.ReadErrorFormulaRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.ReadErrorFormulaRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.ReadErrorFormulaRecord: void <clinit>()>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.ReadStringFormulaRecord: void <clinit>()>" -> "<jxl.write.biff.ReadFormulaRecord: void <clinit>()>";
"<jxl.write.biff.ReadStringFormulaRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.ReadStringFormulaRecord: void <clinit>()>" -> "<jxl.write.biff.ReadStringFormulaRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.ReadStringFormulaRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.ReadStringFormulaRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.ReadStringFormulaRecord: void <clinit>()>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.ReadNumberFormulaRecord: void <clinit>()>" -> "<jxl.write.biff.ReadFormulaRecord: void <clinit>()>";
"<jxl.write.biff.ReadNumberFormulaRecord: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.ReadNumberFormulaRecord: void <clinit>()>" -> "<jxl.write.biff.ReadNumberFormulaRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.ReadNumberFormulaRecord: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.ReadNumberFormulaRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.ReadNumberFormulaRecord: void <clinit>()>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.DateTime: void <clinit>()>" -> "<jxl.write.biff.DateRecord: void <clinit>()>";
"<jxl.write.DateTime: void <clinit>()>" -> "<jxl.write.biff.DateRecord$GMTDate: void <init>()>";
"<jxl.write.DateTime: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.DateTime: void <clinit>()>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.BlankRecord: void <init>(jxl.Cell)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.BlankRecord: void <init>(jxl.Cell)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,jxl.Cell)>";
"<jxl.write.biff.ReadFormulaRecord: void <init>(jxl.biff.FormulaData)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.ReadFormulaRecord: void <init>(jxl.biff.FormulaData)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,jxl.Cell)>";
"<jxl.write.biff.BooleanRecord: void <init>(jxl.BooleanCell)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.BooleanRecord: void <init>(jxl.BooleanCell)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,jxl.Cell)>";
"<jxl.write.biff.DateRecord: void <init>(jxl.DateCell)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.DateRecord: void <init>(jxl.DateCell)>" -> "<jxl.write.biff.DateRecord: void calculateValue(boolean)>";
"<jxl.write.biff.DateRecord: void <init>(jxl.DateCell)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,jxl.Cell)>";
"<jxl.write.biff.NumberRecord: void <init>(jxl.NumberCell)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.NumberRecord: void <init>(jxl.NumberCell)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,jxl.Cell)>";
"<jxl.write.biff.LabelRecord: void <init>(jxl.LabelCell)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.LabelRecord: void <init>(jxl.LabelCell)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,jxl.Cell)>";
"<jxl.write.biff.ReadFormulaRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.ReadFormulaRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.ReadErrorFormulaRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.ReadErrorFormulaRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.ReadStringFormulaRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.ReadStringFormulaRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.ReadNumberFormulaRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.ReadNumberFormulaRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.DateRecord$GMTDate: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,jxl.Cell)>" -> "<jxl.write.WritableCellFeatures: void <clinit>()>";
"<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,jxl.Cell)>" -> "<jxl.write.WritableCellFeatures: void <init>(jxl.CellFeatures)>";
"<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,jxl.Cell)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int)>";
"<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,jxl.Cell)>" -> "<jxl.biff.BaseCellFeatures: void <clinit>()>";
"<jxl.write.biff.DateRecord: void calculateValue(boolean)>" -> "<java.util.Calendar: java.util.Calendar getInstance()>";
"<jxl.write.WritableCellFeatures: void <init>(jxl.CellFeatures)>" -> "<jxl.CellFeatures: void <init>(jxl.CellFeatures)>";
"<jxl.CellFeatures: void <init>(jxl.CellFeatures)>" -> "<jxl.biff.BaseCellFeatures: void <init>(jxl.biff.BaseCellFeatures)>";
"<jxl.biff.BaseCellFeatures: void <init>(jxl.biff.BaseCellFeatures)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,jxl.Cell)>" -> "<jxl.biff.BaseCellFeatures: void setWritableCell(jxl.write.biff.CellValue)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.DataValidation: int getComboBoxObjectId()>";
"<jxl.biff.DataValidation: void <init>(jxl.biff.DataValidation,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.DataValidation: jxl.biff.DataValidityListRecord getDataValidityList()>";
"<jxl.biff.DataValidation: void <init>(jxl.biff.DataValidation,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.DataValidation: jxl.biff.DataValiditySettingsRecord[] getDataValiditySettings()>";
"<jxl.biff.DataValidation: jxl.biff.DataValiditySettingsRecord[] getDataValiditySettings()>" -> "<jxl.biff.DataValiditySettingsRecord: void <clinit>()>";
"<jxl.biff.DataValidation: jxl.biff.DataValiditySettingsRecord[] getDataValiditySettings()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.DataValidation: jxl.biff.DataValiditySettingsRecord[] getDataValiditySettings()>" -> "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
"<jxl.biff.DataValidityListRecord: void <init>(jxl.biff.DataValidityListRecord)>" -> "<jxl.biff.DataValidityListRecord: byte[] getData()>";
"<jxl.write.biff.SheetCopier: void <init>(jxl.Sheet,jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.NameRecord: java.lang.String getName()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.drawing.DrawingGroup: void updateData(jxl.biff.drawing.DrawingGroup)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.XFRecord: void uninitialize()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.XFRecord: void uninitialize()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.XFRecord: void uninitialize()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.XFRecord: void uninitialize()>";
"<jxl.biff.XFRecord: void uninitialize()>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.biff.XFRecord: void uninitialize()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.XFRecord: void uninitialize()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.FontRecord: void uninitialize()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.FontRecord: void uninitialize()>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>" -> "<jxl.write.biff.ExternalSheetRecord: void sheetInserted(int)>";
"<jxl.write.biff.ExternalSheetRecord: void sheetInserted(int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>" -> "<java.util.ArrayList: void add(int,java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>" -> "<java.util.ArrayList: void add(int,java.lang.Object)>";
"<java.util.ArrayList: void add(int,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour,jxl.format.ScriptStyle)>" -> "<jxl.format.ScriptStyle: int getValue()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour,jxl.format.ScriptStyle)>" -> "<jxl.format.Colour: int getValue()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour,jxl.format.ScriptStyle)>" -> "<jxl.format.UnderlineStyle: int getValue()>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.String: int indexOf(int)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.String: int indexOf(int)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.String: int lastIndexOf(int)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.String: int lastIndexOf(int)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.String: int length()>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.String: int length()>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.String: int length()>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.write.biff.NumberFormatRecord: java.lang.String trimInvalidChars(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<java.lang.String: java.lang.String substring(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: int lastIndexOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.CellXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.biff.XFRecord: void setXFDetails(jxl.biff.XFRecord$XFType,int)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.WorkbookSettings: boolean getPropertySetsDisabled()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.WorkbookSettings: boolean getNamesDisabled()>";
"<jxl.write.biff.File: void <init>(java.io.OutputStream,jxl.WorkbookSettings,jxl.read.biff.CompoundFile)>" -> "<jxl.WorkbookSettings: int getInitialFileSize()>";
"<jxl.write.biff.File: void <init>(java.io.OutputStream,jxl.WorkbookSettings,jxl.read.biff.CompoundFile)>" -> "<jxl.WorkbookSettings: int getArrayGrowSize()>";
"<jxl.write.biff.NumberFormatRecord: void <init>(java.lang.String)>" -> "<jxl.biff.FormatRecord: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>";
"<jxl.write.biff.NumberFormatRecord: void <init>(java.lang.String)>" -> "<jxl.biff.FormatRecord: void setFormatString(java.lang.String)>";
"<jxl.biff.FormatRecord: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<jxl.biff.FormatRecord: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.FormatRecord: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.FormatRecord: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.biff.FormatRecord: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int length()>";
"<jxl.biff.FormatRecord: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<jxl.biff.FormatRecord: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<jxl.biff.FormatRecord: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.FormatRecord: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<jxl.write.biff.DateFormatRecord: void <init>(java.lang.String)>" -> "<jxl.biff.FormatRecord: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>";
"<jxl.write.biff.DateFormatRecord: void <init>(java.lang.String)>" -> "<jxl.biff.FormatRecord: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>";
"<jxl.write.biff.DateFormatRecord: void <init>(java.lang.String)>" -> "<jxl.biff.FormatRecord: void setFormatString(java.lang.String)>";
"<jxl.demo.ReadWrite: void readWrite()>" -> "<jxl.write.biff.WritableWorkbookImpl: void write()>";
"<jxl.demo.ReadWrite: void readWrite()>" -> "<jxl.write.biff.WritableWorkbookImpl: void close()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.biff.BuiltInName: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.biff.IntegerHelper: byte[] getFourBytes(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.EOFRecord: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.ExternalNameRecord: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.SupbookRecord: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.CountryRecord: void <init>(jxl.biff.CountryCode,jxl.biff.CountryCode)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.biff.CountryCode: jxl.biff.CountryCode getCountryCode(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.biff.CountryCode: jxl.biff.CountryCode getCountryCode(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.BoundsheetRecord: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.UsesElfsRecord: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.BookboolRecord: void <init>(boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.RefreshAllRecord: void <init>(boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.PrecisionRecord: void <init>(boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.NineteenFourRecord: void <init>(boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.HideobjRecord: void <init>(boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.BackupRecord: void <init>(boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.Window1Record: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.Prot4RevPassRecord: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.Prot4RevRecord: void <init>(boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.PasswordRecord: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.ProtectRecord: void <init>(boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WindowProtectRecord: void <init>(boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.FunctionGroupCountRecord: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.ObjProjRecord: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.TabIdRecord: void <init>(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.DSFRecord: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.CodepageRecord: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WriteAccessRecord: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.InterfaceEndRecord: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.MMSRecord: void <init>(int,int)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.InterfaceHeaderRecord: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.BOFRecord: void <init>(jxl.write.biff.BOFRecord$WorkbookGlobalsBOF)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: void rationalize()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.biff.CountryCode: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.BOFRecord: void <clinit>()>";
"<jxl.biff.IntegerHelper: byte[] getFourBytes(int)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.biff.IntegerHelper: byte[] getFourBytes(int)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.EOFRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.EOFRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.ExternalNameRecord: void <init>(java.lang.String)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.ExternalNameRecord: void <init>(java.lang.String)>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.ExternalNameRecord: void <init>(java.lang.String)>" -> "<jxl.write.biff.ExternalNameRecord: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.ExternalNameRecord: void <init>(java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.ExternalNameRecord: void <init>(java.lang.String)>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.ExternalNameRecord: void <init>(java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<jxl.write.biff.SupbookRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.SupbookRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>()>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.CountryRecord: void <init>(jxl.biff.CountryCode,jxl.biff.CountryCode)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.CountryRecord: void <init>(jxl.biff.CountryCode,jxl.biff.CountryCode)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.CountryCode: jxl.biff.CountryCode getCountryCode(java.lang.String)>" -> "<jxl.biff.CountryCode: void <clinit>()>";
"<jxl.biff.CountryCode: jxl.biff.CountryCode getCountryCode(java.lang.String)>" -> "<jxl.biff.CountryCode: void <clinit>()>";
"<jxl.write.biff.BoundsheetRecord: void <init>(java.lang.String)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.BoundsheetRecord: void <init>(java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.UsesElfsRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.UsesElfsRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.BookboolRecord: void <init>(boolean)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.BookboolRecord: void <init>(boolean)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.BookboolRecord: void <init>(boolean)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.RefreshAllRecord: void <init>(boolean)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.RefreshAllRecord: void <init>(boolean)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.RefreshAllRecord: void <init>(boolean)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.PrecisionRecord: void <init>(boolean)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.PrecisionRecord: void <init>(boolean)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.PrecisionRecord: void <init>(boolean)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.NineteenFourRecord: void <init>(boolean)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.NineteenFourRecord: void <init>(boolean)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.NineteenFourRecord: void <init>(boolean)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.HideobjRecord: void <init>(boolean)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.HideobjRecord: void <init>(boolean)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.HideobjRecord: void <init>(boolean)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.BackupRecord: void <init>(boolean)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.BackupRecord: void <init>(boolean)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.BackupRecord: void <init>(boolean)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.Window1Record: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.Window1Record: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.Prot4RevPassRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.Prot4RevPassRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.Prot4RevRecord: void <init>(boolean)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.Prot4RevRecord: void <init>(boolean)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.Prot4RevRecord: void <init>(boolean)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.PasswordRecord: void <init>(java.lang.String)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.PasswordRecord: void <init>(java.lang.String)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.PasswordRecord: void <init>(java.lang.String)>" -> "<jxl.write.biff.PasswordRecord: int rotLeft15Bit(int,int)>";
"<jxl.write.biff.PasswordRecord: void <init>(java.lang.String)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.PasswordRecord: void <init>(java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.ProtectRecord: void <init>(boolean)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.ProtectRecord: void <init>(boolean)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.ProtectRecord: void <init>(boolean)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.WindowProtectRecord: void <init>(boolean)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.WindowProtectRecord: void <init>(boolean)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.WindowProtectRecord: void <init>(boolean)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.FunctionGroupCountRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.FunctionGroupCountRecord: void <init>()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.FunctionGroupCountRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.ObjProjRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.ObjProjRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.TabIdRecord: void <init>(int)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.TabIdRecord: void <init>(int)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.TabIdRecord: void <init>(int)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.DSFRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.DSFRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.CodepageRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.CodepageRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.WriteAccessRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.WriteAccessRecord: void <init>()>" -> "<jxl.biff.StringHelper: void getBytes(java.lang.String,byte[],int)>";
"<jxl.write.biff.WriteAccessRecord: void <init>()>" -> "<jxl.Workbook: java.lang.String getVersion()>";
"<jxl.write.biff.WriteAccessRecord: void <init>()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.WriteAccessRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.WriteAccessRecord: void <init>()>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.write.biff.InterfaceEndRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.InterfaceEndRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.MMSRecord: void <init>(int,int)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.MMSRecord: void <init>(int,int)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.InterfaceHeaderRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.InterfaceHeaderRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.BOFRecord: void <init>(jxl.write.biff.BOFRecord$WorkbookGlobalsBOF)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.BOFRecord: void <init>(jxl.write.biff.BOFRecord$WorkbookGlobalsBOF)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.BOFRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.BOFRecord: void <clinit>()>" -> "<jxl.write.biff.BOFRecord$SheetBOF: void <init>(jxl.write.biff.BOFRecord$1)>";
"<jxl.write.biff.BOFRecord: void <clinit>()>" -> "<jxl.write.biff.BOFRecord$WorkbookGlobalsBOF: void <init>(jxl.write.biff.BOFRecord$1)>";
"<jxl.write.biff.ExternalNameRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.ExternalNameRecord: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.StringHelper: void getBytes(java.lang.String,byte[],int)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.StringHelper: void getBytes(java.lang.String,byte[],int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.StringHelper: void getBytes(java.lang.String,byte[],int)>" -> "<jxl.biff.StringHelper: byte[] getBytes(java.lang.String)>";
"<jxl.biff.StringHelper: void getBytes(java.lang.String,byte[],int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.BOFRecord$SheetBOF: void <init>(jxl.write.biff.BOFRecord$1)>" -> "<jxl.write.biff.BOFRecord$SheetBOF: void <init>()>";
"<jxl.write.biff.BOFRecord$WorkbookGlobalsBOF: void <init>(jxl.write.biff.BOFRecord$1)>" -> "<jxl.write.biff.BOFRecord$WorkbookGlobalsBOF: void <init>()>";
"<jxl.write.biff.BOFRecord$SheetBOF: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.BOFRecord$WorkbookGlobalsBOF: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.WriteAccessRecord: void <init>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WriteAccessRecord: void <init>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WriteAccessRecord: void <init>()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.biff.CountryCode: jxl.biff.CountryCode getCountryCode(java.lang.String)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.CountryRecord: void <init>(jxl.biff.CountryCode,jxl.biff.CountryCode)>" -> "<jxl.biff.CountryCode: int getValue()>";
"<jxl.write.biff.SupbookRecord: void <init>()>" -> "<java.lang.Throwable: void printStackTrace()>";
"<jxl.write.biff.WritableWorkbookImpl: void close()>" -> "<jxl.write.biff.File: void close(boolean)>";
"<jxl.write.biff.File: void close(boolean)>" -> "<jxl.write.biff.CompoundFile: void <clinit>()>";
"<jxl.write.biff.File: void close(boolean)>" -> "<java.lang.System: void gc()>";
"<jxl.write.biff.File: void close(boolean)>" -> "<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>";
"<jxl.write.biff.File: void close(boolean)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.File: void close(boolean)>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void <clinit>()>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.write.biff.CompoundFile: void <clinit>()>" -> "<jxl.write.biff.CompoundFile: java.lang.Class class$(java.lang.String)>";
"<jxl.write.biff.CompoundFile: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CompoundFile: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<java.lang.Math: double ceil(double)>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<java.lang.Math: double ceil(double)>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<java.lang.Math: double ceil(double)>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<java.lang.Math: double ceil(double)>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CompoundFile: int getBigBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CompoundFile: int getBigBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CompoundFile: int getBigBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CompoundFile: int getBigBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<jxl.biff.BaseCompoundFile: void <init>()>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.write.biff.CompoundFile: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.write.biff.CompoundFile: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CompoundFile: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CopyAdditionalPropertySetsException: void <init>()>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CompoundFile: int getSmallBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CompoundFile: int getBigBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CompoundFile$ReadPropertyStorage: void <init>(jxl.biff.BaseCompoundFile$PropertyStorage,byte[],int)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CompoundFile$ReadPropertyStorage: void <init>(jxl.biff.BaseCompoundFile$PropertyStorage,byte[],int)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CompoundFile$ReadPropertyStorage: void <init>(jxl.biff.BaseCompoundFile$PropertyStorage,byte[],int)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<java.util.HashMap: void <init>()>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.write.biff.CompoundFile: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.write.biff.CopyAdditionalPropertySetsException: void <init>()>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.CopyAdditionalPropertySetsException: void <init>()>" -> "<jxl.write.biff.JxlWriteException: void <init>(jxl.write.biff.JxlWriteException$WriteMessage)>";
"<jxl.write.biff.CompoundFile$ReadPropertyStorage: void <init>(jxl.biff.BaseCompoundFile$PropertyStorage,byte[],int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.JxlWriteException: void <clinit>()>" -> "<jxl.write.biff.JxlWriteException$WriteMessage: void <init>(java.lang.String)>";
"<jxl.write.biff.JxlWriteException: void <clinit>()>" -> "<jxl.write.biff.JxlWriteException$WriteMessage: void <init>(java.lang.String)>";
"<jxl.write.biff.JxlWriteException: void <clinit>()>" -> "<jxl.write.biff.JxlWriteException$WriteMessage: void <init>(java.lang.String)>";
"<jxl.write.biff.JxlWriteException: void <clinit>()>" -> "<jxl.write.biff.JxlWriteException$WriteMessage: void <init>(java.lang.String)>";
"<jxl.write.biff.JxlWriteException: void <clinit>()>" -> "<jxl.write.biff.JxlWriteException$WriteMessage: void <init>(java.lang.String)>";
"<jxl.write.biff.JxlWriteException: void <init>(jxl.write.biff.JxlWriteException$WriteMessage)>" -> "<jxl.write.WriteException: void <init>(java.lang.String)>";
"<jxl.write.biff.JxlWriteException$WriteMessage: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.WriteException: void <init>(java.lang.String)>" -> "<jxl.JXLException: void <init>(java.lang.String)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<common.log.SimpleLogger: void error(java.lang.Object)>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.File: void close(boolean)>" -> "<jxl.write.biff.CompoundFile: void write()>";
"<jxl.write.biff.CompoundFile: void write()>" -> "<jxl.write.biff.CompoundFile: void writeHeader()>";
"<jxl.write.biff.CompoundFile: void write()>" -> "<jxl.write.biff.CompoundFile: void writePropertySets()>";
"<jxl.write.biff.CompoundFile: void write()>" -> "<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>";
"<jxl.write.biff.CompoundFile: void write()>" -> "<jxl.write.biff.CompoundFile: void writeSmallBlockDepotChain()>";
"<jxl.write.biff.CompoundFile: void write()>" -> "<jxl.write.biff.CompoundFile: void writeSmallBlockDepot()>";
"<jxl.write.biff.CompoundFile: void write()>" -> "<jxl.write.biff.CompoundFile: void writeAdditionalPropertySets()>";
"<jxl.write.biff.CompoundFile: void write()>" -> "<jxl.write.biff.CompoundFile: void writeSummaryData()>";
"<jxl.write.biff.CompoundFile: void write()>" -> "<jxl.write.biff.CompoundFile: void writeDocumentSummaryData()>";
"<jxl.write.biff.CompoundFile: void write()>" -> "<jxl.write.biff.CompoundFile: void writeExcelData()>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<jxl.write.biff.CompoundFile: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.write.biff.CompoundFile: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.write.biff.CompoundFile: int getSmallBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.write.biff.CompoundFile: int getBigBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,java.lang.String)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,java.lang.String)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,java.lang.String)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,java.lang.String)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,java.lang.String)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.write.biff.CompoundFile: int getSmallBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.write.biff.CompoundFile: int getBigBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.write.biff.CompoundFile: int getBigBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.write.biff.CompoundFile: int getBigBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.write.biff.CompoundFile: int getBigBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.write.biff.CompoundFile: void writeBlockChain(int,int)>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.write.biff.CompoundFile: void checkBbdPos()>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.write.biff.CompoundFile: void writeBlockChain(int,int)>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.write.biff.CompoundFile: void writeBlockChain(int,int)>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.write.biff.CompoundFile: void writeAdditionalPropertySetBlockChains()>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.write.biff.CompoundFile: void checkBbdPos()>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.write.biff.CompoundFile: void checkBbdPos()>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.write.biff.CompoundFile: void checkBbdPos()>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.write.biff.CompoundFile: void checkBbdPos()>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.write.biff.CompoundFile: void writeBlockChain(int,int)>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<jxl.write.biff.CompoundFile: void checkBbdPos()>";
"<jxl.write.biff.CompoundFile: void writeSmallBlockDepotChain()>" -> "<jxl.write.biff.CompoundFile: int getSmallBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void writeSmallBlockDepotChain()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeSmallBlockDepotChain()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeSmallBlockDepot()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.CompoundFile: void writeSmallBlockDepot()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.CompoundFile: void writeSmallBlockDepot()>" -> "<jxl.write.biff.CompoundFile: int getSmallBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void writeAdditionalPropertySets()>" -> "<jxl.write.biff.CompoundFile: int getBigBlocksRequired(int)>";
"<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>" -> "<jxl.biff.IntegerHelper: byte[] getFourBytes(int)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,java.lang.String)>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,java.lang.String)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.CompoundFile: void writeBlockChain(int,int)>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.write.biff.CompoundFile: void writeBlockChain(int,int)>" -> "<jxl.write.biff.CompoundFile: void checkBbdPos()>";
"<jxl.write.biff.CompoundFile: void writeBlockChain(int,int)>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeBlockChain(int,int)>" -> "<jxl.write.biff.CompoundFile: void checkBbdPos()>";
"<jxl.write.biff.CompoundFile: void writeBlockChain(int,int)>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writeAdditionalPropertySetBlockChains()>" -> "<jxl.write.biff.CompoundFile: int getBigBlocksRequired(int)>";
"<jxl.write.biff.CompoundFile: void writeAdditionalPropertySetBlockChains()>" -> "<jxl.write.biff.CompoundFile: void writeBlockChain(int,int)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,java.lang.String)>" -> "<java.lang.String: int length()>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,java.lang.String)>" -> "<java.lang.String: int length()>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,java.lang.String)>" -> "<java.lang.String: int length()>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void <init>(jxl.biff.BaseCompoundFile,java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setType(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setStartBlock(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setSize(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setPrevious(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setNext(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setChild(int)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void setStartBlock(int)>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void setSize(int)>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void setPrevious(int)>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void setNext(int)>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.biff.BaseCompoundFile$PropertyStorage: void setChild(int)>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setType(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setStartBlock(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setSize(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setPrevious(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setNext(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setColour(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setType(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setStartBlock(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setSize(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setType(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setStartBlock(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setSize(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setType(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setStartBlock(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setSize(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setPrevious(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setNext(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setChild(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setChild(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setPrevious(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setNext(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setChild(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setPrevious(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setNext(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<jxl.biff.BaseCompoundFile$PropertyStorage: void setChild(int)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.CompoundFile: void writeAdditionalPropertySets()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.CompoundFile: void writeSmallBlockDepot()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.CompoundFile: void writeSmallBlockDepotChain()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.CompoundFile: void writeAdditionalPropertySetBlockChains()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.File: void close(boolean)>" -> "<jxl.WorkbookSettings: boolean getGCDisabled()>";
"<jxl.write.biff.File: void close(boolean)>" -> "<java.io.OutputStream: void flush()>";
"<jxl.write.biff.File: void close(boolean)>" -> "<java.io.FileOutputStream: void close()>";
"<java.io.OutputStream: void flush()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.CountryRecord: void <init>(jxl.biff.CountryCode,jxl.biff.CountryCode)>" -> "<jxl.biff.CountryCode: int getValue()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.biff.CountryCode: java.lang.String getCode()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.biff.CountryCode: java.lang.String getCode()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.BoundsheetRecord: void setHidden()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.BoundsheetRecord: void setChartOnly()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: int getNumberOfSheets()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet getSheet(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: void addNameArea(jxl.biff.BuiltInName,jxl.write.WritableSheet,int,int,int,int,boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: int getNumberOfSheets()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: int getNumberOfSheets()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: int getNumberOfSheets()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet getSheet(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: int getNumberOfSheets()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet getSheet(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet getSheet(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: int getNumberOfSheets()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet getSheet(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(jxl.biff.BuiltInName,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(jxl.biff.BuiltInName,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<jxl.write.biff.NameRecord: void <init>(jxl.biff.BuiltInName,int,int,int,int,int,int,boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(jxl.biff.BuiltInName,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<jxl.write.biff.WritableWorkbookImpl: int getInternalSheetIndex(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(jxl.biff.BuiltInName,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.NameRecord: void <init>(jxl.biff.BuiltInName,int,int,int,int,int,int,boolean)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.NameRecord: void <init>(jxl.biff.BuiltInName,int,int,int,int,int,int,boolean)>" -> "<jxl.write.biff.NameRecord$NameRange: void <init>(jxl.write.biff.NameRecord,int,int,int,int,int)>";
"<jxl.write.biff.NameRecord: void <init>(jxl.biff.BuiltInName,int,int,int,int,int,int,boolean)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.NameRecord$NameRange: void <init>(jxl.write.biff.NameRecord,int,int,int,int,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(jxl.biff.BuiltInName,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(jxl.biff.BuiltInName,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.SupbookRecord: void <init>(java.lang.String,jxl.WorkbookSettings)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.SupbookRecord: void <init>(int,jxl.WorkbookSettings)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.ExternalSheetRecord: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.WritableWorkbookImpl: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.SupbookRecord: void <init>(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(java.lang.String,jxl.WorkbookSettings)>" -> "<java.lang.String: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(int,jxl.WorkbookSettings)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(int,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.SupbookRecord: void <init>(int,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void <init>(int,jxl.WorkbookSettings)>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.ExternalSheetRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.ExternalSheetRecord: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.ExternalSheetRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.SupbookRecord: jxl.write.biff.SupbookRecord$SupbookType getType()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.SupbookRecord: int getNumberOfSheets()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.SupbookRecord: jxl.write.biff.SupbookRecord$SupbookType getType()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.SupbookRecord: java.lang.String getFileName()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.SupbookRecord: int getSheetIndex(java.lang.String)>";
"<jxl.write.biff.SupbookRecord: int getSheetIndex(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.WritableWorkbookImpl: int getNumberOfSheets()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.WritableWorkbookImpl: int getNumberOfSheets()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.ExternalSheetRecord: int getIndex(int,int)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.ExternalSheetRecord: int getIndex(int,int)>";
"<jxl.write.biff.ExternalSheetRecord: int getIndex(int,int)>" -> "<jxl.write.biff.ExternalSheetRecord$XTI: void <init>(int,int,int)>";
"<jxl.write.biff.ExternalSheetRecord: int getIndex(int,int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.ExternalSheetRecord: int getIndex(int,int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.ExternalSheetRecord: int getIndex(int,int)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableWorkbookImpl: int getInternalSheetIndex(java.lang.String)>" -> "<jxl.write.biff.WritableWorkbookImpl: java.lang.String[] getSheetNames()>";
"<jxl.write.biff.WritableWorkbookImpl: java.lang.String[] getSheetNames()>" -> "<java.lang.String: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: java.lang.String[] getSheetNames()>" -> "<jxl.write.biff.WritableWorkbookImpl: int getNumberOfSheets()>";
"<jxl.write.biff.WritableWorkbookImpl: java.lang.String[] getSheetNames()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet getSheet(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(jxl.biff.BuiltInName,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet getSheet(int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.write.biff.WritableWorkbookImpl: int getNumberOfSheets()>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableWorkbookImpl: void rationalize()>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableWorkbookImpl: void rationalize()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: int getPos()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.SSTRecord: void <clinit>()>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.SharedStrings: jxl.write.biff.SSTContinueRecord createContinueRecord(java.lang.String,int,jxl.write.biff.File)>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.SharedStrings: jxl.write.biff.SSTContinueRecord createContinueRecord(java.lang.String,int,jxl.write.biff.File)>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.ExtendedSSTRecord: void <init>(int)>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.SSTRecord: void <init>(int,int)>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SSTRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SharedStrings: jxl.write.biff.SSTContinueRecord createContinueRecord(java.lang.String,int,jxl.write.biff.File)>" -> "<jxl.write.biff.SSTContinueRecord: void <clinit>()>";
"<jxl.write.biff.SharedStrings: jxl.write.biff.SSTContinueRecord createContinueRecord(java.lang.String,int,jxl.write.biff.File)>" -> "<jxl.write.biff.SSTContinueRecord: void <init>()>";
"<jxl.write.biff.SharedStrings: jxl.write.biff.SSTContinueRecord createContinueRecord(java.lang.String,int,jxl.write.biff.File)>" -> "<jxl.write.biff.SSTContinueRecord: void <init>()>";
"<jxl.write.biff.SharedStrings: jxl.write.biff.SSTContinueRecord createContinueRecord(java.lang.String,int,jxl.write.biff.File)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.ExtendedSSTRecord: void <init>(int)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.ExtendedSSTRecord: void <init>(int)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.SSTRecord: void <init>(int,int)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.SSTRecord: void <init>(int,int)>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.write.biff.SSTRecord: void <init>(int,int)>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.write.biff.SSTRecord: void <init>(int,int)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.SSTContinueRecord: void <clinit>()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SSTContinueRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.SSTContinueRecord: void <init>()>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.write.biff.SSTContinueRecord: void <init>()>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.write.biff.SSTContinueRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.SSTContinueRecord: int getOffset()>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.SSTContinueRecord: int add(java.lang.String)>";
"<jxl.write.biff.SSTContinueRecord: int add(java.lang.String)>" -> "<jxl.write.biff.SSTContinueRecord: void <clinit>()>";
"<jxl.write.biff.SSTContinueRecord: int add(java.lang.String)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.write.biff.SSTContinueRecord: int add(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.write.biff.SSTContinueRecord: int add(java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.ExtendedSSTRecord: void <init>(int)>" -> "<jxl.write.biff.ExtendedSSTRecord: int getNumberOfBuckets()>";
"<jxl.write.biff.ExtendedSSTRecord: int getNumberOfBuckets()>" -> "<jxl.write.biff.ExtendedSSTRecord: int getNumberOfStringsPerBucket()>";
"<jxl.write.biff.SharedStrings: jxl.write.biff.SSTContinueRecord createContinueRecord(java.lang.String,int,jxl.write.biff.File)>" -> "<jxl.write.biff.SSTContinueRecord: int setFirstString(java.lang.String,boolean)>";
"<jxl.write.biff.SharedStrings: jxl.write.biff.SSTContinueRecord createContinueRecord(java.lang.String,int,jxl.write.biff.File)>" -> "<jxl.write.biff.SSTContinueRecord: int setFirstString(java.lang.String,boolean)>";
"<jxl.write.biff.SSTContinueRecord: int setFirstString(java.lang.String,boolean)>" -> "<jxl.write.biff.SSTContinueRecord: void <clinit>()>";
"<jxl.write.biff.SSTContinueRecord: int setFirstString(java.lang.String,boolean)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.ExtendedSSTRecord: int getNumberOfStringsPerBucket()>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.ExtendedSSTRecord: void addString(int,int)>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.ExtendedSSTRecord: void addString(int,int)>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.SSTRecord: int getOffset()>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.SSTRecord: int add(java.lang.String)>";
"<jxl.write.biff.SSTRecord: int add(java.lang.String)>" -> "<jxl.write.biff.SSTRecord: void <clinit>()>";
"<jxl.write.biff.SSTRecord: int add(java.lang.String)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.write.biff.SSTRecord: int add(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.write.biff.SSTRecord: int add(java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SSTRecord: int add(java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SSTRecord: int add(java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SSTRecord: int add(java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: int getPos()>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: int getPos()>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.File: void write(jxl.biff.ByteData)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.File: void write(jxl.biff.ByteData)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.File: void write(jxl.biff.ByteData)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.File: void write(jxl.biff.ByteData)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.File: void write(jxl.biff.ByteData)>" -> "<jxl.biff.WritableRecordData: byte[] getBytes()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.biff.WritableRecordData: byte[] handleContinueRecords(byte[])>";
"<jxl.biff.WritableRecordData: byte[] handleContinueRecords(byte[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.WritableRecordData: byte[] handleContinueRecords(byte[])>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.WritableRecordData: byte[] handleContinueRecords(byte[])>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.biff.WritableRecordData: byte[] handleContinueRecords(byte[])>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.biff.WritableRecordData: byte[] handleContinueRecords(byte[])>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.biff.WritableRecordData: byte[] handleContinueRecords(byte[])>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.WritableRecordData: byte[] handleContinueRecords(byte[])>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.SSTRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.biff.RecordData: int getCode()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.SSTContinueRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.ExtendedSSTRecord: byte[] getData()>";
"<jxl.write.biff.SSTRecord: byte[] getData()>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.write.biff.SSTRecord: byte[] getData()>" -> "<jxl.biff.StringHelper: void getUnicodeBytes(java.lang.String,byte[],int)>";
"<jxl.write.biff.SSTRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.SSTRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.SSTRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.write.biff.SSTContinueRecord: byte[] getData()>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.write.biff.SSTContinueRecord: byte[] getData()>" -> "<jxl.biff.StringHelper: void getUnicodeBytes(java.lang.String,byte[],int)>";
"<jxl.write.biff.SSTContinueRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.SSTContinueRecord: byte[] getData()>" -> "<jxl.biff.StringHelper: void getUnicodeBytes(java.lang.String,byte[],int)>";
"<jxl.write.biff.SSTContinueRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.ExtendedSSTRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.ExtendedSSTRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.ExtendedSSTRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.biff.StringHelper: void getUnicodeBytes(java.lang.String,byte[],int)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.StringHelper: void getUnicodeBytes(java.lang.String,byte[],int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.StringHelper: void getUnicodeBytes(java.lang.String,byte[],int)>" -> "<jxl.biff.StringHelper: byte[] getUnicodeBytes(java.lang.String)>";
"<jxl.biff.StringHelper: void getUnicodeBytes(java.lang.String,byte[],int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.StringHelper: byte[] getUnicodeBytes(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.StringHelper: byte[] getUnicodeBytes(java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.ExtendedSSTRecord: byte[] getData()>" -> "<jxl.write.biff.ExtendedSSTRecord: int getNumberOfBuckets()>";
"<jxl.write.biff.ExtendedSSTRecord: byte[] getData()>" -> "<jxl.write.biff.ExtendedSSTRecord: int getNumberOfStringsPerBucket()>";
"<jxl.write.biff.SSTContinueRecord: byte[] getData()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.SSTContinueRecord: byte[] getData()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.write.biff.SSTRecord: byte[] getData()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.SSTRecord: byte[] getData()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.write.biff.SharedStrings: jxl.write.biff.SSTContinueRecord createContinueRecord(java.lang.String,int,jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.SharedStrings: void write(jxl.write.biff.File)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.SplitMenuColors: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Opt: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.Drawing)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.DrawingGroup: jxl.biff.drawing.BStoreContainer getBStoreContainer()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.BStoreContainer: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Dgg: void <init>(int,int)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.DggContainer: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.MsoDrawingGroupRecord: void <init>(byte[])>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.SplitMenuColors: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Opt: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.Drawing)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.BStoreContainer: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Dgg: void <init>(int,int)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.DggContainer: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Opt: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.BlipStoreEntry: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.BStoreContainer: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Dgg: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Opt: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.BlipStoreEntry: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.BStoreContainer: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherAtom: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Dgg: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: void <clinit>()>";
"<jxl.biff.drawing.SplitMenuColors: void <init>()>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.SplitMenuColors: void <init>()>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordType)>";
"<jxl.biff.drawing.Opt: void <init>()>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.Opt: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.biff.drawing.Opt: void <init>()>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordType)>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.Drawing)>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.Drawing)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.Drawing)>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordType)>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.Drawing)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.Drawing)>" -> "<jxl.biff.drawing.BlipType: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: jxl.biff.drawing.BStoreContainer getBStoreContainer()>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: jxl.biff.drawing.BStoreContainer getBStoreContainer()>" -> "<jxl.biff.drawing.DrawingGroup: void initialize()>";
"<jxl.biff.drawing.BStoreContainer: void <init>()>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.BStoreContainer: void <init>()>" -> "<jxl.biff.drawing.EscherContainer: void <init>(jxl.biff.drawing.EscherRecordType)>";
"<jxl.biff.drawing.Dgg: void <init>(int,int)>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.Dgg: void <init>(int,int)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.biff.drawing.Dgg: void <init>(int,int)>" -> "<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordType)>";
"<jxl.biff.drawing.DggContainer: void <init>()>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.DggContainer: void <init>()>" -> "<jxl.biff.drawing.EscherContainer: void <init>(jxl.biff.drawing.EscherRecordType)>";
"<jxl.biff.drawing.MsoDrawingGroupRecord: void <init>(byte[])>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.drawing.MsoDrawingGroupRecord: void <init>(byte[])>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.drawing.EscherAtom: void <init>(jxl.biff.drawing.EscherRecordType)>" -> "<jxl.biff.drawing.EscherRecord: void <init>(jxl.biff.drawing.EscherRecordType)>";
"<jxl.biff.drawing.DrawingGroup: void initialize()>" -> "<jxl.biff.drawing.EscherRecordData: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void initialize()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.drawing.DrawingGroup: void initialize()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.drawing.DrawingGroup: void initialize()>" -> "<jxl.biff.drawing.EscherContainer: void <init>(jxl.biff.drawing.EscherRecordData)>";
"<jxl.biff.drawing.DrawingGroup: void initialize()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.drawing.DrawingGroup: void initialize()>" -> "<jxl.biff.drawing.EscherRecordData: void <init>(jxl.biff.drawing.EscherStream,int)>";
"<jxl.biff.drawing.DrawingGroup: void initialize()>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void initialize()>" -> "<jxl.biff.drawing.EscherContainer: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: void <init>(jxl.biff.drawing.EscherRecordType)>" -> "<jxl.biff.drawing.EscherRecord: void <init>(jxl.biff.drawing.EscherRecordType)>";
"<jxl.biff.drawing.EscherContainer: void <init>(jxl.biff.drawing.EscherRecordType)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.biff.drawing.EscherRecord: void <init>(jxl.biff.drawing.EscherRecordType)>" -> "<jxl.biff.drawing.EscherRecordData: void <clinit>()>";
"<jxl.biff.drawing.EscherRecord: void <init>(jxl.biff.drawing.EscherRecordType)>" -> "<jxl.biff.drawing.EscherRecordData: void <init>(jxl.biff.drawing.EscherRecordType)>";
"<jxl.biff.drawing.EscherRecord: void <init>(jxl.biff.drawing.EscherRecordType)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.EscherRecordData: void <init>(jxl.biff.drawing.EscherRecordType)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.EscherRecordData: void <init>(jxl.biff.drawing.EscherRecordType)>" -> "<jxl.biff.drawing.EscherRecordType: int getValue()>";
"<jxl.biff.drawing.DrawingGroup: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: int getLength()>";
"<jxl.biff.drawing.DrawingGroup: void initialize()>" -> "<jxl.biff.drawing.EscherRecord: jxl.biff.drawing.EscherRecordType getType()>";
"<jxl.biff.drawing.DrawingGroup: void initialize()>" -> "<jxl.biff.drawing.EscherRecordData: boolean isContainer()>";
"<jxl.biff.drawing.EscherContainer: void <init>(jxl.biff.drawing.EscherRecordType)>" -> "<jxl.biff.drawing.EscherRecord: void setContainer(boolean)>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.Drawing)>" -> "<jxl.biff.drawing.BlipType: int getValue()>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.Drawing)>" -> "<jxl.biff.drawing.EscherRecord: void setVersion(int)>";
"<jxl.biff.drawing.BlipStoreEntry: void <init>(jxl.biff.drawing.Drawing)>" -> "<jxl.biff.drawing.EscherRecord: void setInstance(int)>";
"<jxl.biff.drawing.Opt: void <init>()>" -> "<jxl.biff.drawing.EscherRecord: void setVersion(int)>";
"<jxl.biff.drawing.SplitMenuColors: void <init>()>" -> "<jxl.biff.drawing.EscherRecord: void setVersion(int)>";
"<jxl.biff.drawing.SplitMenuColors: void <init>()>" -> "<jxl.biff.drawing.EscherRecord: void setInstance(int)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Opt: void addProperty(int,boolean,boolean,int)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Opt: void addProperty(int,boolean,boolean,int)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Opt: void addProperty(int,boolean,boolean,int)>";
"<jxl.biff.drawing.Opt: void addProperty(int,boolean,boolean,int)>" -> "<jxl.biff.drawing.Opt$Property: void <init>(int,boolean,boolean,int)>";
"<jxl.biff.drawing.Opt: void addProperty(int,boolean,boolean,int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: void add(jxl.biff.drawing.EscherRecord)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.BStoreContainer: void setNumBlips(int)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.BStoreContainer: void setNumBlips(int)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: void add(jxl.biff.drawing.EscherRecord)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: void add(jxl.biff.drawing.EscherRecord)>";
"<jxl.biff.drawing.BStoreContainer: void setNumBlips(int)>" -> "<jxl.biff.drawing.EscherRecord: void setInstance(int)>";
"<jxl.biff.drawing.EscherContainer: void add(jxl.biff.drawing.EscherRecord)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.drawing.EscherRecord: void setInstance(int)>" -> "<jxl.biff.drawing.EscherRecordData: void setInstance(int)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Dgg: void addCluster(int,int)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Dgg: void addCluster(int,int)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Dgg: void addCluster(int,int)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.Dgg: void addCluster(int,int)>";
"<jxl.biff.drawing.Dgg: void addCluster(int,int)>" -> "<jxl.biff.drawing.Dgg$Cluster: void <init>(int,int)>";
"<jxl.biff.drawing.Dgg: void addCluster(int,int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: void add(jxl.biff.drawing.EscherRecord)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: void add(jxl.biff.drawing.EscherRecord)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: void add(jxl.biff.drawing.EscherRecord)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: void add(jxl.biff.drawing.EscherRecord)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: byte[] getData()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: void add(jxl.biff.drawing.EscherRecord)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: void add(jxl.biff.drawing.EscherRecord)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: void add(jxl.biff.drawing.EscherRecord)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: void add(jxl.biff.drawing.EscherRecord)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.biff.drawing.EscherContainer: byte[] getData()>";
"<jxl.biff.drawing.EscherContainer: byte[] getData()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.drawing.EscherContainer: byte[] getData()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.drawing.EscherContainer: byte[] getData()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.drawing.EscherContainer: byte[] getData()>" -> "<jxl.biff.drawing.EscherContainer: void initialize()>";
"<jxl.biff.drawing.EscherContainer: byte[] getData()>" -> "<jxl.biff.drawing.EscherRecord: byte[] setHeaderData(byte[])>";
"<jxl.biff.drawing.EscherRecord: byte[] setHeaderData(byte[])>" -> "<jxl.biff.drawing.EscherRecordData: byte[] setHeaderData(byte[])>";
"<jxl.biff.drawing.EscherRecordData: byte[] setHeaderData(byte[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.drawing.EscherRecordData: byte[] setHeaderData(byte[])>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.biff.drawing.EscherRecordData: byte[] setHeaderData(byte[])>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.biff.drawing.EscherRecordData: byte[] setHeaderData(byte[])>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.biff.drawing.EscherRecordData: byte[] setHeaderData(byte[])>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.drawing.EscherContainer: byte[] getData()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.drawing.DrawingGroup: void write(jxl.write.biff.File)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.biff.drawing.MsoDrawingGroupRecord: byte[] getData()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: int getPos()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.write.biff.File: void setData(byte[],int)>";
"<jxl.write.biff.File: void setData(byte[],int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.File: void setData(byte[],int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.CountryRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.ExternalSheetRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.ButtonPropertySetRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.BOFRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.InterfaceHeaderRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.MMSRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.InterfaceEndRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.WriteAccessRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.CodepageRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.DSFRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.TabIdRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.ObjProjRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.FunctionGroupCountRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.WindowProtectRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.ProtectRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.PasswordRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.Prot4RevRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.Prot4RevPassRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.Window1Record: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.BackupRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.HideobjRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.NineteenFourRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.PrecisionRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.RefreshAllRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.BookboolRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.UsesElfsRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.BoundsheetRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.SupbookRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.ExternalNameRecord: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.write.biff.EOFRecord: byte[] getData()>";
"<jxl.write.biff.CountryRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.CountryRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.ExternalSheetRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.ExternalSheetRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.ExternalSheetRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.ExternalSheetRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.BoundsheetRecord: byte[] getData()>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.write.biff.BoundsheetRecord: byte[] getData()>" -> "<jxl.biff.StringHelper: void getUnicodeBytes(java.lang.String,byte[],int)>";
"<jxl.write.biff.SupbookRecord: byte[] getData()>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: byte[] getData()>" -> "<jxl.write.biff.SupbookRecord: void initInternal()>";
"<jxl.write.biff.SupbookRecord: byte[] getData()>" -> "<jxl.write.biff.SupbookRecord: void initAddin()>";
"<jxl.write.biff.SupbookRecord: byte[] getData()>" -> "<jxl.write.biff.SupbookRecord: void initExternal()>";
"<jxl.write.biff.SupbookRecord: byte[] getData()>" -> "<jxl.write.biff.SupbookRecord: void initInternal()>";
"<jxl.write.biff.SupbookRecord: byte[] getData()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.ExternalNameRecord: byte[] getData()>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.write.biff.ExternalNameRecord: byte[] getData()>" -> "<jxl.biff.StringHelper: void getUnicodeBytes(java.lang.String,byte[],int)>";
"<jxl.write.biff.SupbookRecord: void initInternal()>" -> "<jxl.write.biff.SupbookRecord: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void initInternal()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.SupbookRecord: void initInternal()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void initExternal()>" -> "<jxl.biff.EncodedURLHelper: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void initExternal()>" -> "<jxl.biff.StringHelper: void getUnicodeBytes(java.lang.String,byte[],int)>";
"<jxl.write.biff.SupbookRecord: void initExternal()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.SupbookRecord: void initExternal()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.SupbookRecord: void initExternal()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.SupbookRecord: void initExternal()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.write.biff.SupbookRecord: void initExternal()>" -> "<jxl.biff.EncodedURLHelper: byte[] getEncodedURL(java.lang.String,jxl.WorkbookSettings)>";
"<jxl.write.biff.SupbookRecord: void initExternal()>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.write.biff.SupbookRecord: void initExternal()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.EncodedURLHelper: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.EncodedURLHelper: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.EncodedURLHelper: void <clinit>()>" -> "<jxl.biff.EncodedURLHelper: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.EncodedURLHelper: byte[] getEncodedURL(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.EncodedURLHelper: void <clinit>()>";
"<jxl.biff.EncodedURLHelper: byte[] getEncodedURL(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>";
"<jxl.biff.EncodedURLHelper: byte[] getEncodedURL(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.EncodedURLHelper: byte[] getURL(java.lang.String,jxl.WorkbookSettings)>";
"<jxl.biff.EncodedURLHelper: byte[] getEncodedURL(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.EncodedURLHelper: void <clinit>()>";
"<jxl.biff.EncodedURLHelper: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.EncodedURLHelper: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.EncodedURLHelper: void <clinit>()>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: byte[] getBytes(java.lang.String,jxl.WorkbookSettings)>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.ByteArray: void <init>()>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.EncodedURLHelper: void <clinit>()>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.EncodedURLHelper: void <clinit>()>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.EncodedURLHelper: void <clinit>()>";
"<jxl.biff.EncodedURLHelper: byte[] getURL(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.EncodedURLHelper: void <clinit>()>";
"<jxl.biff.EncodedURLHelper: byte[] getURL(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: byte[] getBytes(java.lang.String,jxl.WorkbookSettings)>";
"<jxl.biff.EncodedURLHelper: byte[] getURL(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.ByteArray: void <init>()>";
"<jxl.biff.EncodedURLHelper: byte[] getURL(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.ByteArray: void <init>()>" -> "<jxl.biff.ByteArray: void <init>(int)>";
"<jxl.biff.ByteArray: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.EncodedURLHelper: byte[] getURL(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.ByteArray: void add(byte)>";
"<jxl.biff.EncodedURLHelper: byte[] getURL(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.ByteArray: void add(byte)>";
"<jxl.biff.EncodedURLHelper: byte[] getURL(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.ByteArray: void add(byte[])>";
"<jxl.biff.EncodedURLHelper: byte[] getURL(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.ByteArray: byte[] getBytes()>";
"<jxl.biff.ByteArray: void add(byte)>" -> "<jxl.biff.ByteArray: void checkSize(int)>";
"<jxl.biff.ByteArray: void add(byte[])>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.ByteArray: void add(byte[])>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.ByteArray: void add(byte[])>" -> "<jxl.biff.ByteArray: void checkSize(int)>";
"<jxl.biff.ByteArray: byte[] getBytes()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.ByteArray: byte[] getBytes()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.ByteArray: void checkSize(int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.ByteArray: void checkSize(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.ByteArray: void add(byte)>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.ByteArray: void add(byte)>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.ByteArray: void add(byte)>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.ByteArray: void add(byte)>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.ByteArray: void add(byte)>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.ByteArray: void add(byte[])>";
"<jxl.biff.EncodedURLHelper: byte[] getFile(java.lang.String,jxl.WorkbookSettings)>" -> "<jxl.biff.ByteArray: byte[] getBytes()>";
"<jxl.write.biff.SupbookRecord: byte[] getData()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.ExternalSheetRecord: byte[] getData()>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.ExternalSheetRecord: byte[] getData()>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.ExternalSheetRecord: byte[] getData()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.WorkbookSettings: boolean getRationalizationDisabled()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.WorkbookSettings: java.lang.String getExcelDisplayLanguage()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.WorkbookSettings: java.lang.String getExcelDisplayLanguage()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.WorkbookSettings: java.lang.String getExcelRegionalSettings()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.WorkbookSettings: java.lang.String getExcelDisplayLanguage()>";
"<jxl.write.biff.WritableWorkbookImpl: void copyWorkbook(jxl.Workbook)>" -> "<jxl.read.biff.WorkbookParser: int getNumberOfSheets()>";
"<jxl.write.biff.WritableWorkbookImpl: void copyWorkbook(jxl.Workbook)>" -> "<jxl.read.biff.WorkbookParser: boolean isProtected()>";
"<jxl.write.biff.WritableWorkbookImpl: void copyWorkbook(jxl.Workbook)>" -> "<jxl.read.biff.WorkbookParser: jxl.Sheet getSheet(int)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.biff.Fonts getFonts()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.biff.FormattingRecords getFormattingRecords()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.read.biff.CompoundFile getCompoundFile()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: boolean containsMacros()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.read.biff.CountryRecord getCountryRecord()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.read.biff.CountryRecord getCountryRecord()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: java.lang.String[] getAddInFunctionNames()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.read.biff.ExternalSheetRecord getExternalSheetRecord()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.read.biff.ExternalSheetRecord getExternalSheetRecord()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.read.biff.SupbookRecord[] getSupbookRecords()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.biff.drawing.DrawingGroup getDrawingGroup()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.biff.drawing.DrawingGroup getDrawingGroup()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.read.biff.ButtonPropertySetRecord getButtonPropertySet()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.read.biff.ButtonPropertySetRecord getButtonPropertySet()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.read.biff.NameRecord[] getNameRecords()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,jxl.Workbook,boolean,jxl.WorkbookSettings)>" -> "<jxl.read.biff.WorkbookParser: jxl.biff.drawing.DrawingGroup getDrawingGroup()>";
"<jxl.read.biff.WorkbookParser: java.lang.String[] getAddInFunctionNames()>" -> "<java.lang.String: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: jxl.read.biff.SupbookRecord[] getSupbookRecords()>" -> "<jxl.read.biff.SupbookRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: jxl.read.biff.NameRecord[] getNameRecords()>" -> "<jxl.read.biff.NameRecord: void <clinit>()>";
"<jxl.read.biff.WorkbookParser: jxl.read.biff.NameRecord[] getNameRecords()>" -> "<java.util.ArrayList: int size()>";
"<jxl.read.biff.WorkbookParser: jxl.read.biff.NameRecord[] getNameRecords()>" -> "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
"<jxl.read.biff.WorkbookParser: jxl.read.biff.SupbookRecord[] getSupbookRecords()>" -> "<java.util.ArrayList: int size()>";
"<jxl.read.biff.WorkbookParser: jxl.read.biff.SupbookRecord[] getSupbookRecords()>" -> "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
"<jxl.read.biff.WorkbookParser: java.lang.String[] getAddInFunctionNames()>" -> "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
"<jxl.read.biff.WorkbookParser: jxl.read.biff.CompoundFile getCompoundFile()>" -> "<jxl.read.biff.File: jxl.read.biff.CompoundFile getCompoundFile()>";
"<jxl.write.biff.CountryRecord: void <init>(jxl.read.biff.CountryRecord)>" -> "<jxl.read.biff.CountryRecord: int getLanguageCode()>";
"<jxl.write.biff.CountryRecord: void <init>(jxl.read.biff.CountryRecord)>" -> "<jxl.read.biff.CountryRecord: int getRegionalSettingsCode()>";
"<jxl.write.biff.ExternalSheetRecord: void <init>(jxl.read.biff.ExternalSheetRecord)>" -> "<jxl.read.biff.ExternalSheetRecord: int getNumRecords()>";
"<jxl.write.biff.ExternalSheetRecord: void <init>(jxl.read.biff.ExternalSheetRecord)>" -> "<jxl.read.biff.ExternalSheetRecord: int getNumRecords()>";
"<jxl.write.biff.ExternalSheetRecord: void <init>(jxl.read.biff.ExternalSheetRecord)>" -> "<jxl.read.biff.ExternalSheetRecord: int getSupbookIndex(int)>";
"<jxl.write.biff.ExternalSheetRecord: void <init>(jxl.read.biff.ExternalSheetRecord)>" -> "<jxl.read.biff.ExternalSheetRecord: int getFirstTabIndex(int)>";
"<jxl.write.biff.ExternalSheetRecord: void <init>(jxl.read.biff.ExternalSheetRecord)>" -> "<jxl.read.biff.ExternalSheetRecord: int getLastTabIndex(int)>";
"<jxl.biff.drawing.DrawingGroup: void <init>(jxl.biff.drawing.DrawingGroup)>" -> "<java.util.HashMap: java.lang.Object clone()>";
"<java.util.HashMap: java.lang.Object clone()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.ButtonPropertySetRecord: void <init>(jxl.read.biff.ButtonPropertySetRecord)>" -> "<jxl.read.biff.ButtonPropertySetRecord: byte[] getData()>";
"<jxl.read.biff.ButtonPropertySetRecord: byte[] getData()>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFeatures: void setDataValidationList(java.util.Collection)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFeatures: void setNumberValidation(double,double,jxl.biff.BaseCellFeatures$ValidationCondition)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFeatures: void setComment(java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFeatures: void removeComment()>";
"<jxl.write.WritableCellFeatures: void setDataValidationList(java.util.Collection)>" -> "<jxl.biff.BaseCellFeatures: void setDataValidationList(java.util.Collection)>";
"<jxl.write.WritableCellFeatures: void setNumberValidation(double,double,jxl.biff.BaseCellFeatures$ValidationCondition)>" -> "<jxl.biff.BaseCellFeatures: void setNumberValidation(double,double,jxl.biff.BaseCellFeatures$ValidationCondition)>";
"<jxl.write.WritableCellFeatures: void setComment(java.lang.String)>" -> "<jxl.biff.BaseCellFeatures: void setComment(java.lang.String)>";
"<jxl.write.WritableCellFeatures: void removeComment()>" -> "<jxl.biff.BaseCellFeatures: void removeComment()>";
"<jxl.biff.BaseCellFeatures: void setDataValidationList(java.util.Collection)>" -> "<jxl.biff.DVParser: void <clinit>()>";
"<jxl.biff.BaseCellFeatures: void setDataValidationList(java.util.Collection)>" -> "<jxl.biff.DVParser: void <init>(java.util.Collection)>";
"<jxl.biff.BaseCellFeatures: void setDataValidationList(java.util.Collection)>" -> "<jxl.biff.BaseCellFeatures: void clearValidationSettings()>";
"<jxl.biff.BaseCellFeatures: void setNumberValidation(double,double,jxl.biff.BaseCellFeatures$ValidationCondition)>" -> "<jxl.biff.DVParser: void <clinit>()>";
"<jxl.biff.BaseCellFeatures: void setNumberValidation(double,double,jxl.biff.BaseCellFeatures$ValidationCondition)>" -> "<jxl.biff.DVParser: void <init>(double,double,jxl.biff.DVParser$Condition)>";
"<jxl.biff.BaseCellFeatures: void setNumberValidation(double,double,jxl.biff.BaseCellFeatures$ValidationCondition)>" -> "<jxl.biff.BaseCellFeatures: void clearValidationSettings()>";
"<jxl.biff.DVParser: void <init>(java.util.Collection)>" -> "<jxl.biff.DVParser: void <clinit>()>";
"<jxl.biff.DVParser: void <init>(java.util.Collection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.biff.DVParser: void <init>(java.util.Collection)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.DVParser: void <init>(double,double,jxl.biff.DVParser$Condition)>" -> "<jxl.biff.DVParser: void <clinit>()>";
"<jxl.biff.DVParser: void <init>(double,double,jxl.biff.DVParser$Condition)>" -> "<java.lang.Double: boolean isNaN(double)>";
"<jxl.biff.DVParser: void <init>(double,double,jxl.biff.DVParser$Condition)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.DVParser: void <init>(double,double,jxl.biff.DVParser$Condition)>" -> "<java.lang.Double: void <clinit>()>";
"<java.lang.Double: boolean isNaN(double)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.DVParser: void <init>(double,double,jxl.biff.DVParser$Condition)>" -> "<java.text.NumberFormat: java.lang.String format(double)>";
"<jxl.biff.DVParser: void <init>(double,double,jxl.biff.DVParser$Condition)>" -> "<java.text.NumberFormat: java.lang.String format(double)>";
"<java.text.NumberFormat: java.lang.String format(double)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.DVParser: void <init>(java.util.Collection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.biff.DVParser: void <init>(java.util.Collection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.DVParser: void <init>(java.util.Collection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.biff.DVParser: void <init>(java.util.Collection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.biff.DVParser: void <init>(java.util.Collection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.DVParser: void <init>(java.util.Collection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.biff.DVParser: void <init>(java.util.Collection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.biff.DVParser: void <init>(java.util.Collection)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.BaseCellFeatures: void setComment(java.lang.String)>" -> "<jxl.write.WritableCellFeatures: void setComment(java.lang.String,double,double)>";
"<jxl.write.WritableCellFeatures: void setComment(java.lang.String,double,double)>" -> "<jxl.biff.BaseCellFeatures: void setComment(java.lang.String,double,double)>";
"<jxl.biff.BaseCellFeatures: void setNumberValidation(double,double,jxl.biff.BaseCellFeatures$ValidationCondition)>" -> "<jxl.biff.BaseCellFeatures$ValidationCondition: jxl.biff.DVParser$Condition getCondition()>";
"<jxl.biff.DVParser: void <init>(java.util.Collection)>" -> "<java.util.ArrayList: int size()>";
"<jxl.biff.DVParser: void <init>(java.util.Collection)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.biff.CellValue: void setCellFeatures(jxl.write.WritableCellFeatures)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.biff.CellValue: void setCellFeatures(jxl.write.WritableCellFeatures)>";
"<jxl.write.biff.CellValue: void setCellFeatures(jxl.write.WritableCellFeatures)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.CellValue: void setCellFeatures(jxl.write.WritableCellFeatures)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.CellValue: void setCellFeatures(jxl.write.WritableCellFeatures)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.CellValue: void setCellFeatures(jxl.write.WritableCellFeatures)>" -> "<jxl.biff.BaseCellFeatures: void setWritableCell(jxl.write.biff.CellValue)>";
"<jxl.write.biff.CellValue: void setCellFeatures(jxl.write.WritableCellFeatures)>" -> "<jxl.write.biff.CellValue: void addCellFeatures()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.drawing.Comment: void <clinit>()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.drawing.ComboBox: void <init>()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.drawing.Comment: void <init>(java.lang.String,int,int)>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.drawing.ComboBox: void <clinit>()>";
"<jxl.biff.drawing.ComboBox: void <init>()>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.ComboBox: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.ComboBox: void <init>()>" -> "<jxl.biff.drawing.ShapeType: void <clinit>()>";
"<jxl.biff.drawing.Comment: void <init>(java.lang.String,int,int)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.Comment: void <init>(java.lang.String,int,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.drawing.Comment: void <init>(java.lang.String,int,int)>" -> "<jxl.biff.drawing.ShapeType: void <clinit>()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.drawing.Comment: void setWidth(double)>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.drawing.Comment: void setHeight(double)>";
"<jxl.biff.drawing.Comment: void setWidth(double)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.Comment: void setWidth(double)>" -> "<jxl.biff.drawing.Comment: void initialize()>";
"<jxl.biff.drawing.Comment: void setHeight(double)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.Comment: void setHeight(double)>" -> "<jxl.biff.drawing.Comment: void initialize()>";
"<jxl.biff.drawing.Comment: void initialize()>" -> "<jxl.biff.drawing.ShapeType: void <clinit>()>";
"<jxl.biff.drawing.Comment: void initialize()>" -> "<jxl.biff.drawing.ShapeType: jxl.biff.drawing.ShapeType getType(int)>";
"<jxl.biff.drawing.Comment: void initialize()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.drawing.Comment: void initialize()>" -> "<jxl.biff.drawing.Comment: void <clinit>()>";
"<jxl.biff.drawing.Comment: void initialize()>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.Comment: void initialize()>" -> "<jxl.biff.drawing.Comment: void <clinit>()>";
"<jxl.biff.drawing.ShapeType: jxl.biff.drawing.ShapeType getType(int)>" -> "<jxl.biff.drawing.ShapeType: void <clinit>()>";
"<jxl.biff.drawing.Comment: void initialize()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.drawing.Comment: void initialize()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.CellFeatures: java.lang.String getComment()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.CellFeatures: java.lang.String getComment()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.BaseCellFeatures: double getCommentWidth()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.BaseCellFeatures: double getCommentHeight()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.BaseCellFeatures: void setCommentDrawing(jxl.biff.drawing.Comment)>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.BaseCellFeatures: boolean hasDataValidation()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.BaseCellFeatures: jxl.biff.DVParser getDVParser()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.BaseCellFeatures: boolean hasDropDown()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.BaseCellFeatures: void setComboBox(jxl.biff.drawing.ComboBox)>";
"<jxl.CellFeatures: java.lang.String getComment()>" -> "<jxl.biff.BaseCellFeatures: java.lang.String getComment()>";
"<jxl.biff.BaseCellFeatures: jxl.biff.DVParser getDVParser()>" -> "<jxl.biff.DVParser: void <clinit>()>";
"<jxl.biff.BaseCellFeatures: jxl.biff.DVParser getDVParser()>" -> "<jxl.biff.DVParser: void <init>(jxl.biff.DVParser)>";
"<jxl.biff.DVParser: void <init>(jxl.biff.DVParser)>" -> "<jxl.biff.DVParser: void <clinit>()>";
"<jxl.biff.DVParser: void <init>(jxl.biff.DVParser)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.biff.DVParser: void <init>(jxl.biff.DVParser)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.DVParser: void <init>(jxl.biff.DVParser)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.DVParser: void <init>(jxl.biff.DVParser)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.DVParser: void <init>(jxl.biff.DVParser)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.biff.DVParser: void <init>(jxl.biff.DVParser)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.biff.DVParser: void setCell(int,int,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>";
"<jxl.biff.DVParser: void setCell(int,int,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.FormulaParser: void <clinit>()>";
"<jxl.biff.DVParser: void setCell(int,int,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.FormulaParser: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>";
"<jxl.biff.DVParser: void setCell(int,int,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.FormulaParser: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>";
"<jxl.biff.formula.FormulaParser: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.FormulaParser: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.FormulaParser: void <clinit>()>" -> "<jxl.biff.formula.FormulaParser: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.FormulaParser: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.StringFormulaParser: void <clinit>()>";
"<jxl.biff.formula.FormulaParser: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.StringFormulaParser: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>";
"<jxl.biff.formula.FormulaParser: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.formula.FormulaParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.FormulaParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.StringFormulaParser: void <clinit>()>" -> "<jxl.biff.formula.StringFormulaParser: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.formula.StringFormulaParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.DVParser: void setCell(int,int,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.FormulaParser: void parse()>";
"<jxl.biff.DVParser: void setCell(int,int,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.FormulaParser: void parse()>";
"<jxl.biff.formula.FormulaParser: void parse()>" -> "<jxl.biff.formula.StringFormulaParser: void parse()>";
"<jxl.biff.formula.StringFormulaParser: void parse()>" -> "<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>";
"<jxl.biff.formula.StringFormulaParser: void parse()>" -> "<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<jxl.biff.formula.StringFormulaParser: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<jxl.biff.formula.Yylex: void <init>(java.io.Reader)>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<java.io.StringReader: void <init>(java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<jxl.biff.formula.FormulaException: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<jxl.biff.formula.Parenthesis: void <init>()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: void <init>()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<jxl.biff.formula.StringFormulaParser: void handleOperand(jxl.biff.formula.Operand,java.util.Stack)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: void <init>()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: void <init>()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<jxl.biff.formula.StringFormulaParser: void <clinit>()>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,java.lang.String)>" -> "<jxl.JXLException: void <init>(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,java.lang.String)>" -> "<jxl.biff.formula.FormulaException$FormulaMessage: java.lang.String access$000(jxl.biff.formula.FormulaException$FormulaMessage)>";
"<jxl.biff.formula.Yylex: void <init>(java.io.Reader)>" -> "<jxl.biff.formula.Yylex: void <init>()>";
"<jxl.biff.formula.Yylex: void <init>(java.io.Reader)>" -> "<java.io.BufferedReader: void <init>(java.io.Reader)>";
"<jxl.biff.formula.Yylex: void <init>(java.io.Reader)>" -> "<java.lang.Error: void <init>(java.lang.String)>";
"<java.io.StringReader: void <init>(java.lang.String)>" -> "<java.io.Reader: void <init>()>";
"<java.io.StringReader: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <clinit>()>" -> "<jxl.biff.formula.FormulaException$FormulaMessage: void <init>(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <clinit>()>" -> "<jxl.biff.formula.FormulaException$FormulaMessage: void <init>(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <clinit>()>" -> "<jxl.biff.formula.FormulaException$FormulaMessage: void <init>(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <clinit>()>" -> "<jxl.biff.formula.FormulaException$FormulaMessage: void <init>(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <clinit>()>" -> "<jxl.biff.formula.FormulaException$FormulaMessage: void <init>(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <clinit>()>" -> "<jxl.biff.formula.FormulaException$FormulaMessage: void <init>(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <clinit>()>" -> "<jxl.biff.formula.FormulaException$FormulaMessage: void <init>(java.lang.String)>";
"<jxl.biff.formula.ParseItem: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.ParseItem: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.ParseItem: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.Parenthesis: void <init>()>" -> "<jxl.biff.formula.Operator: void <init>()>";
"<java.util.Stack: void <init>()>" -> "<java.util.Vector: void <init>()>";
"<java.util.Stack: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.Function: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.BuiltInFunction: void <init>(jxl.biff.formula.Function,jxl.WorkbookSettings)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.VariableArgFunction: void <init>(jxl.biff.formula.Function,int,jxl.WorkbookSettings)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.VariableArgFunction: void <init>(jxl.biff.formula.Function,int,jxl.WorkbookSettings)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.VariableArgFunction: void <init>(jxl.WorkbookSettings)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.Attribute: void <init>(jxl.biff.formula.StringFunction,jxl.WorkbookSettings)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.Attribute: void <init>(jxl.biff.formula.StringFunction,jxl.WorkbookSettings)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.FormulaException: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.BuiltInFunction: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.VariableArgFunction: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.VariableArgFunction: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.VariableArgFunction: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.Attribute: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.Attribute: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.FormulaException: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleOperand(jxl.biff.formula.Operand,java.util.Stack)>" -> "<jxl.biff.formula.DoubleValue: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleOperand(jxl.biff.formula.Operand,java.util.Stack)>" -> "<jxl.biff.formula.DoubleValue: void <init>(double)>";
"<jxl.biff.formula.StringFormulaParser: void handleOperand(jxl.biff.formula.Operand,java.util.Stack)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: void <init>()>" -> "<java.lang.String: void <clinit>()>";
"<jxl.biff.formula.Yylex: void <init>()>" -> "<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>";
"<jxl.biff.formula.Yylex: void <init>()>" -> "<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>";
"<jxl.biff.formula.Yylex: void <init>()>" -> "<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>";
"<jxl.biff.formula.Yylex: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.BufferedReader: void <init>(java.io.Reader)>" -> "<java.io.Reader: void <init>()>";
"<java.io.BufferedReader: void <init>(java.io.Reader)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Error: void <init>(java.lang.String)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.Reader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Reader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.formula.FormulaException$FormulaMessage: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.formula.ParseItem: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.ParseItem: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.Operator: void <init>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Operator: void <init>()>" -> "<jxl.biff.formula.ParseItem: void <init>()>";
"<java.util.Vector: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.Vector: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.Function: void <clinit>()>" -> "<jxl.biff.formula.Function: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage)>" -> "<jxl.biff.formula.FormulaException$FormulaMessage: java.lang.String access$000(jxl.biff.formula.FormulaException$FormulaMessage)>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage)>" -> "<jxl.JXLException: void <init>(java.lang.String)>";
"<jxl.biff.formula.BuiltInFunction: void <init>(jxl.biff.formula.Function,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.Operator: void <init>()>";
"<jxl.biff.formula.VariableArgFunction: void <init>(jxl.biff.formula.Function,int,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.Operator: void <init>()>";
"<jxl.biff.formula.VariableArgFunction: void <init>(jxl.WorkbookSettings)>" -> "<jxl.biff.formula.Operator: void <init>()>";
"<jxl.biff.formula.Attribute: void <init>(jxl.biff.formula.StringFunction,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.Function: void <clinit>()>";
"<jxl.biff.formula.Attribute: void <init>(jxl.biff.formula.StringFunction,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.Operator: void <init>()>";
"<jxl.biff.formula.BuiltInFunction: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.BuiltInFunction: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.BuiltInFunction: void <clinit>()>" -> "<jxl.biff.formula.BuiltInFunction: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.BuiltInFunction: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.VariableArgFunction: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.VariableArgFunction: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.VariableArgFunction: void <clinit>()>" -> "<jxl.biff.formula.VariableArgFunction: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.VariableArgFunction: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.Attribute: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Attribute: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.Attribute: void <clinit>()>" -> "<jxl.biff.formula.Attribute: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.Attribute: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.DoubleValue: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.DoubleValue: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.DoubleValue: void <clinit>()>" -> "<jxl.biff.formula.DoubleValue: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.DoubleValue: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.DoubleValue: void <init>(double)>" -> "<jxl.biff.formula.NumberValue: void <init>()>";
"<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>" -> "<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>";
"<jxl.biff.formula.ParseItem: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>" -> "<jxl.biff.formula.Function: void <clinit>()>";
"<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.formula.Function: void <init>(int,java.lang.String,int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.formula.Function: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.Function: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.BuiltInFunction: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.BuiltInFunction: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.VariableArgFunction: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.VariableArgFunction: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.Attribute: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.Attribute: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.DoubleValue: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.DoubleValue: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.NumberValue: void <init>()>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<java.lang.Integer: int parseInt(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.formula.Operand: void <init>()>" -> "<jxl.biff.formula.ParseItem: void <init>()>";
"<jxl.biff.formula.StringFormulaParser: void parse()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>" -> "<java.lang.String: int indexOf(int)>";
"<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>" -> "<java.lang.String: int indexOf(int)>";
"<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<jxl.biff.formula.Yylex: int[][] unpackFromString(int,int,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.formula.StringFormulaParser: void handleOperand(jxl.biff.formula.Operand,java.util.Stack)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: void handleOperand(jxl.biff.formula.Operand,java.util.Stack)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: void handleOperand(jxl.biff.formula.Operand,java.util.Stack)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<java.util.Stack: java.lang.Object push(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.Attribute: void setIfConditions(jxl.biff.formula.VariableArgFunction)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<java.util.Vector: void clear()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<java.util.Vector: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: boolean empty()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object peek()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Vector: boolean isEmpty()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Vector: boolean isEmpty()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: boolean empty()>";
"<java.util.Stack: boolean empty()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Stack: java.lang.Object peek()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Stack: java.lang.Object pop()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: boolean isEmpty()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Vector: boolean isEmpty()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Vector: void clear()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: boolean empty()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.StringFormulaParser: jxl.biff.formula.ParseItem parseCurrent(java.util.Iterator)>" -> "<java.util.Stack: boolean empty()>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<java.lang.Throwable: java.lang.String toString()>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<jxl.biff.formula.Yylex: void setExternalSheet(jxl.biff.formula.ExternalSheet)>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<jxl.biff.formula.Yylex: void setNameTable(jxl.biff.WorkbookMethods)>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<jxl.biff.formula.Yylex: int getPos()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.StringValue: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ColumnRange: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.CellReference: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.StringValue: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: void yybegin(int)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.StringValue: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ErrorConstant: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.BooleanValue: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Area: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.BooleanValue: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ColumnRange: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.DoubleValue: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.StringFunction: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.CellReference: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.LessEqual: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.NotEqual: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.GreaterEqual: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: void yybegin(int)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.CloseParentheses: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.OpenParentheses: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.RangeSeparator: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.IntegerValue: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: java.lang.String yytext()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ArgumentSeparator: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.LessThan: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Equal: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.GreaterThan: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Divide: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Multiply: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Minus: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Plus: void <init>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: void yy_mark_end()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: void yy_mark_start()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: void yy_error(int,boolean)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: void yy_to_mark()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: void yy_move_end()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<java.lang.Error: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: void yy_mark_end()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: int yy_advance()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: void yy_mark_end()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Yylex: void yy_mark_start()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.StringValue: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Area3d: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ColumnRange3d: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Area: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ColumnRange: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.CellReference: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.StringValue: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.StringValue: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Area3d: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Area3d: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ColumnRange3d: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.CellReference3d: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Area: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.CellReference3d: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.Area: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ColumnRange: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.DoubleValue: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.StringFunction: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.CellReference: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.IntegerValue: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.Yylex: jxl.biff.formula.ParseItem yylex()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaException: void <clinit>()>";
"<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,java.lang.String)>";
"<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.Yylex: java.lang.String yytext()>" -> "<java.lang.String: void <clinit>()>";
"<jxl.biff.formula.Yylex: java.lang.String yytext()>" -> "<java.lang.String: void <init>(char[],int,int)>";
"<jxl.biff.formula.StringValue: void <init>(java.lang.String)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,java.lang.String)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.formula.Area3d: void <init>(jxl.biff.formula.ExternalSheet)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.formula.FormulaException: void <clinit>()>";
"<jxl.biff.formula.ColumnRange: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.biff.formula.ColumnRange: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: boolean isColumnRelative(java.lang.String)>";
"<jxl.biff.formula.ColumnRange: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: boolean isColumnRelative(java.lang.String)>";
"<jxl.biff.formula.ColumnRange: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>";
"<jxl.biff.formula.ColumnRange: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>";
"<jxl.biff.formula.ColumnRange: void <init>(java.lang.String)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.formula.ColumnRange: void <init>(java.lang.String)>" -> "<jxl.biff.formula.Area: void <init>()>";
"<jxl.biff.formula.CellReference: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.biff.formula.CellReference: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: boolean isRowRelative(java.lang.String)>";
"<jxl.biff.formula.CellReference: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: boolean isColumnRelative(java.lang.String)>";
"<jxl.biff.formula.CellReference: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: int getRow(java.lang.String)>";
"<jxl.biff.formula.CellReference: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>";
"<jxl.biff.formula.CellReference: void <init>(java.lang.String)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.CellReferenceHelper: int getRow(java.lang.String)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,java.lang.String)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.CellReferenceHelper: int getRow(java.lang.String)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.formula.FormulaException: void <clinit>()>";
"<jxl.biff.formula.ErrorConstant: void <init>(java.lang.String)>" -> "<jxl.biff.formula.FormulaErrorCode: void <clinit>()>";
"<jxl.biff.formula.ErrorConstant: void <init>(java.lang.String)>" -> "<jxl.biff.formula.FormulaErrorCode: jxl.biff.formula.FormulaErrorCode getErrorCode(java.lang.String)>";
"<jxl.biff.formula.ErrorConstant: void <init>(java.lang.String)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.BooleanValue: void <init>(java.lang.String)>" -> "<java.lang.Boolean: void <clinit>()>";
"<jxl.biff.formula.BooleanValue: void <init>(java.lang.String)>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>";
"<jxl.biff.formula.BooleanValue: void <init>(java.lang.String)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,java.lang.String)>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.CellReferenceHelper: int getRow(java.lang.String)>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.formula.FormulaException: void <clinit>()>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: boolean isRowRelative(java.lang.String)>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: boolean isColumnRelative(java.lang.String)>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: boolean isRowRelative(java.lang.String)>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: boolean isColumnRelative(java.lang.String)>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: int getRow(java.lang.String)>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: int getRow(java.lang.String)>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.DoubleValue: void <init>(java.lang.String)>" -> "<java.lang.Double: void <clinit>()>";
"<jxl.biff.formula.DoubleValue: void <init>(java.lang.String)>" -> "<java.lang.Double: double parseDouble(java.lang.String)>";
"<jxl.biff.formula.DoubleValue: void <init>(java.lang.String)>" -> "<jxl.biff.formula.NumberValue: void <init>()>";
"<jxl.biff.formula.DoubleValue: void <init>(java.lang.String)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.DoubleValue: void <init>(java.lang.String)>" -> "<jxl.biff.formula.DoubleValue: void <clinit>()>";
"<jxl.biff.formula.StringFunction: void <init>(java.lang.String)>" -> "<jxl.biff.formula.StringParseItem: void <init>()>";
"<jxl.biff.formula.LessEqual: void <init>()>" -> "<jxl.biff.formula.BinaryOperator: void <init>()>";
"<jxl.biff.formula.NotEqual: void <init>()>" -> "<jxl.biff.formula.BinaryOperator: void <init>()>";
"<jxl.biff.formula.GreaterEqual: void <init>()>" -> "<jxl.biff.formula.BinaryOperator: void <init>()>";
"<jxl.biff.formula.CloseParentheses: void <init>()>" -> "<jxl.biff.formula.StringParseItem: void <init>()>";
"<jxl.biff.formula.OpenParentheses: void <init>()>" -> "<jxl.biff.formula.StringParseItem: void <init>()>";
"<jxl.biff.formula.RangeSeparator: void <init>()>" -> "<jxl.biff.formula.BinaryOperator: void <init>()>";
"<jxl.biff.formula.IntegerValue: void <init>(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.biff.formula.IntegerValue: void <init>(java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<jxl.biff.formula.IntegerValue: void <init>(java.lang.String)>" -> "<jxl.biff.formula.NumberValue: void <init>()>";
"<jxl.biff.formula.IntegerValue: void <init>(java.lang.String)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.IntegerValue: void <init>(java.lang.String)>" -> "<jxl.biff.formula.IntegerValue: void <clinit>()>";
"<jxl.biff.formula.ArgumentSeparator: void <init>()>" -> "<jxl.biff.formula.StringParseItem: void <init>()>";
"<jxl.biff.formula.LessThan: void <init>()>" -> "<jxl.biff.formula.BinaryOperator: void <init>()>";
"<jxl.biff.formula.Equal: void <init>()>" -> "<jxl.biff.formula.BinaryOperator: void <init>()>";
"<jxl.biff.formula.GreaterThan: void <init>()>" -> "<jxl.biff.formula.BinaryOperator: void <init>()>";
"<jxl.biff.formula.Divide: void <init>()>" -> "<jxl.biff.formula.BinaryOperator: void <init>()>";
"<jxl.biff.formula.Multiply: void <init>()>" -> "<jxl.biff.formula.BinaryOperator: void <init>()>";
"<jxl.biff.formula.Minus: void <init>()>" -> "<jxl.biff.formula.StringOperator: void <init>()>";
"<jxl.biff.formula.Plus: void <init>()>" -> "<jxl.biff.formula.StringOperator: void <init>()>";
"<jxl.biff.formula.Yylex: void yy_error(int,boolean)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.formula.Yylex: void yy_error(int,boolean)>" -> "<java.lang.Error: void <init>(java.lang.String)>";
"<jxl.biff.formula.Yylex: int yy_advance()>" -> "<jxl.biff.formula.Yylex: char[] yy_double(char[])>";
"<jxl.biff.formula.StringValue: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.StringValue: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.StringValue: void <clinit>()>" -> "<jxl.biff.formula.StringValue: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.StringValue: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.Area3d: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Area3d: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.Area3d: void <clinit>()>" -> "<jxl.biff.formula.Area3d: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.Area3d: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.ColumnRange3d: void <clinit>()>" -> "<jxl.biff.formula.Area3d: void <clinit>()>";
"<jxl.biff.formula.ColumnRange3d: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.ColumnRange3d: void <clinit>()>" -> "<jxl.biff.formula.ColumnRange3d: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.ColumnRange3d: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.ColumnRange3d: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Area: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.Area: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.Area: void <clinit>()>" -> "<jxl.biff.formula.Area: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.Area: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.ColumnRange: void <clinit>()>" -> "<jxl.biff.formula.Area: void <clinit>()>";
"<jxl.biff.formula.ColumnRange: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.ColumnRange: void <clinit>()>" -> "<jxl.biff.formula.ColumnRange: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.ColumnRange: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.ColumnRange: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.CellReference: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.CellReference: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.CellReference: void <clinit>()>" -> "<jxl.biff.formula.CellReference: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.CellReference: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.CellReference3d: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.CellReference3d: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.CellReference3d: void <clinit>()>" -> "<jxl.biff.formula.CellReference3d: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.CellReference3d: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.StringFunction: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.StringFunction: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.StringFunction: void <clinit>()>" -> "<jxl.biff.formula.StringFunction: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.StringFunction: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.BinaryOperator: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.BinaryOperator: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.BinaryOperator: void <clinit>()>" -> "<jxl.biff.formula.BinaryOperator: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.BinaryOperator: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.IntegerValue: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.IntegerValue: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.IntegerValue: void <clinit>()>" -> "<jxl.biff.formula.IntegerValue: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.IntegerValue: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<java.lang.String: void <init>(char[],int,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(char[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: int getNumberIndex(java.lang.String)>";
"<jxl.biff.formula.Area3d: void <init>(jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.Area: void <init>()>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.CellReferenceHelper: boolean isRowRelative(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.biff.CellReferenceHelper: boolean isRowRelative(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: int getNumberIndex(java.lang.String)>";
"<jxl.biff.CellReferenceHelper: int getRow(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.biff.CellReferenceHelper: int getRow(java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<jxl.biff.CellReferenceHelper: int getRow(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: int getNumberIndex(java.lang.String)>";
"<jxl.biff.CellReferenceHelper: int getRow(java.lang.String)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.biff.CellReferenceHelper: int getRow(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.biff.formula.FormulaErrorCode: void <clinit>()>" -> "<jxl.biff.formula.FormulaErrorCode: void <init>(int,java.lang.String)>";
"<jxl.biff.formula.FormulaErrorCode: void <clinit>()>" -> "<jxl.biff.formula.FormulaErrorCode: void <init>(int,java.lang.String)>";
"<jxl.biff.formula.FormulaErrorCode: void <clinit>()>" -> "<jxl.biff.formula.FormulaErrorCode: void <init>(int,java.lang.String)>";
"<jxl.biff.formula.FormulaErrorCode: void <clinit>()>" -> "<jxl.biff.formula.FormulaErrorCode: void <init>(int,java.lang.String)>";
"<jxl.biff.formula.FormulaErrorCode: void <clinit>()>" -> "<jxl.biff.formula.FormulaErrorCode: void <init>(int,java.lang.String)>";
"<jxl.biff.formula.FormulaErrorCode: void <clinit>()>" -> "<jxl.biff.formula.FormulaErrorCode: void <init>(int,java.lang.String)>";
"<jxl.biff.formula.FormulaErrorCode: void <clinit>()>" -> "<jxl.biff.formula.FormulaErrorCode: void <init>(int,java.lang.String)>";
"<jxl.biff.formula.FormulaErrorCode: void <clinit>()>" -> "<jxl.biff.formula.FormulaErrorCode: void <init>(int,java.lang.String)>";
"<jxl.biff.formula.FormulaErrorCode: jxl.biff.formula.FormulaErrorCode getErrorCode(java.lang.String)>" -> "<jxl.biff.formula.FormulaErrorCode: void <clinit>()>";
"<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Double: double parseDouble(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.formula.StringParseItem: void <init>()>" -> "<jxl.biff.formula.ParseItem: void <init>()>";
"<jxl.biff.formula.BinaryOperator: void <init>()>" -> "<jxl.biff.formula.Operator: void <init>()>";
"<jxl.biff.formula.StringOperator: void <init>()>" -> "<jxl.biff.formula.Operator: void <init>()>";
"<jxl.biff.formula.StringValue: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.StringValue: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.Area3d: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.Area3d: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.ColumnRange3d: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.ColumnRange3d: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.Area: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.Area: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.ColumnRange: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.ColumnRange: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.CellReference: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.CellReference: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.CellReference3d: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.CellReference3d: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.StringFunction: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.StringFunction: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.BinaryOperator: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.BinaryOperator: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.IntegerValue: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.IntegerValue: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.FormulaErrorCode: void <init>(int,java.lang.String)>" -> "<jxl.biff.formula.FormulaErrorCode: void <clinit>()>";
"<jxl.biff.formula.FormulaErrorCode: void <init>(int,java.lang.String)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.formula.FormulaErrorCode: void <init>(int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.formula.FormulaErrorCode: void <init>(int,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.formula.FormulaErrorCode: jxl.biff.formula.FormulaErrorCode getErrorCode(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.biff.CellReferenceHelper: int getRow(java.lang.String)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object,java.lang.Throwable)>";
"<jxl.biff.formula.IntegerValue: void <init>(java.lang.String)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object,java.lang.Throwable)>";
"<jxl.biff.formula.StringFunction: void <init>(java.lang.String)>" -> "<java.lang.String: int length()>";
"<jxl.biff.formula.StringFunction: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.formula.DoubleValue: void <init>(java.lang.String)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object,java.lang.Throwable)>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.formula.Area: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<jxl.biff.CellReferenceHelper: int getRow(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<jxl.biff.CellReferenceHelper: int getNumberIndex(java.lang.String)>" -> "<java.lang.String: int lastIndexOf(int)>";
"<jxl.biff.CellReferenceHelper: int getNumberIndex(java.lang.String)>" -> "<java.lang.String: int length()>";
"<jxl.biff.CellReferenceHelper: int getNumberIndex(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.biff.CellReferenceHelper: boolean isRowRelative(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.biff.CellReferenceHelper: boolean isColumnRelative(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>" -> "<java.lang.String: java.lang.String toUpperCase()>";
"<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>" -> "<java.lang.String: int lastIndexOf(int)>";
"<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.biff.CellReferenceHelper: int getColumn(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: int indexOf(int)>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: int length()>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: int length()>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.formula.FormulaErrorCode: jxl.biff.formula.FormulaErrorCode getErrorCode(java.lang.String)>" -> "<java.lang.String: int length()>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: int lastIndexOf(java.lang.String)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: int indexOf(int)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: int length()>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: int length()>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<java.lang.String: int lastIndexOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.formula.ColumnRange: void <init>(java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<jxl.biff.formula.ColumnRange: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.formula.ColumnRange: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<jxl.biff.formula.ColumnRange: void <init>(java.lang.String)>" -> "<jxl.biff.formula.Area: void setRangeData(int,int,int,int,boolean,boolean,boolean,boolean)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: int lastIndexOf(java.lang.String)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: int indexOf(int)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: int lastIndexOf(int)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: int length()>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: int length()>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.formula.Area3d: void setRangeData(int,int,int,int,int,boolean,boolean,boolean,boolean)>";
"<jxl.biff.formula.Yylex: int yy_advance()>" -> "<java.io.BufferedReader: int read(char[],int,int)>";
"<jxl.biff.formula.Yylex: int yy_advance()>" -> "<java.io.BufferedReader: int read(char[],int,int)>";
"<java.io.BufferedReader: int read(char[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.formula.StringFormulaParser: java.util.ArrayList getTokens()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<java.util.Vector: int size()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<java.util.Vector: java.lang.Object get(int)>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<java.util.Vector: int size()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<java.util.Vector: int size()>";
"<jxl.biff.formula.StringFormulaParser: void handleFunction(jxl.biff.formula.StringFunction,java.util.Iterator,java.util.Stack)>" -> "<java.util.Vector: java.lang.Object get(int)>";
"<java.util.Vector: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Number: void setValue(double)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.biff.NumberRecord: double getValue()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Number: void setValue(double)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Number: void setValue(double)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Number: void setValue(double)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Number: void setValue(double)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Number: void setValue(double)>";
"<jxl.write.Number: void setValue(double)>" -> "<jxl.write.biff.NumberRecord: void setValue(double)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.biff.LabelRecord: java.lang.String getString()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void setString(java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void setString(java.lang.String)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.Label: void setString(java.lang.String)>";
"<jxl.write.Label: void setString(java.lang.String)>" -> "<jxl.write.biff.LabelRecord: void setString(java.lang.String)>";
"<jxl.write.biff.LabelRecord: void setString(java.lang.String)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.LabelRecord: void setString(java.lang.String)>" -> "<jxl.write.biff.CellValue: boolean isReferenced()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.WritableCellFormat: void setBackground(jxl.format.Colour)>";
"<jxl.write.WritableCellFormat: void setBackground(jxl.format.Colour)>" -> "<jxl.format.Pattern: void <clinit>()>";
"<jxl.write.WritableCellFormat: void setBackground(jxl.format.Colour)>" -> "<jxl.write.WritableCellFormat: void setBackground(jxl.format.Colour,jxl.format.Pattern)>";
"<jxl.write.WritableCellFormat: void setBackground(jxl.format.Colour,jxl.format.Pattern)>" -> "<jxl.write.biff.CellXFRecord: void setBackground(jxl.format.Colour,jxl.format.Pattern)>";
"<jxl.write.biff.CellXFRecord: void setBackground(jxl.format.Colour,jxl.format.Pattern)>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.CellXFRecord: void setBackground(jxl.format.Colour,jxl.format.Pattern)>" -> "<jxl.biff.XFRecord: void setXFCellOptions(int)>";
"<jxl.write.biff.CellXFRecord: void setBackground(jxl.format.Colour,jxl.format.Pattern)>" -> "<jxl.biff.XFRecord: void setXFBackground(jxl.format.Colour,jxl.format.Pattern)>";
"<jxl.write.biff.CellXFRecord: void setBackground(jxl.format.Colour,jxl.format.Pattern)>" -> "<jxl.write.biff.JxlWriteException: void <init>(jxl.write.biff.JxlWriteException$WriteMessage)>";
"<jxl.biff.XFRecord: void setXFBackground(jxl.format.Colour,jxl.format.Pattern)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.CellXFRecord: void setBackground(jxl.format.Colour,jxl.format.Pattern)>" -> "<jxl.biff.XFRecord: boolean isInitialized()>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<common.log.SimpleLogger: void info(java.lang.Object)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet getSheet(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet getSheet(java.lang.String)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.demo.ReadWrite: void readWrite()>" -> "<common.log.SimpleLogger: void info(java.lang.Object)>";
"<jxl.demo.ReadWrite: void readWrite()>" -> "<common.log.SimpleLogger: void info(java.lang.Object)>";
"<jxl.demo.ReadWrite: void readWrite()>" -> "<common.log.SimpleLogger: void info(java.lang.Object)>";
"<jxl.biff.drawing.EscherRecordData: void <init>(jxl.biff.drawing.EscherStream,int)>" -> "<jxl.biff.drawing.DrawingGroup: byte[] getData()>";
"<jxl.biff.DVParser: void <init>(jxl.biff.DVParser)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<java.lang.Throwable: java.lang.String getMessage()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<java.lang.Throwable: void printStackTrace()>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<jxl.demo.Write: void write()>";
"<jxl.demo.Write: void write()>" -> "<jxl.WorkbookSettings: void <clinit>()>";
"<jxl.demo.Write: void write()>" -> "<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>";
"<jxl.demo.Write: void write()>" -> "<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>";
"<jxl.demo.Write: void write()>" -> "<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>";
"<jxl.demo.Write: void write()>" -> "<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>";
"<jxl.demo.Write: void write()>" -> "<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>";
"<jxl.demo.Write: void write()>" -> "<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>";
"<jxl.demo.Write: void write()>" -> "<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>";
"<jxl.demo.Write: void write()>" -> "<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.WorkbookSettings)>";
"<jxl.demo.Write: void write()>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.Write: void write()>" -> "<java.util.Locale: void <init>(java.lang.String,java.lang.String)>";
"<jxl.demo.Write: void write()>" -> "<jxl.WorkbookSettings: void <init>()>";
"<jxl.demo.Write: void write()>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.demo.Write: void write()>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.Write: void write()>" -> "<java.util.Locale: void <clinit>()>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.LabelRecord: void <clinit>()>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableImage: void <init>(double,double,double,double,java.io.File)>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableImage: void <init>(double,double,double,double,java.io.File)>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.drawing.Drawing: void <clinit>()>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableImage: void <clinit>()>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.NumberRecord: void <clinit>()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.CellReferenceHelper: java.lang.String getCellReference(int,int)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Formula: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.CellView: void <init>()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateFormats: void <clinit>()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.LabelRecord: void <clinit>()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.FormulaRecord: void <clinit>()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.format.Alignment: void <clinit>()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <clinit>()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.CellView: void <init>()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.CellView: void <init>()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.LabelRecord: void <clinit>()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.LabelRecord: void <clinit>()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.HeaderFooter: void <init>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.HeaderFooter: void <init>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.HeaderFooter: void <clinit>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.format.PageOrientation: void <clinit>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.format.PaperSize: void <clinit>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.LabelRecord: void <clinit>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.format.BorderLineStyle: void <clinit>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.format.Border: void <clinit>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.FormatRecord: void <clinit>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.DateRecord: void <clinit>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateTime: void <clinit>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.DateFormats: void <clinit>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.LabelRecord: void <clinit>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String,jxl.write.biff.NumberFormatRecord$NonValidatingFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String,jxl.write.biff.NumberFormatRecord$NonValidatingFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String,jxl.write.biff.NumberFormatRecord$NonValidatingFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String,jxl.write.biff.NumberFormatRecord$NonValidatingFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String,jxl.write.biff.NumberFormatRecord$NonValidatingFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String,jxl.write.biff.NumberFormatRecord$NonValidatingFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String,jxl.write.biff.NumberFormatRecord$NonValidatingFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Boolean: void <init>(int,int,boolean)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Boolean: void <init>(int,int,boolean)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Number: void <init>(int,int,double)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.FormatRecord: void <clinit>()>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.NumberFormatRecord: void <clinit>()>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormat: void <clinit>()>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.NumberFormats: void <clinit>()>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.NumberRecord: void <clinit>()>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.LabelRecord: void <clinit>()>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.LabelRecord: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFeatures: void <init>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Blank: void <init>(int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFeatures: void <init>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Blank: void <init>(int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFeatures: void <init>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Blank: void <init>(int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFeatures: void <init>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFeatures: void <init>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: jxl.write.WritableFont$FontName createFont(java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableHyperlink: void <init>(int,int,int,int,java.net.URL)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<java.net.URL: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableHyperlink: void <init>(int,int,int,int,java.io.File)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableHyperlink: void <init>(int,int,int,int,java.lang.String,jxl.write.WritableSheet,int,int,int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableHyperlink: void <init>(int,int,int,int,java.io.File)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableHyperlink: void <init>(int,int,int,int,java.net.URL)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableHyperlink: void <init>(int,int,int,int,java.net.URL)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<java.net.URL: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour,jxl.format.ScriptStyle)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour,jxl.format.ScriptStyle)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.BlankRecord: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.BaseCellFeatures: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFeatures: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.format.BorderLineStyle: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.format.Border: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.format.Alignment: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.LabelRecord: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<java.io.File: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.HyperlinkRecord: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.format.Orientation: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.format.ScriptStyle: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.format.UnderlineStyle: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.WorkbookSettings)>" -> "<jxl.write.biff.WritableWorkbookImpl: void <clinit>()>";
"<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.WorkbookSettings)>" -> "<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>";
"<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.WorkbookSettings)>" -> "<java.io.FileOutputStream: void <init>(java.io.File)>";
"<jxl.Workbook: jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.WorkbookSettings)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.Formula: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>" -> "<jxl.write.biff.FormulaRecord: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.CellReferenceHelper: java.lang.String getCellReference(int,int)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.CellReferenceHelper: java.lang.String getCellReference(int,int)>" -> "<jxl.biff.CellReferenceHelper: java.lang.String getCellReference(int,int)>";
"<jxl.CellView: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.WritableCellFormat: void <init>()>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.WritableCellFormat: void <init>()>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont,jxl.biff.DisplayFormat)>";
"<jxl.write.WritableCellFormat: void <init>()>" -> "<jxl.write.NumberFormats: void <clinit>()>";
"<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>" -> "<jxl.write.biff.DateRecord: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>";
"<jxl.write.DateTime: void <init>(int,int,java.util.Date,jxl.format.CellFormat)>" -> "<jxl.write.biff.DateRecord: void <init>(int,int,java.util.Date,jxl.format.CellFormat)>";
"<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.Number: void <init>(int,int,double,jxl.format.CellFormat)>" -> "<jxl.write.biff.NumberRecord: void <init>(int,int,double,jxl.format.CellFormat)>";
"<jxl.write.NumberFormat: void <init>(java.lang.String,jxl.write.biff.NumberFormatRecord$NonValidatingFormat)>" -> "<jxl.write.biff.NumberFormatRecord: void <init>(java.lang.String,jxl.write.biff.NumberFormatRecord$NonValidatingFormat)>";
"<jxl.write.Boolean: void <init>(int,int,boolean)>" -> "<jxl.write.biff.BooleanRecord: void <init>(int,int,boolean)>";
"<jxl.write.WritableFont: jxl.write.WritableFont$FontName createFont(java.lang.String)>" -> "<jxl.write.WritableFont$FontName: void <init>(java.lang.String)>";
"<jxl.write.WritableHyperlink: void <init>(int,int,int,int,java.net.URL)>" -> "<jxl.write.WritableHyperlink: void <init>(int,int,int,int,java.net.URL,java.lang.String)>";
"<jxl.write.WritableHyperlink: void <init>(int,int,int,int,java.io.File)>" -> "<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.io.File,java.lang.String)>";
"<jxl.write.WritableHyperlink: void <init>(int,int,int,int,java.lang.String,jxl.write.WritableSheet,int,int,int,int)>" -> "<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.lang.String,jxl.write.WritableSheet,int,int,int,int)>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean)>" -> "<jxl.format.UnderlineStyle: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle,jxl.format.Colour,jxl.format.ScriptStyle)>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean)>" -> "<jxl.format.ScriptStyle: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.File: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.Styles: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<java.util.HashMap: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.SharedStrings: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.File: void <init>(java.io.OutputStream,jxl.WorkbookSettings,jxl.read.biff.CompoundFile)>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.WritableWorkbook: void <init>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.FormattingRecords: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.DateRecord: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.write.biff.Styles: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int,jxl.format.CellFormat)>";
"<jxl.biff.CellReferenceHelper: java.lang.String getCellReference(int,int)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.biff.CellReferenceHelper: java.lang.String getCellReference(int,int)>" -> "<jxl.biff.CellReferenceHelper: void getCellReference(int,int,java.lang.StringBuffer)>";
"<jxl.biff.CellReferenceHelper: java.lang.String getCellReference(int,int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.DateRecord: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.DateRecord: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>" -> "<jxl.write.biff.DateRecord: void calculateValue(boolean)>";
"<jxl.write.biff.DateRecord: void <init>(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int,jxl.format.CellFormat)>";
"<jxl.write.biff.DateRecord: void <init>(int,int,java.util.Date,jxl.format.CellFormat)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.DateRecord: void <init>(int,int,java.util.Date,jxl.format.CellFormat)>" -> "<jxl.write.biff.DateRecord: void calculateValue(boolean)>";
"<jxl.write.biff.DateRecord: void <init>(int,int,java.util.Date,jxl.format.CellFormat)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int,jxl.format.CellFormat)>";
"<jxl.write.biff.NumberRecord: void <init>(int,int,double,jxl.format.CellFormat)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.NumberRecord: void <init>(int,int,double,jxl.format.CellFormat)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int,jxl.format.CellFormat)>";
"<jxl.write.biff.NumberFormatRecord: void <init>(java.lang.String,jxl.write.biff.NumberFormatRecord$NonValidatingFormat)>" -> "<jxl.biff.FormatRecord: void <init>()>";
"<jxl.write.biff.BooleanRecord: void <init>(int,int,boolean)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.BooleanRecord: void <init>(int,int,boolean)>" -> "<jxl.write.biff.CellValue: void <init>(jxl.biff.Type,int,int)>";
"<jxl.write.WritableHyperlink: void <init>(int,int,int,int,java.net.URL,java.lang.String)>" -> "<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.net.URL,java.lang.String)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.io.File,java.lang.String)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.io.File,java.lang.String)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.io.File,java.lang.String)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.io.File,java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.io.File,java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.io.File,java.lang.String)>" -> "<jxl.write.biff.HyperlinkRecord: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.io.File,java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.io.File,java.lang.String)>" -> "<jxl.write.biff.HyperlinkRecord: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.lang.String,jxl.write.WritableSheet,int,int,int,int)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.lang.String,jxl.write.WritableSheet,int,int,int,int)>" -> "<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.lang.String,jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.lang.String,jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.lang.String,jxl.write.WritableSheet,int,int,int,int)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.lang.String,jxl.write.WritableSheet,int,int,int,int)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.lang.String,jxl.write.WritableSheet,int,int,int,int)>" -> "<jxl.write.biff.HyperlinkRecord: void <clinit>()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<common.Assert: void verify(boolean,java.lang.String)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void <init>(jxl.biff.Fonts)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.NumberFormats: void <clinit>()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.write.WritableFont: void <clinit>()>";
"<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName)>";
"<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName)>";
"<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.write.WritableFont: void <init>(jxl.write.WritableFont$FontName)>";
"<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.biff.Fonts: void <init>()>";
"<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.net.URL,java.lang.String)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.net.URL,java.lang.String)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.net.URL,java.lang.String)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.net.URL,java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.net.URL,java.lang.String)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.net.URL,java.lang.String)>" -> "<jxl.write.biff.HyperlinkRecord: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<jxl.biff.CellReferenceHelper: void getCellReference(int,int,java.lang.StringBuffer)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<jxl.biff.CellReferenceHelper: void getCellReference(int,int,java.lang.StringBuffer)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.biff.XFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.StyleXFRecord: void <init>(jxl.biff.FontRecord,jxl.biff.DisplayFormat)>" -> "<jxl.biff.XFRecord: void setXFDetails(jxl.biff.XFRecord$XFType,int)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.biff.Fonts: void addFont(jxl.biff.FontRecord)>";
"<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.biff.Fonts: void addFont(jxl.biff.FontRecord)>";
"<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.biff.Fonts: void addFont(jxl.biff.FontRecord)>";
"<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.biff.Fonts: void addFont(jxl.biff.FontRecord)>";
"<jxl.biff.Fonts: void addFont(jxl.biff.FontRecord)>" -> "<jxl.biff.FontRecord: boolean isInitialized()>";
"<jxl.biff.Fonts: void addFont(jxl.biff.FontRecord)>" -> "<jxl.biff.FontRecord: void initialize(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>";
"<jxl.write.biff.StyleXFRecord: void setLocked(boolean)>" -> "<jxl.biff.XFRecord: void setXFLocked(boolean)>";
"<jxl.write.biff.StyleXFRecord: void setCellOptions(int)>" -> "<jxl.biff.XFRecord: void setXFCellOptions(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.write.biff.Styles: jxl.write.WritableCellFormat getNormalStyle()>";
"<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>" -> "<jxl.write.biff.Styles: void initArial10Pt()>";
"<jxl.write.biff.Styles: jxl.write.WritableCellFormat getNormalStyle()>" -> "<jxl.write.biff.Styles: void initNormalStyle()>";
"<jxl.write.biff.Styles: void initArial10Pt()>" -> "<jxl.write.WritableFont: void <clinit>()>";
"<jxl.write.biff.Styles: void initArial10Pt()>" -> "<jxl.write.WritableFont: void <init>(jxl.format.Font)>";
"<jxl.write.biff.Styles: void initArial10Pt()>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.biff.Styles: void initArial10Pt()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.Styles: void initArial10Pt()>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.write.biff.Styles: void initNormalStyle()>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.write.biff.Styles: void initNormalStyle()>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.Styles: void initNormalStyle()>" -> "<jxl.write.NumberFormats: void <clinit>()>";
"<jxl.write.biff.Styles: void initNormalStyle()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.WritableFont: void <init>(jxl.format.Font)>" -> "<jxl.write.biff.WritableFontRecord: void <init>(jxl.format.Font)>";
"<jxl.write.biff.WritableFontRecord: void <init>(jxl.format.Font)>" -> "<jxl.biff.FontRecord: void <init>(jxl.format.Font)>";
"<jxl.write.biff.Styles: void initNormalStyle()>" -> "<jxl.biff.XFRecord: void setFont(jxl.biff.FontRecord)>";
"<jxl.write.biff.Styles: void initNormalStyle()>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.Styles: void initNormalStyle()>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: jxl.biff.Fonts getFonts()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: jxl.biff.Fonts getFonts()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: jxl.biff.Fonts getFonts()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: jxl.biff.Fonts getFonts()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: jxl.biff.Fonts getFonts()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: jxl.biff.Fonts getFonts()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: jxl.biff.Fonts getFonts()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: jxl.biff.Fonts getFonts()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: jxl.biff.Fonts getFonts()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: jxl.biff.Fonts getFonts()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>" -> "<jxl.biff.XFRecord: boolean isInitialized()>";
"<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>" -> "<jxl.biff.XFRecord: void initialize(int,jxl.biff.FormattingRecords,jxl.biff.Fonts)>";
"<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>" -> "<jxl.biff.XFRecord: int getXFIndex()>";
"<jxl.biff.XFRecord: void initialize(int,jxl.biff.FormattingRecords,jxl.biff.Fonts)>" -> "<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.biff.FormattingRecords: void <clinit>()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.biff.NumFormatRecordsException: void <init>()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.biff.NumFormatRecordsException: void <init>()>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.CellReferenceHelper: java.lang.String getCellReference(int,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.XFRecord: void uninitialize()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.XFRecord: void uninitialize()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.XFRecord: void uninitialize()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.XFRecord: void uninitialize()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.FontRecord: void uninitialize()>";
"<jxl.write.biff.WritableWorkbookImpl: void <init>(java.io.OutputStream,boolean,jxl.WorkbookSettings)>" -> "<jxl.biff.FontRecord: void uninitialize()>";
"<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.biff.Styles getStyles()>";
"<jxl.write.biff.WritableFonts: void <init>(jxl.write.biff.WritableWorkbookImpl)>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.Fonts: jxl.biff.FontRecord getFont(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.Fonts: jxl.biff.FontRecord getFont(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.Fonts: jxl.biff.FontRecord getFont(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.Fonts: jxl.biff.FontRecord getFont(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.Fonts: jxl.biff.FontRecord getFont(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.Fonts: jxl.biff.FontRecord getFont(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.Fonts: jxl.biff.FontRecord getFont(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.Fonts: jxl.biff.FontRecord getFont(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.Fonts: jxl.biff.FontRecord getFont(int)>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<jxl.biff.Fonts: jxl.biff.FontRecord getFont(int)>";
"<jxl.write.biff.HyperlinkRecord: void <init>(int,int,int,int,java.io.File,java.lang.String)>" -> "<java.io.File: java.lang.String getPath()>";
"<java.io.File: java.lang.String getPath()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.NumberFormatRecord: void <init>(java.lang.String,jxl.write.biff.NumberFormatRecord$NonValidatingFormat)>" -> "<jxl.biff.FormatRecord: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>";
"<jxl.write.biff.NumberFormatRecord: void <init>(java.lang.String,jxl.write.biff.NumberFormatRecord$NonValidatingFormat)>" -> "<jxl.biff.FormatRecord: void setFormatString(java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void setCellFeatures(jxl.write.WritableCellFeatures)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void setCellFeatures(jxl.write.WritableCellFeatures)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void setCellFeatures(jxl.write.WritableCellFeatures)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFeatures: void setComment(java.lang.String)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFeatures: void setComment(java.lang.String,double,double)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFeatures: void setDataValidationList(java.util.Collection)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFeatures: void setNumberValidation(double,jxl.biff.BaseCellFeatures$ValidationCondition)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFeatures: void setDataValidationRange(java.lang.String)>";
"<jxl.write.WritableCellFeatures: void setNumberValidation(double,jxl.biff.BaseCellFeatures$ValidationCondition)>" -> "<jxl.biff.BaseCellFeatures: void setNumberValidation(double,jxl.biff.BaseCellFeatures$ValidationCondition)>";
"<jxl.write.WritableCellFeatures: void setDataValidationRange(java.lang.String)>" -> "<jxl.biff.BaseCellFeatures: void setDataValidationRange(java.lang.String)>";
"<jxl.biff.BaseCellFeatures: void setNumberValidation(double,jxl.biff.BaseCellFeatures$ValidationCondition)>" -> "<jxl.biff.DVParser: void <clinit>()>";
"<jxl.biff.BaseCellFeatures: void setNumberValidation(double,jxl.biff.BaseCellFeatures$ValidationCondition)>" -> "<jxl.biff.DVParser: void <init>(double,double,jxl.biff.DVParser$Condition)>";
"<jxl.biff.BaseCellFeatures: void setNumberValidation(double,jxl.biff.BaseCellFeatures$ValidationCondition)>" -> "<jxl.biff.BaseCellFeatures: void clearValidationSettings()>";
"<jxl.biff.BaseCellFeatures: void setDataValidationRange(java.lang.String)>" -> "<jxl.biff.DVParser: void <clinit>()>";
"<jxl.biff.BaseCellFeatures: void setDataValidationRange(java.lang.String)>" -> "<jxl.biff.DVParser: void <init>(java.lang.String)>";
"<jxl.biff.BaseCellFeatures: void setDataValidationRange(java.lang.String)>" -> "<jxl.biff.BaseCellFeatures: void clearValidationSettings()>";
"<jxl.biff.DVParser: void <init>(java.lang.String)>" -> "<jxl.biff.DVParser: void <clinit>()>";
"<jxl.biff.DVParser: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.BaseCellFeatures: void setNumberValidation(double,jxl.biff.BaseCellFeatures$ValidationCondition)>" -> "<jxl.biff.BaseCellFeatures$ValidationCondition: jxl.biff.DVParser$Condition getCondition()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setWrap(boolean)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setWrap(boolean)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBackground(jxl.format.Colour)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setWrap(boolean)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBackground(jxl.format.Colour)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setOrientation(jxl.format.Orientation)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setOrientation(jxl.format.Orientation)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setOrientation(jxl.format.Orientation)>";
"<jxl.write.WritableCellFormat: void setWrap(boolean)>" -> "<jxl.write.biff.CellXFRecord: void setWrap(boolean)>";
"<jxl.write.WritableCellFormat: void setOrientation(jxl.format.Orientation)>" -> "<jxl.write.biff.CellXFRecord: void setOrientation(jxl.format.Orientation)>";
"<jxl.write.biff.CellXFRecord: void setWrap(boolean)>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.CellXFRecord: void setWrap(boolean)>" -> "<jxl.biff.XFRecord: void setXFWrap(boolean)>";
"<jxl.write.biff.CellXFRecord: void setWrap(boolean)>" -> "<jxl.write.biff.JxlWriteException: void <init>(jxl.write.biff.JxlWriteException$WriteMessage)>";
"<jxl.write.biff.CellXFRecord: void setOrientation(jxl.format.Orientation)>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.CellXFRecord: void setOrientation(jxl.format.Orientation)>" -> "<jxl.biff.XFRecord: void setXFOrientation(jxl.format.Orientation)>";
"<jxl.write.biff.CellXFRecord: void setOrientation(jxl.format.Orientation)>" -> "<jxl.write.biff.JxlWriteException: void <init>(jxl.write.biff.JxlWriteException$WriteMessage)>";
"<jxl.biff.XFRecord: void setXFWrap(boolean)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.XFRecord: void setXFOrientation(jxl.format.Orientation)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.CellXFRecord: void setOrientation(jxl.format.Orientation)>" -> "<jxl.biff.XFRecord: boolean isInitialized()>";
"<jxl.write.biff.CellXFRecord: void setWrap(boolean)>" -> "<jxl.biff.XFRecord: boolean isInitialized()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void setColour(jxl.format.Colour)>";
"<jxl.write.WritableFont: void setColour(jxl.format.Colour)>" -> "<jxl.write.biff.WritableFontRecord: void setColour(int)>";
"<jxl.write.biff.WritableFontRecord: void setColour(int)>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.WritableFontRecord: void setColour(int)>" -> "<jxl.biff.FontRecord: void setFontColour(int)>";
"<jxl.write.biff.WritableFontRecord: void setColour(int)>" -> "<jxl.write.biff.JxlWriteException: void <init>(jxl.write.biff.JxlWriteException$WriteMessage)>";
"<jxl.biff.FontRecord: void setFontColour(int)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.WritableFont: void setColour(jxl.format.Colour)>" -> "<jxl.format.Colour: int getValue()>";
"<jxl.write.biff.WritableFontRecord: void setColour(int)>" -> "<jxl.biff.FontRecord: boolean isInitialized()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setAlignment(jxl.format.Alignment)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBackground(jxl.format.Colour)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setShrinkToFit(boolean)>";
"<jxl.write.WritableCellFormat: void setAlignment(jxl.format.Alignment)>" -> "<jxl.write.biff.CellXFRecord: void setAlignment(jxl.format.Alignment)>";
"<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle)>" -> "<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.write.WritableCellFormat: void setShrinkToFit(boolean)>" -> "<jxl.write.biff.CellXFRecord: void setShrinkToFit(boolean)>";
"<jxl.write.biff.CellXFRecord: void setAlignment(jxl.format.Alignment)>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.CellXFRecord: void setAlignment(jxl.format.Alignment)>" -> "<jxl.biff.XFRecord: void setXFAlignment(jxl.format.Alignment)>";
"<jxl.write.biff.CellXFRecord: void setAlignment(jxl.format.Alignment)>" -> "<jxl.write.biff.JxlWriteException: void <init>(jxl.write.biff.JxlWriteException$WriteMessage)>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.biff.XFRecord: void setXFBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.biff.XFRecord: void setXFBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.biff.XFRecord: void setXFBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.biff.XFRecord: void setXFBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.biff.XFRecord: void setXFBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.biff.XFRecord: void setXFBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.biff.XFRecord: void setXFBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.biff.XFRecord: void setXFBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.biff.XFRecord: void setXFBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.write.biff.JxlWriteException: void <init>(jxl.write.biff.JxlWriteException$WriteMessage)>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.format.BorderLineStyle: void <clinit>()>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.format.Border: void <clinit>()>";
"<jxl.write.biff.CellXFRecord: void setShrinkToFit(boolean)>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.CellXFRecord: void setShrinkToFit(boolean)>" -> "<jxl.biff.XFRecord: void setXFShrinkToFit(boolean)>";
"<jxl.write.biff.CellXFRecord: void setShrinkToFit(boolean)>" -> "<jxl.write.biff.JxlWriteException: void <init>(jxl.write.biff.JxlWriteException$WriteMessage)>";
"<jxl.biff.XFRecord: void setXFAlignment(jxl.format.Alignment)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.XFRecord: void setXFBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.biff.XFRecord: void setXFBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.XFRecord: void setXFBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.format.Border: void <clinit>()>";
"<jxl.biff.XFRecord: void setXFShrinkToFit(boolean)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.CellXFRecord: void setShrinkToFit(boolean)>" -> "<jxl.biff.XFRecord: boolean isInitialized()>";
"<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.biff.XFRecord: boolean isInitialized()>";
"<jxl.write.biff.CellXFRecord: void setAlignment(jxl.format.Alignment)>" -> "<jxl.biff.XFRecord: boolean isInitialized()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setWrap(boolean)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setIndentation(int)>";
"<jxl.write.WritableCellFormat: void setIndentation(int)>" -> "<jxl.write.biff.CellXFRecord: void setIndentation(int)>";
"<jxl.write.biff.CellXFRecord: void setIndentation(int)>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.CellXFRecord: void setIndentation(int)>" -> "<jxl.biff.XFRecord: void setXFIndentation(int)>";
"<jxl.write.biff.CellXFRecord: void setIndentation(int)>" -> "<jxl.write.biff.JxlWriteException: void <init>(jxl.write.biff.JxlWriteException$WriteMessage)>";
"<jxl.biff.XFRecord: void setXFIndentation(int)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.CellXFRecord: void setIndentation(int)>" -> "<jxl.biff.XFRecord: boolean isInitialized()>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void setCellFeatures(jxl.write.WritableCellFeatures)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.CellValue: void setCellFeatures(jxl.write.WritableCellFeatures)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setWrap(boolean)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<java.text.DateFormat: java.lang.String format(java.util.Date)>";
"<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.DateFormat: java.lang.String format(java.util.Date)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setWrap(boolean)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.HeaderFooter: jxl.HeaderFooter$Contents getCentre()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.HeaderFooter: jxl.HeaderFooter$Contents getRight()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.HeaderFooter: jxl.HeaderFooter$Contents getRight()>";
"<jxl.HeaderFooter: jxl.HeaderFooter$Contents getCentre()>" -> "<jxl.biff.HeaderFooter: jxl.biff.HeaderFooter$Contents getCentreText()>";
"<jxl.HeaderFooter: jxl.HeaderFooter$Contents getRight()>" -> "<jxl.biff.HeaderFooter: jxl.biff.HeaderFooter$Contents getRightText()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.write.WritableCellFormat: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>" -> "<jxl.write.biff.CellXFRecord: void setBorder(jxl.format.Border,jxl.format.BorderLineStyle,jxl.format.Colour)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.CellView: void setSize(int)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.CellView: void setFormat(jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.CellView: void setAutosize(boolean)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setWrap(boolean)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void setItalic(boolean)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableFont: void setColour(jxl.format.Colour)>";
"<jxl.write.WritableFont: void setItalic(boolean)>" -> "<jxl.write.biff.WritableFontRecord: void setItalic(boolean)>";
"<jxl.write.biff.WritableFontRecord: void setItalic(boolean)>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.WritableFontRecord: void setItalic(boolean)>" -> "<jxl.biff.FontRecord: void setFontItalic(boolean)>";
"<jxl.write.biff.WritableFontRecord: void setItalic(boolean)>" -> "<jxl.write.biff.JxlWriteException: void <init>(jxl.write.biff.JxlWriteException$WriteMessage)>";
"<jxl.biff.FontRecord: void setFontItalic(boolean)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.WritableFontRecord: void setItalic(boolean)>" -> "<jxl.biff.FontRecord: boolean isInitialized()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.CellView: void setSize(int)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.CellView: void setFormat(jxl.format.CellFormat)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setAlignment(jxl.format.Alignment)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.WritableCellFormat: void setWrap(boolean)>";
"<jxl.demo.Write: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int)>";
"<jxl.demo.Write: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int)>";
"<jxl.demo.Write: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int)>";
"<jxl.demo.Write: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int)>";
"<jxl.demo.Write: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int)>";
"<jxl.demo.Write: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int)>";
"<jxl.demo.Write: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int)>";
"<jxl.demo.Write: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: void setColourRGB(jxl.format.Colour,int,int,int)>";
"<jxl.demo.Write: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int)>";
"<jxl.demo.Write: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int)>";
"<jxl.demo.Write: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: void write()>";
"<jxl.demo.Write: void write()>" -> "<jxl.write.biff.WritableWorkbookImpl: void close()>";
"<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int)>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet createSheet(java.lang.String,int,boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int)>" -> "<jxl.write.biff.WritableWorkbookImpl: void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int,boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<jxl.write.biff.NameRecord: void <init>(java.lang.String,int,int,int,int,int,int,boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.NameRecord: void <init>(java.lang.String,int,int,int,int,int,int,boolean)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.NameRecord: void <init>(java.lang.String,int,int,int,int,int,int,boolean)>" -> "<jxl.write.biff.NameRecord$NameRange: void <init>(jxl.write.biff.NameRecord,int,int,int,int,int)>";
"<jxl.write.biff.NameRecord: void <init>(java.lang.String,int,int,int,int,int,int,boolean)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: void setColourRGB(jxl.format.Colour,int,int,int)>" -> "<jxl.biff.FormattingRecords: void setColourRGB(jxl.format.Colour,int,int,int)>";
"<jxl.biff.FormattingRecords: void setColourRGB(jxl.format.Colour,int,int,int)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.FormattingRecords: void setColourRGB(jxl.format.Colour,int,int,int)>" -> "<jxl.biff.PaletteRecord: void <init>()>";
"<jxl.biff.PaletteRecord: void <init>()>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.PaletteRecord: void <init>()>" -> "<jxl.format.Colour: jxl.format.Colour[] getAllColours()>";
"<jxl.biff.PaletteRecord: void <init>()>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.PaletteRecord: void <init>()>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.format.Colour: jxl.format.Colour[] getAllColours()>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.biff.PaletteRecord: void <init>()>" -> "<jxl.format.Colour: jxl.format.RGB getDefaultRGB()>";
"<jxl.biff.PaletteRecord: void <init>()>" -> "<jxl.format.Colour: jxl.format.RGB getDefaultRGB()>";
"<jxl.biff.PaletteRecord: void <init>()>" -> "<jxl.format.Colour: jxl.format.RGB getDefaultRGB()>";
"<jxl.biff.PaletteRecord: void <init>()>" -> "<jxl.format.RGB: int getRed()>";
"<jxl.biff.PaletteRecord: void <init>()>" -> "<jxl.format.RGB: int getGreen()>";
"<jxl.biff.PaletteRecord: void <init>()>" -> "<jxl.format.RGB: int getBlue()>";
"<jxl.biff.PaletteRecord: void <init>()>" -> "<jxl.biff.PaletteRecord: void setColourRGB(jxl.format.Colour,int,int,int)>";
"<jxl.biff.PaletteRecord: void setColourRGB(jxl.format.Colour,int,int,int)>" -> "<jxl.biff.PaletteRecord: void initialize()>";
"<jxl.biff.PaletteRecord: void setColourRGB(jxl.format.Colour,int,int,int)>" -> "<jxl.format.RGB: void <init>(int,int,int)>";
"<jxl.biff.PaletteRecord: void setColourRGB(jxl.format.Colour,int,int,int)>" -> "<jxl.biff.PaletteRecord: int setValueRange(int,int,int)>";
"<jxl.biff.PaletteRecord: void setColourRGB(jxl.format.Colour,int,int,int)>" -> "<jxl.biff.PaletteRecord: int setValueRange(int,int,int)>";
"<jxl.biff.PaletteRecord: void setColourRGB(jxl.format.Colour,int,int,int)>" -> "<jxl.biff.PaletteRecord: int setValueRange(int,int,int)>";
"<jxl.biff.PaletteRecord: void initialize()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.PaletteRecord: void initialize()>" -> "<jxl.format.RGB: void <init>(int,int,int)>";
"<jxl.biff.PaletteRecord: void initialize()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.PaletteRecord: void initialize()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.PaletteRecord: void initialize()>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.PaletteRecord: int setValueRange(int,int,int)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.biff.PaletteRecord: int setValueRange(int,int,int)>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.biff.PaletteRecord: void setColourRGB(jxl.format.Colour,int,int,int)>" -> "<jxl.format.Colour: int getValue()>";
"<jxl.biff.PaletteRecord: void initialize()>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.biff.FormattingRecords: void setColourRGB(jxl.format.Colour,int,int,int)>" -> "<jxl.biff.PaletteRecord: void setColourRGB(jxl.format.Colour,int,int,int)>";
"<jxl.write.biff.WritableWorkbookImpl: void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int,boolean)>" -> "<jxl.write.biff.WritableSheetImpl: java.lang.String getName()>";
"<jxl.demo.Write: void write()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void write()>" -> "<jxl.SheetSettings: void setPrintArea(int,int,int,int)>";
"<jxl.SheetSettings: void setPrintArea(int,int,int,int)>" -> "<jxl.biff.SheetRangeImpl: void <init>(jxl.Sheet,int,int,int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setRowView(int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setRowView(int,boolean)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void insertRow(int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void removeRow(int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void unmergeCells(jxl.Range)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>" -> "<jxl.CellView: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.JxlWriteException: void <init>(jxl.write.biff.JxlWriteException$WriteMessage)>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,int)>" -> "<jxl.CellView: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,boolean)>" -> "<jxl.CellView: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.Label: void <init>(int,int,java.lang.String,jxl.format.CellFormat)>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.LabelRecord: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>" -> "<jxl.write.biff.WritableSheetImpl: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>" -> "<jxl.biff.SheetRangeImpl: void <init>(jxl.Sheet,int,int,int,int)>";
"<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>" -> "<jxl.write.Blank: void <init>(int,int)>";
"<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>" -> "<jxl.write.biff.BlankRecord: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<jxl.write.biff.RowRecord: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<jxl.write.biff.RowRecord: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<jxl.write.biff.RowRecord: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void unmergeCells(jxl.Range)>" -> "<jxl.write.biff.MergedCells: void unmergeCells(jxl.Range)>";
"<jxl.write.biff.MergedCells: void unmergeCells(jxl.Range)>" -> "<java.util.ArrayList: int indexOf(java.lang.Object)>";
"<jxl.write.biff.MergedCells: void unmergeCells(jxl.Range)>" -> "<java.util.ArrayList: java.lang.Object remove(int)>";
"<java.util.ArrayList: int indexOf(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: java.lang.Object remove(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<jxl.write.biff.WritableWorkbookImpl: void rowRemoved(jxl.write.biff.WritableSheetImpl,int)>";
"<jxl.write.biff.WritableWorkbookImpl: void rowRemoved(jxl.write.biff.WritableSheetImpl,int)>" -> "<jxl.write.biff.WritableSheetImpl: java.lang.String getName()>";
"<jxl.write.biff.WritableWorkbookImpl: void rowRemoved(jxl.write.biff.WritableSheetImpl,int)>" -> "<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void rowRemoved(jxl.write.biff.WritableSheetImpl,int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<jxl.write.biff.MergedCells: void removeRow(int)>";
"<jxl.write.biff.MergedCells: void removeRow(int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<java.lang.Integer: int intValue()>";
"<java.lang.Integer: int intValue()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<jxl.write.biff.WritableWorkbookImpl: void rowInserted(jxl.write.biff.WritableSheetImpl,int)>";
"<jxl.write.biff.WritableWorkbookImpl: void rowInserted(jxl.write.biff.WritableSheetImpl,int)>" -> "<jxl.write.biff.WritableSheetImpl: java.lang.String getName()>";
"<jxl.write.biff.WritableWorkbookImpl: void rowInserted(jxl.write.biff.WritableSheetImpl,int)>" -> "<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: void rowInserted(jxl.write.biff.WritableSheetImpl,int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<jxl.write.biff.MergedCells: void insertRow(int)>";
"<jxl.write.biff.MergedCells: void insertRow(int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.write.biff.WritableSheetImpl: jxl.Range mergeCells(int,int,int,int)>" -> "<jxl.write.biff.MergedCells: void add(jxl.Range)>";
"<jxl.write.biff.MergedCells: void add(jxl.Range)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.Label: void setString(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.CellValue: void setCellFormat(jxl.format.CellFormat)>";
"<jxl.write.biff.CellValue: void setCellFormat(jxl.format.CellFormat)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.CellValue: void setCellFormat(jxl.format.CellFormat)>" -> "<jxl.write.biff.CellValue: void addCellFormat()>";
"<jxl.write.biff.CellValue: void addCellFormat()>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.CellValue: void addCellFormat()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.CellValue: void addCellFormat()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.CellValue: void addCellFormat()>" -> "<jxl.biff.XFRecord: boolean isInitialized()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: int getColumn()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: int getRow()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: boolean isFile()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: boolean isUNC()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: java.lang.String getContents()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: java.io.File getFile()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: int getRow()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: int getLastRow()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: int getColumn()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: int getLastColumn()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: int getRow()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: int getColumn()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: boolean isURL()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: java.lang.String getContents()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: java.net.URL getURL()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: boolean isLocation()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: java.lang.String getContents()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: int getColumn()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: int getRow()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.HyperlinkRecord: void initialize(jxl.write.WritableSheet)>";
"<jxl.write.biff.HyperlinkRecord: boolean isFile()>" -> "<jxl.write.biff.HyperlinkRecord: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: boolean isFile()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: boolean isUNC()>" -> "<jxl.write.biff.HyperlinkRecord: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: boolean isUNC()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: boolean isURL()>" -> "<jxl.write.biff.HyperlinkRecord: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: boolean isURL()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: boolean isLocation()>" -> "<jxl.write.biff.HyperlinkRecord: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: boolean isLocation()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.HyperlinkRecord: void initialize(jxl.write.WritableSheet)>" -> "<jxl.biff.SheetRangeImpl: void <init>(jxl.Sheet,int,int,int,int)>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<java.net.URL: java.lang.String toString()>";
"<java.net.URL: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<java.io.File: java.lang.String getPath()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.Cell getCell(int,int)>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.write.biff.WritableSheetImpl: jxl.Cell getCell(int,int)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.WritableCell getWritableCell(int,int)>";
"<jxl.write.biff.WritableSheetImpl: jxl.write.WritableCell getWritableCell(int,int)>" -> "<jxl.biff.EmptyCell: void <init>(int,int)>";
"<jxl.biff.EmptyCell: void <init>(int,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.biff.EmptyCell: jxl.CellType getType()>";
"<jxl.biff.EmptyCell: jxl.CellType getType()>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,boolean)>" -> "<jxl.CellView: void setHidden(boolean)>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,boolean)>" -> "<jxl.write.biff.WritableSheetImpl: void setRowView(int,jxl.CellView)>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,jxl.CellView)>" -> "<jxl.write.biff.WritableSheetImpl: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,jxl.CellView)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,jxl.CellView)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,jxl.CellView)>" -> "<jxl.CellView: jxl.format.CellFormat getFormat()>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,jxl.CellView)>" -> "<jxl.CellView: int getSize()>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,jxl.CellView)>" -> "<jxl.CellView: boolean isHidden()>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,jxl.CellView)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.RowRecord getRowRecord(int)>";
"<jxl.write.biff.WritableSheetImpl: jxl.write.biff.RowRecord getRowRecord(int)>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: jxl.write.biff.RowRecord getRowRecord(int)>" -> "<jxl.write.biff.RowRecord: void <init>(int)>";
"<jxl.write.biff.WritableSheetImpl: jxl.write.biff.RowRecord getRowRecord(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.WritableSheetImpl: jxl.write.biff.RowRecord getRowRecord(int)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.WritableSheetImpl: jxl.write.biff.RowRecord getRowRecord(int)>" -> "<jxl.write.biff.RowsExceededException: void <init>()>";
"<jxl.write.biff.WritableSheetImpl: jxl.write.biff.RowRecord getRowRecord(int)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: jxl.write.biff.RowRecord getRowRecord(int)>" -> "<jxl.write.biff.RowRecord: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: jxl.write.biff.RowRecord getRowRecord(int)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: jxl.write.biff.RowRecord getRowRecord(int)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: jxl.write.biff.RowRecord getRowRecord(int)>" -> "<jxl.write.biff.RowRecord: void <clinit>()>";
"<jxl.write.biff.RowRecord: void <init>(int)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.RowRecord: void <init>(int)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.RowRecord: void <init>(int)>" -> "<jxl.write.biff.RowRecord: void <clinit>()>";
"<jxl.write.biff.RowRecord: void <init>(int)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.RowRecord: void <init>(int)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.RowsExceededException: void <init>()>" -> "<jxl.write.biff.JxlWriteException: void <clinit>()>";
"<jxl.write.biff.RowsExceededException: void <init>()>" -> "<jxl.write.biff.JxlWriteException: void <init>(jxl.write.biff.JxlWriteException$WriteMessage)>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,jxl.CellView)>" -> "<jxl.write.biff.RowRecord: void setRowDetails(int,boolean,boolean,jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,int)>" -> "<jxl.CellView: void setSize(int)>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,int)>" -> "<jxl.CellView: void setHidden(boolean)>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,int)>" -> "<jxl.write.biff.WritableSheetImpl: void setRowView(int,jxl.CellView)>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.LabelRecord: jxl.CellType getType()>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.CellValue: jxl.format.CellFormat getCellFormat()>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.CellValue: int getRow()>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.BlankRecord: jxl.CellType getType()>";
"<jxl.write.biff.LabelRecord: jxl.CellType getType()>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.write.biff.BlankRecord: jxl.CellType getType()>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.CellValue: boolean isReferenced()>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.LabelRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.CellValue: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>";
"<jxl.write.biff.LabelRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.CellValue: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>";
"<jxl.write.biff.CellValue: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.CellValue: void addCellFormat()>";
"<jxl.write.biff.CellValue: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.CellValue: void addCellFeatures()>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.RowRecord getRowRecord(int)>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.RowRecord: int getMaxColumn()>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<jxl.write.biff.RowRecord: void <clinit>()>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<jxl.biff.CellReferenceHelper: java.lang.String getCellReference(int,int)>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<jxl.biff.CellReferenceHelper: void <clinit>()>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<jxl.write.biff.CellValue: int getColumn()>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<jxl.write.biff.CellValue: int getRow()>";
"<jxl.write.biff.RowRecord: void addCell(jxl.write.biff.CellValue)>" -> "<jxl.write.biff.CellValue: int getColumn()>";
"<jxl.write.biff.LabelRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.SharedStrings: int getIndex(java.lang.String)>";
"<jxl.write.biff.LabelRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.SharedStrings: java.lang.String get(int)>";
"<jxl.write.biff.SharedStrings: int getIndex(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.write.biff.SharedStrings: int getIndex(java.lang.String)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.write.biff.SharedStrings: java.lang.String get(int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.write.biff.SharedStrings: int getIndex(java.lang.String)>" -> "<java.lang.Integer: int intValue()>";
"<jxl.write.biff.SharedStrings: int getIndex(java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SharedStrings: int getIndex(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<jxl.write.biff.SharedStrings: int getIndex(java.lang.String)>" -> "<java.util.HashMap: int size()>";
"<jxl.write.biff.SharedStrings: int getIndex(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>" -> "<jxl.CellView: void setSize(int)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.write.biff.ColumnInfoRecord: void <init>(int,int,jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.write.biff.ColumnInfoRecord: void <init>(int,int,jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.write.biff.WritableSheetImpl: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.ColumnInfoRecord: void <init>(int,int,jxl.biff.XFRecord)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.write.biff.ColumnInfoRecord: void <init>(int,int,jxl.biff.XFRecord)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.write.biff.ColumnInfoRecord: void <init>(int,int,jxl.biff.XFRecord)>" -> "<jxl.biff.XFRecord: int getXFIndex()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.write.biff.ColumnInfoRecord: void setHidden(boolean)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.CellView: jxl.format.CellFormat getFormat()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.CellView: boolean depUsed()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.CellView: int getDimension()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.CellView: boolean isAutosize()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.CellView: boolean isHidden()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.CellView: int getSize()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.CellView: int getDimension()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<java.util.TreeSet: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<java.util.TreeSet: boolean contains(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<java.util.TreeSet: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<java.util.TreeSet: boolean remove(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<java.util.TreeSet: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<java.util.TreeSet: boolean contains(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<java.util.TreeSet: boolean add(java.lang.Object)>";
"<java.util.TreeSet: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.TreeSet: boolean contains(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.TreeSet: boolean remove(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<jxl.write.biff.WritableSheetImpl: java.lang.String getName()>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<jxl.write.biff.WritableSheetImpl: java.lang.String getName()>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<jxl.write.biff.WritableSheetImpl: java.lang.String getName()>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeNumberFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.NumberRecord: jxl.CellType getType()>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.BooleanRecord: jxl.CellType getType()>";
"<jxl.write.biff.NumberRecord: jxl.CellType getType()>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.write.biff.BooleanRecord: jxl.CellType getType()>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.write.biff.CellValue: void addCellFormat()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setFitWidth(int)>";
"<jxl.demo.Write: void writeDateFormatSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setFitHeight(int)>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.DateRecord: jxl.CellType getType()>";
"<jxl.write.biff.DateRecord: jxl.CellType getType()>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addRowPageBreak(int)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void insertRow(int)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void insertRow(int)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void removeRow(int)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addRowPageBreak(int)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setRowView(int,boolean)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.write.biff.WritableSheetImpl: void addRowPageBreak(int)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void addRowPageBreak(int)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setProtected(boolean)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setPaperSize(jxl.format.PaperSize)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setOrientation(jxl.format.PageOrientation)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setHeaderMargin(double)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setFooterMargin(double)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setTopMargin(double)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setBottomMargin(double)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setHeader(jxl.HeaderFooter)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setFooter(jxl.HeaderFooter)>";
"<jxl.write.biff.WritableSheetImpl: void addRowPageBreak(int)>" -> "<java.lang.Integer: int intValue()>";
"<jxl.write.biff.WritableSheetImpl: void addRowPageBreak(int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableSheetImpl: void addRowPageBreak(int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.SheetSettings getSettings()>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setProtected(boolean)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setPassword(java.lang.String)>";
"<jxl.demo.Write: void writeLabelsSheet(jxl.write.WritableSheet)>" -> "<jxl.SheetSettings: void setVerticalFreeze(int)>";
"<jxl.SheetSettings: void setVerticalFreeze(int)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.biff.XFRecord: boolean isInitialized()>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,jxl.CellView)>" -> "<jxl.biff.XFRecord: boolean isInitialized()>";
"<jxl.write.biff.RowRecord: void setRowDetails(int,boolean,boolean,jxl.biff.XFRecord)>" -> "<jxl.biff.XFRecord: int getXFIndex()>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,int)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.FormulaRecord: jxl.CellType getType()>";
"<jxl.write.biff.FormulaRecord: jxl.CellType getType()>" -> "<jxl.CellType: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.FormulaRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>";
"<jxl.write.biff.FormulaRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.CellValue: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>";
"<jxl.write.biff.FormulaRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.CellReferenceHelper: java.lang.String getCellReference(int,int)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.FormulaRecord: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.FormulaRecord: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: void <init>(byte[],jxl.Cell,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.FormulaRecord: void <clinit>()>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: void <clinit>()>";
"<jxl.biff.formula.FormulaParser: void <init>(byte[],jxl.Cell,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.FormulaException: void <clinit>()>";
"<jxl.biff.formula.FormulaParser: void <init>(byte[],jxl.Cell,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.TokenFormulaParser: void <init>(byte[],jxl.Cell,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>";
"<jxl.biff.formula.FormulaParser: void <init>(byte[],jxl.Cell,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.formula.FormulaParser: void <init>(byte[],jxl.Cell,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage)>";
"<jxl.biff.formula.FormulaParser: void <init>(byte[],jxl.Cell,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.formula.FormulaParser: void <init>(byte[],jxl.Cell,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.biff.formula.TokenFormulaParser: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void <init>(byte[],jxl.Cell,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void <init>(byte[],jxl.Cell,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.formula.TokenFormulaParser: void <init>(byte[],jxl.Cell,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<java.util.Stack: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.TokenFormulaParser: void <clinit>()>" -> "<jxl.biff.formula.TokenFormulaParser: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.TokenFormulaParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.TokenFormulaParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<common.log.SimpleLogger: void error(java.lang.Object,java.lang.Throwable)>";
"<common.log.SimpleLogger: void error(java.lang.Object,java.lang.Throwable)>" -> "<java.lang.System: void <clinit>()>";
"<common.log.SimpleLogger: void error(java.lang.Object,java.lang.Throwable)>" -> "<java.lang.Throwable: void printStackTrace()>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: void parse()>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: void adjustRelativeCellReferences(int,int)>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: java.lang.String getFormula()>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: byte[] getBytes()>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: void parse()>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: java.lang.String getFormula()>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: byte[] getBytes()>";
"<jxl.biff.formula.FormulaParser: byte[] getBytes()>" -> "<jxl.biff.formula.TokenFormulaParser: byte[] getBytes()>";
"<jxl.biff.formula.FormulaParser: java.lang.String getFormula()>" -> "<jxl.biff.formula.TokenFormulaParser: java.lang.String getFormula()>";
"<jxl.biff.formula.TokenFormulaParser: java.lang.String getFormula()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: java.lang.String getFormula()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.biff.formula.FormulaParser: void adjustRelativeCellReferences(int,int)>" -> "<jxl.biff.formula.TokenFormulaParser: void adjustRelativeCellReferences(int,int)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<common.log.SimpleLogger: void error(java.lang.Object,java.lang.Throwable)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: void parse()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: java.lang.String getFormula()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: byte[] getBytes()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: void parse()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: java.lang.String getFormula()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.FormulaParser: byte[] getBytes()>";
"<jxl.write.biff.FormulaRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.WorkbookSettings getWorkbookSettings()>";
"<jxl.write.biff.FormulaRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.FormulaRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.FormulaRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.CellValue: jxl.write.biff.WritableSheetImpl getSheet()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.CellValue: int getColumn()>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.CellValue: int getRow()>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.CellValue: int getColumn()>";
"<jxl.write.biff.FormulaRecord: void initializeCopiedFormula(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.CellValue: int getRow()>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.demo.Write: void writeImageSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<jxl.write.biff.WritableSheetImpl: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<jxl.write.biff.WritableSheetImpl: void <clinit>()>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<java.lang.String: int lastIndexOf(int)>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<jxl.write.WritableImage: java.io.File getImageFile()>";
"<jxl.write.WritableImage: java.io.File getImageFile()>" -> "<jxl.biff.drawing.Drawing: java.io.File getImageFile()>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<jxl.write.biff.WritableWorkbookImpl: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>";
"<jxl.write.biff.WritableWorkbookImpl: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.DrawingGroup: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.DrawingGroup: void <init>(jxl.biff.drawing.Origin)>";
"<jxl.write.biff.WritableWorkbookImpl: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.write.biff.WritableWorkbookImpl: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.DrawingGroup: jxl.biff.drawing.BStoreContainer getBStoreContainer()>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.DrawingGroup: void <clinit>()>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Drawing: void setDrawingGroup(jxl.biff.drawing.DrawingGroup)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Drawing: void setObjectId(int,int,int)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Drawing: java.lang.String getImageFilePath()>";
"<jxl.biff.drawing.Drawing: void setObjectId(int,int,int)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.Drawing: java.lang.String getImageFilePath()>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.biff.drawing.Drawing: java.lang.String getImageFilePath()>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Drawing: void setDrawingGroup(jxl.biff.drawing.DrawingGroup)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Drawing: void setObjectId(int,int,int)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Drawing: java.lang.String getImageFilePath()>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Drawing: void setDrawingGroup(jxl.biff.drawing.DrawingGroup)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Drawing: void setObjectId(int,int,int)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.util.ArrayList: int size()>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.util.ArrayList: int size()>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.EscherContainer: jxl.biff.drawing.EscherRecord[] getChildren()>";
"<jxl.demo.Write: void write()>" -> "<jxl.WorkbookSettings: void setLocale(java.util.Locale)>";
"<jxl.demo.Write: void writeFormulaSheet(jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.WritableSheet getSheet(int)>";
"<jxl.write.biff.LabelRecord: void setString(java.lang.String)>" -> "<jxl.write.biff.SharedStrings: int getIndex(java.lang.String)>";
"<jxl.write.biff.LabelRecord: void setString(java.lang.String)>" -> "<jxl.write.biff.SharedStrings: java.lang.String get(int)>";
"<jxl.biff.formula.FormulaParser: void parse()>" -> "<jxl.biff.formula.TokenFormulaParser: void parse()>";
"<jxl.biff.formula.TokenFormulaParser: void parse()>" -> "<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>";
"<jxl.biff.formula.TokenFormulaParser: void parse()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Token: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void handleMemoryFunction(jxl.biff.formula.SubExpression)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.MemArea: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void handleMemoryFunction(jxl.biff.formula.SubExpression)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.MemFunc: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Attribute: void <init>(jxl.WorkbookSettings)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.VariableArgFunction: void <init>(jxl.WorkbookSettings)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BuiltInFunction: void <init>(jxl.WorkbookSettings)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Attribute: void <init>(jxl.WorkbookSettings)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Parenthesis: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Equal: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.NotEqual: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.GreaterEqual: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.GreaterThan: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.LessEqual: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.LessThan: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Power: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Concatenate: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Divide: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Multiply: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Add: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Subtract: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Percent: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.UnaryMinus: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.UnaryPlus: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.MissingArg: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.StringValue: void <init>(jxl.WorkbookSettings)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BooleanValue: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.DoubleValue: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.IntegerValue: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.NameRange: void <init>(jxl.biff.WorkbookMethods)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Name: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Area3d: void <init>(jxl.biff.formula.ExternalSheet)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.SharedFormulaArea: void <init>(jxl.Cell)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Area: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.CellReference3d: void <init>(jxl.Cell,jxl.biff.formula.ExternalSheet)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.SharedFormulaCellReference: void <init>(jxl.Cell)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ErrorConstant: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.CellReferenceError: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.CellReference: void <init>(jxl.Cell)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Token: jxl.biff.formula.Token getToken(int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: void <init>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Attribute: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Function: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.VariableArgFunction: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BuiltInFunction: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Attribute: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.StringValue: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.DoubleValue: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.IntegerValue: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Area3d: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Area: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.CellReference3d: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.SharedFormulaCellReference: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.CellReferenceError: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.CellReference: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.FormulaException: void <clinit>()>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<java.util.HashMap: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int,int,int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int,int,int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int,int,int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int,int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int,int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int,int,int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int,int,int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int,int,int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int,int,int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int,int,int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int,int,int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int,int,int)>";
"<jxl.biff.formula.Token: void <clinit>()>" -> "<jxl.biff.formula.Token: void <init>(int,int,int)>";
"<jxl.biff.formula.TokenFormulaParser: void handleMemoryFunction(jxl.biff.formula.SubExpression)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void handleMemoryFunction(jxl.biff.formula.SubExpression)>" -> "<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>";
"<jxl.biff.formula.TokenFormulaParser: void handleMemoryFunction(jxl.biff.formula.SubExpression)>" -> "<java.util.Stack: void <init>()>";
"<jxl.biff.formula.MemArea: void <init>()>" -> "<jxl.biff.formula.SubExpression: void <init>()>";
"<jxl.biff.formula.MemFunc: void <init>()>" -> "<jxl.biff.formula.SubExpression: void <init>()>";
"<jxl.biff.formula.Attribute: void <init>(jxl.WorkbookSettings)>" -> "<jxl.biff.formula.Operator: void <init>()>";
"<jxl.biff.formula.BuiltInFunction: void <init>(jxl.WorkbookSettings)>" -> "<jxl.biff.formula.Operator: void <init>()>";
"<jxl.biff.formula.Power: void <init>()>" -> "<jxl.biff.formula.BinaryOperator: void <init>()>";
"<jxl.biff.formula.Concatenate: void <init>()>" -> "<jxl.biff.formula.BinaryOperator: void <init>()>";
"<jxl.biff.formula.Add: void <init>()>" -> "<jxl.biff.formula.BinaryOperator: void <init>()>";
"<jxl.biff.formula.Subtract: void <init>()>" -> "<jxl.biff.formula.BinaryOperator: void <init>()>";
"<jxl.biff.formula.Percent: void <init>()>" -> "<jxl.biff.formula.UnaryOperator: void <init>()>";
"<jxl.biff.formula.UnaryMinus: void <init>()>" -> "<jxl.biff.formula.UnaryOperator: void <init>()>";
"<jxl.biff.formula.UnaryPlus: void <init>()>" -> "<jxl.biff.formula.UnaryOperator: void <init>()>";
"<jxl.biff.formula.MissingArg: void <init>()>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.StringValue: void <init>(jxl.WorkbookSettings)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.BooleanValue: void <init>()>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.DoubleValue: void <init>()>" -> "<jxl.biff.formula.NumberValue: void <init>()>";
"<jxl.biff.formula.IntegerValue: void <init>()>" -> "<jxl.biff.formula.NumberValue: void <init>()>";
"<jxl.biff.formula.NameRange: void <init>(jxl.biff.WorkbookMethods)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.NameRange: void <init>(jxl.biff.WorkbookMethods)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.formula.Name: void <init>()>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.SharedFormulaArea: void <init>(jxl.Cell)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.CellReference3d: void <init>(jxl.Cell,jxl.biff.formula.ExternalSheet)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.SharedFormulaCellReference: void <init>(jxl.Cell)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.ErrorConstant: void <init>()>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.CellReferenceError: void <init>()>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.CellReference: void <init>(jxl.Cell)>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,int)>" -> "<jxl.JXLException: void <init>(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,int)>" -> "<jxl.biff.formula.FormulaException$FormulaMessage: java.lang.String access$000(jxl.biff.formula.FormulaException$FormulaMessage)>";
"<jxl.biff.formula.Token: jxl.biff.formula.Token getToken(int)>" -> "<jxl.biff.formula.Token: void <clinit>()>";
"<jxl.biff.formula.Token: jxl.biff.formula.Token getToken(int)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.biff.formula.Token: jxl.biff.formula.Token getToken(int)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.biff.formula.SharedFormulaCellReference: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.SharedFormulaCellReference: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.SharedFormulaCellReference: void <clinit>()>" -> "<jxl.biff.formula.SharedFormulaCellReference: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.SharedFormulaCellReference: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.CellReferenceError: void <clinit>()>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.CellReferenceError: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.formula.CellReferenceError: void <clinit>()>" -> "<jxl.biff.formula.CellReferenceError: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.formula.CellReferenceError: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.formula.Token: void <init>(int)>" -> "<jxl.biff.formula.Token: void <clinit>()>";
"<jxl.biff.formula.Token: void <init>(int)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.biff.formula.Token: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.formula.Token: void <init>(int)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.biff.formula.Token: void <init>(int,int,int)>" -> "<jxl.biff.formula.Token: void <clinit>()>";
"<jxl.biff.formula.Token: void <init>(int,int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.biff.formula.Token: void <init>(int,int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.biff.formula.Token: void <init>(int,int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.biff.formula.Token: void <init>(int,int,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.formula.Token: void <init>(int,int,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.biff.formula.Token: void <init>(int,int)>" -> "<jxl.biff.formula.Token: void <clinit>()>";
"<jxl.biff.formula.Token: void <init>(int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.biff.formula.Token: void <init>(int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.biff.formula.Token: void <init>(int,int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.formula.Token: void <init>(int,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.biff.formula.SubExpression: void <init>()>" -> "<jxl.biff.formula.Operand: void <init>()>";
"<jxl.biff.formula.UnaryOperator: void <init>()>" -> "<jxl.biff.formula.Operator: void <init>()>";
"<jxl.biff.formula.SharedFormulaCellReference: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.SharedFormulaCellReference: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.CellReferenceError: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.formula.CellReferenceError: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.formula.Token: void <init>(int,int)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.biff.formula.Token: void <init>(int,int)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.biff.formula.Token: void <init>(int,int,int)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.biff.formula.Token: void <init>(int,int,int)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.biff.formula.Token: void <init>(int,int,int)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.biff.formula.Token: void <init>(int)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.biff.formula.Token: jxl.biff.formula.Token getToken(int)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>" -> "<jxl.biff.formula.UnaryOperator: void getOperands(java.util.Stack)>";
"<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>" -> "<jxl.biff.formula.BinaryOperator: void getOperands(java.util.Stack)>";
"<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>" -> "<jxl.biff.formula.Parenthesis: void getOperands(java.util.Stack)>";
"<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>" -> "<jxl.biff.formula.Attribute: void getOperands(java.util.Stack)>";
"<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>" -> "<jxl.biff.formula.BuiltInFunction: void getOperands(java.util.Stack)>";
"<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>" -> "<jxl.biff.formula.VariableArgFunction: void getOperands(java.util.Stack)>";
"<jxl.biff.formula.BuiltInFunction: void getOperands(java.util.Stack)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.VariableArgFunction: void getOperands(java.util.Stack)>" -> "<jxl.biff.formula.ParseItem: void <clinit>()>";
"<jxl.biff.formula.VariableArgFunction: void getOperands(java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.BuiltInFunction: void getOperands(java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.Attribute: void getOperands(java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.Attribute: void getOperands(java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.Parenthesis: void getOperands(java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.BinaryOperator: void getOperands(java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.BinaryOperator: void getOperands(java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.UnaryOperator: void getOperands(java.util.Stack)>" -> "<jxl.biff.formula.Operator: void add(jxl.biff.formula.ParseItem)>";
"<jxl.biff.formula.TokenFormulaParser: void handleMemoryFunction(jxl.biff.formula.SubExpression)>" -> "<java.util.Vector: int size()>";
"<jxl.biff.formula.TokenFormulaParser: void handleMemoryFunction(jxl.biff.formula.SubExpression)>" -> "<java.util.Vector: boolean isEmpty()>";
"<jxl.biff.formula.TokenFormulaParser: void handleMemoryFunction(jxl.biff.formula.SubExpression)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.TokenFormulaParser: void handleMemoryFunction(jxl.biff.formula.SubExpression)>" -> "<jxl.biff.formula.MemArea: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void handleMemoryFunction(jxl.biff.formula.SubExpression)>" -> "<jxl.biff.formula.SubExpression: int getLength()>";
"<jxl.biff.formula.TokenFormulaParser: void handleMemoryFunction(jxl.biff.formula.SubExpression)>" -> "<jxl.biff.formula.SubExpression: void setSubExpression(jxl.biff.formula.ParseItem[])>";
"<jxl.biff.formula.TokenFormulaParser: void handleMemoryFunction(jxl.biff.formula.SubExpression)>" -> "<jxl.biff.formula.SubExpression: int read(byte[],int)>";
"<jxl.biff.formula.MemArea: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.SubExpression: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.MemArea: int read(byte[],int)>" -> "<jxl.biff.formula.SubExpression: void setLength(int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Attribute: void setIfConditions(jxl.biff.formula.VariableArgFunction)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.VariableArgFunction: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.VariableArgFunction: jxl.biff.formula.Function getFunction()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.VariableArgFunction: void getOperands(java.util.Stack)>";
"<jxl.biff.formula.VariableArgFunction: int read(byte[],int)>" -> "<jxl.biff.formula.Function: void <clinit>()>";
"<jxl.biff.formula.VariableArgFunction: int read(byte[],int)>" -> "<jxl.biff.formula.FormulaException: void <init>(jxl.biff.formula.FormulaException$FormulaMessage,int)>";
"<jxl.biff.formula.VariableArgFunction: int read(byte[],int)>" -> "<jxl.biff.formula.Function: jxl.biff.formula.Function getFunction(int)>";
"<jxl.biff.formula.VariableArgFunction: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.VariableArgFunction: int read(byte[],int)>" -> "<jxl.biff.formula.FormulaException: void <clinit>()>";
"<jxl.biff.formula.Function: jxl.biff.formula.Function getFunction(int)>" -> "<jxl.biff.formula.Function: void <clinit>()>";
"<jxl.biff.formula.VariableArgFunction: void getOperands(java.util.Stack)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BuiltInFunction: int read(byte[],int)>";
"<jxl.biff.formula.BuiltInFunction: int read(byte[],int)>" -> "<jxl.biff.formula.Function: void <clinit>()>";
"<jxl.biff.formula.BuiltInFunction: int read(byte[],int)>" -> "<common.Assert: void verify(boolean,java.lang.String)>";
"<jxl.biff.formula.BuiltInFunction: int read(byte[],int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.biff.formula.BuiltInFunction: int read(byte[],int)>" -> "<jxl.biff.formula.Function: jxl.biff.formula.Function getFunction(int)>";
"<jxl.biff.formula.BuiltInFunction: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.BuiltInFunction: int read(byte[],int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.formula.BuiltInFunction: int read(byte[],int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<jxl.biff.formula.BuiltInFunction: int read(byte[],int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Attribute: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Attribute: boolean isSum()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Attribute: boolean isIf()>";
"<jxl.biff.formula.Attribute: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Parenthesis: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BinaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.UnaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.UnaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.UnaryOperator: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.MissingArg: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.StringValue: int read(byte[],int)>";
"<jxl.biff.formula.StringValue: int read(byte[],int)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.formula.StringValue: int read(byte[],int)>" -> "<jxl.biff.StringHelper: java.lang.String getUnicodeString(byte[],int,int)>";
"<jxl.biff.formula.StringValue: int read(byte[],int)>" -> "<jxl.biff.StringHelper: java.lang.String getString(byte[],int,int,jxl.WorkbookSettings)>";
"<jxl.biff.formula.StringValue: int read(byte[],int)>" -> "<jxl.biff.StringHelper: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.BooleanValue: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.DoubleValue: int read(byte[],int)>";
"<jxl.biff.formula.DoubleValue: int read(byte[],int)>" -> "<jxl.biff.DoubleHelper: double getIEEEDouble(byte[],int)>";
"<jxl.biff.DoubleHelper: double getIEEEDouble(byte[],int)>" -> "<java.lang.Double: void <clinit>()>";
"<jxl.biff.DoubleHelper: double getIEEEDouble(byte[],int)>" -> "<java.lang.Double: double longBitsToDouble(long)>";
"<jxl.biff.DoubleHelper: double getIEEEDouble(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.DoubleHelper: double getIEEEDouble(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.IntegerValue: int read(byte[],int)>";
"<jxl.biff.formula.IntegerValue: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.NameRange: int read(byte[],int)>";
"<jxl.biff.formula.NameRange: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Name: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Area3d: int read(byte[],int)>";
"<jxl.biff.formula.Area3d: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.Area3d: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.Area3d: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.Area3d: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.Area3d: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.SharedFormulaArea: int read(byte[],int)>";
"<jxl.biff.formula.SharedFormulaArea: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: short getShort(byte,byte)>";
"<jxl.biff.formula.SharedFormulaArea: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.SharedFormulaArea: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.SharedFormulaArea: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: short getShort(byte,byte)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.Area: int read(byte[],int)>";
"<jxl.biff.formula.Area: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.Area: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.Area: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.Area: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.CellReference3d: int read(byte[],int)>";
"<jxl.biff.formula.CellReference3d: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.CellReference3d: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.CellReference3d: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.SharedFormulaCellReference: int read(byte[],int)>";
"<jxl.biff.formula.SharedFormulaCellReference: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: short getShort(byte,byte)>";
"<jxl.biff.formula.SharedFormulaCellReference: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.ErrorConstant: int read(byte[],int)>";
"<jxl.biff.formula.ErrorConstant: int read(byte[],int)>" -> "<jxl.biff.formula.FormulaErrorCode: void <clinit>()>";
"<jxl.biff.formula.ErrorConstant: int read(byte[],int)>" -> "<jxl.biff.formula.FormulaErrorCode: jxl.biff.formula.FormulaErrorCode getErrorCode(int)>";
"<jxl.biff.formula.FormulaErrorCode: jxl.biff.formula.FormulaErrorCode getErrorCode(int)>" -> "<jxl.biff.formula.FormulaErrorCode: void <clinit>()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.CellReferenceError: int read(byte[],int)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<jxl.biff.formula.CellReference: int read(byte[],int)>";
"<jxl.biff.formula.CellReference: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.CellReference: int read(byte[],int)>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: boolean empty()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parseSubExpression(int)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void addOperator(jxl.biff.formula.Operator)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.BuiltInFunction: void getOperands(java.util.Stack)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.Attribute: void getOperands(java.util.Stack)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.Attribute: void getOperands(java.util.Stack)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.Parenthesis: void getOperands(java.util.Stack)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.BinaryOperator: void getOperands(java.util.Stack)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.BinaryOperator: void getOperands(java.util.Stack)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.UnaryOperator: void getOperands(java.util.Stack)>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.TokenFormulaParser: void handleMemoryFunction(jxl.biff.formula.SubExpression)>" -> "<java.util.Stack: java.lang.Object push(java.lang.Object)>";
"<jxl.biff.formula.TokenFormulaParser: void parse()>" -> "<java.util.Stack: java.lang.Object pop()>";
"<jxl.biff.formula.TokenFormulaParser: void parse()>" -> "<java.util.Stack: boolean empty()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.write.biff.WritableSheetImpl: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.WorkbookSettings getWorkbookSettings()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.write.biff.WritableSheetImpl: void addValidationCell(jxl.write.biff.CellValue)>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.biff.drawing.ComboBox getComboBox()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.write.biff.WritableSheetImpl: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.write.biff.WritableSheetImpl: void setComboBox(jxl.biff.drawing.ComboBox)>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.biff.drawing.ComboBox getComboBox()>";
"<jxl.write.biff.WritableSheetImpl: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.WritableSheetImpl: void addValidationCell(jxl.write.biff.CellValue)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: void rationalize()>" -> "<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeFonts()>";
"<jxl.write.biff.WritableWorkbookImpl: void rationalize()>" -> "<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>";
"<jxl.write.biff.WritableWorkbookImpl: void rationalize()>" -> "<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<jxl.biff.IndexMapping: void <clinit>()>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<jxl.biff.IndexMapping: void <init>(int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<jxl.biff.FormattingRecords: void <clinit>()>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<jxl.biff.IndexMapping: void <clinit>()>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<java.lang.Math: int min(int,int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<jxl.biff.IndexMapping: void <init>(int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<java.util.ArrayList: void <init>(int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<jxl.biff.FormattingRecords: void <clinit>()>";
"<jxl.biff.IndexMapping: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.IndexMapping: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.IndexMapping: void <clinit>()>" -> "<jxl.biff.IndexMapping: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.IndexMapping: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.IndexMapping: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.IndexMapping: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<jxl.biff.IndexMapping: int getNewIndex(int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<jxl.biff.IndexMapping: void setMapping(int,int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<jxl.biff.IndexMapping: int getNewIndex(int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<jxl.biff.IndexMapping: void setMapping(int,int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<jxl.biff.IndexMapping: void setMapping(int,int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<jxl.biff.IndexMapping: int getNewIndex(int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<java.util.ArrayList: int size()>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<java.util.ArrayList: int size()>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<java.util.ArrayList: int size()>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalize(jxl.biff.IndexMapping,jxl.biff.IndexMapping)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<jxl.biff.IndexMapping: int getNewIndex(int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<jxl.biff.IndexMapping: void setMapping(int,int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<jxl.biff.IndexMapping: void setMapping(int,int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<jxl.biff.IndexMapping: int getNewIndex(int)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeDisplayFormats()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.biff.FormattingRecords: jxl.biff.PaletteRecord getPalette()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.biff.FormattingRecords: jxl.biff.PaletteRecord getPalette()>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.biff.BuiltInStyle: void <init>(int,int)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.biff.BuiltInStyle: void <init>(int,int)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.biff.BuiltInStyle: void <init>(int,int)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.biff.BuiltInStyle: void <init>(int,int)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.biff.BuiltInStyle: void <init>(int,int)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.biff.BuiltInStyle: void <init>(int,int)>";
"<jxl.biff.BuiltInStyle: void <init>(int,int)>" -> "<jxl.biff.Type: void <clinit>()>";
"<jxl.biff.BuiltInStyle: void <init>(int,int)>" -> "<jxl.biff.WritableRecordData: void <init>(jxl.biff.Type)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.FormattingRecords: void write(jxl.write.biff.File)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.biff.BuiltInStyle: byte[] getData()>";
"<jxl.biff.WritableRecordData: byte[] getBytes()>" -> "<jxl.biff.PaletteRecord: byte[] getData()>";
"<jxl.biff.BuiltInStyle: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.biff.PaletteRecord: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.biff.PaletteRecord: byte[] getData()>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.biff.PaletteRecord: byte[] getData()>" -> "<jxl.format.RGB: int getRed()>";
"<jxl.biff.PaletteRecord: byte[] getData()>" -> "<jxl.format.RGB: int getGreen()>";
"<jxl.biff.PaletteRecord: byte[] getData()>" -> "<jxl.format.RGB: int getBlue()>";
"<jxl.write.biff.WritableWorkbookImpl: void write()>" -> "<jxl.biff.Fonts: void write(jxl.write.biff.File)>";
"<jxl.biff.Fonts: void write(jxl.write.biff.File)>" -> "<jxl.write.biff.File: void write(jxl.biff.ByteData)>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<java.lang.String: int length()>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<jxl.write.biff.WritableSheetImpl: java.lang.String validateName(java.lang.String)>" -> "<java.lang.String: java.lang.String replace(char,char)>";
"<java.lang.String: java.lang.String replace(char,char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<jxl.biff.FontRecord: int getPointSize()>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<jxl.biff.FontRecord: jxl.format.Colour getColour()>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<jxl.biff.FontRecord: int getBoldWeight()>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<jxl.biff.FontRecord: jxl.format.ScriptStyle getScriptStyle()>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<jxl.biff.FontRecord: jxl.format.UnderlineStyle getUnderlineStyle()>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<jxl.biff.FontRecord: boolean isItalic()>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<jxl.biff.FontRecord: java.lang.String getName()>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<jxl.write.WritableFont: boolean isStruckout()>";
"<jxl.biff.FontRecord: jxl.format.Colour getColour()>" -> "<jxl.format.Colour: void <clinit>()>";
"<jxl.biff.FontRecord: jxl.format.Colour getColour()>" -> "<jxl.format.Colour: jxl.format.Colour getInternalColour(int)>";
"<jxl.biff.FontRecord: jxl.format.ScriptStyle getScriptStyle()>" -> "<jxl.format.ScriptStyle: void <clinit>()>";
"<jxl.biff.FontRecord: jxl.format.ScriptStyle getScriptStyle()>" -> "<jxl.format.ScriptStyle: jxl.format.ScriptStyle getStyle(int)>";
"<jxl.biff.FontRecord: jxl.format.UnderlineStyle getUnderlineStyle()>" -> "<jxl.format.UnderlineStyle: void <clinit>()>";
"<jxl.biff.FontRecord: jxl.format.UnderlineStyle getUnderlineStyle()>" -> "<jxl.format.UnderlineStyle: jxl.format.UnderlineStyle getStyle(int)>";
"<jxl.write.WritableFont: boolean isStruckout()>" -> "<jxl.biff.FontRecord: boolean isStruckout()>";
"<jxl.format.ScriptStyle: jxl.format.ScriptStyle getStyle(int)>" -> "<jxl.format.ScriptStyle: void <clinit>()>";
"<jxl.format.UnderlineStyle: jxl.format.UnderlineStyle getStyle(int)>" -> "<jxl.format.UnderlineStyle: void <clinit>()>";
"<jxl.format.UnderlineStyle: jxl.format.UnderlineStyle getStyle(int)>" -> "<jxl.format.UnderlineStyle: int getValue()>";
"<jxl.format.ScriptStyle: jxl.format.ScriptStyle getStyle(int)>" -> "<jxl.format.ScriptStyle: int getValue()>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<jxl.format.UnderlineStyle: int getValue()>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<jxl.format.ScriptStyle: int getValue()>";
"<jxl.biff.FontRecord: void <init>(jxl.format.Font)>" -> "<jxl.format.Colour: int getValue()>";
"<jxl.write.biff.WritableFormattingRecords: void <init>(jxl.biff.Fonts,jxl.write.biff.Styles)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.lang.Throwable: void printStackTrace()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<jxl.write.biff.WriteAccessRecord: void <init>()>" -> "<java.lang.String: int length()>";
"<jxl.biff.StringHelper: byte[] getBytes(java.lang.String)>" -> "<java.lang.String: byte[] getBytes()>";
"<java.lang.String: byte[] getBytes()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.XML: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.CSV: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Escher: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Features: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Formulas: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.EscherDrawingGroup: void <init>(jxl.Workbook,java.io.OutputStream,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<common.log.SimpleLogger: void debug(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<common.log.SimpleLogger: void info(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<common.log.SimpleLogger: void error(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<common.log.SimpleLogger: void fatal(java.lang.Object)>";
"<common.log.SimpleLogger: void debug(java.lang.Object)>" -> "<java.lang.System: void <clinit>()>";
"<common.log.SimpleLogger: void fatal(java.lang.Object)>" -> "<java.lang.System: void <clinit>()>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.demo.PropertySetsReader: void displayPropertySet(java.lang.String,java.io.OutputStream)>" -> "<java.io.FileOutputStream: void write(byte[])>";
"<java.io.FileOutputStream: void write(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.demo.Demo: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.biff.Fonts: void write(jxl.write.biff.File)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.FormattingRecords: jxl.biff.IndexMapping rationalizeFonts()>" -> "<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<jxl.biff.IndexMapping: void <clinit>()>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<jxl.biff.IndexMapping: void <init>(int)>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<java.util.ArrayList: int size()>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<jxl.biff.IndexMapping: void setMapping(int,int)>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<jxl.biff.IndexMapping: int getNewIndex(int)>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<jxl.biff.IndexMapping: void setMapping(int,int)>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<jxl.biff.IndexMapping: void setMapping(int,int)>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<jxl.biff.IndexMapping: int getNewIndex(int)>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<java.util.ArrayList: int size()>";
"<jxl.biff.Fonts: jxl.biff.IndexMapping rationalize()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.biff.formula.SharedFormulaCellReference: int read(byte[],int)>" -> "<jxl.write.biff.CellValue: int getColumn()>";
"<jxl.biff.formula.SharedFormulaCellReference: int read(byte[],int)>" -> "<jxl.write.biff.CellValue: int getRow()>";
"<jxl.biff.formula.SharedFormulaArea: int read(byte[],int)>" -> "<jxl.write.biff.CellValue: int getColumn()>";
"<jxl.biff.formula.SharedFormulaArea: int read(byte[],int)>" -> "<jxl.write.biff.CellValue: int getRow()>";
"<jxl.biff.formula.SharedFormulaArea: int read(byte[],int)>" -> "<jxl.write.biff.CellValue: int getColumn()>";
"<jxl.biff.formula.SharedFormulaArea: int read(byte[],int)>" -> "<jxl.write.biff.CellValue: int getRow()>";
"<jxl.biff.formula.BuiltInFunction: void getOperands(java.util.Stack)>" -> "<jxl.biff.formula.Function: int getNumArgs()>";
"<jxl.biff.formula.BuiltInFunction: void getOperands(java.util.Stack)>" -> "<jxl.biff.formula.Function: int getNumArgs()>";
"<jxl.biff.formula.BuiltInFunction: void getOperands(java.util.Stack)>" -> "<jxl.biff.formula.Function: int getNumArgs()>";
"<jxl.biff.drawing.Drawing: java.lang.String getImageFilePath()>" -> "<java.io.File: java.lang.String getPath()>";
"<jxl.write.biff.WritableSheetImpl: void addImage(jxl.write.WritableImage)>" -> "<java.io.File: java.lang.String getName()>";
"<java.io.File: java.lang.String getName()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.FormulaRecord: void initialize(jxl.WorkbookSettings,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.WritableSheetImpl: java.lang.String getName()>";
"<jxl.biff.formula.FormulaParser: byte[] getBytes()>" -> "<jxl.biff.formula.StringFormulaParser: byte[] getBytes()>";
"<jxl.biff.formula.StringFormulaParser: byte[] getBytes()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: byte[] getBytes()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.formula.StringFormulaParser: byte[] getBytes()>" -> "<jxl.biff.formula.Token: void <clinit>()>";
"<jxl.biff.formula.StringFormulaParser: byte[] getBytes()>" -> "<jxl.biff.formula.Token: byte getCode()>";
"<jxl.biff.formula.FormulaParser: java.lang.String getFormula()>" -> "<jxl.biff.formula.StringFormulaParser: java.lang.String getFormula()>";
"<jxl.biff.formula.StringFormulaParser: java.lang.String getFormula()>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.biff.formula.StringFormulaParser: java.lang.String getFormula()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<jxl.biff.formula.FormulaParser: void adjustRelativeCellReferences(int,int)>" -> "<jxl.biff.formula.StringFormulaParser: void adjustRelativeCellReferences(int,int)>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableSheetImpl: void setRowView(int,jxl.CellView)>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.WritableSheetImpl: jxl.write.WritableCell getWritableCell(int,int)>" -> "<jxl.write.biff.RowRecord: jxl.write.biff.CellValue getCell(int)>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<jxl.WorkbookSettings: boolean getFormulaAdjust()>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<jxl.write.biff.RowRecord: void decrementRow()>";
"<jxl.write.biff.RowRecord: void decrementRow()>" -> "<jxl.write.biff.CellValue: void decrementRow()>";
"<jxl.write.biff.CellValue: void decrementRow()>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.CellValue: void decrementRow()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.CellValue: void decrementRow()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.CellValue: void decrementRow()>" -> "<jxl.biff.BaseCellFeatures: jxl.biff.drawing.Comment getCommentDrawing()>";
"<jxl.write.biff.CellValue: void decrementRow()>" -> "<jxl.biff.BaseCellFeatures: boolean hasDropDown()>";
"<jxl.write.biff.CellValue: void decrementRow()>" -> "<jxl.biff.drawing.Comment: void setX(double)>";
"<jxl.write.biff.CellValue: void decrementRow()>" -> "<jxl.biff.drawing.Comment: void setY(double)>";
"<jxl.biff.drawing.Comment: void setX(double)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.Comment: void setX(double)>" -> "<jxl.biff.drawing.Comment: void initialize()>";
"<jxl.biff.drawing.Comment: void setY(double)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.Comment: void setY(double)>" -> "<jxl.biff.drawing.Comment: void initialize()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<jxl.WorkbookSettings: boolean getFormulaAdjust()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<jxl.write.biff.RowRecord: void incrementRow()>";
"<jxl.write.biff.RowRecord: void incrementRow()>" -> "<jxl.write.biff.CellValue: void incrementRow()>";
"<jxl.write.biff.CellValue: void incrementRow()>" -> "<jxl.biff.BaseCellFeatures: jxl.biff.drawing.Comment getCommentDrawing()>";
"<jxl.write.biff.CellValue: void incrementRow()>" -> "<jxl.biff.drawing.Comment: void setX(double)>";
"<jxl.write.biff.CellValue: void incrementRow()>" -> "<jxl.biff.drawing.Comment: void setY(double)>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.RowRecord: void removeCell(int)>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.LabelRecord: jxl.CellType getType()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.NumberRecord: jxl.CellType getType()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.FormulaRecord: jxl.CellType getType()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.DateRecord: jxl.CellType getType()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.BooleanRecord: jxl.CellType getType()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.BlankRecord: jxl.CellType getType()>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.HeaderFooter$Contents: void append(java.lang.String)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.HeaderFooter$Contents: void append(java.lang.String)>";
"<jxl.demo.Write: void writeBordersSheet(jxl.write.WritableSheet)>" -> "<jxl.HeaderFooter$Contents: void appendPageNumber()>";
"<jxl.HeaderFooter$Contents: void append(java.lang.String)>" -> "<jxl.biff.HeaderFooter$Contents: void append(java.lang.String)>";
"<jxl.HeaderFooter$Contents: void appendPageNumber()>" -> "<jxl.biff.HeaderFooter$Contents: void appendPageNumber()>";
"<jxl.biff.HeaderFooter$Contents: void append(java.lang.String)>" -> "<jxl.biff.HeaderFooter$Contents: void appendInternal(java.lang.String)>";
"<jxl.biff.HeaderFooter$Contents: void appendPageNumber()>" -> "<jxl.biff.HeaderFooter$Contents: void appendInternal(java.lang.String)>";
"<jxl.biff.HeaderFooter$Contents: void appendInternal(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<jxl.biff.HeaderFooter$Contents: void appendInternal(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<jxl.biff.Fonts: jxl.biff.FontRecord getFont(int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.XFRecord: void initialize(int,jxl.biff.FormattingRecords,jxl.biff.Fonts)>" -> "<jxl.biff.FormatRecord: boolean isInitialized()>";
"<jxl.biff.XFRecord: void initialize(int,jxl.biff.FormattingRecords,jxl.biff.Fonts)>" -> "<jxl.biff.FormatRecord: int getFormatIndex()>";
"<jxl.biff.XFRecord: void initialize(int,jxl.biff.FormattingRecords,jxl.biff.Fonts)>" -> "<jxl.write.DateFormats$BuiltInFormat: boolean isInitialized()>";
"<jxl.biff.XFRecord: void initialize(int,jxl.biff.FormattingRecords,jxl.biff.Fonts)>" -> "<jxl.write.DateFormats$BuiltInFormat: int getFormatIndex()>";
"<jxl.biff.XFRecord: void initialize(int,jxl.biff.FormattingRecords,jxl.biff.Fonts)>" -> "<jxl.write.NumberFormats$BuiltInFormat: boolean isInitialized()>";
"<jxl.biff.XFRecord: void initialize(int,jxl.biff.FormattingRecords,jxl.biff.Fonts)>" -> "<jxl.write.NumberFormats$BuiltInFormat: int getFormatIndex()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.biff.FormatRecord: boolean isInitialized()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.biff.FormatRecord: int getFormatIndex()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.biff.FormatRecord: void initialize(int)>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.biff.FormatRecord: boolean isInitialized()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.biff.FormatRecord: void initialize(int)>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.biff.FormatRecord: int getFormatIndex()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.biff.FormatRecord: int getFormatIndex()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.biff.FormatRecord: boolean isBuiltIn()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.biff.FormatRecord: int getFormatIndex()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.DateFormats$BuiltInFormat: boolean isInitialized()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.DateFormats$BuiltInFormat: int getFormatIndex()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.DateFormats$BuiltInFormat: void initialize(int)>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.DateFormats$BuiltInFormat: boolean isInitialized()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.DateFormats$BuiltInFormat: void initialize(int)>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.DateFormats$BuiltInFormat: int getFormatIndex()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.DateFormats$BuiltInFormat: int getFormatIndex()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.DateFormats$BuiltInFormat: boolean isBuiltIn()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.DateFormats$BuiltInFormat: int getFormatIndex()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.NumberFormats$BuiltInFormat: boolean isInitialized()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.NumberFormats$BuiltInFormat: int getFormatIndex()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.NumberFormats$BuiltInFormat: void initialize(int)>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.NumberFormats$BuiltInFormat: boolean isInitialized()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.NumberFormats$BuiltInFormat: void initialize(int)>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.NumberFormats$BuiltInFormat: int getFormatIndex()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.NumberFormats$BuiltInFormat: int getFormatIndex()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.NumberFormats$BuiltInFormat: boolean isBuiltIn()>";
"<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>" -> "<jxl.write.NumberFormats$BuiltInFormat: int getFormatIndex()>";
"<jxl.biff.XFRecord: void initialize(int,jxl.biff.FormattingRecords,jxl.biff.Fonts)>" -> "<jxl.biff.FontRecord: boolean isInitialized()>";
"<jxl.biff.XFRecord: void initialize(int,jxl.biff.FormattingRecords,jxl.biff.Fonts)>" -> "<jxl.biff.FontRecord: int getFontIndex()>";
"<jxl.biff.XFRecord: void initialize(int,jxl.biff.FormattingRecords,jxl.biff.Fonts)>" -> "<jxl.biff.Fonts: void addFont(jxl.biff.FontRecord)>";
"<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>" -> "<java.util.ArrayList: int size()>";
"<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>" -> "<java.util.ArrayList: int size()>";
"<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.Fonts: void addFont(jxl.biff.FontRecord)>" -> "<java.util.ArrayList: int size()>";
"<jxl.biff.Fonts: void addFont(jxl.biff.FontRecord)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.String: int indexOf(int)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.String: int indexOf(int,int)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.String: int length()>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.String: int indexOf(int,int)>";
"<jxl.write.biff.HyperlinkRecord: void setLocation(jxl.write.WritableSheet,int,int,int,int)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: int indexOf(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.DVParser: void <init>(jxl.biff.DVParser)>" -> "<jxl.biff.formula.FormulaParser: java.lang.String getFormula()>";
"<jxl.biff.DVParser: void <init>(jxl.biff.DVParser)>" -> "<jxl.biff.formula.FormulaParser: java.lang.String getFormula()>";
"<jxl.biff.BaseCellFeatures: void setComment(java.lang.String,double,double)>" -> "<jxl.biff.drawing.Comment: void setCommentText(java.lang.String)>";
"<jxl.biff.BaseCellFeatures: void setComment(java.lang.String,double,double)>" -> "<jxl.biff.drawing.Comment: void setWidth(double)>";
"<jxl.biff.BaseCellFeatures: void setComment(java.lang.String,double,double)>" -> "<jxl.biff.drawing.Comment: void setWidth(double)>";
"<jxl.biff.drawing.Comment: void setCommentText(java.lang.String)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.BaseCellFeatures: void removeComment()>" -> "<jxl.write.biff.CellValue: void removeComment(jxl.biff.drawing.Comment)>";
"<jxl.write.biff.CellValue: void removeComment(jxl.biff.drawing.Comment)>" -> "<jxl.write.biff.WritableSheetImpl: void removeDrawing(jxl.biff.drawing.DrawingGroupObject)>";
"<jxl.write.biff.WritableSheetImpl: void removeDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.WritableSheetImpl: void removeDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableSheetImpl: void removeDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.util.ArrayList: boolean remove(java.lang.Object)>";
"<jxl.write.biff.WritableSheetImpl: void removeDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.util.ArrayList: int size()>";
"<java.util.ArrayList: boolean remove(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.biff.drawing.EscherRecord: void setVersion(int)>" -> "<jxl.biff.drawing.EscherRecordData: void setVersion(int)>";
"<jxl.biff.drawing.EscherRecord: void setContainer(boolean)>" -> "<jxl.biff.drawing.EscherRecordData: void setContainer(boolean)>";
"<jxl.biff.drawing.DrawingGroup: jxl.biff.drawing.BStoreContainer getBStoreContainer()>" -> "<jxl.biff.drawing.EscherContainer: jxl.biff.drawing.EscherRecord[] getChildren()>";
"<jxl.write.biff.SSTContinueRecord: int add(java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SSTContinueRecord: int add(java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SSTContinueRecord: int add(java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.lang.String: int lastIndexOf(int)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.lang.String: int lastIndexOf(int)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<jxl.write.biff.CompoundFile: void checkBbdPos()>" -> "<java.io.FileOutputStream: void write(byte[])>";
"<jxl.write.biff.CompoundFile: void writeExcelData()>" -> "<java.io.FileOutputStream: void write(byte[],int,int)>";
"<jxl.write.biff.CompoundFile: void writeExcelData()>" -> "<java.io.FileOutputStream: void write(byte[])>";
"<java.io.FileOutputStream: void write(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.CompoundFile: void writeDocumentSummaryData()>" -> "<java.io.FileOutputStream: void write(byte[])>";
"<jxl.write.biff.CompoundFile: void writeSummaryData()>" -> "<java.io.FileOutputStream: void write(byte[])>";
"<jxl.write.biff.CompoundFile: void writeAdditionalPropertySets()>" -> "<java.io.FileOutputStream: void write(byte[],int,int)>";
"<jxl.write.biff.CompoundFile: void writeAdditionalPropertySets()>" -> "<java.io.FileOutputStream: void write(byte[],int,int)>";
"<jxl.write.biff.CompoundFile: void writeSmallBlockDepot()>" -> "<java.io.FileOutputStream: void write(byte[])>";
"<jxl.write.biff.CompoundFile: void writeSmallBlockDepotChain()>" -> "<java.io.FileOutputStream: void write(byte[])>";
"<jxl.write.biff.CompoundFile: void writeBigBlockDepot()>" -> "<java.io.FileOutputStream: void write(byte[])>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.io.FileOutputStream: void write(byte[])>";
"<jxl.write.biff.CompoundFile: void writePropertySets()>" -> "<java.io.FileOutputStream: void write(byte[])>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<java.io.FileOutputStream: void write(byte[])>";
"<jxl.write.biff.CompoundFile: void writeHeader()>" -> "<java.io.FileOutputStream: void write(byte[])>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.CompoundFile: void <init>(byte[],int,java.io.OutputStream,jxl.read.biff.CompoundFile)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.read.biff.CompoundFile: int getNumberOfPropertySets()>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertySet(int)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage findPropertyStorage(java.lang.String)>";
"<jxl.write.biff.CompoundFile: void readAdditionalPropertySets(jxl.read.biff.CompoundFile)>" -> "<jxl.read.biff.CompoundFile: byte[] getStream(int)>";
"<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage findPropertyStorage(java.lang.String)>" -> "<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage findPropertyStorage(java.lang.String,jxl.biff.BaseCompoundFile$PropertyStorage)>";
"<jxl.read.biff.CompoundFile: byte[] getStream(int)>" -> "<jxl.read.biff.CompoundFile: jxl.biff.BaseCompoundFile$PropertyStorage getPropertyStorage(int)>";
"<jxl.read.biff.CompoundFile: byte[] getStream(int)>" -> "<jxl.read.biff.CompoundFile: byte[] getSmallBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>";
"<jxl.read.biff.CompoundFile: byte[] getStream(int)>" -> "<jxl.read.biff.CompoundFile: byte[] getBigBlockStream(jxl.biff.BaseCompoundFile$PropertyStorage)>";
"<jxl.biff.CountryCode: jxl.biff.CountryCode getCountryCode(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.write.biff.FormulaRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.WritableWorkbookImpl: void addRCIRCell(jxl.write.biff.CellValue)>";
"<jxl.write.biff.WritableWorkbookImpl: void addRCIRCell(jxl.write.biff.CellValue)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.formula.FormulaParser: void <init>(byte[],jxl.Cell,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.read.biff.BOFRecord getWorkbookBof()>";
"<jxl.biff.formula.FormulaParser: void <init>(byte[],jxl.Cell,jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.read.biff.BOFRecord getWorkbookBof()>";
"<jxl.write.biff.CellValue: void addCellFormat()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.biff.Styles getStyles()>";
"<jxl.write.biff.CellValue: void addCellFormat()>" -> "<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>";
"<jxl.write.biff.CellValue: void addCellFormat()>" -> "<jxl.write.biff.Styles: jxl.write.WritableCellFormat getNormalStyle()>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.write.biff.CellValue: void <clinit>()>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.write.biff.DateRecord: void <clinit>()>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.biff.XFRecord: jxl.format.Font getFont()>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.biff.XFRecord: void setFont(jxl.biff.FontRecord)>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.biff.XFRecord: jxl.format.Font getFont()>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.biff.XFRecord: void setFont(jxl.biff.FontRecord)>";
"<jxl.biff.XFRecord: jxl.format.Font getFont()>" -> "<jxl.biff.XFRecord: void initializeFormatInformation()>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.write.biff.Styles: jxl.write.WritableCellFormat getNormalStyle()>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.write.biff.Styles: jxl.write.WritableCellFormat getHyperlinkStyle()>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.write.biff.Styles: jxl.write.WritableCellFormat getHiddenStyle()>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.write.biff.Styles: jxl.write.WritableCellFormat getDefaultDateFormat()>";
"<jxl.write.biff.Styles: jxl.biff.XFRecord getFormat(jxl.biff.XFRecord)>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getHyperlinkFont()>";
"<jxl.write.biff.Styles: jxl.write.WritableCellFormat getHyperlinkStyle()>" -> "<jxl.write.biff.Styles: void initHyperlinkStyle()>";
"<jxl.write.biff.Styles: jxl.write.WritableCellFormat getHiddenStyle()>" -> "<jxl.write.biff.Styles: void initHiddenStyle()>";
"<jxl.write.biff.Styles: jxl.write.WritableCellFormat getDefaultDateFormat()>" -> "<jxl.write.biff.Styles: void initDefaultDateFormat()>";
"<jxl.write.biff.Styles: jxl.write.WritableFont getHyperlinkFont()>" -> "<jxl.write.biff.Styles: void initHyperlinkFont()>";
"<jxl.write.biff.Styles: void initHyperlinkStyle()>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.write.biff.Styles: void initHyperlinkStyle()>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.Styles: void initHyperlinkStyle()>" -> "<jxl.write.NumberFormats: void <clinit>()>";
"<jxl.write.biff.Styles: void initHyperlinkStyle()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.Styles: void initHiddenStyle()>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.write.biff.Styles: void initHiddenStyle()>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.write.WritableFont,jxl.biff.DisplayFormat)>";
"<jxl.write.biff.Styles: void initHiddenStyle()>" -> "<jxl.write.DateFormat: void <init>(java.lang.String)>";
"<jxl.write.biff.Styles: void initHiddenStyle()>" -> "<jxl.biff.FormatRecord: void <clinit>()>";
"<jxl.write.biff.Styles: void initHiddenStyle()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.Styles: void initDefaultDateFormat()>" -> "<jxl.biff.XFRecord: void <clinit>()>";
"<jxl.write.biff.Styles: void initDefaultDateFormat()>" -> "<jxl.write.WritableCellFormat: void <init>(jxl.biff.DisplayFormat)>";
"<jxl.write.biff.Styles: void initDefaultDateFormat()>" -> "<jxl.write.DateFormats: void <clinit>()>";
"<jxl.write.biff.Styles: void initDefaultDateFormat()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.Styles: void initHyperlinkFont()>" -> "<jxl.write.WritableFont: void <clinit>()>";
"<jxl.write.biff.Styles: void initHyperlinkFont()>" -> "<jxl.write.WritableFont: void <init>(jxl.format.Font)>";
"<jxl.write.biff.Styles: void initHyperlinkFont()>" -> "<jxl.write.WritableWorkbook: void <clinit>()>";
"<jxl.write.biff.Styles: void initHyperlinkFont()>" -> "<jxl.biff.WritableRecordData: void <clinit>()>";
"<jxl.write.biff.Styles: void initHyperlinkFont()>" -> "<jxl.biff.FontRecord: void <clinit>()>";
"<jxl.write.biff.Styles: void initHiddenStyle()>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getArial10Pt()>";
"<jxl.write.biff.Styles: void initHyperlinkStyle()>" -> "<jxl.write.biff.Styles: jxl.write.WritableFont getHyperlinkFont()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.write.biff.Styles getStyles()>";
"<jxl.write.biff.WritableSheetImpl: void setColumnView(int,jxl.CellView)>" -> "<jxl.write.biff.Styles: jxl.write.WritableCellFormat getNormalStyle()>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.write.biff.WritableWorkbookImpl: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>";
"<jxl.write.biff.CellValue: void addCellFeatures()>" -> "<jxl.write.biff.WritableWorkbookImpl: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Comment: void setDrawingGroup(jxl.biff.drawing.DrawingGroup)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Comment: void setObjectId(int,int,int)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Comment: java.lang.String getImageFilePath()>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.ComboBox: void setDrawingGroup(jxl.biff.drawing.DrawingGroup)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.ComboBox: void setObjectId(int,int,int)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.ComboBox: java.lang.String getImageFilePath()>";
"<jxl.biff.drawing.Comment: void setObjectId(int,int,int)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.Comment: java.lang.String getImageFilePath()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.drawing.ComboBox: void setObjectId(int,int,int)>" -> "<jxl.biff.drawing.Origin: void <clinit>()>";
"<jxl.biff.drawing.ComboBox: java.lang.String getImageFilePath()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.SheetCopier: void <init>(jxl.Sheet,jxl.write.WritableSheet)>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.WorkbookSettings getSettings()>";
"<jxl.write.biff.SheetCopier: void shallowCopyCells()>" -> "<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>";
"<jxl.write.biff.SheetCopier: void shallowCopyCells()>" -> "<jxl.write.biff.WritableSheetImpl: int getRows()>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.ReadFormulaRecord: jxl.CellType getType()>";
"<jxl.write.biff.WritableSheetImpl: void addCell(jxl.write.WritableCell)>" -> "<jxl.write.biff.ReadFormulaRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>";
"<jxl.write.biff.ReadFormulaRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.CellValue: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>";
"<jxl.write.biff.ReadFormulaRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.ReadFormulaRecord: void setCellDetails(jxl.biff.FormattingRecords,jxl.write.biff.SharedStrings,jxl.write.biff.WritableSheetImpl)>" -> "<jxl.write.biff.WritableWorkbookImpl: void addRCIRCell(jxl.write.biff.CellValue)>";
"<jxl.write.biff.CellValue: void addCellFormat()>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.SheetWriter: void setCharts(jxl.biff.drawing.Chart[])>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.SheetWriter: void setWorkspaceOptions(jxl.biff.WorkspaceInformationRecord)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.SheetWriter: void setChartOnly()>";
"<jxl.write.biff.SheetWriter: void setCharts(jxl.biff.drawing.Chart[])>" -> "<jxl.biff.drawing.SheetDrawingWriter: void setCharts(jxl.biff.drawing.Chart[])>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.MergedCells: void add(jxl.Range)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.RowRecord getRowRecord(int)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.WritableCell getWritableCell(int,int)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.WritableSheetImpl: jxl.write.biff.WritableWorkbookImpl getWorkbook()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.RowRecord: void setRowDetails(int,boolean,boolean,jxl.biff.XFRecord)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.biff.drawing.DrawingGroup getDrawingGroup()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.biff.drawing.DrawingGroup getDrawingGroup()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.biff.drawing.DrawingGroup getDrawingGroup()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.WritableWorkbookImpl: jxl.biff.drawing.DrawingGroup getDrawingGroup()>";
"<jxl.biff.drawing.Drawing: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup)>" -> "<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>";
"<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.lang.Math: int max(int,int)>";
"<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Drawing: int getObjectId()>";
"<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Drawing: int getShapeId()>";
"<jxl.biff.drawing.Drawing: int getObjectId()>" -> "<jxl.biff.drawing.Drawing: void initialize()>";
"<jxl.biff.drawing.Drawing: int getShapeId()>" -> "<jxl.biff.drawing.Drawing: void initialize()>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<jxl.biff.drawing.ShapeType: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<jxl.biff.drawing.Drawing$ImageAnchorProperties: jxl.biff.drawing.Drawing$ImageAnchorProperties getImageAnchorProperties(int)>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<java.io.File: void <init>(java.lang.String)>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<jxl.biff.drawing.ShapeType: jxl.biff.drawing.ShapeType getType(int)>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<jxl.biff.drawing.Drawing$ImageAnchorProperties: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<jxl.biff.drawing.Drawing: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<jxl.biff.drawing.Drawing: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<java.io.File: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<jxl.biff.drawing.Drawing: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<java.io.File: void <clinit>()>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<jxl.biff.drawing.Drawing: void <clinit>()>";
"<jxl.biff.drawing.Drawing$ImageAnchorProperties: jxl.biff.drawing.Drawing$ImageAnchorProperties getImageAnchorProperties(int)>" -> "<jxl.biff.drawing.Drawing: void <clinit>()>";
"<jxl.biff.drawing.Drawing$ImageAnchorProperties: jxl.biff.drawing.Drawing$ImageAnchorProperties getImageAnchorProperties(int)>" -> "<jxl.biff.drawing.Drawing$ImageAnchorProperties: void <clinit>()>";
"<jxl.biff.drawing.Drawing$ImageAnchorProperties: jxl.biff.drawing.Drawing$ImageAnchorProperties getImageAnchorProperties(int)>" -> "<jxl.biff.drawing.Drawing$ImageAnchorProperties: int getValue()>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.drawing.Drawing: void initialize()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.drawing.Comment: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>" -> "<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>";
"<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Comment: int getObjectId()>";
"<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Comment: int getShapeId()>";
"<jxl.biff.drawing.Comment: int getObjectId()>" -> "<jxl.biff.drawing.Comment: void initialize()>";
"<jxl.biff.drawing.Comment: int getShapeId()>" -> "<jxl.biff.drawing.Comment: void initialize()>";
"<jxl.biff.drawing.Button: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>" -> "<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>";
"<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Button: int getObjectId()>";
"<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.Button: int getShapeId()>";
"<jxl.biff.drawing.Button: int getObjectId()>" -> "<jxl.biff.drawing.Button: void initialize()>";
"<jxl.biff.drawing.Button: int getShapeId()>" -> "<jxl.biff.drawing.Button: void initialize()>";
"<jxl.biff.drawing.Button: void initialize()>" -> "<jxl.biff.drawing.ShapeType: void <clinit>()>";
"<jxl.biff.drawing.Button: void initialize()>" -> "<jxl.biff.drawing.ShapeType: jxl.biff.drawing.ShapeType getType(int)>";
"<jxl.biff.drawing.Button: void initialize()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.drawing.Button: void initialize()>" -> "<jxl.biff.drawing.Button: void <clinit>()>";
"<jxl.biff.drawing.Button: void initialize()>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.Button: void initialize()>" -> "<jxl.biff.drawing.Button: void <clinit>()>";
"<jxl.biff.drawing.Button: void initialize()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.drawing.Button: void initialize()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.drawing.ComboBox: void <init>(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup,jxl.WorkbookSettings)>" -> "<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>";
"<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.ComboBox: int getObjectId()>";
"<jxl.biff.drawing.DrawingGroup: void addDrawing(jxl.biff.drawing.DrawingGroupObject)>" -> "<jxl.biff.drawing.ComboBox: int getShapeId()>";
"<jxl.biff.drawing.ComboBox: int getObjectId()>" -> "<jxl.biff.drawing.ComboBox: void initialize()>";
"<jxl.biff.drawing.ComboBox: int getShapeId()>" -> "<jxl.biff.drawing.ComboBox: void initialize()>";
"<jxl.biff.drawing.ComboBox: void initialize()>" -> "<jxl.biff.drawing.ShapeType: void <clinit>()>";
"<jxl.biff.drawing.ComboBox: void initialize()>" -> "<jxl.biff.drawing.ShapeType: jxl.biff.drawing.ShapeType getType(int)>";
"<jxl.biff.drawing.ComboBox: void initialize()>" -> "<common.Assert: void verify(boolean)>";
"<jxl.biff.drawing.ComboBox: void initialize()>" -> "<jxl.biff.drawing.ComboBox: void <clinit>()>";
"<jxl.biff.drawing.ComboBox: void initialize()>" -> "<jxl.biff.drawing.EscherRecordType: void <clinit>()>";
"<jxl.biff.drawing.ComboBox: void initialize()>" -> "<jxl.biff.drawing.ComboBox: void <clinit>()>";
"<jxl.biff.drawing.ComboBox: void initialize()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.biff.drawing.ComboBox: void initialize()>" -> "<common.log.SimpleLogger: void warn(java.lang.Object)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.CellValue: jxl.CellFeatures getCellFeatures()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.write.biff.CellValue: jxl.write.WritableCellFeatures getWritableCellFeatures()>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.BaseCellFeatures: void setCommentDrawing(jxl.biff.drawing.Comment)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<java.util.TreeSet: boolean add(java.lang.Object)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.RecordData: jxl.read.biff.Record getRecord()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.FormattingRecords: jxl.biff.Fonts getFonts()>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.FormattingRecords: jxl.biff.FormatRecord getFormatRecord(int)>";
"<jxl.biff.FormattingRecords: jxl.biff.FormatRecord getFormatRecord(int)>" -> "<java.lang.Integer: void <clinit>()>";
"<jxl.biff.FormattingRecords: jxl.biff.FormatRecord getFormatRecord(int)>" -> "<java.lang.Integer: void <init>(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.biff.Fonts: jxl.biff.FontRecord getFont(int)>";
"<jxl.biff.FormattingRecords: jxl.biff.FormatRecord getFormatRecord(int)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<jxl.demo.ReadWrite: void readWrite()>" -> "<java.io.File: java.lang.String getName()>";
"<jxl.read.biff.Record: void <init>(byte[],int,jxl.read.biff.File)>" -> "<jxl.read.biff.File: void skip(int)>";
"<jxl.biff.drawing.EscherRecord: int getInstance()>" -> "<jxl.biff.drawing.EscherRecordData: int getInstance()>";
"<jxl.biff.drawing.EscherRecord: byte[] getBytes()>" -> "<jxl.biff.drawing.EscherRecordData: byte[] getBytes()>";
"<jxl.biff.drawing.EscherRecordData: byte[] getBytes()>" -> "<java.lang.System: void <clinit>()>";
"<jxl.biff.drawing.EscherRecordData: byte[] getBytes()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<jxl.biff.drawing.EscherRecordData: byte[] getBytes()>" -> "<jxl.biff.drawing.DrawingGroup: byte[] getData()>";
"<jxl.biff.drawing.EscherDisplay: void indent(int)>" -> "<java.io.BufferedWriter: void write(int)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<jxl.biff.drawing.EscherDisplay: void displayRecord(jxl.biff.drawing.EscherRecord,int)>" -> "<java.io.BufferedWriter: void newLine()>";
"<jxl.read.biff.WorkbookParser: void addSheet(jxl.Sheet)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.read.biff.WorkbookParser: int getNumberOfSheets()>" -> "<java.util.ArrayList: int size()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.FormattingRecords: void setPalette(jxl.biff.PaletteRecord)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.FormattingRecords: void addFormat(jxl.biff.DisplayFormat)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.FormattingRecords: void addStyle(jxl.biff.XFRecord)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.biff.Fonts: void addFont(jxl.biff.FontRecord)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.HashMap: int size()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<java.util.HashMap: int size()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.WorkbookSettings: boolean getDrawingsDisabled()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.WorkbookSettings: void setCharacterSet(int)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.WorkbookSettings: boolean getDrawingsDisabled()>";
"<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>" -> "<jxl.WorkbookSettings: java.util.Locale getLocale()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record next()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record next()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record peek()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record next()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record peek()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record peek()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record next()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record peek()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record peek()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record next()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record peek()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: boolean hasNext()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record next()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: boolean hasNext()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record next()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: boolean hasNext()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.File: jxl.read.biff.Record next()>";
"<jxl.read.biff.File: jxl.read.biff.Record peek()>" -> "<jxl.read.biff.Record: void <clinit>()>";
"<jxl.read.biff.File: jxl.read.biff.Record peek()>" -> "<jxl.read.biff.Record: void <init>(byte[],int,jxl.read.biff.File)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>" -> "<jxl.read.biff.File: int getPos()>";
"<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>" -> "<jxl.read.biff.File: jxl.read.biff.Record next()>";
"<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>" -> "<jxl.read.biff.Record: int getCode()>";
"<jxl.read.biff.SheetImpl: void <init>(jxl.read.biff.File,jxl.read.biff.SSTRecord,jxl.biff.FormattingRecords,jxl.read.biff.BOFRecord,jxl.read.biff.BOFRecord,boolean,jxl.read.biff.WorkbookParser)>" -> "<jxl.read.biff.Record: int getCode()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: void addContinueRecord(jxl.read.biff.Record)>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.read.biff.Record: void addContinueRecord(jxl.read.biff.Record)>" -> "<java.util.ArrayList: void <init>()>";
"<jxl.read.biff.Record: void addContinueRecord(jxl.read.biff.Record)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<jxl.biff.drawing.DrawingGroup: void add(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.Record: byte[] getData()>" -> "<java.util.ArrayList: int size()>";
"<jxl.read.biff.Record: byte[] getData()>" -> "<java.util.ArrayList: int size()>";
"<jxl.read.biff.Record: byte[] getData()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: int getLength()>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: int getLength()>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: int getLength()>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: int getLength()>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: int getLength()>";
"<jxl.read.biff.SSTRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.Record[],jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: int getLength()>";
"<jxl.biff.RecordData: void <init>(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: int getCode()>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.NameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,int,jxl.read.biff.NameRecord$Biff7)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.biff.FontRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FontRecord$Biff7)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.NineteenFourRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.biff.FormatRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.FormatRecord$BiffType)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.biff.XFRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings,jxl.biff.XFRecord$BiffType)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.BoundsheetRecord: void <init>(jxl.read.biff.Record,jxl.read.biff.BoundsheetRecord$Biff7)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.ExternalSheetRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.CodepageRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.SupbookRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.ExternalNameRecord: void <init>(jxl.read.biff.Record,jxl.WorkbookSettings)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.ProtectRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.CountryRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.biff.drawing.MsoDrawingGroupRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.BOFRecord: void <init>(jxl.read.biff.Record)>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.WorkbookParser: void parse()>" -> "<jxl.read.biff.Record: jxl.biff.Type getType()>";
"<jxl.biff.CountryCode: jxl.biff.CountryCode getCountryCode(java.lang.String)>" -> "<java.lang.String: int length()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<jxl.WorkbookSettings: int getInitialFileSize()>";
"<jxl.read.biff.File: void <init>(java.io.InputStream,jxl.WorkbookSettings)>" -> "<jxl.WorkbookSettings: int getArrayGrowSize()>";
"<jxl.write.biff.WritableSheetImpl: void removeRow(int)>" -> "<jxl.biff.DataValidation: void removeRow(int)>";
"<jxl.biff.DataValidation: void removeRow(int)>" -> "<jxl.biff.DataValidityListRecord: void dvRemoved()>";
"<jxl.biff.DataValidityListRecord: void dvRemoved()>" -> "<jxl.biff.DValParser: void <clinit>()>";
"<jxl.biff.DataValidityListRecord: void dvRemoved()>" -> "<jxl.biff.DValParser: void <init>(byte[])>";
"<jxl.biff.DValParser: void <clinit>()>" -> "<common.Logger: void <clinit>()>";
"<jxl.biff.DValParser: void <clinit>()>" -> "<common.Logger: common.Logger getLogger(java.lang.Class)>";
"<jxl.biff.DValParser: void <clinit>()>" -> "<jxl.biff.DValParser: java.lang.Class class$(java.lang.String)>";
"<jxl.biff.DValParser: void <init>(byte[])>" -> "<jxl.biff.DValParser: void <clinit>()>";
"<jxl.biff.DValParser: void <init>(byte[])>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.DValParser: void <init>(byte[])>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte,byte,byte)>";
"<jxl.biff.DValParser: void <init>(byte[])>" -> "<jxl.biff.IntegerHelper: int getInt(byte,byte)>";
"<jxl.biff.DValParser: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<jxl.biff.DValParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<jxl.biff.DValParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<jxl.biff.DataValidityListRecord: void dvRemoved()>" -> "<jxl.biff.DValParser: void dvRemoved()>";
"<jxl.biff.DataValidation: void removeRow(int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableSheetImpl: void insertRow(int)>" -> "<jxl.biff.DataValidation: void insertRow(int)>";
"<jxl.biff.DataValidation: void insertRow(int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<jxl.write.biff.WritableSheetImpl: void addHyperlink(jxl.write.WritableHyperlink)>" -> "<jxl.write.biff.ReadFormulaRecord: jxl.CellType getType()>";
"<jxl.write.biff.ExternalNameRecord: byte[] getData()>" -> "<java.lang.String: int length()>";
"<jxl.write.biff.ExternalNameRecord: byte[] getData()>" -> "<java.lang.String: int length()>";
"<jxl.write.biff.ExternalNameRecord: byte[] getData()>" -> "<java.lang.String: int length()>";
"<jxl.write.biff.BoundsheetRecord: byte[] getData()>" -> "<java.lang.String: int length()>";
"<jxl.write.biff.BoundsheetRecord: byte[] getData()>" -> "<java.lang.String: int length()>";
"<jxl.biff.StringHelper: byte[] getUnicodeBytes(java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<jxl.biff.StringHelper: byte[] getUnicodeBytes(java.lang.String)>" -> "<java.lang.String: int length()>";
"<java.lang.String: byte[] getBytes(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<jxl.write.biff.SheetCopier: void copySheet()>" -> "<jxl.biff.FormattingRecords: jxl.biff.XFRecord getXFRecord(int)>";
"<jxl.biff.FormattingRecords: jxl.biff.XFRecord getXFRecord(int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.write.biff.ColumnInfoRecord: void <init>(jxl.read.biff.ColumnInfoRecord,int,jxl.biff.FormattingRecords)>" -> "<jxl.biff.FormattingRecords: jxl.biff.XFRecord getXFRecord(int)>";
"<jxl.biff.XFRecord: void initializeFormatInformation()>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.biff.PaletteRecord: byte[] getData()>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.biff.PaletteRecord: void initialize()>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.ButtonPropertySetRecord: byte[] getData()>" -> "<jxl.read.biff.Record: byte[] getData()>";
"<jxl.read.biff.BOFRecord: int getLength()>" -> "<jxl.read.biff.Record: int getLength()>";
"<jxl.biff.formula.NameRange: int read(byte[],int)>" -> "<jxl.write.biff.WritableWorkbookImpl: java.lang.String getName(int)>";
"<jxl.write.biff.WritableWorkbookImpl: java.lang.String getName(int)>" -> "<common.Assert: void verify(boolean)>";
"<jxl.write.biff.WritableWorkbookImpl: java.lang.String getName(int)>" -> "<java.util.ArrayList: int size()>";
"<jxl.write.biff.WritableWorkbookImpl: java.lang.String getName(int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<jxl.biff.formula.CellReference3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>";
"<jxl.biff.formula.Area3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>";
"<jxl.biff.formula.ColumnRange3d: void <init>(java.lang.String,jxl.biff.formula.ExternalSheet)>" -> "<jxl.write.biff.WritableWorkbookImpl: int getExternalSheetIndex(java.lang.String)>";
"<jxl.biff.formula.NameRange: void <init>(java.lang.String,jxl.biff.WorkbookMethods)>" -> "<jxl.write.biff.WritableWorkbookImpl: int getNameIndex(java.lang.String)>";
"<jxl.write.biff.WritableWorkbookImpl: int getNameIndex(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<jxl.biff.DataValidityListRecord: byte[] getData()>" -> "<jxl.biff.DValParser: byte[] getData()>";
"<jxl.biff.DValParser: byte[] getData()>" -> "<jxl.biff.DValParser: void <clinit>()>";
"<jxl.biff.DValParser: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.biff.DValParser: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getFourBytes(int,byte[],int)>";
"<jxl.biff.DValParser: byte[] getData()>" -> "<jxl.biff.IntegerHelper: void getTwoBytes(int,byte[],int)>";
"<jxl.biff.DValParser: byte[] getData()>" -> "<jxl.biff.DValParser: void <clinit>()>";
"<jxl.biff.DValParser: byte[] getData()>" -> "<jxl.biff.DValParser: void <clinit>()>";
}
