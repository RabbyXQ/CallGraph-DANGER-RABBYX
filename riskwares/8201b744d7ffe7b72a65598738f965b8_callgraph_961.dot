digraph CallGraph {
"<junit.textui.TestRunner: void main(java.lang.String[])>" -> "<junit.runner.BaseTestRunner: void <clinit>()>";
"<junit.textui.TestRunner: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<junit.textui.TestRunner: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<junit.textui.TestRunner: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<junit.textui.TestRunner: void main(java.lang.String[])>" -> "<junit.textui.TestRunner: void <init>()>";
"<junit.textui.TestRunner: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<junit.textui.TestRunner: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<junit.textui.TestRunner: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<junit.runner.BaseTestRunner: void <clinit>()>" -> "<junit.runner.BaseTestRunner: int getPreference(java.lang.String,int)>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: void exit(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: void <init>()>" -> "<java.lang.System: void <clinit>()>";
"<junit.textui.TestRunner: void <init>()>" -> "<junit.textui.TestRunner: void <init>(java.io.PrintStream)>";
"<junit.runner.BaseTestRunner: int getPreference(java.lang.String,int)>" -> "<junit.runner.BaseTestRunner: void <clinit>()>";
"<junit.runner.BaseTestRunner: int getPreference(java.lang.String,int)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<junit.runner.BaseTestRunner: int getPreference(java.lang.String,int)>" -> "<junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>";
"<junit.runner.BaseTestRunner: int getPreference(java.lang.String,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: void <init>(java.io.PrintStream)>" -> "<junit.textui.ResultPrinter: void <init>(java.io.PrintStream)>";
"<junit.textui.TestRunner: void <init>(java.io.PrintStream)>" -> "<junit.textui.TestRunner: void <init>(junit.textui.ResultPrinter)>";
"<java.lang.Integer: int parseInt(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>" -> "<junit.runner.BaseTestRunner: void <clinit>()>";
"<junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>" -> "<junit.runner.BaseTestRunner: java.util.Properties getPreferences()>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.ResultPrinter: void <init>(java.io.PrintStream)>" -> "<java.lang.Object: void <init>()>";
"<junit.textui.TestRunner: void <init>(junit.textui.ResultPrinter)>" -> "<junit.runner.BaseTestRunner: void <init>()>";
"<junit.runner.BaseTestRunner: java.util.Properties getPreferences()>" -> "<junit.runner.BaseTestRunner: void <clinit>()>";
"<junit.runner.BaseTestRunner: java.util.Properties getPreferences()>" -> "<junit.runner.BaseTestRunner: void readPreferences()>";
"<junit.runner.BaseTestRunner: java.util.Properties getPreferences()>" -> "<java.util.Properties: void <init>()>";
"<junit.runner.BaseTestRunner: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<junit.runner.BaseTestRunner: void readPreferences()>" -> "<junit.runner.BaseTestRunner: void <clinit>()>";
"<junit.runner.BaseTestRunner: void readPreferences()>" -> "<junit.runner.BaseTestRunner: java.util.Properties getPreferences()>";
"<junit.runner.BaseTestRunner: void readPreferences()>" -> "<junit.runner.BaseTestRunner: void setPreferences(java.util.Properties)>";
"<junit.runner.BaseTestRunner: void readPreferences()>" -> "<java.util.Properties: void <init>(java.util.Properties)>";
"<junit.runner.BaseTestRunner: void readPreferences()>" -> "<junit.runner.BaseTestRunner: java.util.Properties getPreferences()>";
"<junit.runner.BaseTestRunner: void readPreferences()>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<junit.runner.BaseTestRunner: void readPreferences()>" -> "<junit.runner.BaseTestRunner: java.io.File getPreferencesFile()>";
"<java.util.Properties: void <init>()>" -> "<java.util.Hashtable: void <init>()>";
"<java.util.Properties: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.runner.BaseTestRunner: void setPreferences(java.util.Properties)>" -> "<junit.runner.BaseTestRunner: void <clinit>()>";
"<java.util.Properties: void <init>(java.util.Properties)>" -> "<java.util.Hashtable: void <init>()>";
"<java.util.Properties: void <init>(java.util.Properties)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.FileInputStream: void finalize()>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.InputStream: void <init>()>";
"<junit.runner.BaseTestRunner: java.io.File getPreferencesFile()>" -> "<java.lang.System: void <clinit>()>";
"<junit.runner.BaseTestRunner: java.io.File getPreferencesFile()>" -> "<java.io.File: void <init>(java.lang.String,java.lang.String)>";
"<junit.runner.BaseTestRunner: java.io.File getPreferencesFile()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<junit.runner.BaseTestRunner: java.io.File getPreferencesFile()>" -> "<java.io.File: void <clinit>()>";
"<java.util.Hashtable: void <init>()>" -> "<java.util.Dictionary: void <init>()>";
"<java.util.Hashtable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.runner.BaseTestRunner: void readPreferences()>" -> "<java.io.FileInputStream: void close()>";
"<java.io.FileInputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.runner.BaseTestRunner: void readPreferences()>" -> "<java.util.Properties: void load(java.io.InputStream)>";
"<java.util.Properties: void load(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.runner.BaseTestRunner: java.util.Properties getPreferences()>" -> "<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<junit.runner.BaseTestRunner: java.util.Properties getPreferences()>" -> "<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>" -> "<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
"<java.util.Properties: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: void main(java.lang.String[])>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<java.lang.Throwable: java.lang.String getMessage()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: void main(java.lang.String[])>" -> "<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<junit.runner.Version: java.lang.String id()>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.String: int lastIndexOf(int)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.String: java.lang.String substring(int)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: int lastIndexOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<junit.runner.BaseTestRunner: java.lang.String extractClassName(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<junit.textui.TestRunner: junit.framework.TestResult runSingleMethod(java.lang.String,java.lang.String,boolean)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])>" -> "<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test,boolean)>";
"<junit.textui.TestRunner: junit.framework.TestResult runSingleMethod(java.lang.String,java.lang.String,boolean)>" -> "<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.reflect.Modifier: boolean isStatic(int)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<junit.framework.TestSuite: void <init>(java.lang.Class)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test,boolean)>" -> "<java.lang.System: void <clinit>()>";
"<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test,boolean)>" -> "<java.lang.System: long currentTimeMillis()>";
"<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test,boolean)>" -> "<java.lang.System: long currentTimeMillis()>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<junit.framework.TestSuite: java.lang.reflect.Constructor getTestConstructor(java.lang.Class)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<junit.framework.TestSuite: java.lang.String exceptionToString(java.lang.Throwable)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<junit.framework.TestSuite: java.lang.String exceptionToString(java.lang.Throwable)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<junit.framework.TestSuite: java.lang.String exceptionToString(java.lang.Throwable)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<java.lang.reflect.Modifier: boolean isStatic(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.TestSuite: void <init>(java.lang.Class)>" -> "<java.lang.Object: void <init>()>";
"<junit.framework.TestSuite: void <init>(java.lang.Class)>" -> "<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>";
"<junit.framework.TestSuite: void <init>(java.lang.Class)>" -> "<java.util.Vector: void <init>(int)>";
"<junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>" -> "<junit.framework.TestSuite$1: void <init>(java.lang.String,java.lang.String)>";
"<junit.framework.TestSuite: java.lang.String exceptionToString(java.lang.Throwable)>" -> "<java.io.StringWriter: void <init>()>";
"<junit.framework.TestSuite: java.lang.String exceptionToString(java.lang.Throwable)>" -> "<java.io.PrintWriter: void <init>(java.io.Writer)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<junit.framework.TestSuite: java.lang.reflect.Constructor getTestConstructor(java.lang.Class)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.util.ArrayList: void <init>()>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.reflect.Modifier: boolean isPublic(int)>";
"<java.util.Vector: void <init>(int)>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.Vector: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.TestSuite$1: void <init>(java.lang.String,java.lang.String)>" -> "<junit.framework.TestCase: void <init>(java.lang.String)>";
"<java.io.StringWriter: void <init>()>" -> "<java.io.Writer: void <init>()>";
"<java.io.StringWriter: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.PrintWriter: void <init>(java.io.Writer)>" -> "<java.io.Writer: void <init>()>";
"<java.io.PrintWriter: void <init>(java.io.Writer)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<junit.framework.TestSuite: boolean isPublicTestMethod(java.lang.reflect.Method)>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<junit.framework.TestSuite: boolean isTestMethod(java.lang.reflect.Method)>";
"<java.util.ArrayList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.reflect.Modifier: boolean isPublic(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.TestCase: void <init>(java.lang.String)>" -> "<junit.framework.Assert: void <init>()>";
"<java.io.Writer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Writer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.TestSuite: boolean isPublicTestMethod(java.lang.reflect.Method)>" -> "<junit.framework.TestSuite: boolean isTestMethod(java.lang.reflect.Method)>";
"<junit.framework.TestSuite: boolean isPublicTestMethod(java.lang.reflect.Method)>" -> "<java.lang.reflect.Modifier: boolean isPublic(int)>";
"<junit.framework.TestSuite: boolean isTestMethod(java.lang.reflect.Method)>" -> "<java.lang.Void: void <clinit>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.Assert: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<java.util.ArrayList: boolean contains(java.lang.Object)>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: boolean contains(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>";
"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.framework.TestSuite: java.lang.String exceptionToString(java.lang.Throwable)>" -> "<java.io.StringWriter: java.lang.String toString()>";
"<java.io.StringWriter: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<junit.framework.TestSuite: void addTest(junit.framework.Test)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<junit.framework.TestSuite: void addTest(junit.framework.Test)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<junit.framework.TestSuite: void addTest(junit.framework.Test)>";
"<junit.framework.TestSuite: void addTest(junit.framework.Test)>" -> "<java.util.Vector: boolean add(java.lang.Object)>";
"<java.util.Vector: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<junit.framework.TestSuite: void addTest(junit.framework.Test)>";
"<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>" -> "<junit.framework.TestSuite: void addTest(junit.framework.Test)>";
"<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>" -> "<java.util.Vector: int size()>";
"<java.util.Vector: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test,boolean)>" -> "<junit.framework.TestSuite: void run(junit.framework.TestResult)>";
"<junit.framework.TestSuite: void run(junit.framework.TestResult)>" -> "<junit.framework.TestSuite: void runTest(junit.framework.Test,junit.framework.TestResult)>";
"<junit.framework.TestSuite: void run(junit.framework.TestResult)>" -> "<java.util.Vector: java.util.Iterator iterator()>";
"<java.util.Vector: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test,boolean)>" -> "<junit.textui.TestRunner: junit.framework.TestResult createTestResult()>";
"<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test,boolean)>" -> "<junit.textui.TestRunner: void pause(boolean)>";
"<junit.textui.TestRunner: junit.framework.TestResult createTestResult()>" -> "<junit.framework.TestResult: void <init>()>";
"<junit.textui.TestRunner: void pause(boolean)>" -> "<java.lang.System: void <clinit>()>";
"<junit.framework.TestResult: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<junit.framework.TestResult: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<junit.framework.TestResult: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<junit.framework.TestResult: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test,boolean)>" -> "<junit.framework.TestResult: void addListener(junit.framework.TestListener)>";
"<junit.framework.TestResult: void addListener(junit.framework.TestListener)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<junit.framework.TestSuite: void run(junit.framework.TestResult)>" -> "<junit.framework.TestResult: boolean shouldStop()>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.Throwable: java.lang.String toString()>";
"<java.lang.Throwable: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<java.lang.String: int length()>";
"<java.lang.String: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<junit.runner.BaseTestRunner: void clearStatus()>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<junit.runner.BaseTestRunner: java.lang.Class loadSuiteClass(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<junit.textui.TestRunner: void runFailed(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<junit.textui.TestRunner: void runFailed(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<junit.textui.TestRunner: void runFailed(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<junit.runner.BaseTestRunner: void clearStatus()>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<junit.runner.BaseTestRunner: void clearStatus()>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<junit.textui.TestRunner: void runFailed(java.lang.String)>";
"<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>" -> "<junit.textui.TestRunner: void runFailed(java.lang.String)>";
"<junit.runner.BaseTestRunner: java.lang.Class loadSuiteClass(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<junit.textui.TestRunner: void runFailed(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<junit.textui.TestRunner: void runFailed(java.lang.String)>" -> "<java.lang.System: void exit(int)>";
"<java.lang.Class: java.lang.Class forName(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult runSingleMethod(java.lang.String,java.lang.String,boolean)>" -> "<junit.runner.BaseTestRunner: java.lang.Class loadSuiteClass(java.lang.String)>";
"<junit.textui.TestRunner: junit.framework.TestResult runSingleMethod(java.lang.String,java.lang.String,boolean)>" -> "<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test,boolean)>";
"<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test,boolean)>" -> "<junit.framework.TestCase: void run(junit.framework.TestResult)>";
"<junit.framework.TestCase: void run(junit.framework.TestResult)>" -> "<junit.framework.TestResult: void run(junit.framework.TestCase)>";
"<junit.framework.TestResult: void run(junit.framework.TestCase)>" -> "<junit.framework.TestResult$1: void <init>(junit.framework.TestResult,junit.framework.TestCase)>";
"<junit.framework.TestResult$1: void <init>(junit.framework.TestResult,junit.framework.TestCase)>" -> "<java.lang.Object: void <init>()>";
"<junit.framework.TestResult: void run(junit.framework.TestCase)>" -> "<junit.framework.TestResult: void startTest(junit.framework.Test)>";
"<junit.framework.TestResult: void run(junit.framework.TestCase)>" -> "<junit.framework.TestResult: void runProtected(junit.framework.Test,junit.framework.Protectable)>";
"<junit.framework.TestResult: void run(junit.framework.TestCase)>" -> "<junit.framework.TestResult: void endTest(junit.framework.Test)>";
"<junit.framework.TestResult: void startTest(junit.framework.Test)>" -> "<junit.framework.TestResult: java.util.List cloneListeners()>";
"<junit.framework.TestResult: void endTest(junit.framework.Test)>" -> "<junit.framework.TestResult: java.util.List cloneListeners()>";
"<junit.framework.TestResult: java.util.List cloneListeners()>" -> "<java.util.ArrayList: void <init>()>";
"<junit.framework.TestResult: void endTest(junit.framework.Test)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<java.util.ArrayList: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.TestResult: void startTest(junit.framework.Test)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<junit.framework.TestResult: java.util.List cloneListeners()>" -> "<java.util.ArrayList: boolean addAll(java.util.Collection)>";
"<java.util.ArrayList: boolean addAll(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.TestResult: void runProtected(junit.framework.Test,junit.framework.Protectable)>" -> "<junit.framework.TestResult$1: void protect()>";
"<junit.framework.TestResult: void runProtected(junit.framework.Test,junit.framework.Protectable)>" -> "<junit.framework.TestResult: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>";
"<junit.framework.TestResult: void runProtected(junit.framework.Test,junit.framework.Protectable)>" -> "<junit.framework.TestResult: void addError(junit.framework.Test,java.lang.Throwable)>";
"<junit.framework.TestResult: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>" -> "<junit.framework.TestFailure: void <init>(junit.framework.Test,java.lang.Throwable)>";
"<junit.framework.TestResult: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>" -> "<junit.framework.TestResult: java.util.List cloneListeners()>";
"<junit.framework.TestResult: void addError(junit.framework.Test,java.lang.Throwable)>" -> "<junit.framework.TestFailure: void <init>(junit.framework.Test,java.lang.Throwable)>";
"<junit.framework.TestResult: void addError(junit.framework.Test,java.lang.Throwable)>" -> "<junit.framework.TestResult: java.util.List cloneListeners()>";
"<junit.framework.TestFailure: void <init>(junit.framework.Test,java.lang.Throwable)>" -> "<java.lang.Object: void <init>()>";
"<junit.framework.TestResult: void addError(junit.framework.Test,java.lang.Throwable)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<junit.framework.TestResult: void addError(junit.framework.Test,java.lang.Throwable)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<junit.framework.TestResult: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<junit.framework.TestResult: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<junit.framework.TestResult: void startTest(junit.framework.Test)>" -> "<junit.framework.TestCase: int countTestCases()>";
"<junit.runner.BaseTestRunner: java.lang.String extractClassName(java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<junit.runner.BaseTestRunner: java.lang.String extractClassName(java.lang.String)>" -> "<java.lang.String: int lastIndexOf(java.lang.String)>";
"<junit.runner.BaseTestRunner: java.lang.String extractClassName(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: boolean startsWith(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: int lastIndexOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: void main(java.lang.String[])>" -> "<junit.framework.TestResult: boolean wasSuccessful()>";
"<junit.framework.TestResult: boolean wasSuccessful()>" -> "<junit.framework.TestResult: int failureCount()>";
"<junit.framework.TestResult: boolean wasSuccessful()>" -> "<junit.framework.TestResult: int errorCount()>";
"<junit.framework.TestResult: int errorCount()>" -> "<java.util.ArrayList: int size()>";
"<java.util.ArrayList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.framework.TestResult: int failureCount()>" -> "<java.util.ArrayList: int size()>";
"<junit.framework.TestResult$1: void protect()>" -> "<junit.framework.TestCase: void runBare()>";
"<junit.framework.TestCase: void runBare()>" -> "<junit.framework.TestCase: void setUp()>";
"<junit.framework.TestCase: void runBare()>" -> "<junit.framework.TestSuite$1: void runTest()>";
"<junit.framework.TestCase: void runBare()>" -> "<junit.framework.TestCase: void tearDown()>";
"<junit.framework.TestCase: void runBare()>" -> "<junit.framework.TestCase: void tearDown()>";
"<junit.framework.TestSuite$1: void runTest()>" -> "<junit.framework.Assert: void fail(java.lang.String)>";
"<junit.framework.Assert: void fail(java.lang.String)>" -> "<junit.framework.AssertionFailedError: void <init>()>";
"<junit.framework.Assert: void fail(java.lang.String)>" -> "<junit.framework.AssertionFailedError: void <init>(java.lang.String)>";
"<junit.framework.AssertionFailedError: void <init>()>" -> "<java.lang.AssertionError: void <init>()>";
"<junit.framework.AssertionFailedError: void <init>(java.lang.String)>" -> "<junit.framework.AssertionFailedError: java.lang.String defaultString(java.lang.String)>";
"<junit.framework.AssertionFailedError: void <init>(java.lang.String)>" -> "<java.lang.AssertionError: void <init>(java.lang.Object)>";
"<java.lang.AssertionError: void <init>()>" -> "<java.lang.Error: void <init>()>";
"<java.lang.AssertionError: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.AssertionError: void <init>(java.lang.Object)>" -> "<java.lang.Error: void <init>()>";
"<java.lang.AssertionError: void <init>(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Error: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.TestRunner: void pause(boolean)>" -> "<junit.textui.ResultPrinter: void printWaitPrompt()>";
"<junit.textui.ResultPrinter: void printWaitPrompt()>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printWaitPrompt()>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test,boolean)>" -> "<junit.textui.ResultPrinter: void print(junit.framework.TestResult,long)>";
"<junit.textui.ResultPrinter: void print(junit.framework.TestResult,long)>" -> "<junit.textui.ResultPrinter: void printHeader(long)>";
"<junit.textui.ResultPrinter: void print(junit.framework.TestResult,long)>" -> "<junit.textui.ResultPrinter: void printErrors(junit.framework.TestResult)>";
"<junit.textui.ResultPrinter: void print(junit.framework.TestResult,long)>" -> "<junit.textui.ResultPrinter: void printFailures(junit.framework.TestResult)>";
"<junit.textui.ResultPrinter: void print(junit.framework.TestResult,long)>" -> "<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>";
"<junit.textui.ResultPrinter: void printHeader(long)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<junit.framework.TestResult: boolean wasSuccessful()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<junit.framework.TestResult: int runCount()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<junit.framework.TestResult: int runCount()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<junit.framework.TestResult: int runCount()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<junit.framework.TestResult: int failureCount()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<junit.framework.TestResult: int errorCount()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printFailures(junit.framework.TestResult)>" -> "<junit.framework.TestResult: java.util.Enumeration failures()>";
"<junit.textui.ResultPrinter: void printFailures(junit.framework.TestResult)>" -> "<junit.framework.TestResult: int failureCount()>";
"<junit.framework.TestResult: java.util.Enumeration failures()>" -> "<java.util.Collections: void <clinit>()>";
"<junit.framework.TestResult: java.util.Enumeration failures()>" -> "<java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>";
"<java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.textui.ResultPrinter: void printFailures(junit.framework.TestResult)>" -> "<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<junit.textui.ResultPrinter: void printDefect(junit.framework.TestFailure,int)>";
"<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printDefect(junit.framework.TestFailure,int)>" -> "<junit.textui.ResultPrinter: void printDefectHeader(junit.framework.TestFailure,int)>";
"<junit.textui.ResultPrinter: void printDefect(junit.framework.TestFailure,int)>" -> "<junit.textui.ResultPrinter: void printDefectTrace(junit.framework.TestFailure)>";
"<junit.textui.ResultPrinter: void printDefectHeader(junit.framework.TestFailure,int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<junit.textui.ResultPrinter: void printDefectTrace(junit.framework.TestFailure)>" -> "<junit.runner.BaseTestRunner: void <clinit>()>";
"<junit.textui.ResultPrinter: void printDefectTrace(junit.framework.TestFailure)>" -> "<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>";
"<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>" -> "<junit.runner.BaseTestRunner: void <clinit>()>";
"<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>" -> "<junit.runner.BaseTestRunner: boolean filterLine(java.lang.String)>";
"<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>" -> "<java.io.BufferedReader: void <init>(java.io.Reader)>";
"<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>" -> "<java.io.StringReader: void <init>(java.lang.String)>";
"<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>" -> "<java.io.PrintWriter: void <init>(java.io.Writer)>";
"<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>" -> "<java.io.StringWriter: void <init>()>";
"<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>" -> "<junit.runner.BaseTestRunner: boolean showStackRaw()>";
"<junit.runner.BaseTestRunner: boolean filterLine(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<java.io.BufferedReader: void <init>(java.io.Reader)>" -> "<java.io.Reader: void <init>()>";
"<java.io.BufferedReader: void <init>(java.io.Reader)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.StringReader: void <init>(java.lang.String)>" -> "<java.io.Reader: void <init>()>";
"<java.io.StringReader: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.runner.BaseTestRunner: boolean showStackRaw()>" -> "<junit.runner.BaseTestRunner: void <clinit>()>";
"<junit.runner.BaseTestRunner: boolean showStackRaw()>" -> "<junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>";
"<java.io.Reader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Reader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.runner.BaseTestRunner: boolean showStackRaw()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>" -> "<java.io.BufferedReader: java.lang.String readLine()>";
"<java.io.BufferedReader: java.lang.String readLine()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>" -> "<java.io.PrintWriter: void println(java.lang.String)>";
"<java.io.PrintWriter: void println(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>" -> "<java.io.StringWriter: java.lang.String toString()>";
"<junit.textui.ResultPrinter: void printDefectTrace(junit.framework.TestFailure)>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printDefectHeader(junit.framework.TestFailure,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<junit.textui.ResultPrinter: void printDefectHeader(junit.framework.TestFailure,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printDefectHeader(junit.framework.TestFailure,int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<junit.textui.ResultPrinter: void printDefectHeader(junit.framework.TestFailure,int)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.textui.ResultPrinter: void printDefectHeader(junit.framework.TestFailure,int)>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printErrors(junit.framework.TestResult)>" -> "<junit.framework.TestResult: java.util.Enumeration errors()>";
"<junit.textui.ResultPrinter: void printErrors(junit.framework.TestResult)>" -> "<junit.framework.TestResult: int errorCount()>";
"<junit.framework.TestResult: java.util.Enumeration errors()>" -> "<java.util.Collections: void <clinit>()>";
"<junit.framework.TestResult: java.util.Enumeration errors()>" -> "<java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>";
"<junit.textui.ResultPrinter: void printErrors(junit.framework.TestResult)>" -> "<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)>";
"<junit.textui.ResultPrinter: void printHeader(long)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printHeader(long)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<junit.textui.ResultPrinter: void printHeader(long)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<junit.textui.ResultPrinter: void printHeader(long)>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printHeader(long)>" -> "<junit.textui.ResultPrinter: java.io.PrintStream getWriter()>";
"<junit.textui.ResultPrinter: void printHeader(long)>" -> "<junit.textui.ResultPrinter: java.lang.String elapsedTimeAsString(long)>";
"<junit.textui.ResultPrinter: java.lang.String elapsedTimeAsString(long)>" -> "<java.text.NumberFormat: java.text.NumberFormat getInstance()>";
"<java.text.NumberFormat: java.text.NumberFormat getInstance()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
}
