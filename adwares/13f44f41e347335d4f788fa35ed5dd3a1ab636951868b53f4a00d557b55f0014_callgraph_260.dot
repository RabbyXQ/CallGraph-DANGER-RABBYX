digraph CallGraph {
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.io.FileOutputStream: void <init>(java.io.File)>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<de.innosystec.unrar.Archive: void <init>(java.io.File)>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<de.innosystec.unrar.Archive: void <clinit>()>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.io.File)>" -> "<java.io.FileOutputStream: void finalize()>";
"<java.io.FileOutputStream: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.io.File)>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Archive: void <init>(java.io.File)>" -> "<de.innosystec.unrar.Archive: void <init>(java.io.File,de.innosystec.unrar.UnrarCallback)>";
"<de.innosystec.unrar.Archive: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<de.innosystec.unrar.Archive: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Archive: void <init>(java.io.File,de.innosystec.unrar.UnrarCallback)>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.Archive: void <init>(java.io.File,de.innosystec.unrar.UnrarCallback)>" -> "<de.innosystec.unrar.unpack.ComprDataIO: void <init>(de.innosystec.unrar.Archive)>";
"<de.innosystec.unrar.Archive: void <init>(java.io.File,de.innosystec.unrar.UnrarCallback)>" -> "<java.util.ArrayList: void <init>()>";
"<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.ComprDataIO: void <init>(de.innosystec.unrar.Archive)>" -> "<java.lang.Object: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Archive: void <clinit>()>" -> "<java.lang.Class: java.lang.String getName()>";
"<java.lang.Class: java.lang.String getName()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.io.FileOutputStream: void close()>";
"<java.io.FileOutputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Archive: void <init>(java.io.File,de.innosystec.unrar.UnrarCallback)>" -> "<de.innosystec.unrar.Archive: void setFile(java.io.File)>";
"<de.innosystec.unrar.Archive: void setFile(java.io.File)>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: void <clinit>()>";
"<de.innosystec.unrar.Archive: void setFile(java.io.File)>" -> "<de.innosystec.unrar.Archive: void readHeaders()>";
"<de.innosystec.unrar.Archive: void setFile(java.io.File)>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: void <init>(java.io.File)>";
"<de.innosystec.unrar.Archive: void setFile(java.io.File)>" -> "<java.util.logging.Level: void <clinit>()>";
"<de.innosystec.unrar.Archive: void setFile(java.io.File)>" -> "<de.innosystec.unrar.Archive: void <clinit>()>";
"<de.innosystec.unrar.Archive: void setFile(java.io.File)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.Archive$1: void <clinit>()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.UnixOwnersHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.EAHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.MacInfoHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.ProtectHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.EndArcHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.EndArcHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.CommentHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.AVHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.SignHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.exception.RarException: void <init>(de.innosystec.unrar.exception.RarException$RarExceptionType)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.MainHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.exception.RarException: void <init>(de.innosystec.unrar.exception.RarException$RarExceptionType)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.MarkHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.exception.RarException: void <init>(de.innosystec.unrar.exception.RarException$RarExceptionType)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: void <init>(byte[])>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.Archive: void <clinit>()>";
"<de.innosystec.unrar.io.ReadOnlyAccessFile: void <init>(java.io.File)>" -> "<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: de.innosystec.unrar.rarfile.SubBlockHeaderType[] values()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype[] values()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<java.lang.System: void <clinit>()>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<java.lang.String: void <init>(byte[])>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<java.lang.String: void <init>(byte[])>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<java.lang.String: void <clinit>()>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<java.lang.System: void <clinit>()>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<java.lang.String: void <clinit>()>";
"<de.innosystec.unrar.rarfile.EAHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader)>";
"<de.innosystec.unrar.rarfile.EAHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.EAHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.EAHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader)>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader)>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<de.innosystec.unrar.rarfile.ProtectHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader)>";
"<de.innosystec.unrar.rarfile.ProtectHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.ProtectHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.HostSystem: void <clinit>()>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.FileHeader: java.util.Date getDateDos(int)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<java.lang.String: void <init>(byte[])>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<java.lang.String: void <init>(byte[])>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.HostSystem: de.innosystec.unrar.rarfile.HostSystem findHostSystem(byte)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.io.Raw: long readIntLittleEndianAsLong(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.NewSubHeaderType: void <clinit>()>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<java.lang.String: void <clinit>()>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<java.lang.String: void <clinit>()>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<java.lang.System: void <clinit>()>";
"<de.innosystec.unrar.rarfile.EndArcHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>";
"<de.innosystec.unrar.rarfile.EndArcHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.EndArcHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.CommentHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>";
"<de.innosystec.unrar.rarfile.CommentHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.CommentHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.AVHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>";
"<de.innosystec.unrar.rarfile.AVHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.SignHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>";
"<de.innosystec.unrar.rarfile.SignHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.SignHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.SignHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.exception.RarException: void <init>(de.innosystec.unrar.exception.RarException$RarExceptionType)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>";
"<de.innosystec.unrar.rarfile.MainHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.MainHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.MainHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MarkHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>" -> "<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>";
"<de.innosystec.unrar.rarfile.MarkHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>";
"<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(byte[])>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(byte[])>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>";
"<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <init>(java.lang.String,int)>";
"<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>" -> "<java.io.RandomAccessFile: void finalize()>";
"<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: void <init>(java.lang.String,int,byte)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: de.innosystec.unrar.rarfile.SubBlockHeaderType[] values()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype[] values()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <init>(java.lang.String,int,short)>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <init>(java.lang.String,int,short)>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <init>(java.lang.String,int,short)>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <init>(java.lang.String,int,short)>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <init>(java.lang.String,int,short)>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <init>(java.lang.String,int,short)>";
"<java.lang.String: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader)>" -> "<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader)>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader)>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader)>" -> "<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>";
"<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader)>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>";
"<de.innosystec.unrar.rarfile.HostSystem: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.HostSystem: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.HostSystem: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.HostSystem: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.HostSystem: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.HostSystem: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.HostSystem: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.HostSystem: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.HostSystem: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.HostSystem: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.HostSystem: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.HostSystem: void <init>(java.lang.String,int,byte)>";
"<de.innosystec.unrar.rarfile.FileHeader: java.util.Date getDateDos(int)>" -> "<java.util.Calendar: java.util.Calendar getInstance()>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<de.innosystec.unrar.rarfile.FileNameDecoder: int getChar(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<de.innosystec.unrar.rarfile.FileNameDecoder: int getChar(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<de.innosystec.unrar.rarfile.FileNameDecoder: int getChar(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<de.innosystec.unrar.rarfile.FileNameDecoder: int getChar(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<de.innosystec.unrar.rarfile.FileNameDecoder: int getChar(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<de.innosystec.unrar.rarfile.FileNameDecoder: int getChar(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<de.innosystec.unrar.rarfile.FileNameDecoder: int getChar(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<de.innosystec.unrar.rarfile.FileNameDecoder: int getChar(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<de.innosystec.unrar.rarfile.FileNameDecoder: int getChar(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<de.innosystec.unrar.rarfile.FileNameDecoder: int getChar(byte[],int)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<de.innosystec.unrar.rarfile.HostSystem: de.innosystec.unrar.rarfile.HostSystem findHostSystem(byte)>" -> "<de.innosystec.unrar.rarfile.HostSystem: void <clinit>()>";
"<de.innosystec.unrar.rarfile.NewSubHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.NewSubHeaderType: void <init>(byte[])>";
"<de.innosystec.unrar.rarfile.NewSubHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.NewSubHeaderType: void <init>(byte[])>";
"<de.innosystec.unrar.rarfile.NewSubHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.NewSubHeaderType: void <init>(byte[])>";
"<de.innosystec.unrar.rarfile.NewSubHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.NewSubHeaderType: void <init>(byte[])>";
"<de.innosystec.unrar.rarfile.NewSubHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.NewSubHeaderType: void <init>(byte[])>";
"<de.innosystec.unrar.rarfile.NewSubHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.NewSubHeaderType: void <init>(byte[])>";
"<de.innosystec.unrar.rarfile.NewSubHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.NewSubHeaderType: void <init>(byte[])>";
"<de.innosystec.unrar.rarfile.NewSubHeaderType: void <clinit>()>" -> "<de.innosystec.unrar.rarfile.NewSubHeaderType: void <init>(byte[])>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.exception.RarException$RarExceptionType: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<java.io.RandomAccessFile: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void finalize()>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <init>(java.lang.String,int,short)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.rarfile.HostSystem: void <init>(java.lang.String,int,byte)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<java.util.Calendar: java.util.Calendar getInstance()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.rarfile.NewSubHeaderType: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Enum: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>" -> "<java.lang.Class: java.lang.String getName()>";
"<de.innosystec.unrar.rarfile.HostSystem: de.innosystec.unrar.rarfile.HostSystem findHostSystem(byte)>" -> "<de.innosystec.unrar.rarfile.HostSystem: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.HostSystem: de.innosystec.unrar.rarfile.HostSystem findHostSystem(byte)>" -> "<de.innosystec.unrar.rarfile.HostSystem: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.HostSystem: de.innosystec.unrar.rarfile.HostSystem findHostSystem(byte)>" -> "<de.innosystec.unrar.rarfile.HostSystem: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.HostSystem: de.innosystec.unrar.rarfile.HostSystem findHostSystem(byte)>" -> "<de.innosystec.unrar.rarfile.HostSystem: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.HostSystem: de.innosystec.unrar.rarfile.HostSystem findHostSystem(byte)>" -> "<de.innosystec.unrar.rarfile.HostSystem: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.HostSystem: de.innosystec.unrar.rarfile.HostSystem findHostSystem(byte)>" -> "<de.innosystec.unrar.rarfile.HostSystem: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<de.innosystec.unrar.rarfile.FileNameDecoder: java.lang.String decode(byte[],int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader)>" -> "<java.lang.Class: java.lang.String getName()>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype[] values()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<java.lang.Object: java.lang.Object clone()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: de.innosystec.unrar.rarfile.SubBlockHeaderType[] values()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(byte[])>" -> "<java.lang.Class: java.lang.String getName()>";
"<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<java.lang.Class: java.lang.String getName()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>" -> "<de.innosystec.unrar.rarfile.BaseBlock: short getFlags()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>" -> "<de.innosystec.unrar.rarfile.BaseBlock: short getHeadCRC()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>" -> "<de.innosystec.unrar.rarfile.BaseBlock: de.innosystec.unrar.rarfile.UnrarHeadertype getHeaderType()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>" -> "<de.innosystec.unrar.rarfile.BaseBlock: short getHeaderSize()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>" -> "<de.innosystec.unrar.rarfile.BaseBlock: long getPositionInFile()>";
"<de.innosystec.unrar.rarfile.BaseBlock: de.innosystec.unrar.rarfile.UnrarHeadertype getHeaderType()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.rarfile.BaseBlock: de.innosystec.unrar.rarfile.UnrarHeadertype getHeaderType()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.UnrarHeadertype: de.innosystec.unrar.rarfile.UnrarHeadertype findType(byte)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: byte getHeaderByte()>";
"<de.innosystec.unrar.rarfile.MarkHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock)>" -> "<java.lang.Class: java.lang.String getName()>";
"<de.innosystec.unrar.rarfile.MainHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<java.lang.Class: java.lang.String getName()>";
"<de.innosystec.unrar.rarfile.MainHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.rarfile.BaseBlock: boolean hasEncryptVersion()>";
"<de.innosystec.unrar.rarfile.EndArcHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.rarfile.BaseBlock: boolean hasArchiveDataCRC()>";
"<de.innosystec.unrar.rarfile.EndArcHeader: void <init>(de.innosystec.unrar.rarfile.BaseBlock,byte[])>" -> "<de.innosystec.unrar.rarfile.BaseBlock: boolean hasVolumeNumber()>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.NewSubHeaderType: boolean byteEquals(byte[])>";
"<de.innosystec.unrar.rarfile.NewSubHeaderType: boolean byteEquals(byte[])>" -> "<java.util.Arrays: boolean equals(byte[],byte[])>";
"<java.util.Arrays: boolean equals(byte[],byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<java.lang.Class: java.lang.String getName()>";
"<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader)>" -> "<de.innosystec.unrar.rarfile.BlockHeader: int getDataSize()>";
"<de.innosystec.unrar.rarfile.BlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader)>" -> "<de.innosystec.unrar.rarfile.BaseBlock: long getPositionInFile()>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.FileHeader: boolean isLargeBlock()>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.BlockHeader: int getPackSize()>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.FileHeader: boolean isFileHeader()>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.FileHeader: boolean isUnicode()>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.FileHeader: boolean hasSalt()>";
"<de.innosystec.unrar.rarfile.FileHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<de.innosystec.unrar.rarfile.FileHeader: boolean hasSalt()>";
"<de.innosystec.unrar.rarfile.FileHeader: boolean isFileHeader()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.rarfile.FileHeader: boolean isFileHeader()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: boolean equals(byte)>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.BlockHeader,byte[])>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<java.lang.Object: java.lang.Class getClass()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader)>" -> "<de.innosystec.unrar.rarfile.SubBlockHeader: de.innosystec.unrar.rarfile.SubBlockHeaderType getSubType()>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader)>" -> "<de.innosystec.unrar.rarfile.SubBlockHeader: byte getLevel()>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: de.innosystec.unrar.rarfile.SubBlockHeaderType getSubType()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: de.innosystec.unrar.rarfile.SubBlockHeaderType getSubType()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: de.innosystec.unrar.rarfile.SubBlockHeaderType findSubblockHeaderType(short)>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: de.innosystec.unrar.rarfile.SubBlockHeaderType findSubblockHeaderType(short)>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: void <clinit>()>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: de.innosystec.unrar.rarfile.SubBlockHeaderType findSubblockHeaderType(short)>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: boolean equals(short)>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: de.innosystec.unrar.rarfile.SubBlockHeaderType findSubblockHeaderType(short)>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: boolean equals(short)>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: de.innosystec.unrar.rarfile.SubBlockHeaderType findSubblockHeaderType(short)>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: boolean equals(short)>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: de.innosystec.unrar.rarfile.SubBlockHeaderType findSubblockHeaderType(short)>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: boolean equals(short)>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: de.innosystec.unrar.rarfile.SubBlockHeaderType findSubblockHeaderType(short)>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: boolean equals(short)>";
"<de.innosystec.unrar.rarfile.SubBlockHeaderType: de.innosystec.unrar.rarfile.SubBlockHeaderType findSubblockHeaderType(short)>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: boolean equals(short)>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader)>" -> "<de.innosystec.unrar.rarfile.SubBlockHeaderType: short getSubblocktype()>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<de.innosystec.unrar.rarfile.EAHeader: void <init>(de.innosystec.unrar.rarfile.SubBlockHeader,byte[])>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<java.lang.Enum: int ordinal()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeader: void print()>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void print()>" -> "<de.innosystec.unrar.rarfile.BlockHeader: void print()>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.BlockHeader: void print()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: void print()>";
"<de.innosystec.unrar.rarfile.BlockHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.Integer: void <clinit>()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<java.lang.Integer: java.lang.String toHexString(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BlockHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BlockHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<de.innosystec.unrar.rarfile.BlockHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.BlockHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<de.innosystec.unrar.rarfile.BlockHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.UnixOwnersHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.SubBlockHeader: void print()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeader: de.innosystec.unrar.rarfile.SubBlockHeaderType getSubType()>";
"<de.innosystec.unrar.rarfile.BlockHeader: void print()>" -> "<de.innosystec.unrar.rarfile.BlockHeader: int getDataSize()>";
"<de.innosystec.unrar.rarfile.BlockHeader: void print()>" -> "<de.innosystec.unrar.rarfile.BlockHeader: int getPackSize()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: de.innosystec.unrar.rarfile.UnrarHeadertype getHeaderType()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: short getHeadCRC()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: short getFlags()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: short getHeaderSize()>";
"<de.innosystec.unrar.rarfile.BaseBlock: void print()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: long getPositionInFile()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.EAHeader: void print()>";
"<de.innosystec.unrar.rarfile.EAHeader: void print()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeader: void print()>";
"<de.innosystec.unrar.rarfile.EAHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.EAHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.EAHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.EAHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.EAHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.EAHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.EAHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.EAHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.MacInfoHeader: void print()>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void print()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeader: void print()>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<de.innosystec.unrar.rarfile.MacInfoHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeader: void print()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.SubBlockHeader: de.innosystec.unrar.rarfile.SubBlockHeaderType getSubType()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: short getHeaderSize()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: long getPositionInFile()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: short getHeaderSize()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BlockHeader: int getDataSize()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: long getPositionInFile()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: short getHeaderSize()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.FileHeader: long getFullPackSize()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: long getPositionInFile()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: short getHeaderSize()>";
"<de.innosystec.unrar.exception.RarException: void <init>(de.innosystec.unrar.exception.RarException$RarExceptionType)>" -> "<java.lang.Enum: java.lang.String name()>";
"<java.lang.Enum: java.lang.String name()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: de.innosystec.unrar.rarfile.UnrarHeadertype getHeaderType()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: short getHeaderSize()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: short getHeaderSize()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: void setPositionInFile(long)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: de.innosystec.unrar.rarfile.UnrarHeadertype getHeaderType()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: boolean hasEncryptVersion()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: boolean hasArchiveDataCRC()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: boolean hasVolumeNumber()>";
"<de.innosystec.unrar.io.ReadOnlyAccessFile: void <clinit>()>" -> "<java.lang.Class: boolean desiredAssertionStatus()>";
"<java.lang.Class: boolean desiredAssertionStatus()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Archive: void setFile(java.io.File)>" -> "<de.innosystec.unrar.Archive: void close()>";
"<de.innosystec.unrar.Archive: void close()>" -> "<java.io.RandomAccessFile: void close()>";
"<java.io.RandomAccessFile: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.MainHeader: boolean isEncrypted()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.rarfile.MarkHeader: boolean isSignature()>";
"<de.innosystec.unrar.rarfile.MarkHeader: boolean isSignature()>" -> "<de.innosystec.unrar.io.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<de.innosystec.unrar.rarfile.MarkHeader: boolean isSignature()>" -> "<de.innosystec.unrar.io.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<de.innosystec.unrar.rarfile.MarkHeader: boolean isSignature()>" -> "<de.innosystec.unrar.io.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: long getPosition()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: void setPosition(long)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: void setPosition(long)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: void setPosition(long)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>";
"<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: void <clinit>()>";
"<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>" -> "<java.lang.AssertionError: void <init>(int)>";
"<java.lang.AssertionError: void <init>(int)>" -> "<java.lang.Error: void <init>()>";
"<java.lang.AssertionError: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Error: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.io.ReadOnlyAccessFile: void setPosition(long)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<java.io.RandomAccessFile: void seek(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.io.ReadOnlyAccessFile: int readFully(byte[],int)>" -> "<java.io.RandomAccessFile: void readFully(byte[],int,int)>";
"<java.io.RandomAccessFile: void readFully(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.io.ReadOnlyAccessFile: long getPosition()>" -> "<java.io.RandomAccessFile: long getFilePointer()>";
"<java.io.RandomAccessFile: long getFilePointer()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.util.ArrayList: void clear()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Archive: void setFile(java.io.File)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<java.util.ArrayList: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.lang.Throwable: void printStackTrace()>";
"<java.lang.Throwable: void printStackTrace()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.lang.Throwable: void printStackTrace()>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<de.innosystec.unrar.Archive: de.innosystec.unrar.rarfile.MainHeader getMainHeader()>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<de.innosystec.unrar.Archive: de.innosystec.unrar.rarfile.FileHeader nextFileHeader()>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<de.innosystec.unrar.Archive: void extractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<de.innosystec.unrar.Archive: de.innosystec.unrar.rarfile.FileHeader nextFileHeader()>";
"<de.innosystec.unrar.Archive: de.innosystec.unrar.rarfile.FileHeader nextFileHeader()>" -> "<de.innosystec.unrar.rarfile.UnrarHeadertype: void <clinit>()>";
"<de.innosystec.unrar.Archive: void extractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>";
"<de.innosystec.unrar.Archive: void extractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.exception.RarException: void <init>(java.lang.Exception)>";
"<de.innosystec.unrar.Archive: void extractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>";
"<de.innosystec.unrar.Archive: void extractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.exception.RarException: void <init>(de.innosystec.unrar.exception.RarException$RarExceptionType)>";
"<de.innosystec.unrar.exception.RarException: void <init>(java.lang.Exception)>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>";
"<de.innosystec.unrar.exception.RarException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.Unpack: void <clinit>()>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.exception.RarException: void <init>(java.lang.Exception)>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.exception.RarException: void <init>(de.innosystec.unrar.exception.RarException$RarExceptionType)>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.Unpack: void <init>(de.innosystec.unrar.unpack.ComprDataIO)>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.exception.RarException$RarExceptionType: void <clinit>()>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.Unpack20: void <clinit>()>";
"<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.Unpack: void <clinit>()>" -> "<de.innosystec.unrar.unpack.Unpack20: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void <clinit>()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void <init>(de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void <init>(de.innosystec.unrar.unpack.ComprDataIO)>" -> "<java.util.ArrayList: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack: void <init>(de.innosystec.unrar.unpack.ComprDataIO)>" -> "<java.util.ArrayList: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack: void <init>(de.innosystec.unrar.unpack.ComprDataIO)>" -> "<java.util.ArrayList: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack: void <init>(de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack: void <init>(de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack: void <init>(de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.unpack.Unpack20: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack20: void <clinit>()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void <init>()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<java.lang.Integer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack20: void <init>()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack20: void <init>()>" -> "<de.innosystec.unrar.unpack.decode.BitDecode: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack20: void <init>()>" -> "<de.innosystec.unrar.unpack.decode.RepDecode: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack20: void <init>()>" -> "<de.innosystec.unrar.unpack.decode.LowDistDecode: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack20: void <init>()>" -> "<de.innosystec.unrar.unpack.decode.DistDecode: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack20: void <init>()>" -> "<de.innosystec.unrar.unpack.decode.LitDecode: void <init>()>";
"<de.innosystec.unrar.unpack.vm.BitInput: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.StateRef: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.RangeCoder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.RangeCoder: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void <init>()>";
"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void <clinit>()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void <clinit>()>" -> "<java.lang.Math: int max(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void <clinit>()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void <clinit>()>" -> "<java.lang.Math: int max(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void <clinit>()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void <init>()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void <init>()>";
"<de.innosystec.unrar.unpack.decode.BitDecode: void <init>()>" -> "<de.innosystec.unrar.unpack.decode.Decode: void <init>()>";
"<de.innosystec.unrar.unpack.decode.RepDecode: void <init>()>" -> "<de.innosystec.unrar.unpack.decode.Decode: void <init>()>";
"<de.innosystec.unrar.unpack.decode.LowDistDecode: void <init>()>" -> "<de.innosystec.unrar.unpack.decode.Decode: void <init>()>";
"<de.innosystec.unrar.unpack.decode.DistDecode: void <init>()>" -> "<de.innosystec.unrar.unpack.decode.Decode: void <init>()>";
"<de.innosystec.unrar.unpack.decode.LitDecode: void <init>()>" -> "<de.innosystec.unrar.unpack.decode.Decode: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.FreqData: void <init>(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.Pointer: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Math: int max(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.decode.Decode: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void <clinit>()>" -> "<java.lang.Class: boolean desiredAssertionStatus()>";
"<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>" -> "<java.lang.Class: boolean desiredAssertionStatus()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void <init>()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void clean()>";
"<de.innosystec.unrar.exception.RarException: void <init>(java.lang.Exception)>" -> "<java.lang.Enum: java.lang.String name()>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.Archive: boolean isOldFormat()>";
"<de.innosystec.unrar.Archive: boolean isOldFormat()>" -> "<de.innosystec.unrar.rarfile.MarkHeader: boolean isOldFormat()>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.Unpack: void init(byte[])>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.Unpack: void setDestSize(long)>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.Unpack: void doUnpack(int,boolean)>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.Unpack: void cleanUp()>";
"<de.innosystec.unrar.unpack.Unpack: void doUnpack(int,boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void unstoreFile()>";
"<de.innosystec.unrar.unpack.Unpack: void doUnpack(int,boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>";
"<de.innosystec.unrar.unpack.Unpack: void unstoreFile()>" -> "<java.lang.Math: long min(long,long)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void copyString(int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void insertLastMatch(int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void insertOldDist(int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void copyString(int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void insertLastMatch(int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void copyString(int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: boolean readEndOfBlock()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void copyString(int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void insertLastMatch(int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void insertOldDist(int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void copyString(int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void copyString(int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: boolean readVMCodePPM()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: boolean readTables()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: boolean readTables()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.ppm.BlockTypes: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void <clinit>()>";
"<java.lang.Math: long min(long,long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<java.lang.Byte: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<java.lang.Byte: java.lang.Byte valueOf(byte)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<java.util.ArrayList: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readEndOfBlock()>" -> "<de.innosystec.unrar.unpack.Unpack: boolean readTables()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCodePPM()>" -> "<java.lang.Byte: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCodePPM()>" -> "<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCodePPM()>" -> "<java.lang.Byte: java.lang.Byte valueOf(byte)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCodePPM()>" -> "<java.util.ArrayList: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.ppm.BlockTypes: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<java.util.Arrays: void fill(byte[],byte)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.ppm.BlockTypes: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<de.innosystec.unrar.unpack.Unpack: void UnpWriteArea(int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<de.innosystec.unrar.unpack.Unpack: void UnpWriteArea(int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<de.innosystec.unrar.unpack.Unpack: void ExecuteCode(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<de.innosystec.unrar.unpack.Unpack: void ExecuteCode(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>";
"<de.innosystec.unrar.unpack.ppm.BlockTypes: void <clinit>()>" -> "<de.innosystec.unrar.unpack.ppm.BlockTypes: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.ppm.BlockTypes: void <clinit>()>" -> "<de.innosystec.unrar.unpack.ppm.BlockTypes: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.lang.Byte: java.lang.Byte valueOf(byte)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.lang.Byte: java.lang.Byte valueOf(byte)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.Arrays: void fill(int[],int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.Unpack: void initFilters()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.lang.Math: int min(int,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.lang.Byte: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.lang.Byte: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<java.lang.Byte: java.lang.Byte valueOf(byte)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Arrays: void fill(byte[],byte)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteArea(int,int)>" -> "<de.innosystec.unrar.unpack.Unpack: void UnpWriteData(byte[],int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteArea(int,int)>" -> "<de.innosystec.unrar.unpack.Unpack: void UnpWriteData(byte[],int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteArea(int,int)>" -> "<de.innosystec.unrar.unpack.Unpack: void UnpWriteData(byte[],int,int)>";
"<de.innosystec.unrar.unpack.ppm.BlockTypes: void <init>(java.lang.String,int,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<java.util.Arrays: void fill(int[],int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: java.lang.Integer valueOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.UnpackFilter: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.unpack.UnpackFilter: void <init>()>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: void <init>()>";
"<java.lang.Math: int min(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.vm.VMPreparedProgram: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.unpack.vm.VMPreparedProgram: void <init>()>" -> "<java.util.Vector: void <init>()>";
"<de.innosystec.unrar.unpack.vm.VMPreparedProgram: void <init>()>" -> "<java.util.Vector: void <init>()>";
"<de.innosystec.unrar.unpack.vm.VMPreparedProgram: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<de.innosystec.unrar.unpack.vm.VMPreparedProgram: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<java.util.Vector: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.Vector: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: void setExecCount(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: void setParentFilter(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: void setExecCount(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: void setBlockStart(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: void setBlockLength(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: void setNextWindow(boolean)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: int getBlockLength()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: int getBlockLength()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: int getExecCount()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: void setParentFilter(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: void setBlockLength(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: int getBlockLength()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: int getExecCount()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: int[] getInitR()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: int[] getInitR()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: int[] getInitR()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: int[] getInitR()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: int[] getInitR()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: void setAltCmd(java.util.List)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: void setCmdCount(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.Vector getStaticData()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: void setStaticData(java.util.Vector)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.Vector getGlobalData()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.Vector getGlobalData()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.Vector getGlobalData()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.Vector getGlobalData()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: int[] getInitR()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.Vector getGlobalData()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.Vector getGlobalData()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.Vector getGlobalData()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.Vector: int size()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.Vector: int size()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.Vector: void clear()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.Vector: void setSize(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.Vector: java.lang.Object set(int,java.lang.Object)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.Vector: int size()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.Vector: void setSize(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.Vector: java.lang.Object set(int,java.lang.Object)>";
"<java.util.Vector: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: void setSize(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: java.lang.Object set(int,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: int getExecCount()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: int getExecCount()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: void setExecCount(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.UnpackFilter: de.innosystec.unrar.unpack.vm.VMPreparedProgram getPrg()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.List getCmd()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: int getCmdCount()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.Vector getStaticData()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void InitBitInput()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: byte[] getInBuf()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: boolean Overflow(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: boolean Overflow(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: boolean Overflow(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.ArrayList: int size()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.ArrayList: int size()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.ArrayList: int size()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.ArrayList: int size()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.ArrayList: int size()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.ArrayList: int size()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<java.util.ArrayList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCodePPM()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.unpack.Unpack: void cleanUp()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.SubAllocator getSubAlloc()>";
"<de.innosystec.unrar.unpack.Unpack: void cleanUp()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void stopSubAllocator()>";
"<de.innosystec.unrar.unpack.Unpack: void doUnpack(int,boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>";
"<de.innosystec.unrar.unpack.Unpack: void doUnpack(int,boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void ReadLastTables()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void oldUnpWriteBuf()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void unpInitData(boolean)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void oldUnpWriteBuf()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: byte DecodeAudio(int)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void CopyString20(int,int)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void CopyString20(int,int)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void CopyString20(int,int)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpack20(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void CopyString20(int,int)>";
"<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>" -> "<java.lang.System: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpInitData(boolean)>" -> "<java.util.Arrays: void fill(int[],int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpInitData(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void initFilters()>";
"<de.innosystec.unrar.unpack.Unpack: void unpInitData(boolean)>" -> "<java.util.Arrays: void fill(byte[],byte)>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<java.util.Arrays: void fill(byte[],byte)>";
"<de.innosystec.unrar.unpack.Unpack20: byte DecodeAudio(int)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.Unpack20: byte DecodeAudio(int)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.Unpack20: byte DecodeAudio(int)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.Unpack20: byte DecodeAudio(int)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.Unpack20: byte DecodeAudio(int)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.Unpack20: byte DecodeAudio(int)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.Unpack20: byte DecodeAudio(int)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.Unpack20: byte DecodeAudio(int)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.Unpack20: byte DecodeAudio(int)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.Unpack20: byte DecodeAudio(int)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.Unpack20: byte DecodeAudio(int)>" -> "<java.lang.Math: int abs(int)>";
"<java.lang.Math: int abs(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>";
"<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>" -> "<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>";
"<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>" -> "<java.util.Arrays: void fill(int[],int)>";
"<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>" -> "<java.util.Arrays: void fill(int[],int)>";
"<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>" -> "<de.innosystec.unrar.unpack.decode.Decode: int[] getDecodeNum()>";
"<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>" -> "<de.innosystec.unrar.unpack.decode.Decode: int[] getDecodePos()>";
"<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>" -> "<de.innosystec.unrar.unpack.decode.Decode: int[] getDecodeLen()>";
"<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>" -> "<de.innosystec.unrar.unpack.decode.Decode: int[] getDecodeLen()>";
"<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>" -> "<de.innosystec.unrar.unpack.decode.Decode: int[] getDecodePos()>";
"<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>" -> "<de.innosystec.unrar.unpack.decode.Decode: int[] getDecodePos()>";
"<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>" -> "<de.innosystec.unrar.unpack.decode.Decode: int[] getDecodeNum()>";
"<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>" -> "<de.innosystec.unrar.unpack.decode.Decode: void setMaxNum(int)>";
"<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>" -> "<de.innosystec.unrar.unpack.decode.Decode: int[] getDecodeLen()>";
"<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>" -> "<de.innosystec.unrar.unpack.decode.Decode: int[] getDecodePos()>";
"<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>" -> "<de.innosystec.unrar.unpack.decode.Decode: int getMaxNum()>";
"<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>" -> "<de.innosystec.unrar.unpack.decode.Decode: int[] getDecodeNum()>";
"<de.innosystec.unrar.unpack.Unpack: void unpInitData(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void InitBitInput()>";
"<de.innosystec.unrar.unpack.Unpack: void unpInitData(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: void unpInitData20(boolean)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpInitData20(boolean)>" -> "<de.innosystec.unrar.unpack.decode.AudioVariables: void <init>()>";
"<de.innosystec.unrar.unpack.Unpack20: void unpInitData20(boolean)>" -> "<java.util.Arrays: void fill(byte[],byte)>";
"<de.innosystec.unrar.unpack.Unpack20: void unpInitData20(boolean)>" -> "<java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>";
"<de.innosystec.unrar.unpack.decode.AudioVariables: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.Unpack20: void ReadLastTables()>" -> "<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>";
"<de.innosystec.unrar.unpack.Unpack20: void ReadLastTables()>" -> "<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>";
"<de.innosystec.unrar.unpack.Unpack20: void ReadLastTables()>" -> "<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>";
"<de.innosystec.unrar.unpack.Unpack20: void ReadLastTables()>" -> "<de.innosystec.unrar.unpack.Unpack20: boolean ReadTables20()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void getFlagsBuf()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void oldUnpWriteBuf()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void unpInitData(boolean)>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void oldUnpInitData(boolean)>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void initHuff()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void oldUnpWriteBuf()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void getFlagsBuf()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void longLZ()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void getFlagsBuf()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void longLZ()>";
"<de.innosystec.unrar.unpack.Unpack15: void unpack15(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>";
"<de.innosystec.unrar.unpack.Unpack15: void getFlagsBuf()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void initHuff()>" -> "<java.util.Arrays: void fill(int[],int)>";
"<de.innosystec.unrar.unpack.Unpack15: void initHuff()>" -> "<java.util.Arrays: void fill(int[],int)>";
"<de.innosystec.unrar.unpack.Unpack15: void initHuff()>" -> "<java.util.Arrays: void fill(int[],int)>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: int getShortLen2(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: int getShortLen2(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: int getShortLen1(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: int getShortLen1(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: int getShortLen2(int)>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: int getShortLen1(int)>" -> "<de.innosystec.unrar.unpack.Unpack15: void <clinit>()>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void oldCopyString(int,int)>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void oldCopyString(int,int)>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void oldCopyString(int,int)>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void oldCopyString(int,int)>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void shortLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void oldCopyString(int,int)>";
"<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void corrHuff(int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void longLZ()>" -> "<de.innosystec.unrar.unpack.Unpack15: void oldCopyString(int,int)>";
"<de.innosystec.unrar.unpack.Unpack15: void corrHuff(int[],int[])>" -> "<java.util.Arrays: void fill(int[],int)>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.Unpack15: void oldCopyString(int,int)>";
"<de.innosystec.unrar.unpack.Unpack15: void huffDecode()>" -> "<de.innosystec.unrar.unpack.Unpack15: void corrHuff(int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void initHuff()>" -> "<de.innosystec.unrar.unpack.Unpack15: void corrHuff(int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void getFlagsBuf()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack15: void getFlagsBuf()>" -> "<de.innosystec.unrar.unpack.Unpack15: int decodeNum(int,int,int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack15: void getFlagsBuf()>" -> "<de.innosystec.unrar.unpack.Unpack15: void corrHuff(int[],int[])>";
"<de.innosystec.unrar.unpack.Unpack: void initFilters()>" -> "<java.util.ArrayList: void clear()>";
"<de.innosystec.unrar.unpack.Unpack: void initFilters()>" -> "<java.util.ArrayList: void clear()>";
"<de.innosystec.unrar.unpack.Unpack: void initFilters()>" -> "<java.util.ArrayList: void clear()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack: void unpInitData(boolean)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: void ExecuteCode(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void ExecuteCode(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void ExecuteCode(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void execute(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>" -> "<java.lang.Byte: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>" -> "<java.lang.Byte: java.lang.Byte valueOf(byte)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>" -> "<java.lang.Byte: java.lang.Byte valueOf(byte)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>" -> "<java.lang.Byte: java.lang.Byte valueOf(byte)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>" -> "<java.lang.Byte: java.lang.Byte valueOf(byte)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void execute(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void execute(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.lang.Byte: java.lang.Byte valueOf(byte)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void execute(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.lang.Math: int min(int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void execute(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void execute(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void execute(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void execute(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void execute(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.lang.Math: long min(long,long)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void execute(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.lang.Math: int min(int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void execute(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.lang.Byte: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean isVMMem(byte[])>";
"<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>" -> "<de.innosystec.unrar.io.Raw: int readIntBigEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean isVMMem(byte[])>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: de.innosystec.unrar.unpack.vm.VMStandardFilters findFilter(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean setIP(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean setIP(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean setIP(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean setIP(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean setIP(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean setIP(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean setIP(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean setIP(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean setIP(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean setIP(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean setIP(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getOperand(de.innosystec.unrar.unpack.vm.VMPreparedOperand)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getOperand(de.innosystec.unrar.unpack.vm.VMPreparedOperand)>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.VMCommands: void <init>(java.lang.String,int,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands[] values()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: de.innosystec.unrar.unpack.vm.VMStandardFilters[] values()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<java.lang.Math: int abs(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void filterItanium_SetBits(int,int,int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int filterItanium_GetBits(int,int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int filterItanium_GetBits(int,int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int getValue(boolean,byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: de.innosystec.unrar.unpack.vm.VMStandardFilters findFilter(int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean isVMMem(byte[])>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>" -> "<de.innosystec.unrar.io.Raw: void writeIntBigEndian(byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>" -> "<de.innosystec.unrar.io.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setValue(boolean,byte[],int,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: boolean isVMMem(byte[])>";
"<de.innosystec.unrar.unpack.vm.RarVM: int getOperand(de.innosystec.unrar.unpack.vm.VMPreparedOperand)>" -> "<de.innosystec.unrar.unpack.vm.VMOpType: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: int getOperand(de.innosystec.unrar.unpack.vm.VMPreparedOperand)>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: int getOperand(de.innosystec.unrar.unpack.vm.VMPreparedOperand)>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMFlags: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands[] values()>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: de.innosystec.unrar.unpack.vm.VMStandardFilters[] values()>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.VMOpType: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMOpType: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMOpType: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMOpType: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMOpType: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMOpType: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMOpType: void <clinit>()>" -> "<de.innosystec.unrar.unpack.vm.VMOpType: void <init>(java.lang.String,int,int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <init>(java.lang.String,int,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.unpack.vm.VMFlags: void <init>(java.lang.String,int,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.unpack.vm.VMOpType: void <init>(java.lang.String,int,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: de.innosystec.unrar.unpack.vm.VMStandardFilters[] values()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands[] values()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: de.innosystec.unrar.unpack.vm.VMStandardFilters findFilter(int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: de.innosystec.unrar.unpack.vm.VMStandardFilters findFilter(int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: de.innosystec.unrar.unpack.vm.VMStandardFilters findFilter(int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: de.innosystec.unrar.unpack.vm.VMStandardFilters findFilter(int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: de.innosystec.unrar.unpack.vm.VMStandardFilters findFilter(int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: de.innosystec.unrar.unpack.vm.VMStandardFilters findFilter(int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilters: de.innosystec.unrar.unpack.vm.VMStandardFilters findFilter(int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void ExecuteStandardFilter(de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.vm.RarVM: boolean ExecuteCode(java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.VMFlags: int getFlag()>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setMemory(int,byte[],int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setMemory(int,byte[],int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setMemory(int,byte[],int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<de.innosystec.unrar.unpack.vm.RarVM: byte[] getMem()>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setMemory(int,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setMemory(int,byte[],int,int)>" -> "<java.lang.Math: int min(int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<java.util.ArrayList: int size()>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<java.util.ArrayList: int size()>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<java.util.ArrayList: int size()>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.Unpack20: int decodeNumber(de.innosystec.unrar.unpack.decode.Decode)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.Unpack20: void makeDecodeTables(byte[],int,de.innosystec.unrar.unpack.decode.Decode,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readTables()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void startModelRare(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.SEE2Context: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.SEE2Context: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void startModelRare(int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>";
"<de.innosystec.unrar.unpack.ppm.SEE2Context: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<java.util.Arrays: void fill(int[],int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.State: void setSymbol(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.State: void setFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.State: void setSuccessor(int)>";
"<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>" -> "<java.lang.AssertionError: void <init>(int)>";
"<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>" -> "<java.lang.AssertionError: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.State: void setSuccessor(int)>" -> "<de.innosystec.unrar.io.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<java.lang.AssertionError: void <init>()>" -> "<java.lang.Error: void <init>()>";
"<java.lang.AssertionError: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.Unpack: int getChar()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.Unpack: int getChar()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.Unpack: int getChar()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.Unpack: void setPpmEscChar(int)>";
"<de.innosystec.unrar.unpack.Unpack: int getChar()>" -> "<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setSuffix(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setNumStats(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void setSuffix(int)>" -> "<de.innosystec.unrar.io.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void setNumStats(int)>" -> "<de.innosystec.unrar.io.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void initSubAllocator()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocContext()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnits(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void initSubAllocator()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void initSubAllocator()>" -> "<java.util.Arrays: void fill(byte[],int,int,byte)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void initSubAllocator()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int sizeOfFreeList()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocContext()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocContext()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnitsRare(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocContext()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int removeNode(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnits(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int removeNode(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnits(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnitsRare(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnits(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int U2B(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnits(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int U2B(int)>";
"<java.util.Arrays: void fill(byte[],int,int,byte)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnitsRare(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnitsRare(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void splitBlock(int,int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnitsRare(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int removeNode(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnitsRare(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int U2B(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnitsRare(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int removeNode(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int U2B(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int removeNode(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void insertNode(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void insertNode(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int MBPtr(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int MBPtr(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void insertNode(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int MBPtr(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int MBPtr(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void splitBlock(int,int,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int U2B(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void splitBlock(int,int,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void insertNode(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void splitBlock(int,int,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int U2B(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void splitBlock(int,int,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void insertNode(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int MBPtr(int,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int U2B(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void startModelRare(int)>" -> "<de.innosystec.unrar.unpack.ppm.SEE2Context: void setShift(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>" -> "<java.lang.AssertionError: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void stopSubAllocator()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int GetAllocatedMemory()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<java.lang.AssertionError: void <init>(java.lang.Object)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void <init>(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.RarNode: void <init>(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <init>(byte[])>";
"<java.lang.AssertionError: void <init>(java.lang.Object)>" -> "<java.lang.Error: void <init>()>";
"<java.lang.AssertionError: void <init>(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: boolean startSubAllocator(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void stopSubAllocator()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: boolean decodeInit(de.innosystec.unrar.unpack.Unpack,int)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: void initDecoder(de.innosystec.unrar.unpack.Unpack)>";
"<de.innosystec.unrar.unpack.ppm.RangeCoder: void initDecoder(de.innosystec.unrar.unpack.Unpack)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: int getChar()>";
"<de.innosystec.unrar.unpack.ppm.RangeCoder: int getChar()>" -> "<de.innosystec.unrar.unpack.Unpack: int getChar()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void init()>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean addVMCode(int,java.util.List,int)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: void <init>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: void <init>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.lang.Byte: java.lang.Byte valueOf(byte)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: void <init>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.lang.Math: int min(int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMOpType: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMOpType: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCmdFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.lang.Byte: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMOpType: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.RarVM$1: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCmdFlags: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.VMPreparedCommand: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.unpack.vm.VMPreparedCommand: void <init>()>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void <init>()>";
"<de.innosystec.unrar.unpack.vm.VMPreparedCommand: void <init>()>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void <init>()>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMOpType: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.RarVM: int ReadData(de.innosystec.unrar.unpack.vm.BitInput)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMOpType: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMOpType: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>" -> "<de.innosystec.unrar.crc.RarCRC: int checkCrc(int,byte[],int,int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilterSignature: void <init>(int,int,de.innosystec.unrar.unpack.vm.VMStandardFilters)>";
"<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilterSignature: void <init>(int,int,de.innosystec.unrar.unpack.vm.VMStandardFilters)>";
"<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilterSignature: void <init>(int,int,de.innosystec.unrar.unpack.vm.VMStandardFilters)>";
"<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilterSignature: void <init>(int,int,de.innosystec.unrar.unpack.vm.VMStandardFilters)>";
"<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilterSignature: void <init>(int,int,de.innosystec.unrar.unpack.vm.VMStandardFilters)>";
"<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilterSignature: void <init>(int,int,de.innosystec.unrar.unpack.vm.VMStandardFilters)>";
"<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilterSignature: void <init>(int,int,de.innosystec.unrar.unpack.vm.VMStandardFilters)>";
"<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>" -> "<de.innosystec.unrar.crc.RarCRC: void <clinit>()>";
"<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.crc.RarCRC: int checkCrc(int,byte[],int,int)>" -> "<de.innosystec.unrar.crc.RarCRC: void <clinit>()>";
"<de.innosystec.unrar.crc.RarCRC: int checkCrc(int,byte[],int,int)>" -> "<java.lang.Math: int min(int,int)>";
"<de.innosystec.unrar.unpack.vm.VMStandardFilterSignature: void <init>(int,int,de.innosystec.unrar.unpack.vm.VMStandardFilters)>" -> "<java.lang.Object: void <init>()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilters: int getFilter()>";
"<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilterSignature: int getCRC()>";
"<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilterSignature: int getLength()>";
"<de.innosystec.unrar.unpack.vm.RarVM: de.innosystec.unrar.unpack.vm.VMStandardFilters IsStandardFilter(byte[],int)>" -> "<de.innosystec.unrar.unpack.vm.VMStandardFilterSignature: de.innosystec.unrar.unpack.vm.VMStandardFilters getType()>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.VMCommands: de.innosystec.unrar.unpack.vm.VMCommands findVMCommand(int)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: boolean equals(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: int getVMCommand()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: int getVMCommand()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.lang.Enum: int ordinal()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMCommands getOpCode()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: void setByteMode(boolean)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMPreparedOperand getOp1()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMPreparedOperand getOp2()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMCommands getOpCode()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMPreparedOperand getOp1()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: boolean isByteMode()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMPreparedOperand getOp2()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: boolean isByteMode()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: void setByteMode(boolean)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMPreparedOperand getOp1()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMCommands getOpCode()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMPreparedOperand getOp1()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMPreparedOperand getOp1()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setData(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setType(de.innosystec.unrar.unpack.vm.VMOpType)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setType(de.innosystec.unrar.unpack.vm.VMOpType)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setType(de.innosystec.unrar.unpack.vm.VMOpType)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setType(de.innosystec.unrar.unpack.vm.VMOpType)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: de.innosystec.unrar.unpack.vm.VMOpType getType()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: int getData()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setData(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setType(de.innosystec.unrar.unpack.vm.VMOpType)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setType(de.innosystec.unrar.unpack.vm.VMOpType)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setType(de.innosystec.unrar.unpack.vm.VMOpType)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setData(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: int getData()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setOffset(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setType(de.innosystec.unrar.unpack.vm.VMOpType)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setData(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setData(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setType(de.innosystec.unrar.unpack.vm.VMOpType)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setData(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: int getData()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setOffset(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setBase(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setData(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: int getData()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setOffset(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setBase(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedOperand: void setData(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: int getVMCommand()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: int getVMCommand()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMCommands: int getVMCommand()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: void setOpCode(de.innosystec.unrar.unpack.vm.VMCommands)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMPreparedOperand getOp1()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMPreparedOperand getOp1()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMPreparedOperand getOp2()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: void setOpCode(de.innosystec.unrar.unpack.vm.VMCommands)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: void setOpCode(de.innosystec.unrar.unpack.vm.VMCommands)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: void setOpCode(de.innosystec.unrar.unpack.vm.VMCommands)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMPreparedOperand getOp1()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedCommand: de.innosystec.unrar.unpack.vm.VMPreparedOperand getOp2()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: void setCmdCount(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.List getCmd()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: int getCmdCount()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: void setCmdCount(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.Vector getStaticData()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: int getCmdCount()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: void setCmdCount(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.List getCmd()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: int getCmdCount()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.List getCmd()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: int getCmdCount()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: void setCmdCount(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.util.Vector: boolean add(java.lang.Object)>";
"<java.util.Vector: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.VMPreparedProgram: java.util.List getCmd()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.util.ArrayList: int indexOf(java.lang.Object)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.util.ArrayList: int size()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void optimize(de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<java.util.ArrayList: int indexOf(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void InitBitInput()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void prepare(byte[],int,de.innosystec.unrar.unpack.vm.VMPreparedProgram)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int fgetbits()>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void decodeArg(de.innosystec.unrar.unpack.vm.VMPreparedOperand,boolean)>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void faddbits(int)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>" -> "<java.util.Vector: java.lang.Object set(int,java.lang.Object)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>" -> "<java.util.Vector: java.lang.Object set(int,java.lang.Object)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>" -> "<java.util.Vector: java.lang.Object set(int,java.lang.Object)>";
"<de.innosystec.unrar.unpack.vm.RarVM: void setLowEndianValue(java.util.Vector,int,int)>" -> "<java.util.Vector: java.lang.Object set(int,java.lang.Object)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCodePPM()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCodePPM()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCodePPM()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCodePPM()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCodePPM()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void clearMask()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModelRestart()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModelRestart()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModelRestart()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModelRestart()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModelRestart()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: void ppmdSwap(de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.State)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void clearMask()>" -> "<java.util.Arrays: void fill(int[],int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModelRestart()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getPText()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State incAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State incAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.State: int getSuccessor()>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State incAddress()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext init(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: de.innosystec.unrar.unpack.ppm.FreqData init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext init(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getSuffix()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getSuffix()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getSuffix()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.State getOneState()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getSuffix()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int createChild(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.StateRef)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.State getOneState()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getSuffix()>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int createChild(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext getTempPPMContext(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext getTempPPMContext(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext getTempPPMContext(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext getTempPPMContext(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int createChild(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.State: void setSuccessor(de.innosystec.unrar.unpack.ppm.PPMContext)>";
"<de.innosystec.unrar.unpack.ppm.State: void setSuccessor(de.innosystec.unrar.unpack.ppm.PPMContext)>" -> "<de.innosystec.unrar.unpack.ppm.State: void setSuccessor(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int createChild(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.SubAllocator getSubAlloc()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int createChild(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.SubAllocator getSubAlloc()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int createChild(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int createChild(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocContext()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext getTempPPMContext(byte[])>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int createChild(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int createChild(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setNumStats(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int createChild(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setOneState(de.innosystec.unrar.unpack.ppm.StateRef)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int createChild(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setSuffix(de.innosystec.unrar.unpack.ppm.PPMContext)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int createChild(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void setSuffix(de.innosystec.unrar.unpack.ppm.PPMContext)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void setSuffix(de.innosystec.unrar.unpack.ppm.PPMContext)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setSuffix(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void setOneState(de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.State: void setValues(de.innosystec.unrar.unpack.ppm.StateRef)>";
"<de.innosystec.unrar.unpack.ppm.State: void setValues(de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.State: void setValues(de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.State: void setValues(de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.State: void setValues(de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.State: void setSymbol(int)>";
"<de.innosystec.unrar.unpack.ppm.State: void setValues(de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.State: void setFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.State: void setValues(de.innosystec.unrar.unpack.ppm.StateRef)>" -> "<de.innosystec.unrar.unpack.ppm.State: void setSuccessor(int)>";
"<de.innosystec.unrar.unpack.ppm.State: void setSuccessor(de.innosystec.unrar.unpack.ppm.PPMContext)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void setSymbol(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void setSuccessor(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void setFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void setFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getPText()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void incPText()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getPText()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getPText()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getFakeUnitsStart()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getPText()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void decPText(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int expandUnits(int,int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnits(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int expandUnits(int,int)>" -> "<java.lang.System: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int expandUnits(int,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void insertNode(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int expandUnits(int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int expandUnits(int,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int U2B(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int expandUnits(int,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnits(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void decPText(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getPText()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void decPText(int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void setPText(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getSuffix()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.State getOneState()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setNumStats(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getSuffix()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.State getOneState()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: void setSuccessor(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: void setSuccessor(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State incAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State decAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: void incFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: void incFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: void setSuccessor(de.innosystec.unrar.unpack.ppm.PPMContext)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: void setSymbol(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: void setFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: void setValues(de.innosystec.unrar.unpack.ppm.State)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: void incFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.State: void setFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.State: void setValues(de.innosystec.unrar.unpack.ppm.State)>" -> "<java.lang.System: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.State: void setValues(de.innosystec.unrar.unpack.ppm.State)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State decAddress()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void setValues(de.innosystec.unrar.unpack.ppm.State)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void setSuccessor(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void setSuccessor(de.innosystec.unrar.unpack.ppm.PPMContext)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.StateRef: void setSuccessor(de.innosystec.unrar.unpack.ppm.PPMContext)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.StateRef: void setSuccessor(de.innosystec.unrar.unpack.ppm.PPMContext)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void setSuccessor(int)>";
"<de.innosystec.unrar.unpack.ppm.StateRef: void setValues(de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.StateRef: void setValues(de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.StateRef: void setValues(de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.StateRef: void setValues(de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void setFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.StateRef: void setValues(de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void setSuccessor(int)>";
"<de.innosystec.unrar.unpack.ppm.StateRef: void setValues(de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void setSymbol(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getSuffix()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSuccessor()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: void decode()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: void ariDecNormalize()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: void decode()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: void ariDecNormalize()>";
"<de.innosystec.unrar.unpack.ppm.RangeCoder: void ariDecNormalize()>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: int getChar()>";
"<de.innosystec.unrar.unpack.ppm.RangeCoder: void decode()>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: long getLowCount()>";
"<de.innosystec.unrar.unpack.ppm.RangeCoder: void decode()>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: long getHighCount()>";
"<de.innosystec.unrar.unpack.ppm.RangeCoder: void decode()>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: long getLowCount()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getPText()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getHeapEnd()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getPText()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getHeapEnd()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getPText()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getHeapEnd()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int getPText()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.FreqData getFreqData()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getArrayIndex(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext getTempPPMContext(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getArrayIndex(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.PPMContext getTempPPMContext(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getArrayIndex(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getArrayIndex(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int[] getHB2Flag()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void setHiBitsFlag(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int[][] getBinSumm()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.RangeCoder getCoder()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.RangeCoder getCoder()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.RangeCoder getCoder()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int[][] getBinSumm()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void setPrevSuccess(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void incRunLength(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.RangeCoder getCoder()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int[][] getBinSumm()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.RangeCoder getCoder()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void setInitEsc(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void setNumMasked(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int[] getCharMask()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getEscCount()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void setPrevSuccess(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void incRunLength(int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getRunLength()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void incRunLength(int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void setRunLength(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: long getCurrentShiftCount(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setLowCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setHighCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setLowCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setHighCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getArrayIndex(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.SubAllocator getSubAlloc()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getArrayIndex(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getPrevSuccess()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getArrayIndex(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int[] getNS2BSIndx()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getArrayIndex(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getHiBitsFlag()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getArrayIndex(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int[] getHB2Flag()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getArrayIndex(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getRunLength()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getArrayIndex(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void incFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getArrayIndex(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getMean(int,int,int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void decodeBinSymbol(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getMean(int,int,int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: int getArrayIndex(de.innosystec.unrar.unpack.ppm.ModelPPM,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getSuffix()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getNumMasked()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.RangeCoder getCoder()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int[] getCharMask()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getEscCount()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getNumMasked()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int[] getCharMask()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getEscCount()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void setNumMasked(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: int getCurrentCount()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: long getScale()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void incScale(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: long getScale()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setHighCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setLowCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setLowCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setHighCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: long getScale()>";
"<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void incScale(int)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: long getScale()>";
"<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void incScale(int)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setScale(long)>";
"<de.innosystec.unrar.unpack.ppm.RangeCoder: int getCurrentCount()>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: long getScale()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int[] getNS2Indx()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getNumMasked()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getHiBitsFlag()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.SEE2Context[][] getSEE2Cont()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.RangeCoder getCoder()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.SEE2Context getDummySEE2Cont()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.RangeCoder getCoder()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setScale(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setScale(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.SEE2Context: int getMean()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.SEE2Context: void update()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.SEE2Context: void incSumm(int)>";
"<de.innosystec.unrar.unpack.ppm.SEE2Context: void incSumm(int)>" -> "<de.innosystec.unrar.unpack.ppm.SEE2Context: int getSumm()>";
"<de.innosystec.unrar.unpack.ppm.SEE2Context: void incSumm(int)>" -> "<de.innosystec.unrar.unpack.ppm.SEE2Context: void setSumm(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void incEscCount(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getInitRL()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void setRunLength(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.State: void incFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void incEscCount(int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getEscCount()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void incEscCount(int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void setEscCount(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void <init>()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void ppmdSwap(de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.State)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void decFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void setValues(de.innosystec.unrar.unpack.ppm.State)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.StateRef: void setValues(de.innosystec.unrar.unpack.ppm.State)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void incFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void setValues(de.innosystec.unrar.unpack.ppm.State)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State decAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void setValues(de.innosystec.unrar.unpack.ppm.StateRef)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void setValues(de.innosystec.unrar.unpack.ppm.StateRef)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State decAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void setFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State incAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void setFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State decAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getOrderFall()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.SubAllocator getSubAlloc()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.SubAllocator getSubAlloc()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void freeUnits(int,int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int shrinkUnits(int,int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void freeUnits(int,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void insertNode(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int shrinkUnits(int,int,int)>" -> "<java.lang.System: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int shrinkUnits(int,int,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void splitBlock(int,int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int shrinkUnits(int,int,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: void insertNode(int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int shrinkUnits(int,int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int shrinkUnits(int,int,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int U2B(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int shrinkUnits(int,int,int)>" -> "<de.innosystec.unrar.unpack.ppm.SubAllocator: int removeNode(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int shrinkUnits(int,int,int)>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.RarNode: int getNext()>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void setNumStats(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getSuffix()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: void setFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State incAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State decAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.RangeCoder getCoder()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void setPrevSuccess(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getPrevSuccess()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void incRunLength(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void setPrevSuccess(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int[] getHB2Flag()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void setHiBitsFlag(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int[] getCharMask()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getEscCount()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: void setNumMasked(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int[] getCharMask()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int getEscCount()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: int getCurrentCount()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder: de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange getSubRange()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: long getScale()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setScale(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: long getScale()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setHighCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: long getScale()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setLowCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setLowCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setHighCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setLowCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.RangeCoder$SubRange: void setHighCount(long)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: int getNumStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.State: void ppmdSwap(de.innosystec.unrar.unpack.ppm.State,de.innosystec.unrar.unpack.ppm.State)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: byte[] getHeap()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: de.innosystec.unrar.unpack.ppm.State getFoundState()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.State: void incFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void incSummFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getSummFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void setStats(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getSummFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void incSummFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getSummFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getSummFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void incSummFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void setStats(de.innosystec.unrar.unpack.ppm.State)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void setSummFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void updateModel()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void incSummFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.FreqData: void incSummFreq(int)>" -> "<de.innosystec.unrar.io.Raw: void incShortLittleEndian(byte[],int,int)>";
"<de.innosystec.unrar.unpack.ppm.FreqData: int getSummFreq()>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.ppm.FreqData: void setStats(int)>" -> "<de.innosystec.unrar.io.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<de.innosystec.unrar.unpack.ppm.FreqData: void setSummFreq(int)>" -> "<de.innosystec.unrar.io.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<de.innosystec.unrar.unpack.ppm.FreqData: void setStats(de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.FreqData: void setStats(de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void setStats(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: int createSuccessors(boolean,de.innosystec.unrar.unpack.ppm.State)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getSummFreq()>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void setSummFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void setStats(int)>";
"<de.innosystec.unrar.unpack.ppm.ModelPPM: void restartModelRare()>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void setAddress(int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readEndOfBlock()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readEndOfBlock()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readEndOfBlock()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: int getbits()>";
"<de.innosystec.unrar.unpack.Unpack: boolean readVMCode()>" -> "<de.innosystec.unrar.unpack.vm.BitInput: void addbits(int)>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>";
"<de.innosystec.unrar.unpack.Unpack: void unpack29(boolean)>" -> "<de.innosystec.unrar.unpack.ppm.ModelPPM: int decodeChar()>";
"<de.innosystec.unrar.unpack.Unpack: void init(byte[])>" -> "<de.innosystec.unrar.unpack.Unpack: void unpInitData(boolean)>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.ComprDataIO: void init(java.io.OutputStream)>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.ComprDataIO: void init(de.innosystec.unrar.rarfile.FileHeader)>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.ComprDataIO: void setUnpFileCRC(long)>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.ComprDataIO: de.innosystec.unrar.rarfile.FileHeader getSubHeader()>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.ComprDataIO: long getPackedCRC()>";
"<de.innosystec.unrar.Archive: void doExtractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<de.innosystec.unrar.unpack.ComprDataIO: long getUnpFileCRC()>";
"<de.innosystec.unrar.unpack.ComprDataIO: void init(de.innosystec.unrar.rarfile.FileHeader)>" -> "<de.innosystec.unrar.io.ReadOnlyAccessInputStream: void <init>(de.innosystec.unrar.io.IReadOnlyAccess,long,long)>";
"<de.innosystec.unrar.io.ReadOnlyAccessInputStream: void <init>(de.innosystec.unrar.io.IReadOnlyAccess,long,long)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.ComprDataIO: void init(de.innosystec.unrar.rarfile.FileHeader)>" -> "<de.innosystec.unrar.Archive: de.innosystec.unrar.io.IReadOnlyAccess getRof()>";
"<de.innosystec.unrar.io.ReadOnlyAccessInputStream: void <init>(de.innosystec.unrar.io.IReadOnlyAccess,long,long)>" -> "<de.innosystec.unrar.io.ReadOnlyAccessFile: void setPosition(long)>";
"<de.innosystec.unrar.Archive: void extractFile(de.innosystec.unrar.rarfile.FileHeader,java.io.OutputStream)>" -> "<java.util.ArrayList: boolean contains(java.lang.Object)>";
"<java.util.ArrayList: boolean contains(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Archive: de.innosystec.unrar.rarfile.FileHeader nextFileHeader()>" -> "<java.util.ArrayList: int size()>";
"<de.innosystec.unrar.Archive: de.innosystec.unrar.rarfile.FileHeader nextFileHeader()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<de.innosystec.unrar.rarfile.MainHeader: void print()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.Byte: void <clinit>()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.Byte: java.lang.Byte valueOf(byte)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: void print()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.MainHeader: int getPosAv()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.MainHeader: short getHighPosAv()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: boolean hasEncryptVersion()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.BaseBlock: boolean hasEncryptVersion()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.MainHeader: byte getEncryptVersion()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.MainHeader: boolean hasArchCmt()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.MainHeader: boolean isEncrypted()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.MainHeader: boolean isMultiVolume()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.MainHeader: boolean isFirstVolume()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.MainHeader: boolean isSolid()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.MainHeader: boolean isLocked()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.MainHeader: boolean isProtected()>";
"<de.innosystec.unrar.rarfile.MainHeader: void print()>" -> "<de.innosystec.unrar.rarfile.MainHeader: boolean isAV()>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<java.io.File: java.lang.String getAbsolutePath()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update1(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void incSummFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void incSummFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getSummFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void setSummFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void incSummFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void incSummFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void setStats(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void rescale(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void incSummFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: void update2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: de.innosystec.unrar.unpack.ppm.SEE2Context makeEscFreq2(de.innosystec.unrar.unpack.ppm.ModelPPM,int)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getSummFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State init(byte[])>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: de.innosystec.unrar.unpack.ppm.State incAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getSymbol()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.State: int getFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol2(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getSummFreq()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: int getStats()>";
"<de.innosystec.unrar.unpack.ppm.PPMContext: boolean decodeSymbol1(de.innosystec.unrar.unpack.ppm.ModelPPM)>" -> "<de.innosystec.unrar.unpack.ppm.FreqData: void incSummFreq(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void insertNode(int,int)>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void insertNode(int,int)>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: void setNext(de.innosystec.unrar.unpack.ppm.RarNode)>";
"<de.innosystec.unrar.unpack.ppm.RarNode: void setNext(de.innosystec.unrar.unpack.ppm.RarNode)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.RarNode: void setNext(de.innosystec.unrar.unpack.ppm.RarNode)>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: void setNext(int)>";
"<de.innosystec.unrar.unpack.ppm.RarNode: void setNext(int)>" -> "<de.innosystec.unrar.io.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void insertNode(int,int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void insertNode(int,int)>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: void setNext(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getStamp()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNU()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void remove()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNU()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getStamp()>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNU()>" -> "<de.innosystec.unrar.io.Raw: short readShortLittleEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void remove()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void remove()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void remove()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void remove()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setNext(int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void remove()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void remove()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setPrev(int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setNext(int)>" -> "<de.innosystec.unrar.io.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setPrev(int)>" -> "<de.innosystec.unrar.io.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void remove()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getPrev()>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void remove()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void remove()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void remove()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getPrev()>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getPrev()>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNext()>" -> "<de.innosystec.unrar.io.Raw: int readIntLittleEndian(byte[],int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void insertAt(de.innosystec.unrar.unpack.ppm.RarMemBlock)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setStamp(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setNU(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNU()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNU()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNU()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setNU(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNU()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void remove()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNU()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void insertAt(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void <clinit>()>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void insertAt(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void <init>(byte[])>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setStamp(int)>" -> "<de.innosystec.unrar.io.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setNU(int)>" -> "<de.innosystec.unrar.io.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void insertAt(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void insertAt(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void insertAt(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setNext(de.innosystec.unrar.unpack.ppm.RarMemBlock)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void insertAt(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void insertAt(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setPrev(de.innosystec.unrar.unpack.ppm.RarMemBlock)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setPrev(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setPrev(int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setNext(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setNext(int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void insertAt(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void insertAt(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setPrev(int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void insertAt(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getPrev()>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void insertAt(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setNext(int)>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void insertAt(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setPrev(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setNext(de.innosystec.unrar.unpack.ppm.RarMemBlock)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setPrev(de.innosystec.unrar.unpack.ppm.RarMemBlock)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: void setNext(de.innosystec.unrar.unpack.ppm.RarMemBlock)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: int getAddress()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: void glueFreeBlocks()>" -> "<de.innosystec.unrar.unpack.ppm.RarMemBlock: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int removeNode(int)>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: void setNext(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int removeNode(int)>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int removeNode(int)>" -> "<de.innosystec.unrar.unpack.ppm.Pointer: void setAddress(int)>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int removeNode(int)>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnitsRare(int)>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnitsRare(int)>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocUnits(int)>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: int getNext()>";
"<de.innosystec.unrar.unpack.ppm.SubAllocator: int allocContext()>" -> "<de.innosystec.unrar.unpack.ppm.RarNode: int getNext()>";
"<de.innosystec.unrar.unpack.Unpack15: void oldUnpWriteBuf()>" -> "<de.innosystec.unrar.unpack.ComprDataIO: void unpWrite(byte[],int,int)>";
"<de.innosystec.unrar.unpack.Unpack15: void oldUnpWriteBuf()>" -> "<de.innosystec.unrar.unpack.ComprDataIO: void unpWrite(byte[],int,int)>";
"<de.innosystec.unrar.unpack.Unpack15: void oldUnpWriteBuf()>" -> "<de.innosystec.unrar.unpack.ComprDataIO: void unpWrite(byte[],int,int)>";
"<de.innosystec.unrar.unpack.ComprDataIO: void unpWrite(byte[],int,int)>" -> "<de.innosystec.unrar.crc.RarCRC: void <clinit>()>";
"<de.innosystec.unrar.unpack.ComprDataIO: void unpWrite(byte[],int,int)>" -> "<de.innosystec.unrar.crc.RarCRC: int checkCrc(int,byte[],int,int)>";
"<de.innosystec.unrar.unpack.ComprDataIO: void unpWrite(byte[],int,int)>" -> "<de.innosystec.unrar.crc.RarCRC: short checkOldCrc(short,byte[],int)>";
"<de.innosystec.unrar.unpack.ComprDataIO: void unpWrite(byte[],int,int)>" -> "<de.innosystec.unrar.crc.RarCRC: void <clinit>()>";
"<de.innosystec.unrar.crc.RarCRC: short checkOldCrc(short,byte[],int)>" -> "<java.lang.Math: int min(int,int)>";
"<de.innosystec.unrar.unpack.ComprDataIO: void unpWrite(byte[],int,int)>" -> "<de.innosystec.unrar.Archive: boolean isOldFormat()>";
"<de.innosystec.unrar.unpack.ComprDataIO: void unpWrite(byte[],int,int)>" -> "<java.io.FileOutputStream: void write(byte[],int,int)>";
"<java.io.FileOutputStream: void write(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.Unpack15: boolean unpReadBuf()>" -> "<de.innosystec.unrar.unpack.ComprDataIO: int unpRead(byte[],int,int)>";
"<de.innosystec.unrar.unpack.ComprDataIO: int unpRead(byte[],int,int)>" -> "<de.innosystec.unrar.crc.RarCRC: void <clinit>()>";
"<de.innosystec.unrar.unpack.ComprDataIO: int unpRead(byte[],int,int)>" -> "<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>";
"<de.innosystec.unrar.unpack.ComprDataIO: int unpRead(byte[],int,int)>" -> "<de.innosystec.unrar.crc.RarCRC: int checkCrc(int,byte[],int,int)>";
"<de.innosystec.unrar.unpack.ComprDataIO: int unpRead(byte[],int,int)>" -> "<java.io.EOFException: void <init>()>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<java.lang.System: void <clinit>()>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<java.io.File: void <clinit>()>";
"<java.io.EOFException: void <init>()>" -> "<java.io.IOException: void <init>()>";
"<java.io.EOFException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<de.innosystec.unrar.Volume: boolean isDigit(char)>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<de.innosystec.unrar.Volume: boolean isDigit(char)>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<de.innosystec.unrar.Volume: boolean isDigit(char)>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: void <init>()>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: void <init>(int)>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<de.innosystec.unrar.Volume: boolean isDigit(char)>";
"<java.io.IOException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>";
"<de.innosystec.unrar.Volume: java.lang.String nextVolumeName(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<java.io.File: boolean exists()>";
"<java.io.File: boolean exists()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.unpack.ComprDataIO: de.innosystec.unrar.rarfile.FileHeader getSubHeader()>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.unpack.ComprDataIO: long getPackedCRC()>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.unpack.ComprDataIO: void init(de.innosystec.unrar.rarfile.FileHeader)>";
"<de.innosystec.unrar.unpack.ComprDataIO: int unpRead(byte[],int,int)>" -> "<de.innosystec.unrar.Archive: void bytesReadRead(int)>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.Archive: de.innosystec.unrar.rarfile.MainHeader getMainHeader()>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.Archive: boolean isOldFormat()>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.Archive: java.io.File getFile()>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.Archive: de.innosystec.unrar.UnrarCallback getUnrarCallback()>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.Archive: void setFile(java.io.File)>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.Archive: de.innosystec.unrar.rarfile.FileHeader nextFileHeader()>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<de.innosystec.unrar.rarfile.MainHeader: boolean isNewNumbering()>";
"<de.innosystec.unrar.Volume: boolean mergeArchive(de.innosystec.unrar.Archive,de.innosystec.unrar.unpack.ComprDataIO)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<de.innosystec.unrar.unpack.ComprDataIO: int unpRead(byte[],int,int)>" -> "<de.innosystec.unrar.io.ReadOnlyAccessInputStream: int read(byte[],int,int)>";
"<de.innosystec.unrar.io.ReadOnlyAccessInputStream: int read(byte[],int,int)>" -> "<java.lang.Math: long min(long,long)>";
"<de.innosystec.unrar.io.ReadOnlyAccessInputStream: int read(byte[],int,int)>" -> "<java.io.RandomAccessFile: int read(byte[],int,int)>";
"<java.io.RandomAccessFile: int read(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteData(byte[],int,int)>" -> "<de.innosystec.unrar.unpack.ComprDataIO: void unpWrite(byte[],int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void UnpWriteBuf()>" -> "<de.innosystec.unrar.unpack.ComprDataIO: void unpWrite(byte[],int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void unstoreFile()>" -> "<de.innosystec.unrar.unpack.ComprDataIO: int unpRead(byte[],int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void unstoreFile()>" -> "<de.innosystec.unrar.unpack.ComprDataIO: void unpWrite(byte[],int,int)>";
"<de.innosystec.unrar.unpack.Unpack: void doUnpack(int,boolean)>" -> "<de.innosystec.unrar.unpack.ComprDataIO: de.innosystec.unrar.rarfile.FileHeader getSubHeader()>";
"<de.innosystec.unrar.Archive: void close()>" -> "<de.innosystec.unrar.unpack.Unpack: void cleanUp()>";
"<de.innosystec.unrar.Archive: void readHeaders()>" -> "<java.io.File: long length()>";
"<java.io.File: long length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.lang.Throwable: void printStackTrace()>";
"<de.innosystec.unrar.MVTest: void main(java.lang.String[])>" -> "<java.lang.Throwable: void printStackTrace()>";
}
