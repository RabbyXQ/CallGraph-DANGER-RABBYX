digraph CallGraph {
"<org.apache.log4j.config.PropertyPrinter: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.log4j.config.PropertyPrinter: void main(java.lang.String[])>" -> "<org.apache.log4j.config.PropertyPrinter: void <init>(java.io.PrintWriter)>";
"<org.apache.log4j.config.PropertyPrinter: void main(java.lang.String[])>" -> "<java.io.PrintWriter: void <init>(java.io.OutputStream)>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void <init>(java.io.PrintWriter)>" -> "<org.apache.log4j.config.PropertyPrinter: void <init>(java.io.PrintWriter,boolean)>";
"<java.io.PrintWriter: void <init>(java.io.OutputStream)>" -> "<java.io.Writer: void <init>()>";
"<java.io.PrintWriter: void <init>(java.io.OutputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void <init>(java.io.PrintWriter,boolean)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.log4j.config.PropertyPrinter: void <init>(java.io.PrintWriter,boolean)>" -> "<java.util.Hashtable: void <init>()>";
"<org.apache.log4j.config.PropertyPrinter: void <init>(java.io.PrintWriter,boolean)>" -> "<java.util.Hashtable: void <init>()>";
"<java.io.Writer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Writer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Hashtable: void <init>()>" -> "<java.util.Dictionary: void <init>()>";
"<java.util.Hashtable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void <init>(java.io.PrintWriter,boolean)>" -> "<java.io.PrintWriter: void flush()>";
"<java.io.PrintWriter: void flush()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void <init>(java.io.PrintWriter,boolean)>" -> "<org.apache.log4j.config.PropertyPrinter: void print(java.io.PrintWriter)>";
"<org.apache.log4j.config.PropertyPrinter: void print(java.io.PrintWriter)>" -> "<org.apache.log4j.Logger: void <clinit>()>";
"<org.apache.log4j.config.PropertyPrinter: void print(java.io.PrintWriter)>" -> "<org.apache.log4j.LogManager: java.util.Enumeration getCurrentLoggers()>";
"<org.apache.log4j.config.PropertyPrinter: void print(java.io.PrintWriter)>" -> "<org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>";
"<org.apache.log4j.config.PropertyPrinter: void print(java.io.PrintWriter)>" -> "<org.apache.log4j.LogManager: void <clinit>()>";
"<org.apache.log4j.config.PropertyPrinter: void print(java.io.PrintWriter)>" -> "<org.apache.log4j.Category: void <clinit>()>";
"<org.apache.log4j.Logger: void <clinit>()>" -> "<org.apache.log4j.Category: void <clinit>()>";
"<org.apache.log4j.Logger: void <clinit>()>" -> "<org.apache.log4j.Logger: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.LogManager: java.util.Enumeration getCurrentLoggers()>" -> "<org.apache.log4j.LogManager: void <clinit>()>";
"<org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>" -> "<org.apache.log4j.LogManager: void <clinit>()>";
"<org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>" -> "<org.apache.log4j.LogManager: org.apache.log4j.Logger getRootLogger()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.Logger: void <clinit>()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<java.net.URL: void <init>(java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.spi.DefaultRepositorySelector: void <init>(org.apache.log4j.spi.LoggerRepository)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.spi.RootLogger: void <init>(org.apache.log4j.Level)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.Loader: void <clinit>()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.Loader: void <clinit>()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<org.apache.log4j.Category: void <clinit>()>";
"<org.apache.log4j.Category: void <clinit>()>" -> "<org.apache.log4j.Category: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.Logger: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.log4j.Logger: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.log4j.LogManager: org.apache.log4j.Logger getRootLogger()>" -> "<org.apache.log4j.LogManager: void <clinit>()>";
"<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<java.lang.StringBuffer: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<org.apache.log4j.helpers.Loader: void <clinit>()>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<org.apache.log4j.helpers.Loader: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<org.apache.log4j.helpers.Loader: java.lang.ClassLoader getTCL()>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<java.net.URL: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.net.URL: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.PropertyConfigurator: void <init>()>";
"<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>";
"<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>" -> "<org.apache.log4j.LogManager: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.spi.DefaultRepositorySelector: void <init>(org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>" -> "<org.apache.log4j.DefaultCategoryFactory: void <init>()>";
"<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>" -> "<org.apache.log4j.or.RendererMap: void <init>()>";
"<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>" -> "<java.util.Vector: void <init>(int)>";
"<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>" -> "<java.util.Hashtable: void <init>()>";
"<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>" -> "<org.apache.log4j.or.RendererMap: void <clinit>()>";
"<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.spi.RootLogger: void <init>(org.apache.log4j.Level)>" -> "<org.apache.log4j.Logger: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.helpers.LogLog: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>";
"<org.apache.log4j.helpers.LogLog: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>";
"<org.apache.log4j.helpers.Loader: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.helpers.Loader: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>";
"<org.apache.log4j.helpers.Loader: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>";
"<org.apache.log4j.helpers.Loader: void <clinit>()>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>";
"<org.apache.log4j.Priority: void <clinit>()>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.Priority: void <clinit>()>" -> "<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>";
"<org.apache.log4j.Priority: void <clinit>()>" -> "<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>";
"<org.apache.log4j.Priority: void <clinit>()>" -> "<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>";
"<org.apache.log4j.Priority: void <clinit>()>" -> "<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>";
"<org.apache.log4j.Priority: void <clinit>()>" -> "<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>";
"<org.apache.log4j.Level: void <clinit>()>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.Level: void <clinit>()>" -> "<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>";
"<org.apache.log4j.Level: void <clinit>()>" -> "<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>";
"<org.apache.log4j.Level: void <clinit>()>" -> "<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>";
"<org.apache.log4j.Level: void <clinit>()>" -> "<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>";
"<org.apache.log4j.Level: void <clinit>()>" -> "<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>";
"<org.apache.log4j.Level: void <clinit>()>" -> "<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>";
"<org.apache.log4j.Level: void <clinit>()>" -> "<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>";
"<org.apache.log4j.Level: void <clinit>()>" -> "<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>";
"<org.apache.log4j.Category: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.log4j.Category: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.lang.Class: java.lang.Class forName(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>" -> "<java.lang.LinkageError: void <init>()>";
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.log4j.helpers.Loader: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.lang.ClassLoader getTCL()>" -> "<org.apache.log4j.helpers.Loader: void <clinit>()>";
"<org.apache.log4j.helpers.Loader: java.lang.ClassLoader getTCL()>" -> "<org.apache.log4j.helpers.Loader: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.lang.ClassLoader getTCL()>" -> "<java.lang.Thread: java.lang.Thread currentThread()>";
"<org.apache.log4j.PropertyConfigurator: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.log4j.PropertyConfigurator: void <init>()>" -> "<org.apache.log4j.DefaultCategoryFactory: void <init>()>";
"<org.apache.log4j.PropertyConfigurator: void <init>()>" -> "<java.util.Hashtable: void <init>(int)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.Loader: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.DefaultCategoryFactory: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.log4j.or.RendererMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.log4j.or.RendererMap: void <init>()>" -> "<java.util.Hashtable: void <init>()>";
"<java.util.Vector: void <init>(int)>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.Vector: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void <clinit>()>" -> "<org.apache.log4j.or.DefaultRenderer: void <init>()>";
"<org.apache.log4j.Logger: void <init>(java.lang.String)>" -> "<org.apache.log4j.Category: void <init>(java.lang.String)>";
"<org.apache.log4j.Level: void <init>(int,java.lang.String,int)>" -> "<org.apache.log4j.Priority: void <init>(int,java.lang.String,int)>";
"<java.lang.LinkageError: void <init>()>" -> "<java.lang.Error: void <init>()>";
"<java.lang.LinkageError: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Hashtable: void <init>(int)>" -> "<java.util.Dictionary: void <init>()>";
"<java.util.Hashtable: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>" -> "<org.apache.log4j.helpers.Loader: void <clinit>()>";
"<org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>" -> "<org.apache.log4j.helpers.Loader: java.lang.ClassLoader getTCL()>";
"<org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.or.DefaultRenderer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.log4j.Category: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.log4j.Priority: void <init>(int,java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Throwable: void printStackTrace()>";
"<java.lang.Throwable: void printStackTrace()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Throwable: void printStackTrace()>";
"<org.apache.log4j.spi.RootLogger: void <init>(org.apache.log4j.Level)>" -> "<org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)>";
"<org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>";
"<org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)>" -> "<java.lang.Throwable: void <init>()>";
"<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>" -> "<org.apache.log4j.Category: void setHierarchy(org.apache.log4j.spi.LoggerRepository)>";
"<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>" -> "<org.apache.log4j.Hierarchy: void setThreshold(org.apache.log4j.Level)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>" -> "<org.apache.log4j.spi.DefaultRepositorySelector: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>";
"<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.util.Properties: void <init>()>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<java.util.Properties: void <init>()>" -> "<java.util.Hashtable: void <init>()>";
"<java.util.Properties: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.util.Properties: void load(java.io.InputStream)>";
"<java.util.Properties: void load(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void setInternalDebugging(boolean)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.Loader: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.LogLog: void setInternalDebugging(boolean)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.String: java.lang.String valueOf(char)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.String: void <clinit>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String valueOf(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.String: int indexOf(java.lang.String,int)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.String: int length()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.String: int indexOf(int,int)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<java.lang.String: int indexOf(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: int indexOf(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: int indexOf(int)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<java.lang.String: int indexOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: java.lang.String toUpperCase()>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: java.lang.String toUpperCase()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
"<java.util.Properties: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>" -> "<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" -> "<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>";
"<org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>";
"<org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>";
"<org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" -> "<org.apache.log4j.PropertyConfigurator: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" -> "<org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>";
"<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.or.RendererMap: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetter: void <init>(java.lang.Object)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.or.RendererMap: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.Loader: void <clinit>()>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.or.RendererMap: void <clinit>()>";
"<org.apache.log4j.config.PropertySetter: void <init>(java.lang.Object)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.log4j.or.RendererMap: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>";
"<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetter: void activate()>";
"<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.beans.Introspector: java.lang.String decapitalize(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetter: java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetterException: void <init>(java.lang.Throwable)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetterException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetterException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetterException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetterException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetterException: void <init>(java.lang.Throwable)>" -> "<java.lang.Exception: void <init>()>";
"<org.apache.log4j.config.PropertySetterException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<org.apache.log4j.config.PropertySetter: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<java.lang.Long: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<org.apache.log4j.config.PropertySetter: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<java.lang.Integer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<java.lang.Boolean: void <clinit>()>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<java.lang.Long: void <clinit>()>";
"<org.apache.log4j.config.PropertySetter: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.lang.Long: void <init>(java.lang.String)>" -> "<java.lang.Number: void <init>()>";
"<java.lang.Long: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: void <init>(java.lang.String)>" -> "<java.lang.Number: void <init>()>";
"<java.lang.Integer: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Number: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Number: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: java.lang.Object convertArg(java.lang.String,java.lang.Class)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<java.lang.String: java.lang.String trim()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.String)>" -> "<org.apache.log4j.config.PropertySetter: void introspect()>";
"<org.apache.log4j.config.PropertySetter: void introspect()>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.config.PropertySetter: void introspect()>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void introspect()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void introspect()>" -> "<java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>";
"<org.apache.log4j.config.PropertySetter: void introspect()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.config.PropertySetter: void introspect()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void introspect()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void introspect()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertySetter: void introspect()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.log4j.config.PropertySetter: void introspect()>" -> "<org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()>";
"<java.lang.Throwable: java.lang.String getMessage()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.String: int length()>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.String: int length()>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.String: int length()>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: boolean startsWith(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.util.Properties: java.util.Enumeration propertyNames()>";
"<java.util.Properties: java.util.Enumeration propertyNames()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.Priority: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.Level: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<java.util.StringTokenizer: boolean hasMoreTokens()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.StringTokenizer: java.lang.String nextToken()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.PropertyConfigurator: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.PropertyConfigurator: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<java.lang.String: java.lang.String valueOf(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.OptionConverter: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender registryGet(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" -> "<org.apache.log4j.PropertyConfigurator: void registryPut(org.apache.log4j.Appender)>";
"<org.apache.log4j.PropertyConfigurator: void registryPut(org.apache.log4j.Appender)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender registryGet(java.lang.String)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>" -> "<java.util.Properties: java.util.Enumeration propertyNames()>";
"<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<java.util.Hashtable: void clear()>";
"<java.util.Hashtable: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.Hierarchy: void setThreshold(org.apache.log4j.Level)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.Hierarchy: org.apache.log4j.Level getThreshold()>";
"<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>";
"<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>" -> "<org.apache.log4j.CategoryKey: void <init>(java.lang.String)>";
"<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>" -> "<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>";
"<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>" -> "<org.apache.log4j.Hierarchy: void updateChildren(org.apache.log4j.ProvisionNode,org.apache.log4j.Logger)>";
"<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>" -> "<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>";
"<org.apache.log4j.CategoryKey: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>" -> "<org.apache.log4j.CategoryKey: void <init>(java.lang.String)>";
"<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>" -> "<org.apache.log4j.ProvisionNode: void <init>(org.apache.log4j.Logger)>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.ProvisionNode: void <init>(org.apache.log4j.Logger)>" -> "<java.util.Vector: void <init>()>";
"<java.util.Vector: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.Vector: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.ProvisionNode: void <init>(org.apache.log4j.Logger)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<java.util.Vector: void addElement(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>" -> "<java.lang.Throwable: void printStackTrace()>";
"<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>" -> "<org.apache.log4j.DefaultCategoryFactory: org.apache.log4j.Logger makeNewLoggerInstance(java.lang.String)>";
"<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>" -> "<org.apache.log4j.DefaultCategoryFactory: org.apache.log4j.Logger makeNewLoggerInstance(java.lang.String)>";
"<org.apache.log4j.DefaultCategoryFactory: org.apache.log4j.Logger makeNewLoggerInstance(java.lang.String)>" -> "<org.apache.log4j.Logger: void <clinit>()>";
"<org.apache.log4j.DefaultCategoryFactory: org.apache.log4j.Logger makeNewLoggerInstance(java.lang.String)>" -> "<org.apache.log4j.Logger: void <init>(java.lang.String)>";
"<org.apache.log4j.DefaultCategoryFactory: org.apache.log4j.Logger makeNewLoggerInstance(java.lang.String)>" -> "<org.apache.log4j.Category: void <clinit>()>";
"<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>" -> "<org.apache.log4j.Category: void setHierarchy(org.apache.log4j.spi.LoggerRepository)>";
"<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>" -> "<org.apache.log4j.Category: void setHierarchy(org.apache.log4j.spi.LoggerRepository)>";
"<org.apache.log4j.CategoryKey: void <init>(java.lang.String)>" -> "<java.lang.String: int hashCode()>";
"<java.lang.String: int hashCode()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" -> "<org.apache.log4j.Category: void setAdditivity(boolean)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.Category: org.apache.log4j.Level getLevel()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.Category: void removeAllAppenders()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.Category: void addAppender(org.apache.log4j.Appender)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)>";
"<org.apache.log4j.Category: void addAppender(org.apache.log4j.Appender)>" -> "<org.apache.log4j.helpers.AppenderAttachableImpl: void <init>()>";
"<org.apache.log4j.helpers.AppenderAttachableImpl: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.log4j.Category: void addAppender(org.apache.log4j.Appender)>" -> "<org.apache.log4j.helpers.AppenderAttachableImpl: void addAppender(org.apache.log4j.Appender)>";
"<org.apache.log4j.helpers.AppenderAttachableImpl: void addAppender(org.apache.log4j.Appender)>" -> "<java.util.Vector: void <init>(int)>";
"<org.apache.log4j.helpers.AppenderAttachableImpl: void addAppender(org.apache.log4j.Appender)>" -> "<java.util.Vector: boolean contains(java.lang.Object)>";
"<org.apache.log4j.helpers.AppenderAttachableImpl: void addAppender(org.apache.log4j.Appender)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<java.util.Vector: boolean contains(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.Category: void removeAllAppenders()>" -> "<org.apache.log4j.helpers.AppenderAttachableImpl: void removeAllAppenders()>";
"<org.apache.log4j.helpers.AppenderAttachableImpl: void removeAllAppenders()>" -> "<java.util.Vector: int size()>";
"<org.apache.log4j.helpers.AppenderAttachableImpl: void removeAllAppenders()>" -> "<java.util.Vector: void removeAllElements()>";
"<org.apache.log4j.helpers.AppenderAttachableImpl: void removeAllAppenders()>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<java.util.Vector: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: void removeAllElements()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: java.lang.Object elementAt(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.Hierarchy: void setRenderer(java.lang.Class,org.apache.log4j.or.ObjectRenderer)>";
"<org.apache.log4j.Hierarchy: void setRenderer(java.lang.Class,org.apache.log4j.or.ObjectRenderer)>" -> "<org.apache.log4j.or.RendererMap: void put(java.lang.Class,org.apache.log4j.or.ObjectRenderer)>";
"<org.apache.log4j.or.RendererMap: void put(java.lang.Class,org.apache.log4j.or.ObjectRenderer)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" -> "<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)>";
"<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)>";
"<org.apache.log4j.Category: void addAppender(org.apache.log4j.Appender)>" -> "<org.apache.log4j.Hierarchy: void fireAddAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)>";
"<org.apache.log4j.Hierarchy: void fireAddAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)>" -> "<java.util.Vector: int size()>";
"<org.apache.log4j.Hierarchy: void fireAddAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" -> "<java.net.URL: java.lang.String getFile()>";
"<java.net.URL: java.lang.String getFile()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" -> "<java.net.URL: java.io.InputStream openStream()>";
"<java.net.URL: java.io.InputStream openStream()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.Loader: java.net.URL getResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.LogManager: org.apache.log4j.Logger getRootLogger()>" -> "<org.apache.log4j.spi.DefaultRepositorySelector: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>";
"<org.apache.log4j.LogManager: org.apache.log4j.Logger getRootLogger()>" -> "<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.LogManager: void <clinit>()>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.log4j.LogManager: java.util.Enumeration getCurrentLoggers()>" -> "<org.apache.log4j.spi.DefaultRepositorySelector: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>";
"<org.apache.log4j.LogManager: java.util.Enumeration getCurrentLoggers()>" -> "<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>";
"<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>" -> "<java.util.Vector: void <init>(int)>";
"<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>" -> "<java.util.Vector: java.util.Enumeration elements()>";
"<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<java.util.Vector: java.util.Enumeration elements()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>" -> "<java.util.Hashtable: int size()>";
"<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>" -> "<java.util.Hashtable: java.util.Enumeration elements()>";
"<java.util.Hashtable: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Hashtable: java.util.Enumeration elements()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void print(java.io.PrintWriter)>" -> "<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>";
"<org.apache.log4j.config.PropertyPrinter: void print(java.io.PrintWriter)>" -> "<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<org.apache.log4j.Logger: void <clinit>()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<org.apache.log4j.Category: void <clinit>()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<org.apache.log4j.Category: java.util.Enumeration getAllAppenders()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<org.apache.log4j.Category: org.apache.log4j.Level getLevel()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<org.apache.log4j.Category: java.lang.String getName()>";
"<org.apache.log4j.Category: java.util.Enumeration getAllAppenders()>" -> "<org.apache.log4j.helpers.NullEnumeration: void <clinit>()>";
"<org.apache.log4j.Category: java.util.Enumeration getAllAppenders()>" -> "<org.apache.log4j.helpers.NullEnumeration: org.apache.log4j.helpers.NullEnumeration getInstance()>";
"<org.apache.log4j.helpers.NullEnumeration: void <clinit>()>" -> "<org.apache.log4j.helpers.NullEnumeration: void <init>()>";
"<org.apache.log4j.helpers.NullEnumeration: org.apache.log4j.helpers.NullEnumeration getInstance()>" -> "<org.apache.log4j.helpers.NullEnumeration: void <clinit>()>";
"<org.apache.log4j.helpers.NullEnumeration: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<org.apache.log4j.Priority: java.lang.String toString()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<org.apache.log4j.helpers.NullEnumeration: boolean hasMoreElements()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<org.apache.log4j.helpers.NullEnumeration: java.lang.Object nextElement()>";
"<org.apache.log4j.helpers.NullEnumeration: java.lang.Object nextElement()>" -> "<java.util.NoSuchElementException: void <init>()>";
"<java.util.NoSuchElementException: void <init>()>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.util.NoSuchElementException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.Category: java.util.Enumeration getAllAppenders()>" -> "<org.apache.log4j.helpers.AppenderAttachableImpl: java.util.Enumeration getAllAppenders()>";
"<org.apache.log4j.helpers.AppenderAttachableImpl: java.util.Enumeration getAllAppenders()>" -> "<java.util.Vector: java.util.Enumeration elements()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.io.PrintWriter: void println(java.lang.String)>";
"<java.io.PrintWriter: void println(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<org.apache.log4j.config.PropertyPrinter: boolean isGenAppName(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<org.apache.log4j.config.PropertyPrinter: java.lang.String genAppName()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: java.lang.String genAppName()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>" -> "<org.apache.log4j.config.PropertyGetter: void getProperties(java.lang.Object,org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>" -> "<org.apache.log4j.config.PropertyGetter: void <clinit>()>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(java.lang.Object,org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<org.apache.log4j.config.PropertyGetter: void <clinit>()>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(java.lang.Object,org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(java.lang.Object,org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(java.lang.Object,org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<org.apache.log4j.config.PropertyGetter: void <init>(java.lang.Object)>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(java.lang.Object,org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.config.PropertyGetter: void <init>(java.lang.Object)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.log4j.config.PropertyGetter: void <init>(java.lang.Object)>" -> "<java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(java.lang.Object,org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(java.lang.Object,org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(java.lang.Object,org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<org.apache.log4j.config.PropertyGetter: void getProperties(org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<org.apache.log4j.config.PropertyGetter: void <clinit>()>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<org.apache.log4j.helpers.LogLog: void <clinit>()>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<org.apache.log4j.config.PropertyGetter: boolean isHandledType(java.lang.Class)>";
"<org.apache.log4j.config.PropertyGetter: boolean isHandledType(java.lang.Class)>" -> "<org.apache.log4j.config.PropertyGetter: void <clinit>()>";
"<org.apache.log4j.config.PropertyGetter: boolean isHandledType(java.lang.Class)>" -> "<org.apache.log4j.config.PropertyGetter: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.config.PropertyGetter: boolean isHandledType(java.lang.Class)>" -> "<org.apache.log4j.config.PropertyGetter: java.lang.Class class$(java.lang.String)>";
"<org.apache.log4j.config.PropertyGetter: boolean isHandledType(java.lang.Class)>" -> "<java.lang.Boolean: void <clinit>()>";
"<org.apache.log4j.config.PropertyGetter: boolean isHandledType(java.lang.Class)>" -> "<java.lang.Long: void <clinit>()>";
"<org.apache.log4j.config.PropertyGetter: boolean isHandledType(java.lang.Class)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.log4j.config.PropertyGetter: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.log4j.config.PropertyGetter: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>" -> "<java.io.PrintWriter: void println(java.lang.String)>";
"<org.apache.log4j.config.PropertyGetter: void getProperties(org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>" -> "<org.apache.log4j.config.PropertyPrinter: void foundProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>";
"<org.apache.log4j.config.PropertyPrinter: void foundProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.log4j.config.PropertyPrinter: void foundProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void foundProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.log4j.config.PropertyPrinter: void foundProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>" -> "<org.apache.log4j.config.PropertyPrinter: java.lang.String capitalize(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: java.lang.String capitalize(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.apache.log4j.config.PropertyPrinter: java.lang.String capitalize(java.lang.String)>" -> "<java.lang.Character: char toUpperCase(char)>";
"<org.apache.log4j.config.PropertyPrinter: java.lang.String capitalize(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: java.lang.String capitalize(java.lang.String)>" -> "<java.lang.Character: boolean isLowerCase(char)>";
"<org.apache.log4j.config.PropertyPrinter: java.lang.String capitalize(java.lang.String)>" -> "<java.lang.Character: boolean isLowerCase(char)>";
"<java.lang.Character: char toUpperCase(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Character: boolean isLowerCase(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: java.lang.String capitalize(java.lang.String)>" -> "<java.lang.StringBuffer: void setCharAt(int,char)>";
"<org.apache.log4j.config.PropertyPrinter: java.lang.String capitalize(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: void setCharAt(int,char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void foundProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void foundProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void foundProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: void foundProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertyPrinter: void foundProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.log4j.config.PropertyPrinter: void foundProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>" -> "<java.io.PrintWriter: void println(java.lang.String)>";
"<org.apache.log4j.config.PropertyPrinter: java.lang.String genAppName()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.log4j.config.PropertyPrinter: java.lang.String genAppName()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>" -> "<java.lang.String: int length()>";
"<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>" -> "<java.lang.String: int lastIndexOf(int,int)>";
"<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>" -> "<java.lang.String: int lastIndexOf(int,int)>";
"<java.lang.String: int lastIndexOf(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()>" -> "<org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()>";
"<org.apache.log4j.config.PropertySetter: void introspect()>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<java.lang.Object: java.lang.Class getClass()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.Object: java.lang.Class getClass()>";
}
