digraph CallGraph {
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<weibo4j.Weibo: void <init>()>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<weibo4j.WeiboSupport: void <clinit>()>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<weibo4j.Weibo: void <clinit>()>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: void exit(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Weibo: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getScheme()>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.Weibo: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getScheme()>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.Weibo: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getScheme()>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.Weibo: void <init>()>" -> "<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>";
"<weibo4j.Weibo: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getScheme()>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.Weibo: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getScheme()>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.Weibo: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getScheme()>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.Weibo: void <init>()>" -> "<weibo4j.WeiboSupport: void <init>()>";
"<weibo4j.Weibo: void <init>()>" -> "<weibo4j.WeiboSupport: void <clinit>()>";
"<weibo4j.Weibo: void <init>()>" -> "<weibo4j.Weibo: void <clinit>()>";
"<weibo4j.Weibo: void <init>()>" -> "<java.util.Locale: void <clinit>()>";
"<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.WeiboSupport: void <clinit>()>" -> "<weibo4j.http.HttpClient: void <clinit>()>";
"<weibo4j.WeiboSupport: void <clinit>()>" -> "<weibo4j.http.HttpClient: void <init>()>";
"<weibo4j.Weibo: void <clinit>()>" -> "<weibo4j.WeiboSupport: void <clinit>()>";
"<weibo4j.Weibo: void <clinit>()>" -> "<weibo4j.Weibo$Device: void <init>(java.lang.String)>";
"<weibo4j.Weibo: void <clinit>()>" -> "<weibo4j.Weibo$Device: void <init>(java.lang.String)>";
"<weibo4j.Weibo: void <clinit>()>" -> "<weibo4j.Weibo$Device: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: void <clinit>()>" -> "<weibo4j.Configuration: void init()>";
"<weibo4j.Configuration: java.lang.String getScheme()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getScheme()>" -> "<weibo4j.Configuration: boolean useSSL()>";
"<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>" -> "<java.text.DateFormat: void <init>()>";
"<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.WeiboSupport: void <init>()>" -> "<weibo4j.WeiboSupport: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.HttpClient: void <clinit>()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.http.HttpClient: void <clinit>()>" -> "<java.lang.Double: double parseDouble(java.lang.String)>";
"<weibo4j.http.HttpClient: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<weibo4j.http.HttpClient: void <clinit>()>" -> "<weibo4j.Configuration: boolean getDebug()>";
"<weibo4j.http.HttpClient: void <clinit>()>" -> "<java.lang.Double: void <clinit>()>";
"<weibo4j.http.HttpClient: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getScheme()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getScheme()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getScheme()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getScheme()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: int getReadTimeout()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: int getConnectionTimeout()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getProxyPassword()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getProxyUser()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: int getProxyPort()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getProxyHost()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getPassword()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: java.lang.String getUser()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: int getRetryIntervalSecs()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.Configuration: int getRetryCount()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<weibo4j.Weibo$Device: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: void init()>" -> "<weibo4j.Configuration: boolean loadProperties(java.util.Properties,java.io.InputStream)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.Configuration: void init()>" -> "<weibo4j.Configuration: boolean loadProperties(java.util.Properties,java.io.InputStream)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.Configuration: void init()>" -> "<weibo4j.Configuration: boolean loadProperties(java.util.Properties,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.Configuration: void init()>" -> "<weibo4j.Configuration: boolean getBoolean(java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<weibo4j.Version: java.lang.String getVersion()>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: void <init>()>";
"<weibo4j.Configuration: void init()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: void init()>" -> "<java.io.File: void <clinit>()>";
"<weibo4j.Configuration: boolean useSSL()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: boolean useSSL()>" -> "<weibo4j.Configuration: boolean getBoolean(java.lang.String)>";
"<java.text.DateFormat: void <init>()>" -> "<java.text.Format: void <init>()>";
"<java.text.DateFormat: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.WeiboSupport: void <init>(java.lang.String,java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.WeiboSupport: void <init>(java.lang.String,java.lang.String)>" -> "<weibo4j.Configuration: boolean useSSL()>";
"<weibo4j.WeiboSupport: void <init>(java.lang.String,java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getSource()>";
"<weibo4j.WeiboSupport: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Double: double parseDouble(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: boolean getDebug()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: boolean getDebug()>" -> "<weibo4j.Configuration: boolean getBoolean(java.lang.String)>";
"<java.util.HashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: int getReadTimeout()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: int getReadTimeout()>" -> "<weibo4j.Configuration: int getIntProperty(java.lang.String)>";
"<weibo4j.Configuration: int getConnectionTimeout()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: int getConnectionTimeout()>" -> "<weibo4j.Configuration: int getIntProperty(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getProxyPassword()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getProxyPassword()>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getProxyUser()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getProxyUser()>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String)>";
"<weibo4j.Configuration: int getProxyPort()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: int getProxyPort()>" -> "<weibo4j.Configuration: int getIntProperty(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getProxyHost()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getProxyHost()>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getPassword()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getPassword()>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getUser()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getUser()>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String)>";
"<weibo4j.Configuration: int getRetryIntervalSecs()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: int getRetryIntervalSecs()>" -> "<weibo4j.Configuration: int getIntProperty(java.lang.String)>";
"<weibo4j.Configuration: int getRetryCount()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: int getRetryCount()>" -> "<weibo4j.Configuration: int getIntProperty(java.lang.String)>";
"<weibo4j.Configuration: boolean loadProperties(java.util.Properties,java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<weibo4j.Configuration: boolean loadProperties(java.util.Properties,java.lang.String)>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<weibo4j.Configuration: boolean loadProperties(java.util.Properties,java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<weibo4j.Configuration: boolean getBoolean(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: boolean getBoolean(java.lang.String)>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>";
"<weibo4j.Configuration: boolean getBoolean(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String)>";
"<weibo4j.Configuration: boolean getBoolean(java.lang.String)>" -> "<java.lang.Boolean: void <clinit>()>";
"<java.lang.Class: java.lang.Class forName(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Properties: void <init>()>" -> "<java.util.Hashtable: void <init>()>";
"<java.util.Properties: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.text.Format: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.text.Format: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getSource()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getSource()>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String)>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: int getIntProperty(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: int getIntProperty(java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<weibo4j.Configuration: int getIntProperty(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String)>";
"<weibo4j.Configuration: int getIntProperty(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.FileInputStream: void finalize()>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.InputStream: void <init>()>";
"<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Hashtable: void <init>()>" -> "<java.util.Dictionary: void <init>()>";
"<java.util.Hashtable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: int parseInt(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String replace(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<java.io.FileInputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Dictionary: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String replace(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String replace(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String replace(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String replace(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String replace(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.Configuration: java.lang.String replace(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String replace(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: boolean loadProperties(java.util.Properties,java.lang.String)>" -> "<java.io.File: boolean exists()>";
"<weibo4j.Configuration: boolean loadProperties(java.util.Properties,java.lang.String)>" -> "<java.io.File: boolean isFile()>";
"<java.io.File: boolean exists()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: boolean isFile()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>";
"<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: void init()>" -> "<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>";
"<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: boolean loadProperties(java.util.Properties,java.io.InputStream)>" -> "<java.util.Properties: void load(java.io.InputStream)>";
"<java.util.Properties: void load(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>" -> "<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
"<java.util.Properties: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: boolean loadProperties(java.util.Properties,java.lang.String)>" -> "<java.util.Properties: void load(java.io.InputStream)>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.Configuration: java.lang.String replace(java.lang.String)>" -> "<java.lang.String: int length()>";
"<java.lang.String: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String replace(java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String,int)>";
"<weibo4j.Configuration: java.lang.String replace(java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String,int)>";
"<weibo4j.Configuration: java.lang.String replace(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<weibo4j.Configuration: java.lang.String replace(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<weibo4j.Configuration: java.lang.String replace(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: int indexOf(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Configuration: java.lang.String replace(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.http.HttpClient: void setUserAgent(java.lang.String)>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.http.HttpClient: void setOAuthConsumer(java.lang.String,java.lang.String)>";
"<weibo4j.http.HttpClient: void <init>()>" -> "<weibo4j.http.HttpClient: void setRequestHeader(java.lang.String,java.lang.String)>";
"<weibo4j.http.HttpClient: void setUserAgent(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.http.HttpClient: void setUserAgent(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getUserAgent(java.lang.String)>";
"<weibo4j.http.HttpClient: void setOAuthConsumer(java.lang.String,java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.http.HttpClient: void setOAuthConsumer(java.lang.String,java.lang.String)>" -> "<weibo4j.http.OAuth: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.HttpClient: void setOAuthConsumer(java.lang.String,java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getOAuthConsumerSecret(java.lang.String)>";
"<weibo4j.http.HttpClient: void setOAuthConsumer(java.lang.String,java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getOAuthConsumerKey(java.lang.String)>";
"<weibo4j.http.HttpClient: void setOAuthConsumer(java.lang.String,java.lang.String)>" -> "<weibo4j.http.OAuth: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getUserAgent(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getUserAgent(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<weibo4j.Configuration: java.lang.String getOAuthConsumerSecret(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getOAuthConsumerSecret(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getOAuthConsumerKey(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getOAuthConsumerKey(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: void <clinit>()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.http.OAuth: void <clinit>()>" -> "<java.util.Random: void <init>()>";
"<weibo4j.http.OAuth: void <clinit>()>" -> "<weibo4j.Configuration: boolean getDebug()>";
"<weibo4j.http.OAuth: void <clinit>()>" -> "<weibo4j.http.PostParameter: void <init>(java.lang.String,java.lang.String)>";
"<java.util.Random: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Random: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.PostParameter: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<weibo4j.http.OAuth: void <init>(java.lang.String,java.lang.String)>" -> "<weibo4j.http.OAuth: void setConsumerKey(java.lang.String)>";
"<weibo4j.http.OAuth: void <init>(java.lang.String,java.lang.String)>" -> "<weibo4j.http.OAuth: void setConsumerSecret(java.lang.String)>";
"<weibo4j.http.HttpClient: void setRequestHeader(java.lang.String,java.lang.String)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.HttpClient: void setOAuthConsumer(java.lang.String,java.lang.String)>" -> "<java.lang.String: int length()>";
"<weibo4j.http.HttpClient: void setOAuthConsumer(java.lang.String,java.lang.String)>" -> "<java.lang.String: int length()>";
"<weibo4j.http.HttpClient: void setUserAgent(java.lang.String)>" -> "<weibo4j.http.HttpClient: void setRequestHeader(java.lang.String,java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<weibo4j.http.HttpClient: void setRequestTokenURL(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<weibo4j.http.HttpClient: void setAuthorizationURL(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<weibo4j.http.HttpClient: void setAccessTokenURL(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>";
"<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: void <init>()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<java.lang.Throwable: void printStackTrace()>";
"<java.lang.Throwable: void printStackTrace()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<weibo4j.Weibo: void setToken(java.lang.String,java.lang.String)>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<weibo4j.Weibo: weibo4j.User updateProfileImage(java.io.File)>";
"<weibo4j.Weibo: void setToken(java.lang.String,java.lang.String)>" -> "<weibo4j.Weibo: void <clinit>()>";
"<weibo4j.Weibo: void setToken(java.lang.String,java.lang.String)>" -> "<weibo4j.WeiboSupport: void <clinit>()>";
"<weibo4j.Weibo: weibo4j.User updateProfileImage(java.io.File)>" -> "<weibo4j.User: void <clinit>()>";
"<weibo4j.Weibo: weibo4j.User updateProfileImage(java.io.File)>" -> "<weibo4j.User: void <init>(weibo4j.org.json.JSONObject)>";
"<weibo4j.Weibo: weibo4j.User updateProfileImage(java.io.File)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.Weibo: weibo4j.User updateProfileImage(java.io.File)>" -> "<weibo4j.WeiboSupport: void <clinit>()>";
"<weibo4j.Weibo: weibo4j.User updateProfileImage(java.io.File)>" -> "<weibo4j.Weibo: void <clinit>()>";
"<weibo4j.Weibo: weibo4j.User updateProfileImage(java.io.File)>" -> "<weibo4j.WeiboResponse: void <clinit>()>";
"<weibo4j.User: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<weibo4j.User: void <clinit>()>" -> "<weibo4j.WeiboResponse: void <clinit>()>";
"<weibo4j.User: void <init>(weibo4j.org.json.JSONObject)>" -> "<weibo4j.WeiboResponse: void <init>()>";
"<weibo4j.User: void <init>(weibo4j.org.json.JSONObject)>" -> "<weibo4j.User: void init(weibo4j.org.json.JSONObject)>";
"<weibo4j.WeiboResponse: void <clinit>()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.WeiboResponse: void <clinit>()>" -> "<weibo4j.Configuration: boolean isDalvik()>";
"<weibo4j.WeiboResponse: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<weibo4j.WeiboResponse: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.User: void <clinit>()>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.WeiboException: void <init>(java.lang.String,java.lang.Exception)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.WeiboResponse: boolean getBoolean(java.lang.String,weibo4j.org.json.JSONObject)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.WeiboResponse: boolean getBoolean(java.lang.String,weibo4j.org.json.JSONObject)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.WeiboResponse: int getInt(java.lang.String,weibo4j.org.json.JSONObject)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.WeiboResponse: void <clinit>()>";
"<weibo4j.Configuration: boolean isDalvik()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.WeiboException: void <init>(java.lang.String,java.lang.Exception)>" -> "<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<weibo4j.WeiboResponse: void <clinit>()>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<weibo4j.WeiboException: void <init>(java.lang.String)>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<java.util.Locale: void <clinit>()>";
"<weibo4j.WeiboResponse: boolean getBoolean(java.lang.String,weibo4j.org.json.JSONObject)>" -> "<java.lang.Boolean: void <clinit>()>";
"<weibo4j.WeiboResponse: boolean getBoolean(java.lang.String,weibo4j.org.json.JSONObject)>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>";
"<weibo4j.WeiboResponse: int getInt(java.lang.String,weibo4j.org.json.JSONObject)>" -> "<java.lang.Integer: void <clinit>()>";
"<weibo4j.WeiboResponse: int getInt(java.lang.String,weibo4j.org.json.JSONObject)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.WeiboException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<weibo4j.User: java.lang.String getName()>";
"<weibo4j.WeiboResponse: int getInt(java.lang.String,weibo4j.org.json.JSONObject)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<weibo4j.WeiboResponse: int getInt(java.lang.String,weibo4j.org.json.JSONObject)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<weibo4j.WeiboResponse: boolean getBoolean(java.lang.String,weibo4j.org.json.JSONObject)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<weibo4j.WeiboResponse: boolean getBoolean(java.lang.String,weibo4j.org.json.JSONObject)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<java.text.DateFormat: java.util.Date parse(java.lang.String)>";
"<java.text.DateFormat: java.util.Date parse(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.WeiboResponse: java.util.Date parseDate(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.Weibo: weibo4j.User updateProfileImage(java.io.File)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: weibo4j.User updateProfileImage(java.io.File)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.Weibo: weibo4j.User updateProfileImage(java.io.File)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.Weibo: weibo4j.User updateProfileImage(java.io.File)>" -> "<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.PostMethod: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<weibo4j.WeiboException: void <init>(java.lang.String,java.lang.Exception,int)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<weibo4j.http.HttpClient: void log(java.lang.String)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.lang.System: long currentTimeMillis()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<weibo4j.http.Response: void <init>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<weibo4j.http.HttpClient: void log(java.lang.String)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.util.ArrayList: void <init>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void <init>(org.apache.commons.httpclient.methods.multipart.Part[],org.apache.commons.httpclient.params.HttpMethodParams)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.multipart.FilePart: void <init>(java.lang.String,java.lang.String,java.io.File,java.lang.String,java.lang.String)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<javax.activation.MimetypesFileTypeMap: void <init>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.multipart.StringPart: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.lang.System: long currentTimeMillis()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.HttpClient: void <init>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.PostMethod: void <init>(java.lang.String)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<weibo4j.http.HttpClient: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<weibo4j.WeiboSupport: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<weibo4j.Weibo: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<weibo4j.http.Response: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<weibo4j.http.HttpClient: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.multipart.FilePart: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.multipart.StringPart: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.lang.System: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.HttpClient: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: void <clinit>()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.methods.PostMethod: void <clinit>()>" -> "<org.apache.commons.httpclient.methods.PostMethod: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.methods.PostMethod: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: void <clinit>()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: void <clinit>()>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<weibo4j.WeiboException: void <init>(java.lang.String,java.lang.Exception,int)>" -> "<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.HttpClient: void log(java.lang.String)>" -> "<weibo4j.http.HttpClient: void <clinit>()>";
"<weibo4j.http.HttpClient: void log(java.lang.String)>" -> "<java.util.Date: void <init>()>";
"<weibo4j.http.HttpClient: void log(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.HttpClient: void log(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<weibo4j.http.Response: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<java.util.ArrayList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void <init>(org.apache.commons.httpclient.methods.multipart.Part[],org.apache.commons.httpclient.params.HttpMethodParams)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void <init>(org.apache.commons.httpclient.methods.multipart.Part[],org.apache.commons.httpclient.params.HttpMethodParams)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void <init>(org.apache.commons.httpclient.methods.multipart.Part[],org.apache.commons.httpclient.params.HttpMethodParams)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void <init>(java.lang.String,java.lang.String,java.io.File,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.methods.multipart.FilePartSource: void <init>(java.lang.String,java.io.File)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void <init>(java.lang.String,java.lang.String,java.io.File,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.methods.multipart.FilePart: void <init>(java.lang.String,org.apache.commons.httpclient.methods.multipart.PartSource,java.lang.String,java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<javax.activation.MimetypesFileTypeMap: java.lang.Class class$(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadFile(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadFile(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.util.Vector: void <init>(int)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<javax.activation.FileTypeMap: void <init>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<com.sun.activation.registries.MimeTypeFile: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.System: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.System: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.io.File: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.String: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.System: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.System: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.io.File: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.String: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.System: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.System: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void <init>(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.methods.multipart.StringPart: void <init>(java.lang.String,java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <init>()>" -> "<org.apache.commons.httpclient.params.HttpClientParams: void <clinit>()>";
"<org.apache.commons.httpclient.HttpClient: void <init>()>" -> "<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>";
"<org.apache.commons.httpclient.HttpClient: void <init>()>" -> "<org.apache.commons.httpclient.params.HttpClientParams: void <init>()>";
"<org.apache.commons.httpclient.HttpClient: void <init>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.HttpClient: void <init>()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.PostMethod: void <init>(java.lang.String)>" -> "<java.util.Vector: void <init>()>";
"<weibo4j.http.Response: void <clinit>()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.http.Response: void <clinit>()>" -> "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
"<weibo4j.http.Response: void <clinit>()>" -> "<weibo4j.http.Response$1: void <init>()>";
"<weibo4j.http.Response: void <clinit>()>" -> "<weibo4j.Configuration: boolean getDebug()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void <clinit>()>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <clinit>()>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void <clinit>()>" -> "<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <clinit>()>" -> "<java.lang.Boolean: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void <clinit>()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void <clinit>()>" -> "<org.apache.commons.httpclient.methods.multipart.FilePart: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void <clinit>()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void <clinit>()>" -> "<org.apache.commons.httpclient.methods.multipart.StringPart: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.security.Security: java.security.Provider[] getProviders()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<org.apache.commons.httpclient.HttpClient: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>";
"<org.apache.commons.httpclient.methods.PostMethod: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.methods.PostMethod: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>";
"<org.apache.commons.logging.LogFactory: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>";
"<org.apache.commons.logging.LogFactory: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>";
"<org.apache.commons.logging.LogFactory: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void initDiagnostics()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Date: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Date: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.FilePartSource: void <init>(java.lang.String,java.io.File)>" -> "<org.apache.commons.httpclient.methods.multipart.FilePartSource: void <init>(java.io.File)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void <init>(java.lang.String,org.apache.commons.httpclient.methods.multipart.PartSource,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.methods.multipart.PartBase: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void <init>(java.lang.String,org.apache.commons.httpclient.methods.multipart.PartSource,java.lang.String,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.SecuritySupport: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void pr(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void pr(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void pr(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void pr(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<com.sun.activation.registries.MimeTypeFile: void <init>(java.io.InputStream)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.SecuritySupport: javax.activation.SecuritySupport getInstance()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<com.sun.activation.registries.MimeTypeFile: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void pr(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void pr(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void pr(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void pr(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void pr(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<com.sun.activation.registries.MimeTypeFile: void <init>(java.io.InputStream)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport: javax.activation.SecuritySupport getInstance()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void pr(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport: javax.activation.SecuritySupport getInstance()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void pr(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void pr(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport: javax.activation.SecuritySupport getInstance()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport: javax.activation.SecuritySupport getInstance()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<com.sun.activation.registries.MimeTypeFile: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadFile(java.lang.String)>" -> "<com.sun.activation.registries.MimeTypeFile: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadFile(java.lang.String)>" -> "<com.sun.activation.registries.MimeTypeFile: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String valueOf(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: void <init>(int)>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.Vector: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<javax.activation.FileTypeMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.methods.multipart.PartBase: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.params.HttpClientParams: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.params.HttpClientParams: void <clinit>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.params.HttpClientParams: void <clinit>()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void <clinit>()>";
"<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>" -> "<org.apache.commons.httpclient.HttpState: void <clinit>()>";
"<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>" -> "<org.apache.commons.httpclient.SimpleHttpConnectionManager: void <init>()>";
"<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>" -> "<org.apache.commons.httpclient.HostConfiguration: void <init>()>";
"<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>" -> "<org.apache.commons.httpclient.HttpState: void <init>()>";
"<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>" -> "<org.apache.commons.httpclient.HttpClient: void <clinit>()>";
"<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>" -> "<org.apache.commons.httpclient.SimpleHttpConnectionManager: void <clinit>()>";
"<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>" -> "<org.apache.commons.httpclient.HostConfiguration: void <clinit>()>";
"<org.apache.commons.httpclient.params.HttpClientParams: void <init>()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void <init>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: void <init>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void <clinit>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void <clinit>()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <init>(java.lang.String)>";
"<java.util.Vector: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.Vector: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.Response$1: void <init>()>" -> "<java.lang.ThreadLocal: void <init>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpClientError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: java.lang.Class class$(java.lang.String)>";
"<java.lang.Boolean: boolean getBoolean(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.Security: java.security.Provider[] getProviders()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.io.BufferedReader: void <init>(java.io.Reader)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.io.InputStreamReader: void <init>(java.io.InputStream)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.io.BufferedReader: void <init>(java.io.Reader)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.Boolean: void <clinit>()>";
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>" -> "<java.lang.LinkageError: void <init>()>";
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>" -> "<java.util.Hashtable: void <init>()>";
"<org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<java.io.PrintStream: void <init>(java.io.OutputStream)>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.FilePartSource: void <init>(java.io.File)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.methods.multipart.FilePartSource: void <init>(java.io.File)>" -> "<java.io.FileNotFoundException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.FilePartSource: void <init>(java.io.File)>" -> "<java.io.FileNotFoundException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.PartBase: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <init>()>";
"<org.apache.commons.httpclient.methods.multipart.PartBase: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<javax.activation.SecuritySupport: void <clinit>()>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<javax.activation.SecuritySupport: void <clinit>()>" -> "<javax.activation.SecuritySupport: void <init>()>";
"<javax.activation.SecuritySupport: void <clinit>()>" -> "<javax.activation.SecuritySupport: void <init>()>";
"<javax.activation.SecuritySupport: void <clinit>()>" -> "<javax.activation.SecuritySupport12: void <init>()>";
"<javax.activation.MimetypesFileTypeMap: void pr(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.io.InputStream)>" -> "<java.lang.Object: void <init>()>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.io.InputStream)>" -> "<com.sun.activation.registries.MimeTypeFile: void parse(java.io.BufferedReader)>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.io.InputStream)>" -> "<java.io.BufferedReader: void <init>(java.io.Reader)>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.io.InputStream)>" -> "<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.io.InputStream)>" -> "<java.util.Hashtable: void <init>()>";
"<javax.activation.SecuritySupport: javax.activation.SecuritySupport getInstance()>" -> "<javax.activation.SecuritySupport: void <clinit>()>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.lang.String)>" -> "<com.sun.activation.registries.MimeTypeFile: void parse(java.io.BufferedReader)>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.lang.String)>" -> "<java.io.BufferedReader: void <init>(java.io.Reader)>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.lang.String)>" -> "<java.io.FileReader: void <init>(java.io.File)>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.lang.String)>" -> "<java.util.Hashtable: void <init>()>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HttpState: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.HttpState: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.HttpState: void <clinit>()>" -> "<org.apache.commons.httpclient.HttpState: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void <init>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void <init>()>" -> "<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void <init>()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HostConfiguration: void <init>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.HostConfiguration: void <init>()>" -> "<org.apache.commons.httpclient.params.HostParams: void <init>()>";
"<org.apache.commons.httpclient.HostConfiguration: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HttpState: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HttpState: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<org.apache.commons.httpclient.HttpState: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<org.apache.commons.httpclient.HttpState: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void <clinit>()>" -> "<org.apache.commons.httpclient.SimpleHttpConnectionManager: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.HostConfiguration: void <clinit>()>" -> "<org.apache.commons.httpclient.HostConfiguration: void <init>()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void <init>()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void <clinit>()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void <init>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <init>(org.apache.commons.httpclient.params.HttpParams)>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void <init>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: org.apache.commons.httpclient.params.HttpParams getDefaultParams()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void <init>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>";
"<java.lang.ThreadLocal: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ThreadLocal: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClientError: void <init>(java.lang.String)>" -> "<java.lang.Error: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.io.BufferedReader: void <init>(java.io.Reader)>" -> "<java.io.Reader: void <init>()>";
"<java.io.BufferedReader: void <init>(java.io.Reader)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream)>" -> "<java.io.Reader: void <init>()>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory$2: void <init>(java.lang.ClassLoader,java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>" -> "<java.io.Reader: void <init>()>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory$3: void <init>(java.lang.ClassLoader,java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>" -> "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.Double: double parseDouble(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.Double: double parseDouble(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.Double: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.Double: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>" -> "<java.lang.System: int identityHashCode(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()>" -> "<org.apache.commons.logging.LogFactory$1: void <init>()>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()>" -> "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
"<java.lang.LinkageError: void <init>()>" -> "<java.lang.Error: void <init>()>";
"<java.lang.LinkageError: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.PrintStream: void <init>(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>";
"<java.io.PrintStream: void <init>(java.io.OutputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>" -> "<java.io.FileOutputStream: void finalize()>";
"<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.FileNotFoundException: void <init>(java.lang.String)>" -> "<java.io.IOException: void <init>()>";
"<java.io.FileNotFoundException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<javax.activation.SecuritySupport: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<javax.activation.SecuritySupport12: void <init>()>" -> "<javax.activation.SecuritySupport: void <init>()>";
"<com.sun.activation.registries.MimeTypeFile: void parse(java.io.BufferedReader)>" -> "<java.lang.String: void <clinit>()>";
"<com.sun.activation.registries.MimeTypeFile: void parse(java.io.BufferedReader)>" -> "<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parse(java.io.BufferedReader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parse(java.io.BufferedReader)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<com.sun.activation.registries.MimeTypeFile: void parse(java.io.BufferedReader)>" -> "<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>";
"<java.io.FileReader: void <init>(java.io.File)>" -> "<java.io.InputStreamReader: void <init>(java.io.InputStream)>";
"<java.io.FileReader: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpState: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.HttpState: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void <init>()>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: void <init>()>";
"<org.apache.commons.httpclient.params.HostParams: void <init>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <init>()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void <init>(org.apache.commons.httpclient.params.HttpParams)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: org.apache.commons.httpclient.params.HttpParams getDefaultParams()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void <init>(java.lang.String,boolean,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.auth.AuthState: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.auth.AuthState: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderGroup: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderGroup: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderGroup: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<java.lang.Error: void <init>(java.lang.String)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.Reader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Reader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory$2: void <init>(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.logging.LogFactory$3: void <init>(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)>" -> "<org.apache.commons.logging.LogFactory$5: void <init>(java.net.URL)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)>" -> "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
"<org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory$4: void <init>(java.lang.ClassLoader,java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>" -> "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
"<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: int identityHashCode(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory$1: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Error: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.IOException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<com.sun.activation.registries.MimeTypeEntry: void <init>(java.lang.String,java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<com.sun.activation.registries.MimeTypeEntry: void <init>(java.lang.String,java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<com.sun.activation.registries.LineTokenizer: void <init>(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<com.sun.activation.registries.MimeTypeFile: void <clinit>()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<com.sun.activation.registries.MimeTypeFile: void <clinit>()>";
"<org.apache.commons.httpclient.params.HttpConnectionParams: void <init>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <init>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void <init>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void <init>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <init>(org.apache.commons.httpclient.params.HttpParams)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void <init>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: org.apache.commons.httpclient.params.HttpParams getDefaultParams()>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,boolean,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthState: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HeaderGroup: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HeaderGroup: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.Locale: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<org.apache.commons.httpclient.URI$LocaleToCharsetMap: java.lang.String getCharset(java.util.Locale)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.Locale: java.util.Locale getDefault()>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>";
"<org.apache.commons.logging.LogFactory$5: void <init>(java.net.URL)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.logging.LogFactory$4: void <init>(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<com.sun.activation.registries.MimeTypeEntry: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.util.StringTokenizer: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.util.StringTokenizer: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.sun.activation.registries.LineTokenizer: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<com.sun.activation.registries.LineTokenizer: void <init>(java.lang.String)>" -> "<java.util.Vector: void <init>()>";
"<java.util.BitSet: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<java.util.BitSet: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: java.lang.String getCharset(java.util.Locale)>" -> "<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>";
"<java.util.Locale: java.util.Locale getDefault()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: void <init>()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport12: java.lang.ClassLoader getContextClassLoader()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport12: java.net.URL[] getResources(java.lang.ClassLoader,java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport12: java.net.URL[] getSystemResources(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport12: java.io.InputStream openStream(java.net.URL)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport: java.lang.ClassLoader getContextClassLoader()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport: java.net.URL[] getResources(java.lang.ClassLoader,java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport: java.net.URL[] getSystemResources(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<javax.activation.SecuritySupport: java.io.InputStream openStream(java.net.URL)>";
"<javax.activation.SecuritySupport12: java.lang.ClassLoader getContextClassLoader()>" -> "<javax.activation.SecuritySupport12$1: void <init>()>";
"<javax.activation.SecuritySupport12: java.lang.ClassLoader getContextClassLoader()>" -> "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
"<javax.activation.SecuritySupport12: java.net.URL[] getResources(java.lang.ClassLoader,java.lang.String)>" -> "<javax.activation.SecuritySupport12$3: void <init>(java.lang.ClassLoader,java.lang.String)>";
"<javax.activation.SecuritySupport12: java.net.URL[] getResources(java.lang.ClassLoader,java.lang.String)>" -> "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
"<javax.activation.SecuritySupport12: java.net.URL[] getSystemResources(java.lang.String)>" -> "<javax.activation.SecuritySupport12$4: void <init>(java.lang.String)>";
"<javax.activation.SecuritySupport12: java.net.URL[] getSystemResources(java.lang.String)>" -> "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
"<javax.activation.SecuritySupport12: java.io.InputStream openStream(java.net.URL)>" -> "<javax.activation.SecuritySupport12$5: void <init>(java.net.URL)>";
"<javax.activation.SecuritySupport12: java.io.InputStream openStream(java.net.URL)>" -> "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>";
"<javax.activation.SecuritySupport12$1: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<javax.activation.SecuritySupport12$3: void <init>(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<javax.activation.SecuritySupport12$4: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<javax.activation.SecuritySupport12$5: void <init>(java.net.URL)>" -> "<java.lang.Object: void <init>()>";
"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<javax.activation.SecuritySupport12: java.io.InputStream openStream(java.net.URL)>" -> "<javax.activation.SecuritySupport12$5: java.lang.Object run()>";
"<javax.activation.SecuritySupport12: java.net.URL[] getSystemResources(java.lang.String)>" -> "<javax.activation.SecuritySupport12$4: java.lang.Object run()>";
"<javax.activation.SecuritySupport12$4: java.lang.Object run()>" -> "<java.util.Vector: void <init>()>";
"<javax.activation.SecuritySupport12$4: java.lang.Object run()>" -> "<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>";
"<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<javax.activation.SecuritySupport12$4: java.lang.Object run()>" -> "<java.util.Vector: int size()>";
"<javax.activation.SecuritySupport12$4: java.lang.Object run()>" -> "<java.util.Vector: int size()>";
"<javax.activation.SecuritySupport12$4: java.lang.Object run()>" -> "<java.util.Vector: void copyInto(java.lang.Object[])>";
"<javax.activation.SecuritySupport12$4: java.lang.Object run()>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<java.util.Vector: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: void copyInto(java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: void addElement(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<javax.activation.SecuritySupport12: java.net.URL[] getResources(java.lang.ClassLoader,java.lang.String)>" -> "<javax.activation.SecuritySupport12$3: java.lang.Object run()>";
"<javax.activation.SecuritySupport12$3: java.lang.Object run()>" -> "<java.util.Vector: void <init>()>";
"<javax.activation.SecuritySupport12$3: java.lang.Object run()>" -> "<java.util.Vector: int size()>";
"<javax.activation.SecuritySupport12$3: java.lang.Object run()>" -> "<java.util.Vector: int size()>";
"<javax.activation.SecuritySupport12$3: java.lang.Object run()>" -> "<java.util.Vector: void copyInto(java.lang.Object[])>";
"<javax.activation.SecuritySupport12$3: java.lang.Object run()>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<javax.activation.SecuritySupport12: java.lang.ClassLoader getContextClassLoader()>" -> "<javax.activation.SecuritySupport12$1: java.lang.Object run()>";
"<javax.activation.SecuritySupport12$1: java.lang.Object run()>" -> "<java.lang.Thread: java.lang.Thread currentThread()>";
"<javax.activation.SecuritySupport12$1: java.lang.Object run()>" -> "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>";
"<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.SecuritySupport12: java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<javax.activation.SecuritySupport: java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String)>";
"<javax.activation.SecuritySupport12: java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String)>" -> "<javax.activation.SecuritySupport12$2: void <init>(java.lang.Class,java.lang.String)>";
"<javax.activation.SecuritySupport12: java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String)>" -> "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>";
"<javax.activation.SecuritySupport12$2: void <init>(java.lang.Class,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<javax.activation.SecuritySupport12: java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String)>" -> "<javax.activation.SecuritySupport12$2: java.lang.Object run()>";
"<weibo4j.Weibo: weibo4j.User updateProfileImage(java.io.File)>" -> "<weibo4j.http.Response: weibo4j.org.json.JSONObject asJSONObject()>";
"<weibo4j.http.Response: weibo4j.org.json.JSONObject asJSONObject()>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.http.Response: weibo4j.org.json.JSONObject asJSONObject()>" -> "<weibo4j.WeiboException: void <init>(java.lang.String,java.lang.Exception)>";
"<weibo4j.http.Response: weibo4j.org.json.JSONObject asJSONObject()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.Response: weibo4j.org.json.JSONObject asJSONObject()>" -> "<weibo4j.org.json.JSONObject: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: void <clinit>()>" -> "<weibo4j.org.json.JSONObject$Null: void <init>(weibo4j.org.json.JSONObject$1)>";
"<weibo4j.org.json.JSONObject: void <init>(java.lang.String)>" -> "<weibo4j.org.json.JSONTokener: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: void <init>(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>";
"<weibo4j.org.json.JSONObject$Null: void <init>(weibo4j.org.json.JSONObject$1)>" -> "<weibo4j.org.json.JSONObject$Null: void <init>()>";
"<weibo4j.org.json.JSONTokener: void <init>(java.lang.String)>" -> "<java.io.StringReader: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: void <init>(java.lang.String)>" -> "<weibo4j.org.json.JSONTokener: void <init>(java.io.Reader)>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONObject: void <init>()>";
"<weibo4j.org.json.JSONObject$Null: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.StringReader: void <init>(java.lang.String)>" -> "<java.io.Reader: void <init>()>";
"<java.io.StringReader: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: void <init>(java.io.Reader)>" -> "<java.lang.Object: void <init>()>";
"<weibo4j.org.json.JSONTokener: void <init>(java.io.Reader)>" -> "<java.io.BufferedReader: void <init>(java.io.Reader)>";
"<weibo4j.org.json.JSONObject: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<weibo4j.org.json.JSONObject: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<weibo4j.org.json.JSONTokener: void <init>(java.io.Reader)>" -> "<java.io.BufferedReader: boolean markSupported()>";
"<java.io.BufferedReader: boolean markSupported()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: void <init>(java.io.Reader)>" -> "<java.io.StringReader: boolean markSupported()>";
"<java.io.StringReader: boolean markSupported()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: char nextClean()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: void back()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: char nextClean()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: void back()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: char nextClean()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: char next()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: void back()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: char nextClean()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: char nextClean()>";
"<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: void back()>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<java.lang.StringBuffer: void <init>()>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.org.json.JSONTokener: char next()>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.Throwable)>";
"<weibo4j.org.json.JSONException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Boolean: void <clinit>()>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Double: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Long: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Integer: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Integer: void <init>(int)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Integer: void <init>(int)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Double: void <clinit>()>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Long: void <clinit>()>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.Boolean: void <clinit>()>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<java.lang.Character: void <clinit>()>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<java.lang.Character: void <init>(char)>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONArray: void <init>()>";
"<weibo4j.org.json.JSONException: void <init>(java.lang.Throwable)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<java.lang.Double: void <init>(java.lang.String)>" -> "<java.lang.Number: void <init>()>";
"<java.lang.Double: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Long: void <init>(java.lang.String)>" -> "<java.lang.Number: void <init>()>";
"<java.lang.Long: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: void <init>(java.lang.String)>" -> "<java.lang.Number: void <init>()>";
"<java.lang.Integer: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: void <init>(int)>" -> "<java.lang.Number: void <init>()>";
"<java.lang.Integer: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: int parseInt(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Character: void <init>(char)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Character: void <init>(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONArray: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<weibo4j.org.json.JSONArray: void <init>()>" -> "<java.util.ArrayList: void <init>()>";
"<java.lang.Number: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Number: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<java.lang.String: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONObject: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONArray: java.lang.String toString()>";
"<java.lang.String: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String toString()>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.org.json.JSONObject: java.lang.String toString()>" -> "<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>";
"<weibo4j.org.json.JSONObject: java.lang.String toString()>" -> "<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String toString()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONArray: java.lang.String toString()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<weibo4j.org.json.JSONArray: void <init>(java.lang.Object)>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<weibo4j.org.json.JSONArray: void <init>(java.util.Collection)>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<weibo4j.org.json.JSONObject: void <init>(java.util.Map)>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<weibo4j.org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.Throwable)>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<weibo4j.org.json.JSONArray: void <init>(java.lang.Object)>" -> "<weibo4j.org.json.JSONArray: void <init>()>";
"<weibo4j.org.json.JSONArray: void <init>(java.lang.Object)>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONArray: void <init>(java.lang.Object)>" -> "<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>";
"<weibo4j.org.json.JSONArray: void <init>(java.lang.Object)>" -> "<java.lang.reflect.Array: int getLength(java.lang.Object)>";
"<weibo4j.org.json.JSONArray: void <init>(java.util.Collection)>" -> "<java.lang.Object: void <init>()>";
"<weibo4j.org.json.JSONArray: void <init>(java.util.Collection)>" -> "<java.util.ArrayList: void <init>(java.util.Collection)>";
"<weibo4j.org.json.JSONArray: void <init>(java.util.Collection)>" -> "<java.util.ArrayList: void <init>()>";
"<weibo4j.org.json.JSONObject: void <init>(java.util.Map)>" -> "<java.lang.Object: void <init>()>";
"<weibo4j.org.json.JSONObject: void <init>(java.util.Map)>" -> "<java.util.HashMap: void <init>()>";
"<weibo4j.org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>" -> "<weibo4j.org.json.JSONObject: void testValidity(java.lang.Object)>";
"<weibo4j.org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.String)>";
"<java.lang.Integer: java.lang.String toHexString(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.reflect.Array: int getLength(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: void <init>(java.util.Collection)>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: void testValidity(java.lang.Object)>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: void testValidity(java.lang.Object)>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONArray: void <init>(java.lang.Object)>" -> "<weibo4j.org.json.JSONArray: weibo4j.org.json.JSONArray put(java.lang.Object)>";
"<weibo4j.org.json.JSONArray: weibo4j.org.json.JSONArray put(java.lang.Object)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.String: int length()>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.String: int length()>";
"<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<weibo4j.org.json.JSONArray: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<weibo4j.org.json.JSONArray: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<weibo4j.org.json.JSONObject: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONArray: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<weibo4j.org.json.JSONArray: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONArray: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
"<weibo4j.org.json.JSONArray: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.org.json.JSONArray: java.lang.String toString()>" -> "<weibo4j.org.json.JSONArray: java.lang.String join(java.lang.String)>";
"<weibo4j.org.json.JSONArray: java.lang.String join(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.org.json.JSONArray: java.lang.String join(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>";
"<weibo4j.org.json.JSONArray: java.lang.String join(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<weibo4j.org.json.JSONArray: java.lang.String join(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.org.json.JSONArray: java.lang.String join(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.org.json.JSONArray: java.lang.String join(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<weibo4j.org.json.JSONArray: java.lang.String join(java.lang.String)>" -> "<weibo4j.org.json.JSONArray: int length()>";
"<weibo4j.org.json.JSONArray: int length()>" -> "<java.util.ArrayList: int size()>";
"<java.util.ArrayList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONArray: java.lang.String join(java.lang.String)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<java.util.ArrayList: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String toString()>" -> "<java.lang.StringBuffer: int length()>";
"<weibo4j.org.json.JSONObject: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONObject: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONObject: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONObject: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String toString()>" -> "<weibo4j.org.json.JSONObject: java.util.Iterator keys()>";
"<weibo4j.org.json.JSONObject: java.util.Iterator keys()>" -> "<java.util.HashMap: java.util.Set keySet()>";
"<java.util.HashMap: java.util.Set keySet()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String toString()>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<weibo4j.org.json.JSONException: void <init>(java.lang.Throwable)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<java.lang.Throwable: java.lang.String getMessage()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.String: int length()>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<weibo4j.org.json.JSONObject: java.lang.Object stringToValue(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<java.lang.String: int indexOf(int)>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<java.lang.String: java.lang.String trim()>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: int indexOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String trim()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONObject$Null: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<java.lang.Integer: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<java.lang.Long: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<java.lang.Double: java.lang.String toString()>";
"<java.lang.Integer: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Long: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Double: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<weibo4j.org.json.JSONTokener: char nextClean()>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<weibo4j.org.json.JSONTokener: char next()>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<weibo4j.org.json.JSONTokener: void back()>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<weibo4j.org.json.JSONTokener: void back()>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<weibo4j.org.json.JSONTokener: void back()>";
"<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>" -> "<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.Integer: void <clinit>()>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.StringBuffer: void <init>()>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.Integer: void <clinit>()>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<weibo4j.org.json.JSONTokener: char next()>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<weibo4j.org.json.JSONTokener: char next()>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<weibo4j.org.json.JSONTokener: java.lang.String next(int)>";
"<weibo4j.org.json.JSONTokener: java.lang.String nextString(char)>" -> "<weibo4j.org.json.JSONTokener: java.lang.String next(int)>";
"<weibo4j.org.json.JSONTokener: java.lang.String next(int)>" -> "<java.lang.String: void <clinit>()>";
"<weibo4j.org.json.JSONTokener: java.lang.String next(int)>" -> "<java.lang.String: void <init>(char[])>";
"<weibo4j.org.json.JSONTokener: java.lang.String next(int)>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.Throwable)>";
"<java.lang.String: void <init>(char[])>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(char[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: java.lang.String next(int)>" -> "<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: char nextClean()>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: char nextClean()>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: void back()>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: char nextClean()>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: void back()>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: char nextClean()>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: void back()>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: java.lang.Object nextValue()>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: char nextClean()>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: void back()>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.org.json.JSONTokener: weibo4j.org.json.JSONException syntaxError(java.lang.String)>" -> "<weibo4j.org.json.JSONTokener: java.lang.String toString()>";
"<weibo4j.org.json.JSONTokener: java.lang.String toString()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.org.json.JSONTokener: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<weibo4j.org.json.JSONTokener: java.lang.String toString()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONTokener: char nextClean()>" -> "<weibo4j.org.json.JSONTokener: char next()>";
"<weibo4j.org.json.JSONObject: void <init>(weibo4j.org.json.JSONTokener)>" -> "<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject putOnce(java.lang.String,java.lang.Object)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject putOnce(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject putOnce(java.lang.String,java.lang.Object)>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject putOnce(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject putOnce(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject putOnce(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject putOnce(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject putOnce(java.lang.String,java.lang.Object)>" -> "<weibo4j.org.json.JSONObject: java.lang.Object opt(java.lang.String)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject putOnce(java.lang.String,java.lang.Object)>" -> "<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject put(java.lang.String,java.lang.Object)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject put(java.lang.String,java.lang.Object)>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject put(java.lang.String,java.lang.Object)>" -> "<weibo4j.org.json.JSONObject: void testValidity(java.lang.Object)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject put(java.lang.String,java.lang.Object)>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject put(java.lang.String,java.lang.Object)>" -> "<weibo4j.org.json.JSONObject: java.lang.Object remove(java.lang.String)>";
"<weibo4j.org.json.JSONObject: void testValidity(java.lang.Object)>" -> "<java.lang.Double: boolean isInfinite()>";
"<weibo4j.org.json.JSONObject: void testValidity(java.lang.Object)>" -> "<java.lang.Double: boolean isNaN()>";
"<java.lang.Double: boolean isInfinite()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Double: boolean isNaN()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.Response: weibo4j.org.json.JSONObject asJSONObject()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.Response: weibo4j.org.json.JSONObject asJSONObject()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.Response: weibo4j.org.json.JSONObject asJSONObject()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.Response: weibo4j.org.json.JSONObject asJSONObject()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.http.Response: weibo4j.org.json.JSONObject asJSONObject()>" -> "<weibo4j.http.Response: java.lang.String asString()>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<weibo4j.WeiboException: void <init>(java.lang.String,java.lang.Exception)>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<weibo4j.http.Response: void log(java.lang.String)>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<weibo4j.http.Response: java.lang.String unescape(java.lang.String)>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<weibo4j.Configuration: boolean isDalvik()>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<weibo4j.WeiboException: void <init>(java.lang.String,java.lang.Exception)>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<java.lang.StringBuffer: void <init>()>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<java.io.BufferedReader: void <init>(java.io.Reader)>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<weibo4j.http.Response: void <clinit>()>";
"<weibo4j.http.Response: void log(java.lang.String)>" -> "<weibo4j.http.Response: void <clinit>()>";
"<weibo4j.http.Response: void log(java.lang.String)>" -> "<java.util.Date: void <init>()>";
"<weibo4j.http.Response: void log(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.Response: void log(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<weibo4j.http.Response: java.lang.String unescape(java.lang.String)>" -> "<weibo4j.http.Response: void <clinit>()>";
"<weibo4j.http.Response: java.lang.String unescape(java.lang.String)>" -> "<java.lang.Character: java.lang.String toString(char)>";
"<weibo4j.http.Response: java.lang.String unescape(java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<weibo4j.http.Response: java.lang.String unescape(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<weibo4j.http.Response: java.lang.String unescape(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<weibo4j.http.Response: java.lang.String unescape(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<java.lang.Character: java.lang.String toString(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.Response: java.lang.String unescape(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<weibo4j.http.Response: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.Response: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<weibo4j.http.Response: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.Response: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.Response: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<java.io.BufferedReader: java.lang.String readLine()>";
"<java.io.BufferedReader: java.lang.String readLine()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.Response: java.lang.String asString()>" -> "<weibo4j.http.Response: java.io.InputStream asStream()>";
"<weibo4j.http.Response: java.io.InputStream asStream()>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: void <clinit>()>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: java.lang.String getCharset(java.util.Locale)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.apache.commons.httpclient.URI$LocaleToCharsetMap: java.lang.String getCharset(java.util.Locale)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void andNot(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void andNot(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void andNot(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void andNot(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void or(java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void <clinit>()>" -> "<java.util.BitSet: void clear(int)>";
"<java.util.BitSet: void set(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.BitSet: void or(java.util.BitSet)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.BitSet: void clear(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.BitSet: void andNot(java.util.BitSet)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URIException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URIException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URIException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[])>";
"<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>" -> "<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>";
"<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>" -> "<org.apache.commons.codec.net.URLCodec: void <clinit>()>";
"<org.apache.commons.httpclient.URIException: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[])>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[])>" -> "<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[],int,int)>";
"<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>" -> "<org.apache.commons.codec.net.URLCodec: void <clinit>()>";
"<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>" -> "<java.lang.Character: char toUpperCase(char)>";
"<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>" -> "<java.lang.Character: char forDigit(int,int)>";
"<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>" -> "<java.lang.Character: char toUpperCase(char)>";
"<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>" -> "<java.lang.Character: char forDigit(int,int)>";
"<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>" -> "<java.io.ByteArrayOutputStream: void <init>()>";
"<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>" -> "<java.lang.Character: void <clinit>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.codec.net.URLCodec: void <clinit>()>" -> "<java.util.BitSet: void <init>(int)>";
"<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[],int,int)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[],int,int)>" -> "<org.apache.commons.httpclient.HttpClientError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[],int,int)>" -> "<java.lang.String: void <init>(byte[],int,int,java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[],int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<java.lang.Character: char toUpperCase(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Character: char forDigit(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.ByteArrayOutputStream: void <init>()>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.ByteArrayOutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: void <init>(byte[],int,int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[],int,int,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.codec.net.URLCodec: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.codec.net.URLCodec: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.codec.net.URLCodec: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.codec.net.URLCodec: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.codec.net.URLCodec: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.codec.net.URLCodec: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.codec.net.URLCodec: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.codec.net.URLCodec: void <clinit>()>" -> "<java.util.BitSet: void set(int)>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>" -> "<java.io.ByteArrayOutputStream: void write(int)>";
"<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>" -> "<java.io.ByteArrayOutputStream: void write(int)>";
"<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>" -> "<java.io.ByteArrayOutputStream: void write(int)>";
"<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>" -> "<java.io.ByteArrayOutputStream: void write(int)>";
"<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<java.io.ByteArrayOutputStream: void write(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.ByteArrayOutputStream: byte[] toByteArray()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>" -> "<java.util.BitSet: boolean get(int)>";
"<java.util.BitSet: boolean get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>" -> "<java.lang.String: byte[] getBytes()>";
"<java.lang.String: byte[] getBytes(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: byte[] getBytes()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: char[] toCharArray()>";
"<java.lang.String: java.lang.String toLowerCase()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: int indexOf(int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: int indexOf(int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: int indexOf(int,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: boolean startsWith(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: int indexOf(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: int indexFirstOf(java.lang.String,java.lang.String,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: int indexFirstOf(java.lang.String,java.lang.String,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: int indexFirstOf(java.lang.String,java.lang.String,int)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: boolean prevalidate(java.lang.String,java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void setRawPath(char[])>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: java.lang.String getProtocolCharset()>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: boolean prevalidate(java.lang.String,java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void setURI()>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URIException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: java.lang.String getProtocolCharset()>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void setURI()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>";
"<org.apache.commons.httpclient.URI: void setURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.URI: void setURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>";
"<org.apache.commons.httpclient.URI: void setURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>";
"<org.apache.commons.httpclient.URI: void setURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.URI: void setURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>";
"<org.apache.commons.httpclient.URI: void setURI()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.URI: void setURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.String: int indexOf(int)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void setURI()>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: java.lang.String getProtocolCharset()>";
"<org.apache.commons.httpclient.URI: void setPath(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void setURI()>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<java.util.BitSet: boolean get(int)>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URI: void setURI()>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URI: char[] removeFragmentIdentifier(char[])>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URI: void setURI()>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URI: int indexFirstOf(char[],char)>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],int,int,java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],int,int,java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],int,int,java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void setRawPath(char[])>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],int,int,java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: char[] removeFragmentIdentifier(char[])>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.URI: char[] removeFragmentIdentifier(char[])>" -> "<java.lang.String: void <init>(char[])>";
"<org.apache.commons.httpclient.URI: char[] removeFragmentIdentifier(char[])>" -> "<java.lang.String: void <init>(char[])>";
"<org.apache.commons.httpclient.URI: boolean validate(char[],int,int,java.util.BitSet)>" -> "<java.util.BitSet: boolean get(int)>";
"<org.apache.commons.httpclient.URI: int indexFirstOf(char[],char)>" -> "<org.apache.commons.httpclient.URI: int indexFirstOf(char[],char,int)>";
"<org.apache.commons.httpclient.URI: char[] removeFragmentIdentifier(char[])>" -> "<java.lang.String: int indexOf(int)>";
"<org.apache.commons.httpclient.URI: char[] removeFragmentIdentifier(char[])>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: boolean prevalidate(java.lang.String,java.util.BitSet)>" -> "<java.util.BitSet: boolean get(int)>";
"<org.apache.commons.httpclient.URI: boolean prevalidate(java.lang.String,java.util.BitSet)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: int indexOf(int)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: int indexOf(int,int)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: int indexOf(int,int)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: int indexOf(int,int)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: java.lang.String getProtocolCharset()>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void parseAuthority(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: int indexFirstOf(java.lang.String,java.lang.String,int)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: int indexFirstOf(java.lang.String,java.lang.String,int)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: int indexFirstOf(java.lang.String,java.lang.String,int)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: int indexFirstOf(java.lang.String,java.lang.String,int)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: int indexFirstOf(java.lang.String,java.lang.String,int)>" -> "<java.lang.String: int indexOf(int,int)>";
"<org.apache.commons.httpclient.URI: int indexFirstOf(java.lang.String,java.lang.String,int)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: int indexFirstOf(java.lang.String,java.lang.String,int)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: boolean validate(char[],java.util.BitSet)>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],int,int,java.util.BitSet)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>";
"<com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<java.util.StringTokenizer: boolean hasMoreTokens()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.StringTokenizer: java.lang.String nextToken()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.util.StringTokenizer: int countTokens()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<java.util.StringTokenizer: int countTokens()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<com.sun.activation.registries.LineTokenizer: boolean hasMoreTokens()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<com.sun.activation.registries.LineTokenizer: boolean hasMoreTokens()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<com.sun.activation.registries.LineTokenizer: boolean hasMoreTokens()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>";
"<com.sun.activation.registries.LineTokenizer: boolean hasMoreTokens()>" -> "<com.sun.activation.registries.LineTokenizer: void skipWhiteSpace()>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.lang.Character: void <clinit>()>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.lang.StringBuffer: void <init>()>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.util.NoSuchElementException: void <init>()>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<com.sun.activation.registries.LineTokenizer: void skipWhiteSpace()>";
"<com.sun.activation.registries.LineTokenizer: void skipWhiteSpace()>" -> "<java.lang.Character: void <clinit>()>";
"<com.sun.activation.registries.LineTokenizer: void skipWhiteSpace()>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<java.lang.Character: boolean isWhitespace(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.NoSuchElementException: void <init>()>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.util.NoSuchElementException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.lang.String: char charAt(int)>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.lang.String: char charAt(int)>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.lang.String: char charAt(int)>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.lang.String: int indexOf(int)>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.lang.String: int indexOf(int)>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.lang.String: char charAt(int)>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.util.Vector: int size()>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.util.Vector: java.lang.Object elementAt(int)>";
"<com.sun.activation.registries.LineTokenizer: java.lang.String nextToken()>" -> "<java.util.Vector: void removeElementAt(int)>";
"<java.util.Vector: java.lang.Object elementAt(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Vector: void removeElementAt(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.sun.activation.registries.LineTokenizer: boolean hasMoreTokens()>" -> "<java.util.Vector: int size()>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory$4: java.lang.Object run()>";
"<org.apache.commons.logging.LogFactory$4: java.lang.Object run()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory$4: java.lang.Object run()>" -> "<org.apache.commons.logging.LogFactory: void access$0(java.lang.String)>";
"<org.apache.commons.logging.LogFactory$4: java.lang.Object run()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory$4: java.lang.Object run()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory$4: java.lang.Object run()>" -> "<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void access$0(java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: void access$0(java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory$4: java.lang.Object run()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory$4: java.lang.Object run()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory$4: java.lang.Object run()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory$4: java.lang.Object run()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory$4: java.lang.Object run()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)>" -> "<org.apache.commons.logging.LogFactory$5: java.lang.Object run()>";
"<org.apache.commons.logging.LogFactory$5: java.lang.Object run()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory$5: java.lang.Object run()>" -> "<org.apache.commons.logging.LogFactory: void access$0(java.lang.String)>";
"<org.apache.commons.logging.LogFactory$5: java.lang.Object run()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory$5: java.lang.Object run()>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory$5: java.lang.Object run()>" -> "<java.util.Properties: void <init>()>";
"<org.apache.commons.logging.LogFactory$5: java.lang.Object run()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory$5: java.lang.Object run()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory$5: java.lang.Object run()>" -> "<java.util.Properties: void load(java.io.InputStream)>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getUriCharset()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getUriCharset()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: org.apache.commons.httpclient.params.HttpParams getDefaultParams()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams getDefaultParams()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams getDefaultParams()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.HttpClientParams: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.util.Arrays: java.util.List asList(java.lang.Object[])>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.util.ArrayList: void <init>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: void <init>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.HttpClientParams: void <init>(org.apache.commons.httpclient.params.HttpParams)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.Boolean: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.Boolean: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.HttpVersion: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void <clinit>()>";
"<java.util.Arrays: java.util.List asList(java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: void <init>()>" -> "<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: void <init>(int,boolean)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.params.HttpClientParams: void <init>(org.apache.commons.httpclient.params.HttpParams)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void <init>(org.apache.commons.httpclient.params.HttpParams)>";
"<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: void <clinit>()>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: void <clinit>()>" -> "<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>";
"<org.apache.commons.httpclient.HttpVersion: void <clinit>()>" -> "<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>";
"<org.apache.commons.httpclient.HttpVersion: void <clinit>()>" -> "<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>";
"<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: void <init>(int,boolean)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void <init>(org.apache.commons.httpclient.params.HttpParams)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <init>(org.apache.commons.httpclient.params.HttpParams)>";
"<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<java.util.ArrayList: boolean addAll(java.util.Collection)>";
"<java.util.ArrayList: boolean addAll(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void setVersion(org.apache.commons.httpclient.HttpVersion)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.HttpClientParams: void setConnectionManagerClass(java.lang.Class)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void setCookiePolicy(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void setHttpElementCharset(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void setContentCharset(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void setCookiePolicy(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void setCookiePolicy(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParamsFactory: org.apache.commons.httpclient.params.HttpParams createParams()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void setCookiePolicy(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>" -> "<java.util.HashMap: void <init>()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void setContentCharset(java.lang.String)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void setHttpElementCharset(java.lang.String)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void setCookiePolicy(java.lang.String)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>";
"<org.apache.commons.httpclient.params.HttpClientParams: void setConnectionManagerClass(java.lang.Class)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>";
"<org.apache.commons.httpclient.params.HttpMethodParams: void setVersion(org.apache.commons.httpclient.HttpVersion)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.sun.activation.registries.MimeTypeFile: void parse(java.io.BufferedReader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parse(java.io.BufferedReader)>" -> "<java.io.BufferedReader: java.lang.String readLine()>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()>" -> "<org.apache.commons.logging.LogFactory$1: java.lang.Object run()>";
"<org.apache.commons.logging.LogFactory$1: java.lang.Object run()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory$1: java.lang.Object run()>" -> "<org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>" -> "<org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>" -> "<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>" -> "<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>" -> "<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>" -> "<org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>" -> "<java.lang.Thread: java.lang.Thread currentThread()>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>" -> "<org.apache.commons.logging.LogFactory$3: java.lang.Object run()>";
"<org.apache.commons.logging.LogFactory$3: java.lang.Object run()>" -> "<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>";
"<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory$2: java.lang.Object run()>";
"<org.apache.commons.logging.LogFactory$2: java.lang.Object run()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory$2: java.lang.Object run()>" -> "<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.ClassCastException: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>" -> "<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>";
"<java.lang.ClassCastException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.ClassCastException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>" -> "<java.lang.Throwable: java.lang.String toString()>";
"<java.lang.Throwable: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.lang.String)>" -> "<java.io.InputStreamReader: void close()>";
"<com.sun.activation.registries.MimeTypeFile: void <init>(java.lang.String)>" -> "<java.io.InputStreamReader: void close()>";
"<java.io.InputStreamReader: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.sun.activation.registries.MimeTypeFile: void parseEntry(java.lang.String)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: void initDiagnostics()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.io.BufferedReader: java.lang.String readLine()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.io.BufferedReader: void close()>";
"<java.io.BufferedReader: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>" -> "<org.apache.commons.httpclient.params.HttpClientParams: java.lang.Class getConnectionManagerClass()>";
"<org.apache.commons.httpclient.params.HttpClientParams: java.lang.Class getConnectionManagerClass()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)>" -> "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)>" -> "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>" -> "<java.io.PrintStream: void print(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>" -> "<java.io.PrintStream: void println(java.lang.String)>";
"<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>" -> "<java.io.PrintStream: void flush()>";
"<java.io.PrintStream: void print(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.PrintStream: void println(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.PrintStream: void flush()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(double)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <clinit>()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(double)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void setFollowRedirects(boolean)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void setFollowRedirects(boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void setFollowRedirects(boolean)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setFollowRedirects(boolean)>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setURI(org.apache.commons.httpclient.URI)>";
"<org.apache.commons.httpclient.HttpMethodBase: void setURI(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.HttpHost: void <init>(org.apache.commons.httpclient.URI)>";
"<org.apache.commons.httpclient.HttpHost: void <init>(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.protocol.Protocol: void <clinit>()>";
"<org.apache.commons.httpclient.HttpHost: void <init>(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.HttpHost: void <init>(java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>";
"<org.apache.commons.httpclient.HttpHost: void <init>(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.Protocol: void <clinit>()>" -> "<java.util.Collections: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.Protocol: void <clinit>()>" -> "<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>";
"<org.apache.commons.httpclient.protocol.Protocol: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<org.apache.commons.httpclient.HttpHost: void <init>(java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HttpHost: void <init>(java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpHost: void <init>(java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.Protocol: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.Protocol: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.Protocol: void registerProtocol(java.lang.String,org.apache.commons.httpclient.protocol.Protocol)>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory,int)>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory getSocketFactory()>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.Protocol: void registerProtocol(java.lang.String,org.apache.commons.httpclient.protocol.Protocol)>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.ProtocolSocketFactory,int)>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory getSocketFactory()>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.Protocol: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.Protocol: void registerProtocol(java.lang.String,org.apache.commons.httpclient.protocol.Protocol)>" -> "<org.apache.commons.httpclient.protocol.Protocol: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.Protocol: void registerProtocol(java.lang.String,org.apache.commons.httpclient.protocol.Protocol)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.Protocol: void registerProtocol(java.lang.String,org.apache.commons.httpclient.protocol.Protocol)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory,int)>" -> "<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.ProtocolSocketFactory,int)>";
"<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory getSocketFactory()>" -> "<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.ProtocolSocketFactory,int)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.ProtocolSocketFactory,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.ProtocolSocketFactory,int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.ProtocolSocketFactory,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.ProtocolSocketFactory,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory getSocketFactory()>" -> "<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: void <clinit>()>" -> "<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: void <init>()>";
"<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: void <clinit>()>" -> "<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: void <init>()>";
"<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.ProtocolSocketFactory,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.ProtocolSocketFactory,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.ProtocolSocketFactory,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpHost: void <init>(java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>" -> "<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>";
"<org.apache.commons.httpclient.HttpMethodBase: void setURI(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: boolean isAbsoluteURI()>";
"<org.apache.commons.httpclient.HttpMethodBase: void setURI(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: java.lang.String getPath()>";
"<org.apache.commons.httpclient.HttpMethodBase: void setURI(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: java.lang.String getEscapedQuery()>";
"<org.apache.commons.httpclient.HttpMethodBase: void setURI(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: java.lang.String getEscapedPath()>";
"<org.apache.commons.httpclient.URI: java.lang.String getPath()>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: java.lang.String getPath()>" -> "<org.apache.commons.httpclient.URI: java.lang.String decode(char[],java.lang.String)>";
"<org.apache.commons.httpclient.URI: java.lang.String getEscapedQuery()>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.URI: java.lang.String getEscapedQuery()>" -> "<java.lang.String: void <init>(char[])>";
"<org.apache.commons.httpclient.URI: java.lang.String getEscapedPath()>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.URI: java.lang.String getEscapedPath()>" -> "<java.lang.String: void <init>(char[])>";
"<org.apache.commons.httpclient.URI: java.lang.String decode(char[],java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.URI: java.lang.String decode(char[],java.lang.String)>" -> "<org.apache.commons.httpclient.URI: java.lang.String decode(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.URI: java.lang.String decode(char[],java.lang.String)>" -> "<java.lang.String: void <init>(char[])>";
"<org.apache.commons.httpclient.URI: java.lang.String decode(char[],java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: java.lang.String decode(char[],java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: java.lang.String decode(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.URI: java.lang.String decode(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.URIException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: java.lang.String decode(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],java.lang.String)>";
"<org.apache.commons.httpclient.URI: java.lang.String decode(java.lang.String,java.lang.String)>" -> "<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>";
"<org.apache.commons.httpclient.URI: java.lang.String decode(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.URI: java.lang.String decode(java.lang.String,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: java.lang.String decode(java.lang.String,java.lang.String)>" -> "<org.apache.commons.codec.net.URLCodec: void <clinit>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>";
"<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>" -> "<java.lang.Character: void <clinit>()>";
"<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>" -> "<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>";
"<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>" -> "<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>";
"<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>" -> "<java.lang.Character: int digit(char,int)>";
"<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>" -> "<java.lang.Character: int digit(char,int)>";
"<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>" -> "<java.io.ByteArrayOutputStream: void <init>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.String: void <init>(byte[],int,int)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.String: void <init>(byte[],int,int,java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<java.lang.Character: int digit(char,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: void <init>(byte[],int,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>" -> "<java.io.ByteArrayOutputStream: void write(int)>";
"<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>" -> "<java.io.ByteArrayOutputStream: void write(int)>";
"<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>" -> "<java.io.ByteArrayOutputStream: void write(int)>";
"<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<org.apache.commons.httpclient.URI: java.lang.String getEscapedPath()>" -> "<org.apache.commons.httpclient.URI: char[] getRawPath()>";
"<org.apache.commons.httpclient.URI: java.lang.String getPath()>" -> "<org.apache.commons.httpclient.URI: char[] getRawPath()>";
"<org.apache.commons.httpclient.URI: java.lang.String getPath()>" -> "<org.apache.commons.httpclient.URI: java.lang.String getProtocolCharset()>";
"<org.apache.commons.httpclient.HttpHost: void <init>(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpHost: void <init>(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: int getPort()>";
"<org.apache.commons.httpclient.HttpHost: void <init>(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: java.lang.String getScheme()>";
"<org.apache.commons.httpclient.URI: java.lang.String getHost()>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: java.lang.String getHost()>" -> "<org.apache.commons.httpclient.URI: java.lang.String decode(char[],java.lang.String)>";
"<org.apache.commons.httpclient.URI: java.lang.String getScheme()>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.URI: java.lang.String getScheme()>" -> "<java.lang.String: void <init>(char[])>";
"<org.apache.commons.httpclient.URI: java.lang.String getHost()>" -> "<org.apache.commons.httpclient.URI: java.lang.String getProtocolCharset()>";
"<org.apache.commons.httpclient.HttpMethodBase: void setURI(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setPath(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void setURI(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setQueryString(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>" -> "<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()>";
"<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.util.Vector: void addElement(java.lang.Object)>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.util.Vector: int size()>";
"<javax.activation.MimetypesFileTypeMap: void <init>()>" -> "<java.util.Vector: void copyInto(java.lang.Object[])>";
"<javax.activation.MimetypesFileTypeMap: void loadAllResources(java.util.Vector,java.lang.String)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<java.lang.Object: java.lang.Class getClass()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<weibo4j.http.HttpClient: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<weibo4j.http.HttpClient: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<weibo4j.http.Response: void setResponseAsString(java.lang.String)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<weibo4j.http.Response: void setStatusCode(int)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<javax.activation.MimetypesFileTypeMap: java.lang.String getContentType(java.io.File)>";
"<javax.activation.MimetypesFileTypeMap: java.lang.String getContentType(java.io.File)>" -> "<javax.activation.MimetypesFileTypeMap: java.lang.String getContentType(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: java.lang.String getContentType(java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: java.lang.String getContentType(java.lang.String)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: java.lang.String getContentType(java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: java.lang.String getContentType(java.lang.String)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: java.lang.String getContentType(java.lang.String)>" -> "<javax.activation.MimetypesFileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: java.lang.String getContentType(java.lang.String)>" -> "<javax.activation.FileTypeMap: void <clinit>()>";
"<javax.activation.MimetypesFileTypeMap: java.lang.String getContentType(java.lang.String)>" -> "<java.lang.String: int lastIndexOf(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: java.lang.String getContentType(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: int lastIndexOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int indexOf(int)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.multipart.PartBase: void setTransferEncoding(java.lang.String)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration getHostConfiguration()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpClient: void <clinit>()>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.HttpClient: void <clinit>()>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <init>(org.apache.commons.httpclient.HttpConnectionManager,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.params.HttpClientParams,org.apache.commons.httpclient.HttpState)>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void <init>(org.apache.commons.httpclient.HttpConnectionManager,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.params.HttpClientParams,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.auth.AuthChallengeProcessor: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void <init>(org.apache.commons.httpclient.HttpConnectionManager,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.params.HttpClientParams,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.auth.AuthChallengeProcessor: void <init>(org.apache.commons.httpclient.params.HttpParams)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void <init>(org.apache.commons.httpclient.HttpConnectionManager,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.params.HttpClientParams,org.apache.commons.httpclient.HttpState)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>" -> "<org.apache.commons.httpclient.HttpMethodDirector: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: void <clinit>()>" -> "<org.apache.commons.httpclient.auth.AuthChallengeProcessor: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: void <init>(org.apache.commons.httpclient.params.HttpParams)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: void <init>(org.apache.commons.httpclient.params.HttpParams)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.RedirectException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: boolean isRedirectNeeded(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void fakeResponse(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void authenticate(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.RedirectException: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.InvalidRedirectLocationException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.CircularRedirectException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.util.HashSet: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.URI: void <init>(org.apache.commons.httpclient.URI,org.apache.commons.httpclient.URI)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.URI: void <init>(java.lang.String,boolean,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isRedirectNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void fakeResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpRecoverableException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void applyConnectionParams(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticate(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticate(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticate(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthChallengeParser: java.util.Map parseChallenges(org.apache.commons.httpclient.Header[])>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthScope: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthChallengeParser: java.util.Map parseChallenges(org.apache.commons.httpclient.Header[])>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthScope: void <clinit>()>";
"<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.InvalidRedirectLocationException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>" -> "<org.apache.commons.httpclient.RedirectException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.apache.commons.httpclient.CircularRedirectException: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.RedirectException: void <init>(java.lang.String)>";
"<java.util.HashSet: void <init>()>" -> "<java.util.AbstractSet: void <init>()>";
"<java.util.HashSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(org.apache.commons.httpclient.URI,org.apache.commons.httpclient.URI)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void <init>(org.apache.commons.httpclient.URI,org.apache.commons.httpclient.URI)>" -> "<java.lang.String: void <init>(char[])>";
"<org.apache.commons.httpclient.URI: void <init>(org.apache.commons.httpclient.URI,org.apache.commons.httpclient.URI)>" -> "<java.util.Arrays: boolean equals(char[],char[])>";
"<org.apache.commons.httpclient.URI: void <init>(org.apache.commons.httpclient.URI,org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(org.apache.commons.httpclient.URI,org.apache.commons.httpclient.URI)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpRecoverableException: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.ConnectMethod: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpMethodDirector: boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void applyConnectionParams(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.ConnectMethod: void <init>(org.apache.commons.httpclient.HostConfiguration)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthScope: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: boolean cleanAuthHeaders(org.apache.commons.httpclient.HttpMethod,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthScope: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: boolean cleanAuthHeaders(org.apache.commons.httpclient.HttpMethod,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.auth.AuthScope: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.auth.AuthScope: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.auth.AuthScope: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthChallengeParser: java.util.Map parseChallenges(org.apache.commons.httpclient.Header[])>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeParser: java.util.Map parseChallenges(org.apache.commons.httpclient.Header[])>" -> "<org.apache.commons.httpclient.auth.AuthChallengeParser: java.lang.String extractScheme(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeParser: java.util.Map parseChallenges(org.apache.commons.httpclient.Header[])>" -> "<java.util.HashMap: void <init>(int)>";
"<org.apache.commons.httpclient.auth.AuthScope: void <clinit>()>" -> "<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.HttpMethodDirector: void <clinit>()>";
"<org.apache.commons.httpclient.RedirectException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>";
"<java.util.AbstractSet: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Arrays: boolean equals(char[],char[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.ConnectMethod: void <clinit>()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.ConnectMethod: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.ConnectMethod: void <clinit>()>" -> "<org.apache.commons.httpclient.ConnectMethod: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.ConnectMethod: void <init>(org.apache.commons.httpclient.HostConfiguration)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <init>()>";
"<org.apache.commons.httpclient.ConnectMethod: void <init>(org.apache.commons.httpclient.HostConfiguration)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeParser: java.lang.String extractScheme(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeParser: java.lang.String extractScheme(java.lang.String)>" -> "<org.apache.commons.httpclient.auth.MalformedChallengeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeParser: java.lang.String extractScheme(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<java.util.HashMap: void <init>(int)>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.ConnectMethod: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>()>" -> "<org.apache.commons.httpclient.auth.AuthState: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>()>" -> "<org.apache.commons.httpclient.auth.AuthState: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>()>" -> "<org.apache.commons.httpclient.HeaderGroup: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>()>" -> "<org.apache.commons.httpclient.HeaderGroup: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>()>" -> "<org.apache.commons.httpclient.HeaderGroup: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.auth.MalformedChallengeException: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<org.apache.commons.httpclient.HttpException: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<org.apache.commons.httpclient.HttpException: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.HttpException: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.HttpException: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.util.HashMap: boolean isEmpty()>";
"<java.util.HashMap: boolean isEmpty()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.util.HashMap: boolean isEmpty()>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.auth.AuthChallengeParser: java.lang.String extractScheme(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.auth.AuthScope: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.auth.AuthScope: int getPort()>";
"<org.apache.commons.httpclient.auth.AuthChallengeParser: java.util.Map parseChallenges(org.apache.commons.httpclient.Header[])>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.auth.AuthScope: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.auth.AuthScope: int getPort()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: boolean isPreemptive()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean cleanAuthHeaders(org.apache.commons.httpclient.HttpMethod,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getRequestHeaders(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean cleanAuthHeaders(org.apache.commons.httpclient.HttpMethod,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HeaderGroup: void removeHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getRequestHeaders(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getRequestHeaders(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>" -> "<java.util.ArrayList: void <init>()>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>" -> "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.ConnectMethod: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpMethodBase: int getStatusCode()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>";
"<org.apache.commons.httpclient.ConnectMethod: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ConnectMethod: void <clinit>()>";
"<org.apache.commons.httpclient.ConnectMethod: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.ConnectMethod: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.ConnectMethod: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>" -> "<java.io.ByteArrayInputStream: void <init>(byte[])>";
"<org.apache.commons.httpclient.HttpMethodBase: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void checkExecuteConditions(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<java.io.ByteArrayInputStream: void <init>(byte[])>" -> "<java.io.InputStream: void <init>()>";
"<java.io.ByteArrayInputStream: void <init>(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void checkExecuteConditions(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void checkExecuteConditions(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void checkExecuteConditions(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void checkExecuteConditions(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<java.io.ByteArrayInputStream: void close()>";
"<java.io.ByteArrayInputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.auth.AuthState: void setPreemptive()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.auth.AuthState: void setAuthRequested(boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>";
"<org.apache.commons.httpclient.auth.AuthState: void setPreemptive()>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthState: void setPreemptive()>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthState: void setPreemptive()>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>" -> "<java.util.ArrayList: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>";
"<org.apache.commons.httpclient.ConnectMethod: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.ConnectMethod: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: boolean isSocketTimeoutException(java.io.InterruptedIOException)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.util.ExceptionUtil: boolean isSocketTimeoutException(java.io.InterruptedIOException)>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>";
"<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class SocketTimeoutExceptionClass()>";
"<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: java.lang.reflect.Method getInitCauseMethod()>";
"<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.Wire: void <clinit>()>" -> "<org.apache.commons.httpclient.Wire: void <init>(org.apache.commons.logging.Log)>";
"<org.apache.commons.httpclient.Wire: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void <clinit>()>" -> "<org.apache.commons.httpclient.Wire: void <init>(org.apache.commons.logging.Log)>";
"<org.apache.commons.httpclient.Wire: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>";
"<org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class SocketTimeoutExceptionClass()>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.util.ExceptionUtil: java.lang.reflect.Method getInitCauseMethod()>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>";
"<org.apache.commons.httpclient.util.ExceptionUtil: java.lang.reflect.Method getInitCauseMethod()>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.util.ExceptionUtil: java.lang.reflect.Method getInitCauseMethod()>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void <init>(org.apache.commons.logging.Log)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void processStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void readResponseBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void processResponseBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.StatusLine: boolean startsWithHTTP(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.NoHttpResponseException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpParser: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpVersion: void <clinit>()>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.StatusLine: boolean startsWithHTTP(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.apache.commons.httpclient.StatusLine: boolean startsWithHTTP(java.lang.String)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.apache.commons.httpclient.NoHttpResponseException: void <init>(java.lang.String)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpParser: void <clinit>()>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.util.ArrayList: void <init>()>";
"<org.apache.commons.httpclient.HttpParser: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.HttpParser: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.HttpParser: void <clinit>()>" -> "<org.apache.commons.httpclient.HttpParser: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: void <init>(java.io.InputStream,long)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.AutoCloseInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.ResponseConsumedWatcher)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase$1: void <init>(org.apache.commons.httpclient.HttpMethodBase)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.HttpMethod)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: boolean canResponseHaveBody(int)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.WireLogInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.Wire)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: void <clinit>()>";
"<org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpParser: void <clinit>()>";
"<org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpParser: byte[] readRawLine(java.io.InputStream)>";
"<org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>" -> "<org.apache.commons.httpclient.Wire: void <clinit>()>";
"<org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.HttpParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<java.util.Collections: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void registerCookieSpec(java.lang.String,java.lang.Class)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void registerCookieSpec(java.lang.String,java.lang.Class)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void registerCookieSpec(java.lang.String,java.lang.Class)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void registerCookieSpec(java.lang.String,java.lang.Class)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void registerCookieSpec(java.lang.String,java.lang.Class)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void registerCookieSpec(java.lang.String,java.lang.Class)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>" -> "<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getDefaultSpec()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>";
"<org.apache.commons.httpclient.ContentLengthInputStream: void <init>(java.io.InputStream,long)>" -> "<java.io.InputStream: void <init>()>";
"<org.apache.commons.httpclient.AutoCloseInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.ResponseConsumedWatcher)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<org.apache.commons.httpclient.HttpMethodBase$1: void <init>(org.apache.commons.httpclient.HttpMethodBase)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.HttpMethod)>" -> "<java.io.InputStream: void <init>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean canResponseHaveBody(int)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.WireLogInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.Wire)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void <clinit>()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: byte[] readRawLine(java.io.InputStream)>" -> "<org.apache.commons.httpclient.HttpParser: void <clinit>()>";
"<org.apache.commons.httpclient.HttpParser: byte[] readRawLine(java.io.InputStream)>" -> "<java.io.ByteArrayOutputStream: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void registerCookieSpec(java.lang.String,java.lang.Class)>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void registerCookieSpec(java.lang.String,java.lang.Class)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void registerCookieSpec(java.lang.String,java.lang.Class)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2VersionAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieDiscardAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieCommentUrlAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieCommentAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieSecureAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2MaxageAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2PortAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2DomainAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2PathAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<java.util.ArrayList: void <init>(int)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<java.util.HashMap: void <init>(int)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void <init>()>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void <init>()>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <init>()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getDefaultSpec()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getDefaultSpec()>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getDefaultSpec()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getDefaultSpec()>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getDefaultSpec()>" -> "<org.apache.commons.httpclient.cookie.CookiePolicy: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <clinit>()>" -> "<org.apache.commons.httpclient.cookie.CookiePathComparator: void <init>()>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.FilterInputStream: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2VersionAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2VersionAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieDiscardAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieDiscardAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieCommentUrlAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieCommentUrlAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieCommentAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieCommentAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieSecureAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieSecureAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2MaxageAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2MaxageAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2PortAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2PortAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2DomainAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2DomainAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2PathAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec,org.apache.commons.httpclient.cookie.RFC2965Spec$1)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2PathAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePathComparator: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2VersionAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieDiscardAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieCommentUrlAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieCommentAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$CookieSecureAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2MaxageAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2PortAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2DomainAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec$Cookie2PathAttributeHandler: void <init>(org.apache.commons.httpclient.cookie.RFC2965Spec)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void <init>()>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void setAlwaysUseQuotes(boolean)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void setAlwaysUseQuotes(boolean)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void <init>()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>" -> "<java.util.ArrayList: boolean contains(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void registerAttribHandler(java.lang.String,org.apache.commons.httpclient.cookie.CookieAttributeHandler)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: boolean contains(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: void registerCookieSpec(java.lang.String,java.lang.Class)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.HttpParser: byte[] readRawLine(java.io.InputStream)>" -> "<java.io.ByteArrayOutputStream: void write(int)>";
"<org.apache.commons.httpclient.HttpParser: byte[] readRawLine(java.io.InputStream)>" -> "<java.io.ByteArrayOutputStream: int size()>";
"<org.apache.commons.httpclient.HttpParser: byte[] readRawLine(java.io.InputStream)>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<java.io.ByteArrayOutputStream: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>" -> "<org.apache.commons.httpclient.Wire: boolean enabled()>";
"<org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>" -> "<org.apache.commons.httpclient.Wire: void input(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void input(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void input(java.lang.String)>" -> "<org.apache.commons.httpclient.Wire: void input(byte[])>";
"<org.apache.commons.httpclient.Wire: void input(byte[])>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void input(byte[])>" -> "<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>";
"<org.apache.commons.httpclient.Wire: void input(byte[])>" -> "<java.io.ByteArrayInputStream: void <init>(byte[])>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: void setLength(int)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: int length()>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: void setLength(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>" -> "<java.io.ByteArrayInputStream: int read()>";
"<java.io.ByteArrayInputStream: int read()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void input(java.lang.String)>" -> "<java.lang.String: byte[] getBytes()>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<java.lang.String: int indexOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: boolean enabled()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void setValidDateFormats(java.util.Collection)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
"<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.apache.commons.httpclient.StatusLine: boolean startsWithHTTP(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String toUpperCase()>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<java.lang.String: java.lang.String toUpperCase()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setResponseStream(java.io.InputStream)>";
"<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void ensureConnectionRelease()>";
"<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>" -> "<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ConnectMethod: void <clinit>()>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: boolean isParameterTrue(java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: boolean isParameterTrue(java.lang.String)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: int getStatusCode()>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine getStatusLine()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>" -> "<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>" -> "<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: boolean isConnectionCloseForced()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>";
"<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setConnectionCloseForced(boolean)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setConnectionCloseForced(boolean)>";
"<org.apache.commons.httpclient.HttpMethodBase: void setConnectionCloseForced(boolean)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void setConnectionCloseForced(boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>" -> "<java.lang.Long: long parseLong(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>" -> "<java.lang.Long: void <clinit>()>";
"<java.lang.Long: long parseLong(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: boolean isParameterTrue(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void setConnectionCloseForced(boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void setConnectionCloseForced(boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>";
"<org.apache.commons.httpclient.HttpMethodBase: void setConnectionCloseForced(boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: int getVersion()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: boolean isSpecialDomain(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatParam(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair,int)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String getEffectiveHost(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatParam(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair,int)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatParam(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair,int)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatParam(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair,int)>";
"<java.lang.Integer: java.lang.String toString(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String getEffectiveHost(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String createPortAttribute(int[])>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String createPortAttribute(int[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String createPortAttribute(int[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String createPortAttribute(int[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String createPortAttribute(int[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String getEffectiveHost(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String getEffectiveHost(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String getEffectiveHost(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatParam(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair,int)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatParam(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair,int)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatParam(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair,int)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatParam(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatParam(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatParam(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void <clinit>()>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void <clinit>()>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: boolean isUnsafeChar(char)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: boolean isSeparator(char)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: boolean isUnsafeChar(char)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void <clinit>()>";
"<org.apache.commons.httpclient.util.ParameterFormatter: boolean isUnsafeChar(char)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void <clinit>()>";
"<org.apache.commons.httpclient.util.ParameterFormatter: boolean isUnsafeChar(char)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: boolean isOneOf(char[],char)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: boolean isSeparator(char)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void <clinit>()>";
"<org.apache.commons.httpclient.util.ParameterFormatter: boolean isSeparator(char)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: boolean isOneOf(char[],char)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: int length()>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: java.util.Iterator getAttribHandlerIterator()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.util.Iterator getAttribHandlerIterator()>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<java.util.ArrayList: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.util.HashMap: void <init>(int)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.Cookie2: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean,int[])>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.util.LinkedList: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(char[])>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String getEffectiveHost(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.Cookie: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.Cookie: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.Cookie2: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean,int[])>" -> "<org.apache.commons.httpclient.Cookie: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean)>";
"<java.util.LinkedList: void <init>()>" -> "<java.util.AbstractSequentialList: void <init>()>";
"<java.util.LinkedList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(char[])>" -> "<org.apache.commons.httpclient.HeaderElement: void <clinit>()>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(char[])>" -> "<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(char[])>" -> "<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(char[])>" -> "<java.util.ArrayList: void <init>()>";
"<org.apache.commons.httpclient.Cookie: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.Cookie: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.Cookie: void <clinit>()>" -> "<org.apache.commons.httpclient.Cookie: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.HeaderElement: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.HeaderElement: void <clinit>()>" -> "<org.apache.commons.httpclient.HeaderElement: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.Cookie: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean)>" -> "<org.apache.commons.httpclient.Cookie: void <clinit>()>";
"<org.apache.commons.httpclient.Cookie: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.Cookie: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.Cookie: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean)>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<java.util.AbstractSequentialList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.AbstractSequentialList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>" -> "<org.apache.commons.httpclient.HeaderElement: void <init>()>";
"<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>" -> "<org.apache.commons.httpclient.util.ParameterParser: void <init>()>";
"<org.apache.commons.httpclient.Cookie: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.Cookie: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: void <init>()>" -> "<org.apache.commons.httpclient.HeaderElement: void <init>(java.lang.String,java.lang.String,org.apache.commons.httpclient.NameValuePair[])>";
"<org.apache.commons.httpclient.util.ParameterParser: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HeaderElement: void <init>(java.lang.String,java.lang.String,org.apache.commons.httpclient.NameValuePair[])>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>" -> "<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(char[],int,int,char)>";
"<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(char[],int,int,char)>" -> "<java.util.ArrayList: void <init>()>";
"<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(char[],int,int,char)>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(char[],int,int,char)>" -> "<org.apache.commons.httpclient.util.ParameterParser: boolean hasChar()>";
"<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(char[],int,int,char)>" -> "<org.apache.commons.httpclient.util.ParameterParser: java.lang.String parseQuotedToken(char[])>";
"<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(char[],int,int,char)>" -> "<org.apache.commons.httpclient.util.ParameterParser: boolean hasChar()>";
"<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(char[],int,int,char)>" -> "<org.apache.commons.httpclient.util.ParameterParser: java.lang.String parseToken(char[])>";
"<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(char[],int,int,char)>" -> "<org.apache.commons.httpclient.util.ParameterParser: boolean hasChar()>";
"<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(char[],int,int,char)>" -> "<java.util.ArrayList: void <init>()>";
"<org.apache.commons.httpclient.util.ParameterParser: java.lang.String parseQuotedToken(char[])>" -> "<org.apache.commons.httpclient.util.ParameterParser: boolean hasChar()>";
"<org.apache.commons.httpclient.util.ParameterParser: java.lang.String parseQuotedToken(char[])>" -> "<org.apache.commons.httpclient.util.ParameterParser: java.lang.String getToken(boolean)>";
"<org.apache.commons.httpclient.util.ParameterParser: java.lang.String parseQuotedToken(char[])>" -> "<org.apache.commons.httpclient.util.ParameterParser: boolean isOneOf(char,char[])>";
"<org.apache.commons.httpclient.util.ParameterParser: java.lang.String parseToken(char[])>" -> "<org.apache.commons.httpclient.util.ParameterParser: boolean hasChar()>";
"<org.apache.commons.httpclient.util.ParameterParser: java.lang.String parseToken(char[])>" -> "<org.apache.commons.httpclient.util.ParameterParser: java.lang.String getToken(boolean)>";
"<org.apache.commons.httpclient.util.ParameterParser: java.lang.String parseToken(char[])>" -> "<org.apache.commons.httpclient.util.ParameterParser: boolean isOneOf(char,char[])>";
"<org.apache.commons.httpclient.util.ParameterParser: java.lang.String getToken(boolean)>" -> "<java.lang.Character: void <clinit>()>";
"<org.apache.commons.httpclient.util.ParameterParser: java.lang.String getToken(boolean)>" -> "<java.lang.String: void <init>(char[],int,int)>";
"<org.apache.commons.httpclient.util.ParameterParser: java.lang.String getToken(boolean)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.apache.commons.httpclient.util.ParameterParser: java.lang.String getToken(boolean)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.apache.commons.httpclient.util.ParameterParser: java.lang.String getToken(boolean)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.util.ParameterParser: java.lang.String getToken(boolean)>" -> "<java.lang.Character: void <clinit>()>";
"<java.lang.String: void <init>(char[],int,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(char[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>" -> "<java.util.ArrayList: int size()>";
"<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>" -> "<java.util.ArrayList: java.lang.Object remove(int)>";
"<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>" -> "<java.util.ArrayList: int size()>";
"<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>" -> "<java.util.ArrayList: int size()>";
"<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>" -> "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
"<java.util.ArrayList: java.lang.Object remove(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(char[],int,int,char)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(char[],int,int,char)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>" -> "<org.apache.commons.httpclient.NameValuePair: void setName(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>" -> "<org.apache.commons.httpclient.NameValuePair: void setValue(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(char[])>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(char[])>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(char[])>" -> "<java.util.ArrayList: int size()>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(char[])>" -> "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
"<org.apache.commons.httpclient.cookie.Cookie2: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean,int[])>" -> "<org.apache.commons.httpclient.cookie.Cookie2: void setPorts(int[])>";
"<org.apache.commons.httpclient.Cookie: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean)>" -> "<org.apache.commons.httpclient.Cookie: void setPath(java.lang.String)>";
"<org.apache.commons.httpclient.Cookie: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean)>" -> "<org.apache.commons.httpclient.Cookie: void setDomain(java.lang.String)>";
"<org.apache.commons.httpclient.Cookie: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean)>" -> "<org.apache.commons.httpclient.Cookie: void setExpiryDate(java.util.Date)>";
"<org.apache.commons.httpclient.Cookie: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean)>" -> "<org.apache.commons.httpclient.Cookie: void setSecure(boolean)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.util.HashMap: java.util.Set entrySet()>";
"<java.util.HashMap: java.util.Set entrySet()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.util.LinkedList: boolean add(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.util.LinkedList: int size()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>";
"<java.util.LinkedList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.LinkedList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.cookie.CookieAttributeHandler findAttribHandler(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.cookie.CookieAttributeHandler findAttribHandler(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(char[])>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.Cookie: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: void <init>(char[])>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.Cookie: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.util.DateUtil: void <clinit>()>";
"<org.apache.commons.httpclient.HeaderElement: void <init>(char[])>" -> "<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection)>" -> "<org.apache.commons.httpclient.util.DateUtil: void <clinit>()>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection)>" -> "<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>";
"<org.apache.commons.httpclient.util.DateUtil: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.util.DateUtil: void <clinit>()>" -> "<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>";
"<org.apache.commons.httpclient.util.DateUtil: void <clinit>()>" -> "<java.util.Calendar: java.util.Calendar getInstance()>";
"<org.apache.commons.httpclient.util.DateUtil: void <clinit>()>" -> "<java.util.Arrays: java.util.List asList(java.lang.Object[])>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<org.apache.commons.httpclient.util.DateUtil: void <clinit>()>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<org.apache.commons.httpclient.util.DateParseException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.util.Locale: void <clinit>()>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<org.apache.commons.httpclient.util.DateUtil: void <clinit>()>";
"<java.util.Calendar: java.util.Calendar getInstance()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.DateParseException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)>";
"<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.text.DateFormat: java.util.Date parse(java.lang.String)>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>";
"<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<java.lang.String: boolean endsWith(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair[] getParameters()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: int lastIndexOf(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.util.Date: void <init>(long)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.System: long currentTimeMillis()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.util.DateUtil: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.System: void <clinit>()>";
"<java.util.Date: void <init>(long)>" -> "<java.lang.Object: void <init>()>";
"<java.util.Date: void <init>(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: void setPath(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: void setPathAttributeSpecified(boolean)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: void setVersion(int)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: void setPath(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: void setPathAttributeSpecified(boolean)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: void setDomain(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: void setDomainAttributeSpecified(boolean)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: void setExpiryDate(java.util.Date)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: void setSecure(boolean)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: void setComment(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: void setExpiryDate(java.util.Date)>";
"<org.apache.commons.httpclient.Cookie: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.Cookie: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatParam(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair,int)>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.util.StringTokenizer: int countTokens()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.Cookie: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,boolean)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: void <init>(char[])>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.Cookie: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair[] getParameters()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: int lastIndexOf(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.util.Locale: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.MalformedCookieException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<java.text.DateFormat: java.util.Date parse(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: void setExpiryDate(java.util.Date)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void parseAttribute(org.apache.commons.httpclient.NameValuePair,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: int getVersion()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getPath()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.Cookie: boolean isPathAttributeSpecified()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getPath()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.Cookie: boolean isDomainAttributeSpecified()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: boolean isDomainAttributeSpecified()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: int getVersion()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getDomain()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getPath()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: java.lang.String getPath()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>";
"<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: int indexOf(int)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: int indexOf(int,int)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String getEffectiveHost(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String getEffectiveHost(java.lang.String)>" -> "<java.lang.String: int indexOf(int)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.Cookie: void setDomain(java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.commons.httpclient.Cookie: void setDomain(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.Cookie: void setDomain(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: int indexOf(int)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: boolean isSpecialDomain(java.lang.String)>" -> "<java.lang.String: java.lang.String toUpperCase()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: boolean isSpecialDomain(java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: boolean isSpecialDomain(java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: boolean isSpecialDomain(java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: boolean isSpecialDomain(java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: boolean isSpecialDomain(java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: boolean isSpecialDomain(java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: boolean isSpecialDomain(java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getCookiePolicy()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getCookiePolicy()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void <clinit>()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: void clear()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: void setHeaders(org.apache.commons.httpclient.Header[])>";
"<org.apache.commons.httpclient.HeaderGroup: void setHeaders(org.apache.commons.httpclient.Header[])>" -> "<org.apache.commons.httpclient.HeaderGroup: void clear()>";
"<org.apache.commons.httpclient.HeaderGroup: void setHeaders(org.apache.commons.httpclient.Header[])>" -> "<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.StatusLine: java.lang.String getHttpVersion()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.StatusLine: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.StatusLine: boolean startsWithHTTP(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.StatusLine: boolean startsWithHTTP(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String,int)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String,int)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String,int)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: boolean enabled()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: void input(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: int getIntParameter(java.lang.String,int)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: boolean isParameterFalse(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void setVersion(org.apache.commons.httpclient.HttpVersion)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: boolean isParameterFalse(java.lang.String)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: int getIntParameter(java.lang.String,int)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: boolean enabled()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: void output(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void output(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void output(java.lang.String)>" -> "<java.lang.String: byte[] getBytes()>";
"<org.apache.commons.httpclient.Wire: void output(java.lang.String)>" -> "<org.apache.commons.httpclient.Wire: void output(byte[])>";
"<org.apache.commons.httpclient.Wire: void output(byte[])>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void output(byte[])>" -> "<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>";
"<org.apache.commons.httpclient.Wire: void output(byte[])>" -> "<java.io.ByteArrayInputStream: void <init>(byte[])>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void writeRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void processStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: void <clinit>()>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.httpclient.HttpVersion getVersion()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.httpclient.HttpVersion getVersion()>" -> "<org.apache.commons.httpclient.HttpVersion: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>";
"<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>" -> "<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>";
"<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>" -> "<org.apache.commons.httpclient.HttpVersion: int getMajor()>";
"<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>" -> "<org.apache.commons.httpclient.HttpVersion: int getMinor()>";
"<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>" -> "<org.apache.commons.httpclient.HttpVersion: int getMajor()>";
"<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>" -> "<org.apache.commons.httpclient.HttpVersion: int getMinor()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.httpclient.HttpVersion getVersion()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderGroup: void removeHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: boolean enabled()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: void output(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ConnectMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getRequestHeaders()>";
"<org.apache.commons.httpclient.ConnectMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ConnectMethod: void <clinit>()>";
"<org.apache.commons.httpclient.ConnectMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getRequestHeaders()>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getRequestHeaders()>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getAllHeaders()>";
"<org.apache.commons.httpclient.ConnectMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addUserAgentRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.ConnectMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.ConnectMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addProxyConnectionHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addUserAgentRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addProxyConnectionHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addProxyConnectionHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addProxyConnectionHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HeaderGroup: void removeHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addUserAgentRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addUserAgentRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addUserAgentRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addUserAgentRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: boolean enabled()>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: void output(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ConnectMethod: java.lang.String getName()>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion getEffectiveVersion()>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.StatusLine: int getStatusCode()>";
"<org.apache.commons.httpclient.HttpMethodBase: void checkExecuteConditions(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: boolean validate()>";
"<org.apache.commons.httpclient.HttpMethodBase: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.httpclient.HttpVersion getVersion()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void applyConnectionParams(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void applyConnectionParams(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>";
"<org.apache.commons.httpclient.URI: void <init>(org.apache.commons.httpclient.URI,org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: void setURI()>";
"<org.apache.commons.httpclient.URI: void <init>(org.apache.commons.httpclient.URI,org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: void setURI()>";
"<org.apache.commons.httpclient.URI: void <init>(org.apache.commons.httpclient.URI,org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: void parseUriReference(java.lang.String,boolean)>";
"<org.apache.commons.httpclient.URI: void <init>(org.apache.commons.httpclient.URI,org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<java.lang.String: void <init>(char[])>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<java.lang.String: int lastIndexOf(int)>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<java.lang.String: char[] toCharArray()>";
"<java.lang.String: int lastIndexOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<org.apache.commons.httpclient.URI: char[] normalize(char[])>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<org.apache.commons.httpclient.URI: char[] normalize(char[])>";
"<org.apache.commons.httpclient.URI: char[] resolvePath(char[],char[])>" -> "<org.apache.commons.httpclient.URI: char[] normalize(char[])>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: void <init>(char[])>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: int indexOf(java.lang.String,int)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: int lastIndexOf(int,int)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: int lastIndexOf(int,int)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: int lastIndexOf(int,int)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: int lastIndexOf(int,int)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: int lastIndexOf(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.URI: char[] normalize(char[])>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: boolean retryMethod(org.apache.commons.httpclient.HttpMethod,java.io.IOException,int)>";
"<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: boolean retryMethod(org.apache.commons.httpclient.HttpMethod,java.io.IOException,int)>" -> "<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: void <clinit>()>";
"<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: boolean retryMethod(org.apache.commons.httpclient.HttpMethod,java.io.IOException,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: boolean retryMethod(org.apache.commons.httpclient.HttpMethod,java.io.IOException,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.URI: boolean hasQuery()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.URI: void setQuery(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.URI: java.lang.String getEscapedURI()>";
"<org.apache.commons.httpclient.URI: void setQuery(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void setQuery(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)>";
"<org.apache.commons.httpclient.URI: java.lang.String getEscapedURI()>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.URI: java.lang.String getEscapedURI()>" -> "<java.lang.String: void <init>(char[])>";
"<org.apache.commons.httpclient.URI: void setQuery(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void setURI()>";
"<org.apache.commons.httpclient.URI: void setQuery(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: java.lang.String getProtocolCharset()>";
"<org.apache.commons.httpclient.URI: void setQuery(java.lang.String)>" -> "<org.apache.commons.httpclient.URI: void setRawQuery(char[])>";
"<org.apache.commons.httpclient.URI: void setRawQuery(char[])>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.URI: void setRawQuery(char[])>" -> "<org.apache.commons.httpclient.URIException: void <init>(int,java.lang.String)>";
"<org.apache.commons.httpclient.URI: void setRawQuery(char[])>" -> "<org.apache.commons.httpclient.URI: void setURI()>";
"<org.apache.commons.httpclient.URI: void setRawQuery(char[])>" -> "<org.apache.commons.httpclient.URI: char[] removeFragmentIdentifier(char[])>";
"<org.apache.commons.httpclient.URI: void setRawQuery(char[])>" -> "<org.apache.commons.httpclient.URI: boolean validate(char[],java.util.BitSet)>";
"<org.apache.commons.httpclient.URI: void setRawQuery(char[])>" -> "<org.apache.commons.httpclient.URI: void setURI()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.URI: boolean isRelativeURI()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.URI: java.lang.String getEscapedURI()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: int getStatusCode()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getResponseHeaders(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getResponseHeaders(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getResponseHeaders(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: boolean isAuthAttempted()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getResponseHeaders(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: boolean isAuthAttempted()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void fakeResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine getStatusLine()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void fakeResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void fakeResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void fakeResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void fakeResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<java.util.HashSet: boolean contains(java.lang.Object)>";
"<java.util.HashSet: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashSet: boolean contains(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthChallengeProcessor: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthState: boolean isPreemptive()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthState: void setAuthScheme(org.apache.commons.httpclient.auth.AuthScheme)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>";
"<org.apache.commons.httpclient.auth.AuthState: void setAuthScheme(org.apache.commons.httpclient.auth.AuthScheme)>" -> "<org.apache.commons.httpclient.auth.AuthState: void invalidate()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthChallengeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthChallengeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: java.util.List getDefaultAuthPrefs()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<org.apache.commons.httpclient.auth.AuthChallengeProcessor: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthChallengeException: void <init>(java.lang.String)>" -> "<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthPolicy: java.util.List getDefaultAuthPrefs()>" -> "<org.apache.commons.httpclient.auth.AuthPolicy: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthPolicy: java.util.List getDefaultAuthPrefs()>" -> "<java.util.ArrayList: java.lang.Object clone()>";
"<java.util.ArrayList: java.lang.Object clone()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.HttpMethodBase: int getStatusCode()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<org.apache.commons.httpclient.URI: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<org.apache.commons.httpclient.URI: void <init>(java.lang.String,boolean,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.URI: boolean isAbsoluteURI()>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.URI: boolean isAbsoluteURI()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getUriCharset()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<org.apache.commons.httpclient.HttpHost: org.apache.commons.httpclient.protocol.Protocol getProtocol()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<org.apache.commons.httpclient.HttpHost: java.lang.String getHostName()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<org.apache.commons.httpclient.HttpHost: int getPort()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<org.apache.commons.httpclient.HttpHost: org.apache.commons.httpclient.protocol.Protocol getProtocol()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<org.apache.commons.httpclient.protocol.Protocol: java.lang.String getScheme()>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.URI getURI()>" -> "<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.io.ByteArrayInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: void setPreemptive()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: void setPreemptive()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getAllHeaders()>" -> "<java.util.ArrayList: int size()>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getAllHeaders()>" -> "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.apache.commons.httpclient.HeaderGroup: void removeHeader(org.apache.commons.httpclient.Header)>" -> "<java.util.ArrayList: boolean remove(java.lang.Object)>";
"<java.util.ArrayList: boolean remove(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: boolean isPreemptive()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: boolean isRequestSent()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: boolean retryMethod(org.apache.commons.httpclient.HttpMethod,java.io.IOException,int)>" -> "<org.apache.commons.httpclient.HttpMethodBase: boolean isRequestSent()>";
"<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: boolean retryMethod(org.apache.commons.httpclient.HttpMethod,java.io.IOException,int)>" -> "<org.apache.commons.httpclient.HttpMethodBase: boolean isAborted()>";
"<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>" -> "<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: boolean lessEquals(org.apache.commons.httpclient.HttpVersion)>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpVersion: boolean lessEquals(org.apache.commons.httpclient.HttpVersion)>" -> "<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>";
"<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.apache.commons.httpclient.HeaderGroup: void clear()>" -> "<java.util.ArrayList: void clear()>";
"<java.util.ArrayList: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestLine(org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void <init>(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestLine(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestLine(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void <init>(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void <init>(java.io.OutputStream,int)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void <init>(java.io.OutputStream,int)>" -> "<java.io.OutputStream: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void finish()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void finish()>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void finish()>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void writeClosingChunk()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void writeClosingChunk()>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void flush()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.PostMethod: boolean hasRequestContent()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long getRequestContentLength()>";
"<org.apache.commons.httpclient.methods.PostMethod: boolean hasRequestContent()>" -> "<org.apache.commons.httpclient.methods.PostMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: boolean hasRequestContent()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean hasRequestContent()>";
"<org.apache.commons.httpclient.methods.PostMethod: boolean hasRequestContent()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: boolean hasRequestContent()>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: boolean hasRequestContent()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void <init>(byte[],java.lang.String)>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long getRequestContentLength()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long getRequestContentLength()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long getRequestContentLength()>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean hasRequestContent()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean hasRequestContent()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean hasRequestContent()>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <init>(java.io.InputStream,long)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void <init>(byte[])>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void <init>(byte[],java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void <init>(byte[],java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<org.apache.commons.httpclient.HttpClientError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <clinit>()>" -> "<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: void <clinit>()>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(java.lang.String)>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <init>(java.io.InputStream,long)>" -> "<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <init>(java.io.InputStream,long,java.lang.String)>";
"<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void <init>(byte[])>" -> "<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void <init>(byte[],java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<org.apache.commons.codec.net.URLCodec: void <clinit>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<org.apache.commons.codec.net.URLCodec: void <init>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: void <clinit>()>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(char[])>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <init>(java.io.InputStream,long,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <init>(java.io.InputStream,long,java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.codec.net.URLCodec: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>";
"<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<java.lang.String: void <init>(byte[],java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[],java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>" -> "<org.apache.commons.codec.net.URLCodec: byte[] encode(byte[])>";
"<org.apache.commons.codec.net.URLCodec: byte[] encode(byte[])>" -> "<org.apache.commons.codec.net.URLCodec: void <clinit>()>";
"<org.apache.commons.codec.net.URLCodec: byte[] encode(byte[])>" -> "<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair getParameterByName(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair getParameterByName(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: void <clinit>()>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair getParameterByName(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair getParameterByName(java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair[] getParameters()>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long getRequestContentLength()>" -> "<org.apache.commons.httpclient.methods.PostMethod: boolean hasRequestContent()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long getRequestContentLength()>" -> "<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long getRequestContentLength()>" -> "<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: long getContentLength()>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.NameValuePair[] getParameters()>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String getRequestCharSet()>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.NameValuePair[] getParameters()>" -> "<org.apache.commons.httpclient.methods.PostMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.NameValuePair[] getParameters()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.NameValuePair[] getParameters()>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.NameValuePair[] getParameters()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String getRequestCharSet()>" -> "<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String getRequestCharSet()>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestCharSet()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String getRequestCharSet()>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestCharSet()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String getRequestCharSet()>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String getRequestCharSet()>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.Header: org.apache.commons.httpclient.HeaderElement[] getElements()>";
"<org.apache.commons.httpclient.Header: org.apache.commons.httpclient.HeaderElement[] getElements()>" -> "<org.apache.commons.httpclient.HeaderElement: void <clinit>()>";
"<org.apache.commons.httpclient.Header: org.apache.commons.httpclient.HeaderElement[] getElements()>" -> "<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(java.lang.String)>";
"<org.apache.commons.httpclient.Header: org.apache.commons.httpclient.HeaderElement[] getElements()>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair getParameterByName(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getContentCharset()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getContentCharset()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: void <clinit>()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getContentCharset()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getContentCharset()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestCharSet()>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestCharSet()>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String getRequestCharSet()>" -> "<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: java.lang.String getContentType()>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.NameValuePair[] getParameters()>" -> "<java.util.Vector: int size()>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.NameValuePair[] getParameters()>" -> "<java.util.Vector: java.lang.Object[] toArray()>";
"<java.util.Vector: java.lang.Object[] toArray()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: byte[] generateRequestBody()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String getRequestCharSet()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: byte[] generateRequestBody()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: byte[] generateRequestBody()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: byte[] generateRequestBody()>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: byte[] getBytes()>";
"<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>" -> "<java.util.Vector: boolean isEmpty()>";
"<java.util.Vector: boolean isEmpty()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long getRequestContentLength()>" -> "<org.apache.commons.httpclient.methods.InputStreamRequestEntity: long getContentLength()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long getRequestContentLength()>" -> "<org.apache.commons.httpclient.methods.StringRequestEntity: long getContentLength()>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: long getContentLength()>" -> "<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void bufferContent()>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void bufferContent()>" -> "<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <clinit>()>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void bufferContent()>" -> "<java.io.ByteArrayOutputStream: void <init>()>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void bufferContent()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void bufferContent()>" -> "<java.io.ByteArrayOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void bufferContent()>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<java.io.ByteArrayOutputStream: void write(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.PostMethod: boolean hasRequestContent()>" -> "<java.util.Vector: boolean isEmpty()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: boolean isRepeatable()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void writeRequest(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.InputStreamRequestEntity: boolean isRepeatable()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void writeRequest(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.StringRequestEntity: boolean isRepeatable()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.StringRequestEntity: void writeRequest(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void flush()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[],int,int)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[],int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[],int,int)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<java.lang.Integer: java.lang.String toHexString(int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: boolean enabled()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Wire: void output(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestLine(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.PostMethod: java.lang.String getName()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestLine(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestLine(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getQueryString()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestLine(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ConnectMethod: java.lang.String getName()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestLine(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestLine(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: void <clinit>()>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity getRequestEntity()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.String: java.lang.String valueOf(long)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.String: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<java.lang.String: java.lang.String valueOf(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity getRequestEntity()>" -> "<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: java.lang.String getContentType()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: java.lang.String getContentType()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.String getContentType()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.String getContentType()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String getContentType()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String getContentType()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long getRequestContentLength()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion getEffectiveVersion()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion getEffectiveVersion()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion getEffectiveVersion()>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.PostMethod: boolean hasRequestContent()>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(java.lang.String)>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>";
"<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: boolean isParameterTrue(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addUserAgentRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addProxyConnectionHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie[])>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void addInPathOrder(java.util.List,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie[])>" -> "<java.util.LinkedList: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.Cookie: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatCookieAsVer(java.lang.StringBuffer,org.apache.commons.httpclient.Cookie,int)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: void formatParam(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair,int)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void doFormatCookie2(org.apache.commons.httpclient.cookie.Cookie2,java.lang.StringBuffer)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void addInPathOrder(java.util.List,org.apache.commons.httpclient.Cookie)>" -> "<java.util.LinkedList: int size()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void addInPathOrder(java.util.List,org.apache.commons.httpclient.Cookie)>" -> "<java.util.LinkedList: java.lang.Object get(int)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void addInPathOrder(java.util.List,org.apache.commons.httpclient.Cookie)>" -> "<java.util.LinkedList: void add(int,java.lang.Object)>";
"<java.util.LinkedList: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.LinkedList: void add(int,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie[])>" -> "<java.util.LinkedList: int size()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie[])>" -> "<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie[])>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.util.Date: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: java.lang.String getEffectiveHost(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: java.util.Iterator getAttribHandlerIterator()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean domainMatch(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean pathMatch(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: boolean domainMatch(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2109Spec: boolean domainMatch(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: boolean domainMatch(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean domainMatch(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean pathMatch(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.cookie.CookieSpec: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.CookieSpec: void <clinit>()>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: boolean domainMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: boolean domainMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: boolean domainMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.RFC2109Spec: boolean domainMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: boolean domainMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean pathMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean pathMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean pathMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean pathMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean pathMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean pathMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean domainMatch(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean domainMatch(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean domainMatch(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean domainMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean domainMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: boolean domainMatch(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: int getVersion()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Header getVersionHeader()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Header getVersionHeader()>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Header getVersionHeader()>" -> "<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Header getVersionHeader()>" -> "<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Header getVersionHeader()>" -> "<java.lang.Integer: java.lang.String toString(int)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Header getVersionHeader()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Header getVersionHeader()>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void <init>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Header getVersionHeader()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Header getVersionHeader()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Header getVersionHeader()>" -> "<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Header getVersionHeader()>" -> "<org.apache.commons.httpclient.cookie.RFC2965Spec: int getVersion()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.Header: boolean isAutogenerated()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: void removeHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: boolean isParameterTrue(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.MethodRetryHandler getMethodRetryHandler()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void fakeResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void fakeResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: void setAuthScheme(org.apache.commons.httpclient.auth.AuthScheme)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void fakeResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void fakeResponse(org.apache.commons.httpclient.StatusLine,org.apache.commons.httpclient.HeaderGroup,java.io.InputStream)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isRedirectNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: int getStatusCode()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isRedirectNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean getFollowRedirects()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: int getStatusCode()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setURI(org.apache.commons.httpclient.URI)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: void invalidate()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getUriCharset()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: int getStatusCode()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: int getStatusCode()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpMethodBase: boolean getDoAuthentication()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: void setAuthRequested(boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: void setAuthRequested(boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration getHostConfiguration()>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpState getState()>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.HostConfiguration: java.lang.Object clone()>";
"<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.URI)>";
"<org.apache.commons.httpclient.HostConfiguration: java.lang.Object clone()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<org.apache.commons.httpclient.HostConfiguration: java.lang.Object clone()>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HostConfiguration: java.lang.Object clone()>" -> "<org.apache.commons.httpclient.HostConfiguration: void init(org.apache.commons.httpclient.HostConfiguration)>";
"<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.URI)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<java.lang.Object: java.lang.Object clone()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HostConfiguration: void init(org.apache.commons.httpclient.HostConfiguration)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.URI)>" -> "<java.lang.Throwable: java.lang.String toString()>";
"<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: int getPort()>";
"<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.URI: java.lang.String getScheme()>";
"<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.URI)>" -> "<org.apache.commons.httpclient.HostConfiguration: void setHost(java.lang.String,int,java.lang.String)>";
"<org.apache.commons.httpclient.HostConfiguration: void setHost(java.lang.String,int,java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.Protocol: void <clinit>()>";
"<org.apache.commons.httpclient.HostConfiguration: void setHost(java.lang.String,int,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpHost: void <init>(java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>";
"<org.apache.commons.httpclient.HostConfiguration: void setHost(java.lang.String,int,java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String)>";
"<org.apache.commons.httpclient.HostConfiguration: void init(org.apache.commons.httpclient.HostConfiguration)>" -> "<org.apache.commons.httpclient.HostConfiguration: java.net.InetAddress getLocalAddress()>";
"<org.apache.commons.httpclient.HostConfiguration: void init(org.apache.commons.httpclient.HostConfiguration)>" -> "<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>";
"<org.apache.commons.httpclient.HostConfiguration: void init(org.apache.commons.httpclient.HostConfiguration)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object clone()>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object clone()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<org.apache.commons.httpclient.HostConfiguration: void init(org.apache.commons.httpclient.HostConfiguration)>" -> "<org.apache.commons.httpclient.HttpHost: java.lang.Object clone()>";
"<org.apache.commons.httpclient.HttpHost: java.lang.Object clone()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<org.apache.commons.httpclient.HttpHost: java.lang.Object clone()>" -> "<org.apache.commons.httpclient.HttpHost: void init(org.apache.commons.httpclient.HttpHost)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setParameter(java.lang.String,java.lang.Object)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void setRequestEntity(org.apache.commons.httpclient.methods.RequestEntity)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getResponseBodyAsString()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.HttpMethodBase: int getStatusCode()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.HttpMethodBase: int getStatusCode()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void releaseConnection()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<org.apache.commons.httpclient.HttpMethodBase: void releaseConnection()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getResponseBodyAsString()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getResponseBodyAsString()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getResponseBodyAsString()>" -> "<org.apache.commons.httpclient.HttpMethodBase: boolean responseAvailable()>";
"<org.apache.commons.httpclient.HttpMethodBase: void releaseConnection()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void ensureConnectionRelease()>";
"<org.apache.commons.httpclient.HttpMethodBase: void releaseConnection()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void ensureConnectionRelease()>";
"<org.apache.commons.httpclient.HttpMethodBase: void releaseConnection()>" -> "<org.apache.commons.httpclient.AutoCloseInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodBase: void releaseConnection()>" -> "<java.io.FilterInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodBase: void releaseConnection()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodBase: void releaseConnection()>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodBase: void releaseConnection()>" -> "<java.io.ByteArrayInputStream: void close()>";
"<org.apache.commons.httpclient.AutoCloseInputStream: void close()>" -> "<org.apache.commons.httpclient.AutoCloseInputStream: void notifyWatcher()>";
"<java.io.FilterInputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void close()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void close()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void exhaustInputStream(java.io.InputStream)>";
"<org.apache.commons.httpclient.ContentLengthInputStream: void close()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void <clinit>()>";
"<org.apache.commons.httpclient.ContentLengthInputStream: void close()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void exhaustInputStream(java.io.InputStream)>";
"<org.apache.commons.httpclient.AutoCloseInputStream: void notifyWatcher()>" -> "<java.io.FilterInputStream: void close()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void exhaustInputStream(java.io.InputStream)>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[])>";
"<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[])>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[],int,int)>";
"<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[],int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[],int,int)>" -> "<org.apache.commons.httpclient.WireLogInputStream: int read(byte[],int,int)>";
"<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[],int,int)>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[],int,int)>";
"<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[],int,int)>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[],int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[],int,int)>" -> "<java.lang.Math: int min(int,int)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[],int,int)>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void nextChunk()>";
"<java.lang.Math: int min(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void nextChunk()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void nextChunk()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void parseTrailerHeaders()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void nextChunk()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void nextChunk()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void parseTrailerHeaders()>" -> "<org.apache.commons.httpclient.HttpParser: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void parseTrailerHeaders()>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: void initCause(java.lang.Throwable,java.lang.Throwable)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void parseTrailerHeaders()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void parseTrailerHeaders()>" -> "<org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void parseTrailerHeaders()>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void parseTrailerHeaders()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[])>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.io.ByteArrayOutputStream: void <init>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.ExceptionUtil: void initCause(java.lang.Throwable,java.lang.Throwable)>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>";
"<org.apache.commons.httpclient.util.ExceptionUtil: void initCause(java.lang.Throwable,java.lang.Throwable)>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.lang.String: int indexOf(int)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.io.ByteArrayOutputStream: void write(int)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.io.ByteArrayOutputStream: void write(int)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.io.ByteArrayOutputStream: void write(int)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void parseTrailerHeaders()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<org.apache.commons.httpclient.WireLogInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<org.apache.commons.httpclient.WireLogInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void nextChunk()>";
"<org.apache.commons.httpclient.ContentLengthInputStream: int read()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.ContentLengthInputStream: int read()>" -> "<org.apache.commons.httpclient.WireLogInputStream: int read()>";
"<org.apache.commons.httpclient.ContentLengthInputStream: int read()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read()>";
"<org.apache.commons.httpclient.ContentLengthInputStream: int read()>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read()>" -> "<org.apache.commons.httpclient.WireLogInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read()>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read()>";
"<org.apache.commons.httpclient.WireLogInputStream: int read()>" -> "<org.apache.commons.httpclient.Wire: void input(int)>";
"<org.apache.commons.httpclient.Wire: void input(int)>" -> "<org.apache.commons.httpclient.Wire: void input(byte[])>";
"<org.apache.commons.httpclient.WireLogInputStream: int read()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read()>";
"<org.apache.commons.httpclient.WireLogInputStream: int read()>" -> "<org.apache.commons.httpclient.WireLogInputStream: int read()>";
"<org.apache.commons.httpclient.WireLogInputStream: int read()>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void parseTrailerHeaders()>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void parseTrailerHeaders()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void addResponseFooter(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void parseTrailerHeaders()>" -> "<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addResponseFooter(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseTrailerHeaderGroup()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addResponseFooter(org.apache.commons.httpclient.Header)>" -> "<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<org.apache.commons.httpclient.WireLogInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<org.apache.commons.httpclient.WireLogInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[],int,int)>" -> "<org.apache.commons.httpclient.WireLogInputStream: int read(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[],int,int)>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[],int,int)>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[],int,int)>";
"<org.apache.commons.httpclient.WireLogInputStream: int read(byte[],int,int)>" -> "<org.apache.commons.httpclient.Wire: void input(byte[],int,int)>";
"<org.apache.commons.httpclient.Wire: void input(byte[],int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void input(byte[],int,int)>" -> "<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>";
"<org.apache.commons.httpclient.Wire: void input(byte[],int,int)>" -> "<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>";
"<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.WireLogInputStream: int read(byte[],int,int)>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[],int,int)>";
"<org.apache.commons.httpclient.WireLogInputStream: int read(byte[],int,int)>" -> "<org.apache.commons.httpclient.WireLogInputStream: int read(byte[],int,int)>";
"<org.apache.commons.httpclient.WireLogInputStream: int read(byte[],int,int)>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedInputStream: void exhaustInputStream(java.io.InputStream)>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[])>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[])>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[],int,int)>";
"<org.apache.commons.httpclient.AutoCloseInputStream: void notifyWatcher()>" -> "<org.apache.commons.httpclient.HttpMethodBase$1: void responseConsumed()>";
"<org.apache.commons.httpclient.HttpMethodBase$1: void responseConsumed()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getResponseBodyAsString()>" -> "<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getResponseBodyAsString()>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getResponseCharSet()>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<java.io.ByteArrayOutputStream: void <init>(int)>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<java.io.ByteArrayOutputStream: void <init>(int)>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.ByteArrayOutputStream: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getResponseCharSet()>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getResponseCharSet()>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<java.io.ByteArrayOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<java.io.ByteArrayOutputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<java.io.ByteArrayOutputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void setResponseStream(java.io.InputStream)>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: int getIntParameter(java.lang.String,int)>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<java.io.InputStream: int read(byte[])>";
"<java.io.InputStream: int read(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void setRequestEntity(org.apache.commons.httpclient.methods.RequestEntity)>" -> "<org.apache.commons.httpclient.methods.PostMethod: void clearRequestBody()>";
"<org.apache.commons.httpclient.methods.PostMethod: void clearRequestBody()>" -> "<org.apache.commons.httpclient.methods.PostMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: void clearRequestBody()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>";
"<org.apache.commons.httpclient.methods.PostMethod: void clearRequestBody()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: void clearRequestBody()>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: void clearRequestBody()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>" -> "<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>" -> "<org.apache.commons.httpclient.HttpMethodBase: void <clinit>()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>" -> "<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <clinit>()>";
"<org.apache.commons.httpclient.methods.PostMethod: void clearRequestBody()>" -> "<java.util.Vector: void clear()>";
"<java.util.Vector: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpParser: byte[] readRawLine(java.io.InputStream)>" -> "<org.apache.commons.httpclient.WireLogInputStream: int read()>";
"<org.apache.commons.httpclient.HttpParser: byte[] readRawLine(java.io.InputStream)>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read()>";
"<org.apache.commons.httpclient.HttpParser: byte[] readRawLine(java.io.InputStream)>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read()>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],weibo4j.http.OAuthToken)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],weibo4j.http.OAuthToken)>" -> "<java.lang.System: void <clinit>()>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],weibo4j.http.OAuthToken)>" -> "<java.lang.String: java.lang.String valueOf(long)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],weibo4j.http.OAuthToken)>" -> "<java.lang.String: java.lang.String valueOf(long)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],weibo4j.http.OAuthToken)>" -> "<java.lang.System: long currentTimeMillis()>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],weibo4j.http.OAuthToken)>" -> "<java.lang.String: void <clinit>()>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: void <clinit>()>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],weibo4j.http.OAuthToken)>" -> "<java.util.Random: int nextInt()>";
"<java.util.Random: int nextInt()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: void <clinit>()>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.PostParameter: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: void log(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: void log(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: java.lang.String normalizeRequestParameters(java.util.List)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: java.lang.String constructRequestURL(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: void parseGetParameters(java.lang.String,java.util.List)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: java.util.List toParamList(weibo4j.http.PostParameter[])>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.util.ArrayList: void <init>(int)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.PostParameter: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.PostParameter: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.PostParameter: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.PostParameter: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.PostParameter: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.util.ArrayList: void <init>(int)>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<weibo4j.http.OAuth: void <clinit>()>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<weibo4j.http.OAuth: void log(java.lang.String,java.lang.String)>" -> "<weibo4j.http.OAuth: void <clinit>()>";
"<weibo4j.http.OAuth: void log(java.lang.String,java.lang.String)>" -> "<weibo4j.http.OAuth: void log(java.lang.String)>";
"<weibo4j.http.OAuth: void log(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>" -> "<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<weibo4j.http.OAuth: java.lang.String normalizeRequestParameters(java.util.List)>" -> "<java.util.Collections: void <clinit>()>";
"<weibo4j.http.OAuth: java.lang.String normalizeRequestParameters(java.util.List)>" -> "<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List)>";
"<weibo4j.http.OAuth: java.lang.String normalizeRequestParameters(java.util.List)>" -> "<java.util.Collections: void sort(java.util.List)>";
"<weibo4j.http.OAuth: java.lang.String normalizeRequestParameters(java.util.List)>" -> "<weibo4j.http.OAuth: void <clinit>()>";
"<weibo4j.http.OAuth: java.lang.String constructRequestURL(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.OAuth: void parseGetParameters(java.lang.String,java.util.List)>" -> "<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: void parseGetParameters(java.lang.String,java.util.List)>" -> "<weibo4j.http.PostParameter: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: void parseGetParameters(java.lang.String,java.util.List)>" -> "<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: void parseGetParameters(java.lang.String,java.util.List)>" -> "<weibo4j.http.PostParameter: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: void parseGetParameters(java.lang.String,java.util.List)>" -> "<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuth: java.util.List toParamList(weibo4j.http.PostParameter[])>" -> "<java.util.ArrayList: void <init>(int)>";
"<weibo4j.http.OAuth: java.util.List toParamList(weibo4j.http.PostParameter[])>" -> "<java.util.Arrays: java.util.List asList(java.lang.Object[])>";
"<weibo4j.http.OAuth: void log(java.lang.String)>" -> "<weibo4j.http.OAuth: void <clinit>()>";
"<weibo4j.http.OAuth: void log(java.lang.String)>" -> "<java.util.Date: void <init>()>";
"<weibo4j.http.OAuth: void log(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.OAuth: void log(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List)>" -> "<weibo4j.http.OAuth: void <clinit>()>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List)>" -> "<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>";
"<java.util.Collections: void sort(java.util.List)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.OAuth: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.OAuth: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<weibo4j.http.OAuth: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.OAuth: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.OAuth: void log(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.http.OAuth: java.util.List toParamList(weibo4j.http.PostParameter[])>" -> "<java.util.ArrayList: boolean addAll(java.util.Collection)>";
"<weibo4j.http.OAuth: void parseGetParameters(java.lang.String,java.util.List)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<weibo4j.http.OAuth: void parseGetParameters(java.lang.String,java.util.List)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<weibo4j.http.OAuth: java.lang.String constructRequestURL(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<weibo4j.http.OAuth: void log(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.OAuth: void log(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.OAuth: void log(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: int length()>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: int length()>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<weibo4j.http.OAuth: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.util.ArrayList: boolean addAll(java.util.Collection)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.util.ArrayList: boolean addAll(java.util.Collection)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.util.ArrayList: int size()>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>" -> "<java.lang.String: int length()>";
"<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>" -> "<java.lang.String: int length()>";
"<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>" -> "<java.lang.String: int length()>";
"<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: void <clinit>()>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.BASE64Encoder: void <init>()>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: java.lang.String encode(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuth: void <clinit>()>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.BASE64Encoder: void <clinit>()>";
"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.BASE64Encoder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.BASE64Encoder: void <clinit>()>" -> "<java.lang.Integer: void <clinit>()>";
"<weibo4j.http.BASE64Encoder: void <clinit>()>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<weibo4j.http.BASE64Encoder: void <clinit>()>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<weibo4j.http.BASE64Encoder: void <clinit>()>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<weibo4j.http.BASE64Encoder: void <clinit>()>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<weibo4j.http.BASE64Encoder: void <clinit>()>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<weibo4j.http.BASE64Encoder: void <clinit>()>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.BASE64Encoder: java.lang.String encode(byte[])>";
"<weibo4j.http.BASE64Encoder: java.lang.String encode(byte[])>" -> "<weibo4j.http.BASE64Encoder: void <clinit>()>";
"<weibo4j.http.BASE64Encoder: java.lang.String encode(byte[])>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<weibo4j.http.BASE64Encoder: java.lang.String encode(byte[])>" -> "<weibo4j.http.BASE64Encoder: void <clinit>()>";
"<weibo4j.http.BASE64Encoder: java.lang.String encode(byte[])>" -> "<weibo4j.http.BASE64Encoder: void <clinit>()>";
"<weibo4j.http.BASE64Encoder: java.lang.String encode(byte[])>" -> "<weibo4j.http.BASE64Encoder: void <clinit>()>";
"<weibo4j.http.BASE64Encoder: java.lang.String encode(byte[])>" -> "<weibo4j.http.BASE64Encoder: void <clinit>()>";
"<weibo4j.http.BASE64Encoder: java.lang.String encode(byte[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<weibo4j.http.BASE64Encoder: java.lang.String encode(byte[])>" -> "<java.lang.StringBuffer: int length()>";
"<weibo4j.http.BASE64Encoder: java.lang.String encode(byte[])>" -> "<java.lang.StringBuffer: int length()>";
"<weibo4j.http.BASE64Encoder: java.lang.String encode(byte[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<weibo4j.http.BASE64Encoder: java.lang.String encode(byte[])>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.String: byte[] getBytes()>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.String: byte[] getBytes()>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<java.lang.String: byte[] getBytes()>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: long getLong(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: boolean getBoolean(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: int getInt(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: int getInt(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: int getInt(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: int getInt(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: boolean isNull(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject getJSONObject(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: long getLong(java.lang.String)>" -> "<java.lang.Long: void <clinit>()>";
"<weibo4j.org.json.JSONObject: long getLong(java.lang.String)>" -> "<java.lang.Long: java.lang.Long valueOf(java.lang.String)>";
"<weibo4j.org.json.JSONObject: boolean getBoolean(java.lang.String)>" -> "<java.lang.Boolean: void <clinit>()>";
"<weibo4j.org.json.JSONObject: boolean getBoolean(java.lang.String)>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: boolean getBoolean(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>";
"<weibo4j.org.json.JSONObject: boolean getBoolean(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.org.json.JSONObject: boolean getBoolean(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.org.json.JSONObject: boolean isNull(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject getJSONObject(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject getJSONObject(java.lang.String)>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject getJSONObject(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject getJSONObject(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<java.lang.Long: java.lang.Long valueOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject getJSONObject(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject getJSONObject(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject getJSONObject(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject getJSONObject(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject getJSONObject(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: java.lang.Object get(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.Object get(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: java.lang.Object opt(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: long getLong(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: boolean getBoolean(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: long getLong(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: int getInt(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: boolean getBoolean(java.lang.String)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.org.json.JSONObject: boolean isNull(java.lang.String)>" -> "<weibo4j.org.json.JSONObject$Null: boolean equals(java.lang.Object)>";
"<weibo4j.org.json.JSONObject: boolean isNull(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: java.lang.Object opt(java.lang.String)>";
"<weibo4j.org.json.JSONObject: int getInt(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: java.lang.Object get(java.lang.String)>";
"<weibo4j.org.json.JSONObject: int getInt(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: double getDouble(java.lang.String)>";
"<weibo4j.org.json.JSONObject: double getDouble(java.lang.String)>" -> "<java.lang.Double: void <clinit>()>";
"<weibo4j.org.json.JSONObject: double getDouble(java.lang.String)>" -> "<weibo4j.org.json.JSONException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: double getDouble(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: java.lang.String quote(java.lang.String)>";
"<weibo4j.org.json.JSONObject: double getDouble(java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.org.json.JSONObject: double getDouble(java.lang.String)>" -> "<java.lang.Double: java.lang.Double valueOf(java.lang.String)>";
"<weibo4j.org.json.JSONObject: double getDouble(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: void <clinit>()>";
"<java.lang.Double: java.lang.Double valueOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: double getDouble(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: double getDouble(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: double getDouble(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: double getDouble(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: double getDouble(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: java.lang.Object get(java.lang.String)>";
"<weibo4j.org.json.JSONObject: boolean getBoolean(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: boolean getBoolean(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: boolean getBoolean(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.org.json.JSONObject: boolean getBoolean(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.org.json.JSONObject: boolean getBoolean(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: java.lang.Object get(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: java.lang.Object get(java.lang.String)>";
"<weibo4j.org.json.JSONObject: long getLong(java.lang.String)>" -> "<java.lang.String: int length()>";
"<weibo4j.org.json.JSONObject: long getLong(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: java.lang.Object get(java.lang.String)>";
"<weibo4j.org.json.JSONObject: long getLong(java.lang.String)>" -> "<weibo4j.org.json.JSONObject: double getDouble(java.lang.String)>";
"<weibo4j.WeiboResponse: int getInt(java.lang.String,weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.WeiboResponse: boolean getBoolean(java.lang.String,weibo4j.org.json.JSONObject)>" -> "<weibo4j.org.json.JSONObject: java.lang.String getString(java.lang.String)>";
"<weibo4j.http.HttpClient: weibo4j.http.Response multPartURL(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.io.File,boolean)>" -> "<java.io.File: java.lang.String getName()>";
"<java.io.File: java.lang.String getName()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<javax.activation.MimetypesFileTypeMap: java.lang.String getContentType(java.io.File)>" -> "<java.io.File: java.lang.String getName()>";
"<org.apache.commons.httpclient.methods.multipart.FilePartSource: void <init>(java.io.File)>" -> "<java.io.File: boolean isFile()>";
"<org.apache.commons.httpclient.methods.multipart.FilePartSource: void <init>(java.io.File)>" -> "<java.io.File: boolean canRead()>";
"<org.apache.commons.httpclient.methods.multipart.FilePartSource: void <init>(java.io.File)>" -> "<java.io.File: java.lang.String getName()>";
"<java.io.File: boolean canRead()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.Weibo: weibo4j.User updateProfileImage(java.io.File)>" -> "<weibo4j.Weibo: java.lang.String getBaseURL()>";
"<weibo4j.Weibo: void setToken(java.lang.String,java.lang.String)>" -> "<weibo4j.http.HttpClient: weibo4j.http.RequestToken setToken(java.lang.String,java.lang.String)>";
"<weibo4j.http.HttpClient: weibo4j.http.RequestToken setToken(java.lang.String,java.lang.String)>" -> "<weibo4j.http.RequestToken: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.RequestToken: void <init>(java.lang.String,java.lang.String)>" -> "<weibo4j.http.OAuthToken: void <init>(java.lang.String,java.lang.String)>";
"<weibo4j.http.OAuthToken: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticate(org.apache.commons.httpclient.HttpMethod)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.URI: java.lang.String decode(java.lang.String,java.lang.String)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<weibo4j.http.Response: weibo4j.org.json.JSONObject asJSONObject()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<java.lang.Throwable: void printStackTrace()>";
"<javax.activation.MimetypesFileTypeMap: com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpException: void printStackTrace()>";
"<org.apache.commons.httpclient.HttpException: void printStackTrace()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.httpclient.HttpException: void printStackTrace()>" -> "<org.apache.commons.httpclient.HttpException: void printStackTrace(java.io.PrintStream)>";
"<org.apache.commons.httpclient.HttpException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>";
"<org.apache.commons.httpclient.HttpException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>";
"<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpException: void printStackTrace(java.io.PrintStream)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<org.apache.commons.httpclient.HttpException: void printStackTrace(java.io.PrintStream)>" -> "<org.apache.commons.httpclient.HttpException: void printStackTrace(java.io.PrintStream)>";
"<weibo4j.User: void init(weibo4j.org.json.JSONObject)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<weibo4j.examples.OAuthUpdateProfile: void main(java.lang.String[])>" -> "<org.apache.commons.httpclient.HttpException: void printStackTrace()>";
"<weibo4j.WeiboSupport: void <init>(java.lang.String,java.lang.String)>" -> "<weibo4j.Weibo: void setClientVersion(java.lang.String)>";
"<weibo4j.WeiboSupport: void <init>(java.lang.String,java.lang.String)>" -> "<weibo4j.Weibo: void setClientURL(java.lang.String)>";
"<weibo4j.WeiboSupport: void <init>(java.lang.String,java.lang.String)>" -> "<weibo4j.Weibo: void setUserId(java.lang.String)>";
"<weibo4j.WeiboSupport: void <init>(java.lang.String,java.lang.String)>" -> "<weibo4j.Weibo: void setPassword(java.lang.String)>";
"<weibo4j.Weibo: void setClientVersion(java.lang.String)>" -> "<weibo4j.WeiboSupport: void setClientVersion(java.lang.String)>";
"<weibo4j.Weibo: void setClientURL(java.lang.String)>" -> "<weibo4j.WeiboSupport: void setClientURL(java.lang.String)>";
"<weibo4j.Weibo: void setUserId(java.lang.String)>" -> "<weibo4j.WeiboSupport: void setUserId(java.lang.String)>";
"<weibo4j.Weibo: void setPassword(java.lang.String)>" -> "<weibo4j.WeiboSupport: void setPassword(java.lang.String)>";
"<weibo4j.WeiboSupport: void setClientVersion(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.WeiboSupport: void setClientVersion(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getCilentVersion(java.lang.String)>";
"<weibo4j.WeiboSupport: void setClientURL(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.WeiboSupport: void setClientURL(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getClientURL(java.lang.String)>";
"<weibo4j.WeiboSupport: void setUserId(java.lang.String)>" -> "<weibo4j.WeiboSupport: void <clinit>()>";
"<weibo4j.WeiboSupport: void setUserId(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getUser(java.lang.String)>";
"<weibo4j.WeiboSupport: void setUserId(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.WeiboSupport: void setPassword(java.lang.String)>" -> "<weibo4j.WeiboSupport: void <clinit>()>";
"<weibo4j.WeiboSupport: void setPassword(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getPassword(java.lang.String)>";
"<weibo4j.WeiboSupport: void setPassword(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getCilentVersion(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getCilentVersion(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getClientURL(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getClientURL(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getUser(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getUser(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>";
"<weibo4j.Configuration: java.lang.String getPassword(java.lang.String)>" -> "<weibo4j.Configuration: void <clinit>()>";
"<weibo4j.Configuration: java.lang.String getPassword(java.lang.String)>" -> "<weibo4j.Configuration: java.lang.String getProperty(java.lang.String,java.lang.String)>";
"<weibo4j.WeiboSupport: void setPassword(java.lang.String)>" -> "<weibo4j.http.HttpClient: void setPassword(java.lang.String)>";
"<weibo4j.http.HttpClient: void setPassword(java.lang.String)>" -> "<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<java.lang.String: void <clinit>()>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<java.lang.String: void <init>(java.lang.String)>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<weibo4j.http.BASE64Encoder: void <init>()>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<java.lang.StringBuilder: void <init>()>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<weibo4j.http.BASE64Encoder: void <clinit>()>";
"<java.lang.String: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<weibo4j.http.BASE64Encoder: java.lang.String encode(byte[])>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>" -> "<java.lang.String: byte[] getBytes()>";
"<weibo4j.WeiboSupport: void setUserId(java.lang.String)>" -> "<weibo4j.http.HttpClient: void setUserId(java.lang.String)>";
"<weibo4j.http.HttpClient: void setUserId(java.lang.String)>" -> "<weibo4j.http.HttpClient: void encodeBasicAuthenticationString()>";
"<weibo4j.WeiboSupport: void setClientURL(java.lang.String)>" -> "<weibo4j.Weibo: void setRequestHeader(java.lang.String,java.lang.String)>";
"<weibo4j.Weibo: void setRequestHeader(java.lang.String,java.lang.String)>" -> "<weibo4j.WeiboSupport: void setRequestHeader(java.lang.String,java.lang.String)>";
"<weibo4j.WeiboSupport: void setRequestHeader(java.lang.String,java.lang.String)>" -> "<weibo4j.WeiboSupport: void <clinit>()>";
"<weibo4j.WeiboSupport: void setRequestHeader(java.lang.String,java.lang.String)>" -> "<weibo4j.http.HttpClient: void setRequestHeader(java.lang.String,java.lang.String)>";
"<weibo4j.WeiboSupport: void setClientVersion(java.lang.String)>" -> "<weibo4j.Weibo: void setRequestHeader(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object clone()>" -> "<java.util.HashMap: java.lang.Object clone()>";
"<java.util.HashMap: java.lang.Object clone()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String getRequestCharSet()>" -> "<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.String getContentType()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String getRequestCharSet()>" -> "<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String getContentType()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String getRequestCharSet()>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.String getContentType()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.String getContentType()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.String getContentType()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.String getContentType()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.String getContentType()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.String getContentType()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.String getContentType()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.String getContentType()>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] getMultipartBoundary()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] getMultipartBoundary()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] getMultipartBoundary()>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] generateMultipartBoundary()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] getMultipartBoundary()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] getMultipartBoundary()>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] generateMultipartBoundary()>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] generateMultipartBoundary()>" -> "<java.util.Random: void <init>()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] generateMultipartBoundary()>" -> "<java.util.Random: int nextInt(int)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] generateMultipartBoundary()>" -> "<java.util.Random: int nextInt(int)>";
"<java.util.Random: int nextInt(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] getMultipartBoundary()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(java.lang.String)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long getRequestContentLength()>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: long getContentLength()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: long getContentLength()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: long getContentLength()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: long getLengthOfParts(org.apache.commons.httpclient.methods.multipart.Part[],byte[])>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: long getContentLength()>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: long getLengthOfParts(org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: long getLengthOfParts(org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: long getContentLength()>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] getMultipartBoundary()>";
"<org.apache.commons.httpclient.methods.multipart.Part: long getLengthOfParts(org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void setPartBoundary(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: long getLengthOfParts(org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.methods.multipart.Part: long length()>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<java.io.ByteArrayOutputStream: void <init>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<java.io.ByteArrayOutputStream: int size()>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<org.apache.commons.httpclient.methods.multipart.FilePart: long lengthOfData()>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendEnd(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<org.apache.commons.httpclient.methods.multipart.FilePart: long lengthOfData()>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<org.apache.commons.httpclient.methods.multipart.StringPart: long lengthOfData()>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: long length()>" -> "<org.apache.commons.httpclient.methods.multipart.StringPart: long lengthOfData()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: long lengthOfData()>" -> "<org.apache.commons.httpclient.methods.multipart.FilePart: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: long lengthOfData()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.FilePart: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEnd(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: long lengthOfData()>" -> "<org.apache.commons.httpclient.methods.multipart.StringPart: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: long lengthOfData()>" -> "<org.apache.commons.httpclient.methods.multipart.StringPart: byte[] getContent()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: long lengthOfData()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: byte[] getContent()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: byte[] getContent()>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<java.io.OutputStream: void write(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.PartBase: java.lang.String getName()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: byte[] getContent()>" -> "<org.apache.commons.httpclient.methods.multipart.PartBase: java.lang.String getCharSet()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEnd(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.PartBase: java.lang.String getTransferEncoding()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.PartBase: java.lang.String getContentType()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.PartBase: java.lang.String getCharSet()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.FilePartSource: java.lang.String getFileName()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<java.io.OutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: byte[] getPartBoundary()>";
"<org.apache.commons.httpclient.methods.multipart.Part: byte[] getPartBoundary()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: long lengthOfData()>" -> "<org.apache.commons.httpclient.methods.multipart.FilePartSource: long getLength()>";
"<org.apache.commons.httpclient.methods.multipart.FilePartSource: long getLength()>" -> "<java.io.File: long length()>";
"<java.io.File: long length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.String getContentType()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.String getContentType()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: boolean isRepeatable()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void writeRequest(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] getMultipartBoundary()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void setPartBoundary(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void send(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void send(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void send(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void send(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void send(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void send(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void send(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void send(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void send(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendEnd(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void send(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void send(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.StringPart: void sendData(java.io.OutputStream)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.FilePart: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void sendData(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.StringPart: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void sendData(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.StringPart: byte[] getContent()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void sendData(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.Part: void <clinit>()>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void sendData(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.FilePart: long lengthOfData()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.methods.multipart.FilePartSource: java.io.InputStream createInputStream()>";
"<org.apache.commons.httpclient.methods.multipart.FilePartSource: java.io.InputStream createInputStream()>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<org.apache.commons.httpclient.methods.multipart.FilePartSource: java.io.InputStream createInputStream()>" -> "<java.io.ByteArrayInputStream: void <init>(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>" -> "<java.io.FileInputStream: int read(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>" -> "<java.io.FileInputStream: void close()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>" -> "<java.io.FileInputStream: void close()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>" -> "<java.io.InputStream: int read(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>" -> "<java.io.ByteArrayInputStream: void close()>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>" -> "<java.io.ByteArrayInputStream: void close()>";
"<java.io.FileInputStream: int read(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: boolean isRepeatable()>" -> "<org.apache.commons.httpclient.methods.multipart.Part: boolean isRepeatable()>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEnd(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair[] getParameters()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: int indexOf(int)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.apache.commons.httpclient.cookie.NetscapeDraftSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String,int)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.cookie.CookieSpecBase: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: char[] toCharArray()>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.cookie.RFC2965Spec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.StatusLine: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.StatusLine: int getStatusCode()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.StatusLine: int getStatusCode()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.StatusLine: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.String: int compareToIgnoreCase(java.lang.String)>";
"<java.lang.String: int compareToIgnoreCase(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.StatusLine: int getStatusCode()>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<org.apache.commons.httpclient.AutoCloseInputStream: int read(byte[])>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<org.apache.commons.httpclient.WireLogInputStream: int read(byte[])>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[])>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[])>";
"<org.apache.commons.httpclient.AutoCloseInputStream: int read(byte[])>" -> "<org.apache.commons.httpclient.AutoCloseInputStream: boolean isReadAllowed()>";
"<org.apache.commons.httpclient.AutoCloseInputStream: int read(byte[])>" -> "<org.apache.commons.httpclient.AutoCloseInputStream: void checkClose(int)>";
"<org.apache.commons.httpclient.AutoCloseInputStream: int read(byte[])>" -> "<java.io.FilterInputStream: int read(byte[])>";
"<org.apache.commons.httpclient.AutoCloseInputStream: boolean isReadAllowed()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.AutoCloseInputStream: void checkClose(int)>" -> "<org.apache.commons.httpclient.AutoCloseInputStream: void notifyWatcher()>";
"<java.io.FilterInputStream: int read(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.WireLogInputStream: int read(byte[])>" -> "<org.apache.commons.httpclient.Wire: void input(byte[],int,int)>";
"<org.apache.commons.httpclient.WireLogInputStream: int read(byte[])>" -> "<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[])>";
"<org.apache.commons.httpclient.WireLogInputStream: int read(byte[])>" -> "<org.apache.commons.httpclient.WireLogInputStream: int read(byte[])>";
"<org.apache.commons.httpclient.WireLogInputStream: int read(byte[])>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[])>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.AutoCloseInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.io.FilterInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.AutoCloseInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<java.io.FilterInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodBase: int getStatusCode()>" -> "<org.apache.commons.httpclient.StatusLine: int getStatusCode()>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.HttpState: void setCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)>";
"<org.apache.commons.httpclient.HttpState: void setCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)>" -> "<org.apache.commons.httpclient.HttpState: void <clinit>()>";
"<org.apache.commons.httpclient.HttpState: void setCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpState: void setCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.HttpState: void setProxyCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)>";
"<org.apache.commons.httpclient.HttpState: void setProxyCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)>" -> "<org.apache.commons.httpclient.HttpState: void <clinit>()>";
"<org.apache.commons.httpclient.HttpState: void setProxyCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpState: void setProxyCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getProxyCredentials(org.apache.commons.httpclient.auth.AuthScope)>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getProxyCredentials(org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.HttpState: void <clinit>()>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getProxyCredentials(org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials matchCredentials(java.util.HashMap,org.apache.commons.httpclient.auth.AuthScope)>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getProxyCredentials(org.apache.commons.httpclient.auth.AuthScope)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials matchCredentials(java.util.HashMap,org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.auth.AuthScope: int match(org.apache.commons.httpclient.auth.AuthScope)>";
"<org.apache.commons.httpclient.auth.AuthScope: int match(org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.auth.AuthScope: void <clinit>()>";
"<org.apache.commons.httpclient.auth.AuthScope: int match(org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.auth.AuthScope: boolean paramsEqual(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthScope: int match(org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.auth.AuthScope: boolean paramsEqual(int,int)>";
"<org.apache.commons.httpclient.auth.AuthScope: int match(org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.auth.AuthScope: boolean paramsEqual(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.auth.AuthScope: int match(org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.auth.AuthScope: boolean paramsEqual(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials matchCredentials(java.util.HashMap,org.apache.commons.httpclient.auth.AuthScope)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials matchCredentials(java.util.HashMap,org.apache.commons.httpclient.auth.AuthScope)>" -> "<java.util.HashMap: java.util.Set keySet()>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials matchCredentials(java.util.HashMap,org.apache.commons.httpclient.auth.AuthScope)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getCredentials(org.apache.commons.httpclient.auth.AuthScope)>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getCredentials(org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.HttpState: void <clinit>()>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getCredentials(org.apache.commons.httpclient.auth.AuthScope)>" -> "<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials matchCredentials(java.util.HashMap,org.apache.commons.httpclient.auth.AuthScope)>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getCredentials(org.apache.commons.httpclient.auth.AuthScope)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpState: boolean isAuthenticationPreemptive()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpState: void addCookie(org.apache.commons.httpclient.Cookie)>";
"<org.apache.commons.httpclient.HttpState: void addCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.HttpState: void <clinit>()>";
"<org.apache.commons.httpclient.HttpState: void addCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpState: void addCookie(org.apache.commons.httpclient.Cookie)>" -> "<org.apache.commons.httpclient.Cookie: boolean isExpired()>";
"<org.apache.commons.httpclient.Cookie: boolean equals(java.lang.Object)>" -> "<org.apache.commons.httpclient.util.LangUtils: boolean equals(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.Cookie: boolean equals(java.lang.Object)>" -> "<org.apache.commons.httpclient.util.LangUtils: boolean equals(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.Cookie: boolean equals(java.lang.Object)>" -> "<org.apache.commons.httpclient.util.LangUtils: boolean equals(java.lang.Object,java.lang.Object)>";
"<org.apache.commons.httpclient.Cookie: boolean isExpired()>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.httpclient.Cookie: boolean isExpired()>" -> "<java.lang.System: long currentTimeMillis()>";
"<org.apache.commons.httpclient.Cookie: boolean isExpired()>" -> "<java.util.Date: long getTime()>";
"<java.util.Date: long getTime()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.Cookie: boolean equals(java.lang.Object)>" -> "<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>";
"<org.apache.commons.httpclient.util.LangUtils: boolean equals(java.lang.Object,java.lang.Object)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpState: void addCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.apache.commons.httpclient.HttpState: void addCookie(org.apache.commons.httpclient.Cookie)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>" -> "<org.apache.commons.httpclient.HttpState: int getCookiePolicy()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Cookie[] getCookies()>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Cookie[] getCookies()>" -> "<org.apache.commons.httpclient.HttpState: void <clinit>()>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Cookie[] getCookies()>" -> "<org.apache.commons.httpclient.Cookie: void <clinit>()>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Cookie[] getCookies()>" -> "<java.util.ArrayList: int size()>";
"<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Cookie[] getCookies()>" -> "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.params.HttpClientParams: boolean isAuthenticationPreemptive()>";
"<org.apache.commons.httpclient.params.HttpClientParams: boolean isAuthenticationPreemptive()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getCredentials(org.apache.commons.httpclient.auth.AuthScope)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getProxyCredentials(org.apache.commons.httpclient.auth.AuthScope)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.URI)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: boolean isParameterTrue(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: boolean isParameterFalse(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpState: boolean isAuthenticationPreemptive()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HttpConnection: void <init>(org.apache.commons.httpclient.HostConfiguration)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.SimpleHttpConnectionManager: void <clinit>()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.SimpleHttpConnectionManager: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void <clinit>()>" -> "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>";
"<org.apache.commons.httpclient.HttpConnection: void <clinit>()>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void <init>(org.apache.commons.httpclient.HostConfiguration)>" -> "<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>";
"<org.apache.commons.httpclient.HttpConnection: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: void <init>()>";
"<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>" -> "<java.lang.Object: void <init>()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.io.InputStream getLastResponseInputStream()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void setLastResponseInputStream(java.io.InputStream)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void close()>";
"<org.apache.commons.httpclient.HttpConnection: void close()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void close()>" -> "<org.apache.commons.httpclient.HttpConnection: void closeSocketAndStreams()>";
"<org.apache.commons.httpclient.HttpConnection: void closeSocketAndStreams()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void closeSocketAndStreams()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void closeSocketAndStreams()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void closeSocketAndStreams()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HttpConnection: void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HttpConnection: void close()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HttpConnection: void setHost(java.lang.String)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HttpConnection: void setPort(int)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HttpConnection: void setProtocol(org.apache.commons.httpclient.protocol.Protocol)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HttpConnection: void setLocalAddress(java.net.InetAddress)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HttpConnection: void setProxyHost(java.lang.String)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HttpConnection: void setProxyPort(int)>";
"<org.apache.commons.httpclient.HttpConnection: void setHost(java.lang.String)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void setProtocol(org.apache.commons.httpclient.protocol.Protocol)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void setProxyPort(int)>" -> "<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>";
"<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void setProxyHost(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>";
"<org.apache.commons.httpclient.HttpConnection: void setLocalAddress(java.net.InetAddress)>" -> "<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>";
"<org.apache.commons.httpclient.HttpConnection: void setProtocol(org.apache.commons.httpclient.protocol.Protocol)>" -> "<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>";
"<org.apache.commons.httpclient.HttpConnection: void setPort(int)>" -> "<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>";
"<org.apache.commons.httpclient.HttpConnection: void setHost(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HostConfiguration: boolean proxyEquals(org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HostConfiguration: java.lang.String getHost()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HostConfiguration: int getPort()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.protocol.Protocol getProtocol()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HostConfiguration: java.net.InetAddress getLocalAddress()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HostConfiguration: java.lang.String getProxyHost()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>" -> "<org.apache.commons.httpclient.HostConfiguration: int getProxyPort()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HostConfiguration: boolean proxyEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.protocol.Protocol getProtocol()>" -> "<org.apache.commons.httpclient.HttpHost: org.apache.commons.httpclient.protocol.Protocol getProtocol()>";
"<org.apache.commons.httpclient.HostConfiguration: int getPort()>" -> "<org.apache.commons.httpclient.HttpHost: int getPort()>";
"<org.apache.commons.httpclient.HostConfiguration: java.lang.String getHost()>" -> "<org.apache.commons.httpclient.HttpHost: java.lang.String getHostName()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean proxyEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean proxyEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: int getProxyPort()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean proxyEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: int getPort()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress getLocalAddress()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress getLocalAddress()>";
"<org.apache.commons.httpclient.HttpConnection: int getPort()>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpHost: java.lang.String getHostName()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpHost: int getPort()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpHost: org.apache.commons.httpclient.protocol.Protocol getProtocol()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.protocol.Protocol: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.protocol.Protocol: boolean equals(java.lang.Object)>" -> "<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.protocol.Protocol: boolean equals(java.lang.Object)>" -> "<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: boolean equals(java.lang.Object)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: boolean equals(java.lang.Object)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<org.apache.commons.httpclient.protocol.Protocol: boolean equals(java.lang.Object)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void <init>(org.apache.commons.httpclient.HostConfiguration)>" -> "<org.apache.commons.httpclient.HostConfiguration: java.lang.String getProxyHost()>";
"<org.apache.commons.httpclient.HttpConnection: void <init>(org.apache.commons.httpclient.HostConfiguration)>" -> "<org.apache.commons.httpclient.HostConfiguration: int getProxyPort()>";
"<org.apache.commons.httpclient.HttpConnection: void <init>(org.apache.commons.httpclient.HostConfiguration)>" -> "<org.apache.commons.httpclient.HostConfiguration: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpConnection: void <init>(org.apache.commons.httpclient.HostConfiguration)>" -> "<org.apache.commons.httpclient.HostConfiguration: int getPort()>";
"<org.apache.commons.httpclient.HttpConnection: void <init>(org.apache.commons.httpclient.HostConfiguration)>" -> "<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.protocol.Protocol getProtocol()>";
"<org.apache.commons.httpclient.HttpConnection: void <init>(org.apache.commons.httpclient.HostConfiguration)>" -> "<org.apache.commons.httpclient.HostConfiguration: java.net.InetAddress getLocalAddress()>";
"<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>" -> "<org.apache.commons.httpclient.protocol.Protocol: int resolvePort(int)>";
"<org.apache.commons.httpclient.protocol.Protocol: int resolvePort(int)>" -> "<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: void setLocked(boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: void setLocked(boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: void setLocked(boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: void setLocked(boolean)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>";
"<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>" -> "<org.apache.commons.httpclient.SimpleHttpConnectionManager: void releaseConnection(org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void releaseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.System: void <clinit>()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void releaseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void releaseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.System: long currentTimeMillis()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void releaseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void releaseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.SimpleHttpConnectionManager: void <clinit>()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void releaseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void close()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: int getIntParameter(java.lang.String,int)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.HttpClientParams: long getConnectionManagerTimeout()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.HttpClientParams: boolean isAuthenticationPreemptive()>";
"<org.apache.commons.httpclient.params.HttpClientParams: long getConnectionManagerTimeout()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: long getLongParameter(java.lang.String,long)>";
"<org.apache.commons.httpclient.params.DefaultHttpParams: long getLongParameter(java.lang.String,long)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<weibo4j.org.json.JSONObject: java.lang.Object remove(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object remove(java.lang.Object)>";
"<java.util.HashMap: java.lang.Object remove(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONObject: weibo4j.org.json.JSONObject put(java.lang.String,java.lang.Object)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<weibo4j.org.json.JSONObject: java.lang.Object opt(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<weibo4j.org.json.JSONTokener: java.lang.String next(int)>" -> "<java.io.BufferedReader: int read(char[],int,int)>";
"<weibo4j.org.json.JSONTokener: java.lang.String next(int)>" -> "<java.io.StringReader: int read(char[],int,int)>";
"<java.io.BufferedReader: int read(char[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.StringReader: int read(char[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<weibo4j.org.json.JSONArray: void <init>(weibo4j.org.json.JSONTokener)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<weibo4j.org.json.JSONTokener: char next()>" -> "<java.io.BufferedReader: int read()>";
"<weibo4j.org.json.JSONTokener: char next()>" -> "<java.io.StringReader: int read()>";
"<java.io.BufferedReader: int read()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.StringReader: int read()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,weibo4j.http.PostParameter[],java.lang.String,java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.RequestToken: java.lang.String getToken()>";
"<weibo4j.http.RequestToken: java.lang.String getToken()>" -> "<weibo4j.http.OAuthToken: java.lang.String getToken()>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuthToken: javax.crypto.spec.SecretKeySpec getSecretKeySpec()>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.RequestToken: java.lang.String getTokenSecret()>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuthToken: void setSecretKeySpec(javax.crypto.spec.SecretKeySpec)>";
"<weibo4j.http.OAuth: java.lang.String generateSignature(java.lang.String,weibo4j.http.OAuthToken)>" -> "<weibo4j.http.OAuthToken: javax.crypto.spec.SecretKeySpec getSecretKeySpec()>";
"<weibo4j.http.RequestToken: java.lang.String getTokenSecret()>" -> "<weibo4j.http.OAuthToken: java.lang.String getTokenSecret()>";
"<weibo4j.http.OAuth: void parseGetParameters(java.lang.String,java.util.List)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<weibo4j.http.OAuth: void parseGetParameters(java.lang.String,java.util.List)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<weibo4j.http.OAuth: void parseGetParameters(java.lang.String,java.util.List)>" -> "<java.lang.String: java.lang.String[] split(java.lang.String)>";
"<weibo4j.http.OAuth: void parseGetParameters(java.lang.String,java.util.List)>" -> "<java.lang.String: java.lang.String[] split(java.lang.String)>";
"<java.lang.String: java.lang.String[] split(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String constructRequestURL(java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<weibo4j.http.OAuth: java.lang.String constructRequestURL(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<weibo4j.http.OAuth: java.lang.String constructRequestURL(java.lang.String)>" -> "<java.lang.String: int indexOf(java.lang.String,int)>";
"<weibo4j.http.OAuth: java.lang.String constructRequestURL(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<weibo4j.http.OAuth: java.lang.String constructRequestURL(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>" -> "<org.apache.commons.httpclient.protocol.Protocol: boolean isSecure()>";
"<org.apache.commons.httpclient.protocol.Protocol: boolean equals(java.lang.Object)>" -> "<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>";
"<org.apache.commons.httpclient.protocol.Protocol: boolean equals(java.lang.Object)>" -> "<org.apache.commons.httpclient.protocol.Protocol: java.lang.String getScheme()>";
"<org.apache.commons.httpclient.protocol.Protocol: boolean equals(java.lang.Object)>" -> "<org.apache.commons.httpclient.protocol.Protocol: boolean isSecure()>";
"<org.apache.commons.httpclient.protocol.Protocol: boolean equals(java.lang.Object)>" -> "<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory getSocketFactory()>";
"<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: boolean equals(java.lang.Object)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: boolean equals(java.lang.Object)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<org.apache.commons.httpclient.HostConfiguration: boolean proxyEquals(org.apache.commons.httpclient.HttpConnection)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>" -> "<org.apache.commons.httpclient.HostConfiguration: java.lang.String getHost()>";
"<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>" -> "<org.apache.commons.httpclient.HostConfiguration: int getPort()>";
"<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>" -> "<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.protocol.Protocol getProtocol()>";
"<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>" -> "<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: int getProxyPort()>";
"<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: int getPort()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpConnection: void open()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<org.apache.commons.httpclient.HttpConnection: void close()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.protocol.Protocol: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>" -> "<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>";
"<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>" -> "<java.io.FilterInputStream: void <init>(java.io.InputStream)>";
"<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getSendBufferSize()>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getReceiveBufferSize()>";
"<org.apache.commons.httpclient.params.HttpConnectionParams: int getReceiveBufferSize()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: int getIntParameter(java.lang.String,int)>";
"<org.apache.commons.httpclient.params.HttpConnectionParams: int getSendBufferSize()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: int getIntParameter(java.lang.String,int)>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory getSocketFactory()>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>";
"<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>" -> "<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>";
"<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory getSocketFactory()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory getSocketFactory()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>";
"<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>" -> "<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>" -> "<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory: java.net.Socket createSocket(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int,int)>";
"<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>" -> "<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>";
"<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>" -> "<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>" -> "<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory: java.net.Socket createSocket(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int,int)>";
"<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>" -> "<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>";
"<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory: java.net.Socket createSocket(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory$1: void <init>(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int)>";
"<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory: java.net.Socket createSocket(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.ConnectTimeoutException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory: java.net.Socket createSocket(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory: java.net.Socket createSocket(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory$SocketTask: java.io.IOException access$000(org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory$SocketTask)>";
"<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory: java.net.Socket createSocket(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory$SocketTask: java.io.IOException access$000(org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory$SocketTask)>";
"<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory: java.net.Socket createSocket(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.util.TimeoutController: void execute(java.lang.Runnable,long)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.ConnectTimeoutException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory$1: void <init>(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int)>" -> "<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory$SocketTask: void <init>()>";
"<org.apache.commons.httpclient.ConnectTimeoutException: void <init>(java.lang.String)>" -> "<java.io.InterruptedIOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.TimeoutController: void execute(java.lang.Runnable,long)>" -> "<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>";
"<org.apache.commons.httpclient.util.TimeoutController: void execute(java.lang.Runnable,long)>" -> "<org.apache.commons.httpclient.util.TimeoutController: void execute(java.lang.Thread,long)>";
"<org.apache.commons.httpclient.ConnectTimeoutException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>";
"<org.apache.commons.httpclient.ConnectTimeoutException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: void initCause(java.lang.Throwable,java.lang.Throwable)>";
"<org.apache.commons.httpclient.ConnectTimeoutException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.io.InterruptedIOException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$(java.lang.String)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$(java.lang.String)>" -> "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
"<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory$SocketTask: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InterruptedIOException: void <init>(java.lang.String)>" -> "<java.io.IOException: void <init>()>";
"<java.io.InterruptedIOException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.TimeoutController: void execute(java.lang.Thread,long)>" -> "<org.apache.commons.httpclient.util.TimeoutController$TimeoutException: void <init>()>";
"<org.apache.commons.httpclient.util.TimeoutController$TimeoutException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<org.apache.commons.httpclient.util.TimeoutController: void execute(java.lang.Thread,long)>" -> "<java.lang.Thread: void run()>";
"<org.apache.commons.httpclient.util.TimeoutController: void execute(java.lang.Thread,long)>" -> "<java.lang.Thread: void start()>";
"<org.apache.commons.httpclient.util.TimeoutController: void execute(java.lang.Thread,long)>" -> "<java.lang.Thread: void join(long)>";
"<org.apache.commons.httpclient.util.TimeoutController: void execute(java.lang.Thread,long)>" -> "<java.lang.Thread: boolean isAlive()>";
"<org.apache.commons.httpclient.util.TimeoutController: void execute(java.lang.Thread,long)>" -> "<java.lang.Thread: void interrupt()>";
"<java.lang.Thread: void run()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void start()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void join(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: boolean isAlive()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void interrupt()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.util.TimeoutController: void execute(java.lang.Runnable,long)>" -> "<java.lang.Thread: void setDaemon(boolean)>";
"<java.lang.Thread: void setDaemon(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.net.Socket createSocket(java.lang.String,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory: java.net.Socket createSocket(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory: java.net.Socket createSocket(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory: java.net.Socket createSocket(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory: java.net.Socket createSocket(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory: java.net.Socket createSocket(org.apache.commons.httpclient.protocol.ProtocolSocketFactory,java.lang.String,int,java.net.InetAddress,int,int)>" -> "<org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory$SocketTask: java.net.Socket getSocket()>";
"<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>" -> "<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>";
"<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>" -> "<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>";
"<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>" -> "<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>";
"<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>" -> "<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)>";
"<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)>" -> "<java.lang.Object: void <init>()>";
"<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.net.Socket: void setTcpNoDelay(boolean)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.net.Socket: void setSoTimeout(int)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.net.Socket: void setSoLinger(boolean,int)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.net.Socket: void setSendBufferSize(int)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.net.Socket: void setReceiveBufferSize(int)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.net.Socket: int getSendBufferSize()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.net.Socket: int getReceiveBufferSize()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.net.Socket: java.io.InputStream getInputStream()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.net.Socket: java.io.OutputStream getOutputStream()>";
"<java.net.Socket: void setTcpNoDelay(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.Socket: void setSoTimeout(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.Socket: void setSoLinger(boolean,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.Socket: void setSendBufferSize(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.Socket: void setReceiveBufferSize(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.Socket: int getSendBufferSize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.Socket: int getReceiveBufferSize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.Socket: java.io.InputStream getInputStream()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.net.Socket: java.io.OutputStream getOutputStream()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.HttpConnection: void closeSocketAndStreams()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: boolean getTcpNoDelay()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getLinger()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getSendBufferSize()>";
"<org.apache.commons.httpclient.HttpConnection: void open()>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getReceiveBufferSize()>";
"<org.apache.commons.httpclient.params.HttpConnectionParams: int getLinger()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: int getIntParameter(java.lang.String,int)>";
"<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: int getIntParameter(java.lang.String,int)>";
"<org.apache.commons.httpclient.params.HttpConnectionParams: boolean getTcpNoDelay()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>";
"<org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getConnectionTimeout()>";
"<org.apache.commons.httpclient.params.HttpConnectionParams: int getConnectionTimeout()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: int getIntParameter(java.lang.String,int)>";
"<org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getConnectionTimeout()>";
"<org.apache.commons.httpclient.HttpMethodBase: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void setLastResponseInputStream(java.io.InputStream)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void setLastResponseInputStream(java.io.InputStream)>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.io.InputStream getResponseInputStream()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>";
"<org.apache.commons.httpclient.HttpConnection: java.io.InputStream getResponseInputStream()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: boolean isSocketTimeoutException(java.io.InterruptedIOException)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<org.apache.commons.httpclient.HttpConnection: void assertOpen()>";
"<org.apache.commons.httpclient.HttpConnection: void assertOpen()>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<java.net.Socket: void setSoTimeout(int)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<java.net.Socket: void setSoTimeout(int)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<java.net.Socket: void setSoTimeout(int)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<java.net.Socket: void setSoTimeout(int)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<java.io.BufferedInputStream: int available()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<java.io.BufferedInputStream: void mark(int)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<java.io.BufferedInputStream: int read()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>" -> "<java.io.BufferedInputStream: void reset()>";
"<java.io.BufferedInputStream: int available()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedInputStream: void mark(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedInputStream: int read()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedInputStream: void reset()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: java.io.InputStream getResponseInputStream()>" -> "<org.apache.commons.httpclient.HttpConnection: void assertOpen()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: int getPort()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: int getPort()>";
"<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.io.InputStream getResponseInputStream()>";
"<org.apache.commons.httpclient.HttpParser: byte[] readRawLine(java.io.InputStream)>" -> "<java.io.BufferedInputStream: int read()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String readLine(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpConnection: java.lang.String readLine(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: java.lang.String readLine(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: java.lang.String readLine(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpParser: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: java.lang.String readLine(java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: void assertOpen()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void writeLine()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void flushRequestOutputStream()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void flushRequestOutputStream()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>";
"<org.apache.commons.httpclient.HttpConnection: void writeLine()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void flushRequestOutputStream()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>";
"<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>" -> "<org.apache.commons.httpclient.HttpConnection: void assertOpen()>";
"<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>" -> "<java.net.Socket: void setSoTimeout(int)>";
"<org.apache.commons.httpclient.HttpConnection: void flushRequestOutputStream()>" -> "<org.apache.commons.httpclient.HttpConnection: void assertOpen()>";
"<org.apache.commons.httpclient.HttpConnection: void flushRequestOutputStream()>" -> "<java.io.BufferedOutputStream: void flush()>";
"<java.io.BufferedOutputStream: void flush()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void writeLine()>" -> "<org.apache.commons.httpclient.HttpConnection: void write(byte[])>";
"<org.apache.commons.httpclient.HttpConnection: void write(byte[])>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void write(byte[])>" -> "<org.apache.commons.httpclient.HttpConnection: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.HttpConnection: void write(byte[],int,int)>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void write(byte[],int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void write(byte[],int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void write(byte[],int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void write(byte[],int,int)>" -> "<org.apache.commons.httpclient.HttpConnection: void assertOpen()>";
"<org.apache.commons.httpclient.HttpConnection: void write(byte[],int,int)>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<java.io.BufferedOutputStream: void write(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream getRequestOutputStream()>";
"<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream getRequestOutputStream()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream getRequestOutputStream()>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void <init>(java.io.OutputStream,org.apache.commons.httpclient.Wire)>";
"<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream getRequestOutputStream()>" -> "<org.apache.commons.httpclient.Wire: void <clinit>()>";
"<org.apache.commons.httpclient.WireLogOutputStream: void <init>(java.io.OutputStream,org.apache.commons.httpclient.Wire)>" -> "<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>";
"<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream getRequestOutputStream()>" -> "<org.apache.commons.httpclient.Wire: boolean enabled()>";
"<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream getRequestOutputStream()>" -> "<org.apache.commons.httpclient.HttpConnection: void assertOpen()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.io.FilterOutputStream: void flush()>";
"<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<java.io.BufferedOutputStream: void flush()>";
"<java.io.FilterOutputStream: void flush()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<java.io.FilterOutputStream: void write(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>" -> "<org.apache.commons.httpclient.Wire: void output(byte[])>";
"<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void sendData(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.StringPart: void sendData(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendData(java.io.OutputStream)>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>" -> "<org.apache.commons.httpclient.Wire: void output(byte[],int,int)>";
"<org.apache.commons.httpclient.Wire: void output(byte[],int,int)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.Wire: void output(byte[],int,int)>" -> "<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>";
"<org.apache.commons.httpclient.Wire: void output(byte[],int,int)>" -> "<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>";
"<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEnd(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEnd(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.FilePart: void sendDispositionHeader(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void flush()>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.StringRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<java.io.BufferedOutputStream: void flush()>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void writeRequest(java.io.OutputStream)>" -> "<java.io.FilterOutputStream: void write(byte[])>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void print(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void print(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void print(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void print(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void print(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: void write(byte[])>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: int getPort()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: int getPort()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: int getPort()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.Protocol: java.lang.String getScheme()>";
"<org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>";
"<org.apache.commons.httpclient.HttpMethodBase: void writeRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void print(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: int getPort()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addProxyConnectionHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: int getPort()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: void printLine(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: int getPort()>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpConnection: void printLine(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void printLine(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void printLine(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.util.EncodingUtil: void <clinit>()>";
"<org.apache.commons.httpclient.ConnectMethod: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>";
"<org.apache.commons.httpclient.HttpConnection: void printLine(java.lang.String,java.lang.String)>" -> "<org.apache.commons.httpclient.HttpConnection: void writeLine(byte[])>";
"<org.apache.commons.httpclient.HttpConnection: void writeLine(byte[])>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: void writeLine(byte[])>" -> "<org.apache.commons.httpclient.HttpConnection: void write(byte[])>";
"<org.apache.commons.httpclient.HttpConnection: void writeLine(byte[])>" -> "<org.apache.commons.httpclient.HttpConnection: void writeLine()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void applyConnectionParams(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void applyConnectionParams(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>";
"<org.apache.commons.httpclient.HttpMethodDirector: void applyConnectionParams(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: java.lang.Object getParameter(java.lang.String)>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: int getPort()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: int getProxyPort()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticate(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void authenticate(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean closeIfStale()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: void open()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: void close()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: void close()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: void close()>";
"<org.apache.commons.httpclient.HttpConnection: boolean closeIfStale()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: boolean isStaleCheckingEnabled()>";
"<org.apache.commons.httpclient.params.HttpConnectionParams: boolean isStaleCheckingEnabled()>" -> "<org.apache.commons.httpclient.params.DefaultHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>";
"<org.apache.commons.httpclient.HttpConnection: boolean closeIfStale()>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isStale()>";
"<org.apache.commons.httpclient.HttpConnection: boolean closeIfStale()>" -> "<org.apache.commons.httpclient.HttpConnection: void close()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isStale()>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isStale()>" -> "<org.apache.commons.httpclient.util.ExceptionUtil: boolean isSocketTimeoutException(java.io.InterruptedIOException)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isStale()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isStale()>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isStale()>" -> "<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isStale()>" -> "<java.net.Socket: void setSoTimeout(int)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isStale()>" -> "<java.net.Socket: void setSoTimeout(int)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isStale()>" -> "<java.net.Socket: void setSoTimeout(int)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isStale()>" -> "<java.io.BufferedInputStream: int available()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isStale()>" -> "<java.io.BufferedInputStream: void mark(int)>";
"<org.apache.commons.httpclient.HttpConnection: boolean isStale()>" -> "<java.io.BufferedInputStream: int read()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isStale()>" -> "<java.io.BufferedInputStream: void reset()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.HttpConnection: int getPort()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>" -> "<org.apache.commons.httpclient.protocol.Protocol: java.lang.String getScheme()>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.net.Socket: void setSendBufferSize(int)>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.net.Socket: void setReceiveBufferSize(int)>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.net.Socket: int getSendBufferSize()>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.net.Socket: int getReceiveBufferSize()>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.net.Socket: java.io.InputStream getInputStream()>";
"<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>" -> "<java.net.Socket: java.io.OutputStream getOutputStream()>";
"<org.apache.commons.httpclient.HttpConnection: void closeSocketAndStreams()>" -> "<java.net.Socket: void close()>";
"<java.net.Socket: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void closeSocketAndStreams()>" -> "<java.io.BufferedInputStream: void close()>";
"<java.io.BufferedInputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.HttpConnection: void closeSocketAndStreams()>" -> "<java.io.FilterOutputStream: void close()>";
"<java.io.FilterOutputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.AutoCloseInputStream: void close()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>" -> "<java.io.FilterInputStream: void close()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ChunkedInputStream: void close()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.ContentLengthInputStream: void close()>";
"<org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>" -> "<java.io.BufferedInputStream: void close()>";
"<org.apache.commons.httpclient.auth.AuthScope: boolean paramsEqual(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.apache.commons.httpclient.WireLogInputStream: int read(byte[])>" -> "<java.io.FilterInputStream: int read(byte[])>";
"<org.apache.commons.httpclient.ContentLengthInputStream: int read()>" -> "<java.io.BufferedInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read()>" -> "<java.io.BufferedInputStream: int read()>";
"<org.apache.commons.httpclient.WireLogInputStream: int read()>" -> "<java.io.BufferedInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<java.io.BufferedInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>" -> "<java.io.BufferedInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.io.BufferedInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>" -> "<java.io.BufferedInputStream: int read()>";
"<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[],int,int)>" -> "<java.io.BufferedInputStream: int read(byte[],int,int)>";
"<java.io.BufferedInputStream: int read(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.apache.commons.httpclient.WireLogInputStream: int read(byte[],int,int)>" -> "<java.io.BufferedInputStream: int read(byte[],int,int)>";
"<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[],int,int)>" -> "<java.io.BufferedInputStream: int read(byte[],int,int)>";
"<org.apache.commons.httpclient.HttpMethodBase: void releaseConnection()>" -> "<java.io.BufferedInputStream: void close()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flush()>" -> "<java.io.FilterOutputStream: void flush()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flush()>" -> "<java.io.BufferedOutputStream: void flush()>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void writeClosingChunk()>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void writeClosingChunk()>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void writeClosingChunk()>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void writeClosingChunk()>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void writeClosingChunk()>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void writeClosingChunk()>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<org.apache.commons.httpclient.WireLogOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>" -> "<java.io.BufferedOutputStream: void write(byte[],int,int)>";
"<org.apache.commons.httpclient.HttpMethodBase: void ensureConnectionRelease()>" -> "<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>";
"<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>" -> "<org.apache.commons.httpclient.HttpConnection: void setLastResponseInputStream(java.io.InputStream)>";
"<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>" -> "<org.apache.commons.httpclient.HttpConnection: void close()>";
"<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable()>";
"<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>" -> "<org.apache.commons.httpclient.HttpConnection: void close()>";
"<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>" -> "<org.apache.commons.httpclient.HttpConnection: void close()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable()>" -> "<org.apache.commons.httpclient.HttpConnection: void <clinit>()>";
"<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable()>" -> "<java.io.BufferedInputStream: int available()>";
"<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>";
"<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>" -> "<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>";
"<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>" -> "<java.io.FilterInputStream: int read(byte[])>";
"<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>" -> "<java.io.BufferedInputStream: void close()>";
"<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>" -> "<java.io.BufferedInputStream: void close()>";
}
