digraph CallGraph {
"<com.fresh.cleaner.utils.CpressUtil: void main(java.lang.String[])>" -> "<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,java.lang.String)>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,java.lang.String)>" -> "<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<android.util.Log: int e(java.lang.String,java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.util.ArrayList: void <init>()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<net.lingala.zip4j.core.ZipFile: void <init>(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<net.lingala.zip4j.model.ZipParameters: void <init>()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<android.util.Log: int e(java.lang.String,java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.util.Collections: void <clinit>()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<android.text.TextUtils: void <clinit>()>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<android.util.Log: int e(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void <init>(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.core.ZipFile: void <init>(java.lang.String)>" -> "<net.lingala.zip4j.core.ZipFile: void <init>(java.io.File)>";
"<net.lingala.zip4j.core.ZipFile: void <init>(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.model.ZipParameters: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.model.ZipParameters: void <init>()>" -> "<java.util.TimeZone: java.util.TimeZone getDefault()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<android.text.TextUtils: void <clinit>()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<com.fresh.cleaner.utils.CpressUtil: void createDestDirectoryIfNecessary(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void <init>(java.io.File)>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.core.ZipFile: void <init>(java.io.File)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void <init>()>";
"<net.lingala.zip4j.core.ZipFile: void <init>(java.io.File)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String,int)>";
"<java.util.TimeZone: java.util.TimeZone getDefault()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: void createDestDirectoryIfNecessary(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<com.fresh.cleaner.utils.CpressUtil: void createDestDirectoryIfNecessary(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: void createDestDirectoryIfNecessary(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.progress.ProgressMonitor: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String,int)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: void createDestDirectoryIfNecessary(java.lang.String)>" -> "<java.io.File: boolean exists()>";
"<com.fresh.cleaner.utils.CpressUtil: void createDestDirectoryIfNecessary(java.lang.String)>" -> "<java.io.File: boolean mkdirs()>";
"<java.io.File: boolean exists()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: boolean mkdirs()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.progress.ProgressMonitor: void <init>()>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void reset()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void <init>(java.io.File)>" -> "<java.io.File: java.lang.String getPath()>";
"<java.io.File: java.lang.String getPath()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<net.lingala.zip4j.core.ZipFile: void addFolder(java.io.File,net.lingala.zip4j.model.ZipParameters)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<net.lingala.zip4j.core.ZipFile: void addFile(java.io.File,net.lingala.zip4j.model.ZipParameters)>";
"<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.core.ZipFile: void checkZipModel()>";
"<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.zip.ZipEngine: void <init>(net.lingala.zip4j.model.ZipModel)>";
"<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean checkArrayListTypes(java.util.ArrayList,int)>";
"<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void addFolder(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void addFolder(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.core.ZipFile: void addFolder(java.io.File,net.lingala.zip4j.model.ZipParameters,boolean)>";
"<net.lingala.zip4j.core.ZipFile: void addFolder(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void addFile(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<java.util.ArrayList: void <init>()>";
"<net.lingala.zip4j.core.ZipFile: void checkZipModel()>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void checkZipModel()>" -> "<net.lingala.zip4j.core.ZipFile: void createNewZipModel()>";
"<net.lingala.zip4j.core.ZipFile: void checkZipModel()>" -> "<net.lingala.zip4j.core.ZipFile: void readZipInfo()>";
"<net.lingala.zip4j.zip.ZipEngine: void <init>(net.lingala.zip4j.model.ZipModel)>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.zip.ZipEngine: void <init>(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.io.File)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkArrayListTypes(java.util.ArrayList,int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void addFolder(java.io.File,net.lingala.zip4j.model.ZipParameters,boolean)>" -> "<net.lingala.zip4j.core.ZipFile: void checkZipModel()>";
"<net.lingala.zip4j.core.ZipFile: void addFolder(java.io.File,net.lingala.zip4j.model.ZipParameters,boolean)>" -> "<net.lingala.zip4j.zip.ZipEngine: void <init>(net.lingala.zip4j.model.ZipModel)>";
"<net.lingala.zip4j.core.ZipFile: void addFolder(java.io.File,net.lingala.zip4j.model.ZipParameters,boolean)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void addFolder(java.io.File,net.lingala.zip4j.model.ZipParameters,boolean)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void createNewZipModel()>" -> "<net.lingala.zip4j.model.ZipModel: void <init>()>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<net.lingala.zip4j.core.HeaderReader: void <init>(java.io.RandomAccessFile)>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.io.File)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.model.ZipModel: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>" -> "<java.lang.Exception: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderReader: void <init>(java.io.RandomAccessFile)>" -> "<java.lang.Object: void <init>()>";
"<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>" -> "<java.io.RandomAccessFile: void finalize()>";
"<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<java.lang.Exception: void <init>(java.lang.Throwable)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.RandomAccessFile: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>" -> "<java.io.File: boolean canRead()>";
"<java.io.File: boolean canRead()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.io.File)>" -> "<java.io.File: boolean exists()>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.String: void <init>(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.String: void <init>(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.FileHeader)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: void readAndSaveExtraDataRecord(net.lingala.zip4j.model.FileHeader)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Zip4jUtil: java.lang.String decodeFileName(byte[],boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] getLongByteFromIntByte(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.String: void <init>(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] getLongByteFromIntByte(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] getLongByteFromIntByte(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.DigitalSignature: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.util.ArrayList: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.CentralDirectory: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String,int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.core.HeaderReader: void setFilePointerToReadZip64EndCentralDirLoc()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<java.lang.String: void <init>(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] getLongByteFromIntByte(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String,java.lang.Throwable,int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.util.Raw: int readLeInt(java.io.DataInput,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String,int)>";
"<java.lang.String: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String,java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveExtraDataRecord(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveExtraDataRecord(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveExtraDataRecord(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<java.lang.System: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String decodeFileName(byte[],boolean)>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String decodeFileName(byte[],boolean)>" -> "<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getCp850EncodedString(byte[])>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String decodeFileName(byte[],boolean)>" -> "<java.lang.String: void <init>(byte[])>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String decodeFileName(byte[],boolean)>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String decodeFileName(byte[],boolean)>" -> "<java.lang.String: void <clinit>()>";
"<java.lang.String: void <init>(byte[],java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.String: void <init>(byte[],java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: byte[] getLongByteFromIntByte(byte[])>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: byte[] getLongByteFromIntByte(byte[])>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.model.FileHeader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.model.DigitalSignature: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.model.CentralDirectory: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: void setFilePointerToReadZip64EndCentralDirLoc()>" -> "<net.lingala.zip4j.util.Raw: int readLeInt(java.io.DataInput,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: void setFilePointerToReadZip64EndCentralDirLoc()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String,java.lang.Throwable,int)>" -> "<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>";
"<net.lingala.zip4j.util.Raw: int readLeInt(java.io.DataInput,byte[])>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.model.EndCentralDirRecord: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<java.lang.String: void <init>(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<net.lingala.zip4j.util.Raw: short readShortBigEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<net.lingala.zip4j.model.ExtraDataRecord: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<java.util.ArrayList: void <init>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getCp850EncodedString(byte[])>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getCp850EncodedString(byte[])>" -> "<java.lang.String: void <init>(byte[])>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getCp850EncodedString(byte[])>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getCp850EncodedString(byte[])>" -> "<java.lang.String: void <clinit>()>";
"<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.model.AESExtraDataRecord: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.model.Zip64ExtendedInfo: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.model.ExtraDataRecord: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: long getUnCompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: long getUnCompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: long getCompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: long getCompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: long getOffsetLocalHeader()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: long getOffsetLocalHeader()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: int getDiskNumberStart()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: int getDiskNumberStart()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: int getNoOfThisDisk()>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<net.lingala.zip4j.model.ExtraDataRecord: void setHeader(long)>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<net.lingala.zip4j.model.ExtraDataRecord: void setSizeOfData(int)>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<net.lingala.zip4j.model.ExtraDataRecord: void setData(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: void setUnCompressedSize(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: void setCompressedSize(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: void setOffsetLocalHeader(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: void setDiskNumberStart(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void setSignature(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void setDataSize(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void setVersionNumber(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void setVendorID(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void setAesStrength(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void setCompressionMethod(int)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveExtraDataRecord(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: int getExtraFieldLength()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveExtraDataRecord(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: void setExtraDataRecords(java.util.ArrayList)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: java.util.ArrayList getExtraDataRecords()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: java.util.ArrayList getExtraDataRecords()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: java.util.ArrayList getExtraDataRecords()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: long getUncompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: long getCompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: long getOffsetLocalHeader()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: int getDiskNumberStart()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: void setZip64ExtendedInfo(net.lingala.zip4j.model.Zip64ExtendedInfo)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: void setUncompressedSize(long)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: void setCompressedSize(long)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: void setOffsetLocalHeader(long)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: void setDiskNumberStart(int)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<java.util.ArrayList: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: java.util.ArrayList getExtraDataRecords()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: java.util.ArrayList getExtraDataRecords()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: java.util.ArrayList getExtraDataRecords()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: void setAesExtraDataRecord(net.lingala.zip4j.model.AESExtraDataRecord)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.FileHeader: void setEncryptionMethod(int)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.FileHeader)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setSignature(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setNoOfThisDisk(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setNoOfThisDiskStartOfCentralDir(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setTotNoOfEntriesInCentralDirOnThisDisk(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setTotNoOfEntriesInCentralDir(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setSizeOfCentralDir(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setOffsetOfStartOfCentralDir(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setCommentLength(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setComment(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setCommentBytes(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: int getNoOfThisDisk()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setComment(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void setSignature(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void setNoOfDiskStartOfZip64EndOfCentralDirRec(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void setOffsetZip64EndOfCentralDirRec(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void setTotNumberOfDiscs(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void setSignature(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void setSizeOfZip64EndCentralDirRec(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void setVersionMadeBy(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void setVersionNeededToExtract(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void setNoOfThisDisk(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void setNoOfThisDiskStartOfCentralDir(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void setTotNoOfEntriesInCentralDirOnThisDisk(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void setTotNoOfEntriesInCentralDir(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void setSizeOfCentralDir(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void setOffsetStartCenDirWRTStartDiskNo(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: long getSizeOfZip64EndCentralDirRec()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void setExtensibleDataSector(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.String: java.lang.String substring(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<java.lang.String: int indexOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: boolean endsWith(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setSignature(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setVersionMadeBy(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setVersionNeededToExtract(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setFileNameUTF8Encoded(boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setEncrypted(boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setGeneralPurposeFlag(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setDataDescriptorExists(boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setCompressionMethod(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setLastModFileTime(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setCrc32(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setCrcBuff(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setCompressedSize(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setUncompressedSize(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setFileNameLength(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setExtraFieldLength(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setFileComment(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setDiskNumberStart(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setInternalFileAttr(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setExternalFileAttr(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setOffsetLocalHeader(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: boolean isFileNameUTF8Encoded()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setFileName(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setDirectory(boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setFileComment(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.FileHeader: void setFileName(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.DigitalSignature: void setHeaderSignature(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.DigitalSignature: void setSizeOfData(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.DigitalSignature: void setSignatureData(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<java.lang.Object: java.lang.Object clone()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.CentralDirectory: void setFileHeaders(java.util.ArrayList)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: void setFileNameCharset(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: void setEndCentralDirRecord(net.lingala.zip4j.model.EndCentralDirRecord)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: void setZip64EndCentralDirLocator(net.lingala.zip4j.model.Zip64EndCentralDirLocator)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: boolean isZip64Format()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: void setZip64EndCentralDirRecord(net.lingala.zip4j.model.Zip64EndCentralDirRecord)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirRecord getZip64EndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirRecord getZip64EndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: void setSplitArchive(boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: void setCentralDirectory(net.lingala.zip4j.model.CentralDirectory)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.ZipModel readAllHeaders(java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: void setSplitArchive(boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.ZipModel: void setSplitArchive(boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.ZipModel: void setSplitArchive(boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<java.io.RandomAccessFile: long length()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord()>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<java.io.RandomAccessFile: long length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.RandomAccessFile: void seek(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Raw: int readLeInt(java.io.DataInput,byte[])>" -> "<java.io.RandomAccessFile: void readFully(byte[],int,int)>";
"<java.io.RandomAccessFile: void readFully(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>" -> "<java.io.RandomAccessFile: int read(byte[],int,int)>";
"<java.io.RandomAccessFile: int read(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: void setFilePointerToReadZip64EndCentralDirLoc()>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<net.lingala.zip4j.core.HeaderReader: void setFilePointerToReadZip64EndCentralDirLoc()>" -> "<java.io.RandomAccessFile: long length()>";
"<net.lingala.zip4j.core.HeaderReader: void setFilePointerToReadZip64EndCentralDirLoc()>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<net.lingala.zip4j.core.HeaderReader: void setFilePointerToReadZip64EndCentralDirLoc()>" -> "<java.io.RandomAccessFile: long getFilePointer()>";
"<java.io.RandomAccessFile: long getFilePointer()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.model.ZipModel: void setZip64Format(boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator()>" -> "<net.lingala.zip4j.model.ZipModel: void setZip64Format(boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: long getOffsetZip64EndOfCentralDirRec()>";
"<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>" -> "<java.io.RandomAccessFile: int read(byte[])>";
"<java.io.RandomAccessFile: int read(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.ZipModel: boolean isZip64Format()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirRecord getZip64EndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirRecord getZip64EndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getFileNameCharset()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getFileNameCharset()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: long getOffsetOfStartOfCentralDir()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: int getTotNoOfEntriesInCentralDir()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>" -> "<java.lang.String: int length()>";
"<java.lang.String: java.lang.String trim()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<net.lingala.zip4j.model.ZipModel: void setZipFile(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<java.io.RandomAccessFile: void close()>";
"<java.io.RandomAccessFile: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void readZipInfo()>" -> "<java.io.RandomAccessFile: void close()>";
"<net.lingala.zip4j.core.ZipFile: void createNewZipModel()>" -> "<net.lingala.zip4j.model.ZipModel: void setZipFile(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void createNewZipModel()>" -> "<net.lingala.zip4j.model.ZipModel: void setFileNameCharset(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void addFolder(java.io.File,net.lingala.zip4j.model.ZipParameters,boolean)>" -> "<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.util.ArrayList: void <init>()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.util.Zip4jUtil: java.util.ArrayList getFilesInDirectoryRec(java.io.File,boolean)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.util.ArrayList getFilesInDirectoryRec(java.io.File,boolean)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.util.ArrayList getFilesInDirectoryRec(java.io.File,boolean)>" -> "<net.lingala.zip4j.util.Zip4jUtil: java.util.ArrayList getFilesInDirectoryRec(java.io.File,boolean)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.util.ArrayList getFilesInDirectoryRec(java.io.File,boolean)>" -> "<java.util.Arrays: java.util.List asList(java.lang.Object[])>";
"<net.lingala.zip4j.util.Zip4jUtil: java.util.ArrayList getFilesInDirectoryRec(java.io.File,boolean)>" -> "<java.util.ArrayList: void <init>()>";
"<java.util.Arrays: java.util.List asList(java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.util.ArrayList getFilesInDirectoryRec(java.io.File,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.util.ArrayList getFilesInDirectoryRec(java.io.File,boolean)>" -> "<java.util.ArrayList: boolean addAll(java.util.Collection)>";
"<java.util.ArrayList: boolean addAll(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.zip.ZipEngine$1: void <init>(net.lingala.zip4j.zip.ZipEngine,java.lang.String,java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.Zip4jUtil: long getFileLengh(java.io.File)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.ZipOutputStream: void <init>(java.io.OutputStream,net.lingala.zip4j.model.ZipModel)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void <init>(java.io.File,long)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.zip.ZipEngine: net.lingala.zip4j.model.EndCentralDirRecord createEndOfCentralDirectoryRecord()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine$1: void <init>(net.lingala.zip4j.zip.ZipEngine,java.lang.String,java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.Thread: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.util.Zip4jUtil: long getFileLengh(java.io.File)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.util.Zip4jUtil: long getFileLengh(java.io.File)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.util.Zip4jUtil: long getFileLengh(java.io.File)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.FileInputStream: void finalize()>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.InputStream: void <init>()>";
"<net.lingala.zip4j.util.Zip4jUtil: long getFileLengh(java.io.File)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.zip.CRC32: void <init>()>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileReadAccess(java.lang.String)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.io.ZipOutputStream: void <init>(java.io.OutputStream,net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.io.DeflaterOutputStream: void <init>(java.io.OutputStream,net.lingala.zip4j.model.ZipModel)>";
"<net.lingala.zip4j.io.SplitOutputStream: void <init>(java.io.File,long)>" -> "<java.io.OutputStream: void <init>()>";
"<net.lingala.zip4j.io.SplitOutputStream: void <init>(java.io.File,long)>" -> "<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void <init>(java.io.File,long)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.Long: void <clinit>()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.Long: long parseLong(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.zip.ZipEngine: java.io.RandomAccessFile prepareFileOutputStream()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.ArchiveMaintainer: void <init>()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: net.lingala.zip4j.model.EndCentralDirRecord createEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getFileNameFromFilePath(java.io.File)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<net.lingala.zip4j.util.InternalZipConstants: void <clinit>()>";
"<java.io.FileInputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.zip.CRC32: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.zip.CRC32: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void <init>(java.io.OutputStream,net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void <init>(java.io.OutputStream,net.lingala.zip4j.model.ZipModel)>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void <init>(java.io.OutputStream,net.lingala.zip4j.model.ZipModel)>" -> "<java.util.zip.Deflater: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Long: long parseLong(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: java.io.RandomAccessFile prepareFileOutputStream()>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.zip.ZipEngine: java.io.RandomAccessFile prepareFileOutputStream()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.zip.ZipEngine: java.io.RandomAccessFile prepareFileOutputStream()>" -> "<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: java.io.RandomAccessFile prepareFileOutputStream()>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: java.io.RandomAccessFile prepareFileOutputStream()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: java.io.RandomAccessFile prepareFileOutputStream()>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getFileNameFromFilePath(java.io.File)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String valueOf(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.InternalZipConstants: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.util.InternalZipConstants: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<net.lingala.zip4j.util.InternalZipConstants: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void <init>(java.io.OutputStream,net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.io.BaseOutputStream: void <init>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void <init>(java.io.OutputStream,net.lingala.zip4j.model.ZipModel)>" -> "<java.util.zip.CRC32: void <init>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void <init>(java.io.OutputStream,net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>";
"<java.util.zip.Deflater: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.zip.Deflater: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.BaseOutputStream: void <init>()>" -> "<java.io.OutputStream: void <init>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.ZipModel: void <init>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<java.util.ArrayList: void <init>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<java.util.ArrayList: void <init>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.CentralDirectory: void <init>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void <init>()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: long getOffsetOfStartOfCentralDir()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.CentralDirectory: void setFileHeaders(java.util.ArrayList)>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setSignature(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.ZipModel: void setEndCentralDirRecord(net.lingala.zip4j.model.EndCentralDirRecord)>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.ZipModel: void setCentralDirectory(net.lingala.zip4j.model.CentralDirectory)>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.ZipModel: java.util.List getLocalFileHeaderList()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.ZipModel: void setLocalFileHeaderList(java.util.List)>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.ZipModel: void setSplitArchive(boolean)>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.ZipModel: void setSplitLength(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getFileNameFromFilePath(java.io.File)>" -> "<java.io.File: boolean isDirectory()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getFileNameFromFilePath(java.io.File)>" -> "<java.io.File: java.lang.String getName()>";
"<java.io.File: boolean isDirectory()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: java.lang.String getName()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.zip.ZipEngine: java.io.RandomAccessFile prepareFileOutputStream()>" -> "<java.io.File: java.io.File getParentFile()>";
"<net.lingala.zip4j.zip.ZipEngine: java.io.RandomAccessFile prepareFileOutputStream()>" -> "<java.io.File: java.io.File getParentFile()>";
"<java.io.File: java.io.File getParentFile()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.io.File: java.lang.String getPath()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.io.File: boolean isDirectory()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.io.File: java.lang.String getName()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.io.File: java.lang.String getName()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.io.File: boolean isDirectory()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.io.File: java.lang.String getName()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.zip.ZipEngine: net.lingala.zip4j.model.EndCentralDirRecord createEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setSignature(long)>";
"<net.lingala.zip4j.zip.ZipEngine: net.lingala.zip4j.model.EndCentralDirRecord createEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setNoOfThisDisk(int)>";
"<net.lingala.zip4j.zip.ZipEngine: net.lingala.zip4j.model.EndCentralDirRecord createEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setTotNoOfEntriesInCentralDir(int)>";
"<net.lingala.zip4j.zip.ZipEngine: net.lingala.zip4j.model.EndCentralDirRecord createEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setTotNoOfEntriesInCentralDirOnThisDisk(int)>";
"<net.lingala.zip4j.zip.ZipEngine: net.lingala.zip4j.model.EndCentralDirRecord createEndOfCentralDirectoryRecord()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setOffsetOfStartOfCentralDir(long)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.ArchiveMaintainer: void restoreFileName(java.io.File,java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.Long: java.lang.String toString(long)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.core.HeaderWriter: void <init>()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.System: long currentTimeMillis()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.core.HeaderReader: void <init>(java.io.RandomAccessFile)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.ArchiveMaintainer: java.io.RandomAccessFile createFileHandler(net.lingala.zip4j.model.ZipModel,java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void <init>(java.io.File)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.System: long currentTimeMillis()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.ArchiveMaintainer: void restoreFileName(java.io.File,java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.HashMap: void <init>()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.Long: void <clinit>()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void restoreFileName(java.io.File,java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void restoreFileName(java.io.File,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void restoreFileName(java.io.File,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void restoreFileName(java.io.File,java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<java.lang.Long: java.lang.String toString(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.io.RandomAccessFile createFileHandler(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.io.RandomAccessFile createFileHandler(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.io.RandomAccessFile createFileHandler(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.io.RandomAccessFile createFileHandler(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.io.RandomAccessFile createFileHandler(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.io.RandomAccessFile createFileHandler(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void <init>(java.io.File)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void <init>(java.io.File,long)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<java.util.HashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>";
"<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>";
"<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>";
"<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>" -> "<net.lingala.zip4j.io.SplitOutputStream: boolean isHeaderData(byte[])>";
"<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.File: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getZipFileNameWithoutExt(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.File: void <clinit>()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.io.SplitOutputStream: boolean isHeaderData(byte[])>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.io.SplitOutputStream: boolean isHeaderData(byte[])>" -> "<net.lingala.zip4j.util.Zip4jUtil: long[] getAllHeaderSignatures()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getZipFileNameWithoutExt(java.lang.String)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getZipFileNameWithoutExt(java.lang.String)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getZipFileNameWithoutExt(java.lang.String)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getZipFileNameWithoutExt(java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getZipFileNameWithoutExt(java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<java.lang.Throwable: java.lang.String getMessage()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.RandomAccessFile: void close()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.File: java.lang.String getName()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.File: java.lang.String getParent()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.File: boolean exists()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.File: java.lang.String getName()>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.File: java.lang.String getParent()>";
"<java.io.File: java.lang.String getAbsolutePath()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: java.lang.String getParent()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>" -> "<java.io.File: boolean renameTo(java.io.File)>";
"<java.io.File: boolean renameTo(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void restoreFileName(java.io.File,java.lang.String)>" -> "<java.io.File: boolean renameTo(java.io.File)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void restoreFileName(java.io.File,java.lang.String)>" -> "<java.io.File: boolean delete()>";
"<java.io.File: boolean delete()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void writeZipHeaderBytes(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,byte[])>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: byte[] byteArrayListToByteArray(java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void <init>()>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void <init>()>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<java.util.ArrayList: void <init>()>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZipHeaderBytes(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,byte[])>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZipHeaderBytes(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,byte[])>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderWriter: byte[] byteArrayListToByteArray(java.util.List)>" -> "<java.lang.Byte: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderWriter: byte[] byteArrayListToByteArray(java.util.List)>" -> "<java.lang.Byte: byte parseByte(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: byte[] byteArrayListToByteArray(java.util.List)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: int countNumberOfFileHeaderEntriesOnDisk(java.util.ArrayList,int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: int countNumberOfFileHeaderEntriesOnDisk(java.util.ArrayList,int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: void <init>()>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void <init>()>";
"<java.lang.Byte: byte parseByte(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>" -> "<java.lang.Byte: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>" -> "<java.lang.Byte: java.lang.String toString(byte)>";
"<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: int countNumberOfFileHeaderEntriesOnDisk(java.util.ArrayList,int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Zip4jUtil: byte[] convertCharset(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<java.lang.System: void <clinit>()>";
"<java.lang.Byte: java.lang.String toString(byte)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: byte[] convertCharset(java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: byte[] convertCharset(java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>" -> "<java.lang.String: void <init>(byte[],java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>" -> "<net.lingala.zip4j.util.InternalZipConstants: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>" -> "<net.lingala.zip4j.util.InternalZipConstants: void <clinit>()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>" -> "<net.lingala.zip4j.util.InternalZipConstants: void <clinit>()>";
"<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: byte[] convertCharset(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<net.lingala.zip4j.util.Zip4jUtil: byte[] convertCharset(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void setNoOfDiskStartOfZip64EndOfCentralDirRec(int)>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void setTotNumberOfDiscs(int)>";
"<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<net.lingala.zip4j.core.HeaderWriter: byte[] byteArrayListToByteArray(java.util.List)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderWriter: byte[] byteArrayListToByteArray(java.util.List)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderWriter: byte[] byteArrayListToByteArray(java.util.List)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderWriter: byte[] byteArrayListToByteArray(java.util.List)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void setOffsetZip64EndOfCentralDirRec(long)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void setNoOfDiskStartOfZip64EndOfCentralDirRec(int)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void setTotNumberOfDiscs(int)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void setNoOfDiskStartOfZip64EndOfCentralDirRec(int)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: void setTotNumberOfDiscs(int)>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.io.SplitOutputStream: long getFilePointer()>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.io.SplitOutputStream: int getCurrSplitFileCounter()>";
"<net.lingala.zip4j.io.SplitOutputStream: long getFilePointer()>" -> "<java.io.RandomAccessFile: long getFilePointer()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZipHeaderBytes(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,byte[])>" -> "<net.lingala.zip4j.io.SplitOutputStream: void write(byte[])>";
"<net.lingala.zip4j.io.SplitOutputStream: void write(byte[])>" -> "<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZipHeaderBytes(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,byte[])>" -> "<net.lingala.zip4j.io.SplitOutputStream: boolean checkBuffSizeAndStartNextSplitFile(int)>";
"<net.lingala.zip4j.io.SplitOutputStream: boolean checkBuffSizeAndStartNextSplitFile(int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.SplitOutputStream: boolean checkBuffSizeAndStartNextSplitFile(int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.io.SplitOutputStream: boolean checkBuffSizeAndStartNextSplitFile(int)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void startNextSplitFile()>";
"<net.lingala.zip4j.io.SplitOutputStream: boolean checkBuffSizeAndStartNextSplitFile(int)>" -> "<net.lingala.zip4j.io.SplitOutputStream: boolean isBuffSizeFitForCurrSplitFile(int)>";
"<net.lingala.zip4j.io.SplitOutputStream: boolean isBuffSizeFitForCurrSplitFile(int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.io.SplitOutputStream: int getCurrSplitFileCounter()>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.io.SplitOutputStream: int getCurrSplitFileCounter()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZipHeaderBytes(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,byte[])>" -> "<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.Integer: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: void readAndSaveExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.util.Zip4jUtil: java.lang.String decodeFileName(byte[],boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] getLongByteFromIntByte(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.util.Raw: long readLongLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] getLongByteFromIntByte(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.Integer: java.lang.String toBinaryString(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.util.Raw: int readShortLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.util.Raw: int readIntLittleEndian(byte[],int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: byte[] readIntoBuff(java.io.RandomAccessFile,byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.core.HeaderReader: java.util.ArrayList readExtraDataRecords(int)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<java.lang.Integer: java.lang.String toBinaryString(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.model.LocalFileHeader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: long getUnCompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: long getUnCompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: long getCompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.Zip64ExtendedInfo: long getCompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: int getExtraFieldLength()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setExtraDataRecords(java.util.ArrayList)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: java.util.ArrayList getExtraDataRecords()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: java.util.ArrayList getExtraDataRecords()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: java.util.ArrayList getExtraDataRecords()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getUncompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getCompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setZip64ExtendedInfo(net.lingala.zip4j.model.Zip64ExtendedInfo)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setUncompressedSize(long)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCompressedSize(long)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: java.util.ArrayList getExtraDataRecords()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: java.util.ArrayList getExtraDataRecords()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: java.util.ArrayList getExtraDataRecords()>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setAesExtraDataRecord(net.lingala.zip4j.model.AESExtraDataRecord)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setEncryptionMethod(int)>";
"<net.lingala.zip4j.core.HeaderReader: void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.String: int length()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.String: char charAt(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.lang.Object: java.lang.Object clone()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setSignature(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setVersionNeededToExtract(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setFileNameUTF8Encoded(boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setEncrypted(boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setGeneralPurposeFlag(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setDataDescriptorExists(boolean)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCompressionMethod(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setLastModFileTime(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCrc32(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCrcBuff(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCompressedSize(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setUncompressedSize(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setFileNameLength(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setExtraFieldLength(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: boolean isFileNameUTF8Encoded()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setFileName(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setOffsetStartOfData(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setPassword(char[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: boolean isEncrypted()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: int getEncryptionMethod()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setEncryptionMethod(int)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getCrc32()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCrc32(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCrcBuff(byte[])>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getCompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCompressedSize(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getUncompressedSize()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setUncompressedSize(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setFileName(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setEncryptionMethod(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.RandomAccessFile: void close()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.RandomAccessFile: void close()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.RandomAccessFile: int read(byte[])>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: boolean exists()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: boolean delete()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.File: boolean delete()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(long)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(long)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void close()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void close()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.SplitOutputStream: long getFilePointer()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void close()>";
"<net.lingala.zip4j.io.SplitOutputStream: void close()>" -> "<java.io.RandomAccessFile: void close()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.RandomAccessFile: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.RandomAccessFile: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.RandomAccessFile: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.RandomAccessFile: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.RandomAccessFile: void close()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.io.SplitOutputStream: boolean isSplitZipFile()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initZipModel(net.lingala.zip4j.model.ZipModel)>" -> "<net.lingala.zip4j.io.SplitOutputStream: long getSplitLength()>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.zip.CRC32: long getValue()>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.zip.CRC32: void update(byte[],int,int)>";
"<java.util.zip.CRC32: long getValue()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.zip.CRC32: void update(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.FileInputStream: int read(byte[])>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.FileInputStream: void close()>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.FileInputStream: void close()>";
"<java.io.FileInputStream: int read(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.FileInputStream: void close()>";
"<net.lingala.zip4j.util.Zip4jUtil: long getFileLengh(java.io.File)>" -> "<java.io.File: boolean isDirectory()>";
"<net.lingala.zip4j.util.Zip4jUtil: long getFileLengh(java.io.File)>" -> "<java.io.File: long length()>";
"<java.io.File: long length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<java.io.File: boolean exists()>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.FileInputStream: int read(byte[])>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.FileInputStream: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.FileInputStream: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.DeflaterOutputStream: void finish()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.DeflaterOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.DeflaterOutputStream: void closeEntry()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.DeflaterOutputStream: void closeEntry()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.ZipOutputStream: void write(byte[],int,int)>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void finish()>" -> "<net.lingala.zip4j.io.CipherOutputStream: void finish()>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.io.DeflaterOutputStream: void deflate()>";
"<net.lingala.zip4j.io.ZipOutputStream: void write(byte[],int,int)>" -> "<net.lingala.zip4j.io.DeflaterOutputStream: void write(byte[],int,int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void finish()>" -> "<net.lingala.zip4j.core.HeaderWriter: void <init>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void initEncrypter()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.core.HeaderWriter: void <init>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean checkFileExists(java.io.File)>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.io.CipherOutputStream: void encryptAndWrite(byte[],int,int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.core.HeaderWriter: void <init>()>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void deflate()>" -> "<net.lingala.zip4j.io.CipherOutputStream: void write(byte[],int,int)>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void deflate()>" -> "<net.lingala.zip4j.io.CipherOutputStream: void write(byte[],int,int)>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void write(byte[],int,int)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void write(byte[],int,int)>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void write(byte[],int,int)>" -> "<net.lingala.zip4j.io.DeflaterOutputStream: void deflate()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initEncrypter()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void initEncrypter()>" -> "<net.lingala.zip4j.crypto.AESEncrpyter: void <init>(char[],int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void initEncrypter()>" -> "<net.lingala.zip4j.crypto.StandardEncrypter: void <init>(char[],int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void <init>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.util.Zip4jUtil: long getFileLengh(java.io.File)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.util.Raw: byte bitArrayToByte(int[])>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.io.CipherOutputStream: int[] generateGeneralPurposeBitArray(boolean,int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.io.CipherOutputStream: int getFileAttributes(java.io.File)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.util.Zip4jUtil: long javaToDosTime(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.util.Zip4jUtil: long getLastModifiedFileTime(java.io.File,java.util.TimeZone)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.util.Zip4jUtil: long javaToDosTime(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<java.lang.System: long currentTimeMillis()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.io.CipherOutputStream: net.lingala.zip4j.model.AESExtraDataRecord generateAESExtraDataRecord(net.lingala.zip4j.model.ZipParameters)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void <init>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void encryptAndWrite(byte[],int,int)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void write(byte[],int,int)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void write(byte[],int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void write(byte[],int,int)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void encryptAndWrite(byte[],int,int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void write(byte[],int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void write(byte[],int,int)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void encryptAndWrite(byte[],int,int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void write(byte[],int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void write(byte[],int,int)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void write(byte[],int,int)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void <init>(char[],int)>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void <init>(char[],int)>" -> "<net.lingala.zip4j.crypto.AESEncrpyter: void init()>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void <init>(char[],int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void <init>(char[],int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.StandardEncrypter: void <init>(char[],int)>" -> "<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: void <clinit>()>";
"<net.lingala.zip4j.crypto.StandardEncrypter: void <init>(char[],int)>" -> "<net.lingala.zip4j.crypto.StandardEncrypter: void init(char[],int)>";
"<net.lingala.zip4j.crypto.StandardEncrypter: void <init>(char[],int)>" -> "<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: void <init>()>";
"<net.lingala.zip4j.crypto.StandardEncrypter: void <init>(char[],int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.StandardEncrypter: void <init>(char[],int)>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.util.Raw: byte bitArrayToByte(int[])>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Raw: byte bitArrayToByte(int[])>" -> "<java.lang.Math: double pow(double,double)>";
"<net.lingala.zip4j.util.Raw: byte bitArrayToByte(int[])>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Raw: byte bitArrayToByte(int[])>" -> "<net.lingala.zip4j.util.Raw: boolean checkBits(int[])>";
"<net.lingala.zip4j.util.Raw: byte bitArrayToByte(int[])>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: int getFileAttributes(java.io.File)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: long javaToDosTime(long)>" -> "<java.util.Calendar: java.util.Calendar getInstance()>";
"<net.lingala.zip4j.util.Zip4jUtil: long getLastModifiedFileTime(java.io.File,java.util.TimeZone)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: long getLastModifiedFileTime(java.io.File,java.util.TimeZone)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: net.lingala.zip4j.model.AESExtraDataRecord generateAESExtraDataRecord(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: net.lingala.zip4j.model.AESExtraDataRecord generateAESExtraDataRecord(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: net.lingala.zip4j.model.AESExtraDataRecord generateAESExtraDataRecord(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void <init>()>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void init()>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void init()>" -> "<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void init()>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: void <init>(byte[])>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void init()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void init()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void init()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void init()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void init()>" -> "<net.lingala.zip4j.crypto.AESEncrpyter: byte[] deriveKey(byte[],char[])>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void init()>" -> "<net.lingala.zip4j.crypto.AESEncrpyter: byte[] generateSalt(int)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void init()>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void init()>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: void <clinit>()>";
"<net.lingala.zip4j.crypto.StandardEncrypter: void init(char[],int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.StandardEncrypter: void init(char[],int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Calendar: java.util.Calendar getInstance()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void <init>(java.lang.String)>" -> "<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void <init>(byte[])>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.crypto.AESEncrpyter: byte[] deriveKey(byte[],char[])>" -> "<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: byte[] deriveKey(byte[],char[])>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: byte[] deriveKey(byte[],char[])>" -> "<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void <init>(net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: byte[] generateSalt(int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: byte[] generateSalt(int)>" -> "<java.util.Random: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>" -> "<java.lang.Object: void <init>()>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void <init>(net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters)>" -> "<java.lang.Object: void <init>()>";
"<java.util.Random: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.Random: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: byte[] generateSalt(int)>" -> "<java.util.Random: int nextInt()>";
"<java.util.Random: int nextInt()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: byte[] deriveKey(byte[],char[])>" -> "<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] deriveKey(char[],int)>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] deriveKey(char[],int)>" -> "<java.lang.NullPointerException: void <init>()>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] deriveKey(char[],int)>" -> "<net.lingala.zip4j.util.Raw: byte[] convertCharArrayToByteArray(char[])>";
"<java.lang.NullPointerException: void <init>()>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.NullPointerException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Raw: byte[] convertCharArrayToByteArray(char[])>" -> "<java.lang.NullPointerException: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] deriveKey(char[],int)>" -> "<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void assertPRF(byte[])>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] deriveKey(char[],int)>" -> "<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] PBKDF2(net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void assertPRF(byte[])>" -> "<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] PBKDF2(net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] PBKDF2(net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] PBKDF2(net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>" -> "<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: int ceil(int,int)>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] PBKDF2(net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>" -> "<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void _F(byte[],int,net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void _F(byte[],int,net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void _F(byte[],int,net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void _F(byte[],int,net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void _F(byte[],int,net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>" -> "<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void INT(byte[],int,int)>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void _F(byte[],int,net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>" -> "<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void xor(byte[],byte[])>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void assertPRF(byte[])>" -> "<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: java.lang.String getHashAlgorithm()>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void assertPRF(byte[])>" -> "<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void init(byte[])>";
"<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void init(byte[])>" -> "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>";
"<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void init(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] deriveKey(char[],int)>" -> "<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: byte[] getSalt()>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] deriveKey(char[],int)>" -> "<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: int getIterationCount()>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void <init>(byte[])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: void init(byte[])>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void init(byte[])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int[][] generateWorkingKey(byte[])>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int[][] generateWorkingKey(byte[])>" -> "<java.lang.Integer: void <clinit>()>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int[][] generateWorkingKey(byte[])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int subWord(int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int[][] generateWorkingKey(byte[])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int subWord(int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int[][] generateWorkingKey(byte[])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int[][] generateWorkingKey(byte[])>" -> "<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int[][] generateWorkingKey(byte[])>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int[][] generateWorkingKey(byte[])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: void <clinit>()>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int subWord(int)>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: void <clinit>()>";
"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: void init()>" -> "<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void init(byte[])>";
"<net.lingala.zip4j.io.CipherOutputStream: net.lingala.zip4j.model.AESExtraDataRecord generateAESExtraDataRecord(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void setSignature(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: net.lingala.zip4j.model.AESExtraDataRecord generateAESExtraDataRecord(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void setDataSize(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: net.lingala.zip4j.model.AESExtraDataRecord generateAESExtraDataRecord(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void setVendorID(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: net.lingala.zip4j.model.AESExtraDataRecord generateAESExtraDataRecord(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void setVersionNumber(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: net.lingala.zip4j.model.AESExtraDataRecord generateAESExtraDataRecord(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void setAesStrength(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: net.lingala.zip4j.model.AESExtraDataRecord generateAESExtraDataRecord(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void setCompressionMethod(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: net.lingala.zip4j.model.AESExtraDataRecord generateAESExtraDataRecord(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: void setAesStrength(int)>";
"<net.lingala.zip4j.crypto.StandardEncrypter: void init(char[],int)>" -> "<net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes(int)>";
"<net.lingala.zip4j.crypto.StandardEncrypter: void init(char[],int)>" -> "<net.lingala.zip4j.crypto.StandardEncrypter: int encryptData(byte[])>";
"<net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes(int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes(int)>" -> "<java.util.Random: void <init>()>";
"<net.lingala.zip4j.crypto.StandardEncrypter: int encryptData(byte[])>" -> "<java.lang.NullPointerException: void <init>()>";
"<net.lingala.zip4j.crypto.StandardEncrypter: int encryptData(byte[])>" -> "<net.lingala.zip4j.crypto.StandardEncrypter: int encryptData(byte[],int,int)>";
"<net.lingala.zip4j.crypto.StandardEncrypter: int encryptData(byte[],int,int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.StandardEncrypter: int encryptData(byte[],int,int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.crypto.StandardEncrypter: int encryptData(byte[],int,int)>" -> "<net.lingala.zip4j.crypto.StandardEncrypter: byte encryptByte(byte)>";
"<net.lingala.zip4j.crypto.StandardEncrypter: byte encryptByte(byte)>" -> "<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: byte decryptByte()>";
"<net.lingala.zip4j.crypto.StandardEncrypter: byte encryptByte(byte)>" -> "<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: void updateKeys(byte)>";
"<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: void updateKeys(byte)>" -> "<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: int crc32(int,byte)>";
"<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: void updateKeys(byte)>" -> "<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: int crc32(int,byte)>";
"<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: int crc32(int,byte)>" -> "<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: void <clinit>()>";
"<net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes(int)>" -> "<java.util.Random: int nextInt(int)>";
"<java.util.Random: int nextInt(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes(int)>" -> "<net.lingala.zip4j.crypto.StandardEncrypter: byte encryptByte(byte)>";
"<net.lingala.zip4j.crypto.StandardEncrypter: void init(char[],int)>" -> "<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: void initKeys(char[])>";
"<net.lingala.zip4j.crypto.StandardEncrypter: void init(char[],int)>" -> "<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: void initKeys(char[])>";
"<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: void initKeys(char[])>" -> "<net.lingala.zip4j.crypto.engine.ZipCryptoEngine: void updateKeys(byte)>";
"<net.lingala.zip4j.io.CipherOutputStream: void encryptAndWrite(byte[],int,int)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setSignature(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setVersionMadeBy(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setVersionNeededToExtract(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setCompressionMethod(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setAesExtraDataRecord(net.lingala.zip4j.model.AESExtraDataRecord)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setEncrypted(boolean)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setEncryptionMethod(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setLastModFileTime(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setCompressionMethod(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setLastModFileTime(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setUncompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setFileName(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setFileNameLength(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setDiskNumberStart(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setExternalFileAttr(byte[])>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setDirectory(boolean)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: boolean isDirectory()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setCompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setUncompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setCrc32(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: boolean isEncrypted()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: java.lang.String getFileName()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setGeneralPurposeFlag(byte[])>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setFileNameLength(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setDiskNumberStart(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setDirectory(boolean)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setCompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setUncompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setCompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setCompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: void setCompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setSignature(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setVersionNeededToExtract(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCompressionMethod(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setLastModFileTime(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setUncompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setFileNameLength(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setFileName(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setEncrypted(boolean)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setEncryptionMethod(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setAesExtraDataRecord(net.lingala.zip4j.model.AESExtraDataRecord)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCrc32(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setGeneralPurposeFlag(byte[])>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: byte[] byteArrayListToByteArray(java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<java.util.ArrayList: void <init>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Zip4jUtil: byte[] convertCharset(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: byte[] byteArrayListToByteArray(java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Zip4jUtil: boolean isStringNotNullAndNotEmpty(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeLongLittleEndian(byte[],int,long)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeShortLittleEndian(byte[],int,short)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.core.HeaderWriter: void copyByteArrayToArrayList(byte[],java.util.List)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.util.Raw: void writeIntLittleEndian(byte[],int,int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<java.util.ArrayList: void <init>()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void finish()>" -> "<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>";
"<net.lingala.zip4j.io.ZipOutputStream: void write(byte[],int,int)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void updateTotalBytesRead(int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void encryptAndWrite(byte[],int,int)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void write(byte[],int,int)>" -> "<java.util.zip.Deflater: void setInput(byte[],int,int)>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void write(byte[],int,int)>" -> "<java.util.zip.Deflater: boolean needsInput()>";
"<java.util.zip.Deflater: void setInput(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.zip.Deflater: boolean needsInput()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void deflate()>" -> "<net.lingala.zip4j.io.CipherOutputStream: void decrementCompressedFileSize(int)>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void deflate()>" -> "<java.util.zip.Deflater: int deflate(byte[],int,int)>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void deflate()>" -> "<java.util.zip.Deflater: boolean finished()>";
"<java.util.zip.Deflater: int deflate(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.zip.Deflater: boolean finished()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.ZipOutputStream: void write(byte[],int,int)>" -> "<java.util.zip.CRC32: void update(byte[],int,int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.ZipModel: java.util.List getLocalFileHeaderList()>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<java.util.zip.CRC32: long getValue()>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<java.util.zip.CRC32: void reset()>";
"<java.util.zip.CRC32: void reset()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.io.SplitOutputStream: void write(byte[])>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void write(byte[])>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void closeEntry()>" -> "<java.util.zip.Deflater: boolean finished()>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void closeEntry()>" -> "<java.util.zip.Deflater: void finish()>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void closeEntry()>" -> "<java.util.zip.Deflater: boolean finished()>";
"<java.util.zip.Deflater: void finish()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.io.SplitOutputStream: int getCurrSplitFileCounter()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getFileNameCharset()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getFileNameCharset()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getFileNameCharset()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createFileHeader()>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getFileNameCharset()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: int getVersionNeededToExtract()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: int getCompressionMethod()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: int getLastModFileTime()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: long getUncompressedSize()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: int getFileNameLength()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: java.lang.String getFileName()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: boolean isEncrypted()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: int getEncryptionMethod()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: net.lingala.zip4j.model.AESExtraDataRecord getAesExtraDataRecord()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: long getCrc32()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: long getCompressedSize()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<net.lingala.zip4j.model.FileHeader: byte[] getGeneralPurposeFlag()>";
"<net.lingala.zip4j.io.CipherOutputStream: void initEncrypter()>" -> "<net.lingala.zip4j.model.LocalFileHeader: int getLastModFileTime()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<java.util.zip.CRC32: void reset()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void write(byte[])>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void write(byte[])>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void write(byte[])>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void write(byte[])>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void write(byte[])>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.io.SplitOutputStream: long getFilePointer()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipModel: boolean isSplitArchive()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: void setZip64Format(boolean)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getFileNameCharset()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getFileNameCharset()>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<java.util.zip.Deflater: void reset()>";
"<net.lingala.zip4j.io.DeflaterOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<java.util.zip.Deflater: void setLevel(int)>";
"<java.util.zip.Deflater: void reset()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.zip.Deflater: void setLevel(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.io.CipherOutputStream: void close()>" -> "<net.lingala.zip4j.io.SplitOutputStream: void close()>";
"<net.lingala.zip4j.io.CipherOutputStream: void finish()>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.io.CipherOutputStream: void finish()>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setOffsetOfStartOfCentralDir(long)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String detectCharSet(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: byte[] getBytes(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: int getEncodedStringLength(java.lang.String,java.lang.String)>" -> "<java.lang.String: byte[] getBytes()>";
"<java.lang.String: byte[] getBytes()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: boolean isZip64Format()>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirRecord getZip64EndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: void setZip64EndCentralDirRecord(net.lingala.zip4j.model.Zip64EndCentralDirRecord)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: void setZip64EndCentralDirLocator(net.lingala.zip4j.model.Zip64EndCentralDirLocator)>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderWriter: void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: long getOffsetOfStartOfCentralDir()>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: boolean isZip64Format()>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirRecord getZip64EndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: void setZip64EndCentralDirRecord(net.lingala.zip4j.model.Zip64EndCentralDirRecord)>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: void setZip64EndCentralDirLocator(net.lingala.zip4j.model.Zip64EndCentralDirLocator)>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setOffsetOfStartOfCentralDir(long)>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setNoOfThisDisk(int)>";
"<net.lingala.zip4j.core.HeaderWriter: void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setNoOfThisDiskStartOfCentralDir(int)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getFileNameCharset()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getFileNameCharset()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: void setZip64Format(boolean)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: boolean isSplitArchive()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: int getNoOfThisDisk()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: int getNoOfThisDiskStartOfCentralDir()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: int getNoOfThisDisk()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: int getNoOfDiskStartOfZip64EndOfCentralDirRec()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: long getOffsetZip64EndOfCentralDirRec()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirLocator: int getTotNumberOfDiscs()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: boolean isSplitArchive()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: long getSignature()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: int getNoOfThisDisk()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: int getNoOfThisDiskStartOfCentralDir()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: int getNoOfThisDisk()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: java.lang.String getComment()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: int getCommentLength()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: byte[] getCommentBytes()>";
"<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>" -> "<java.io.RandomAccessFile: void write(byte[],int,int)>";
"<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>" -> "<java.io.RandomAccessFile: void write(byte[],int,int)>";
"<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>" -> "<java.io.RandomAccessFile: void write(byte[],int,int)>";
"<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>" -> "<java.io.RandomAccessFile: void write(byte[],int,int)>";
"<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>" -> "<java.io.RandomAccessFile: void write(byte[],int,int)>";
"<net.lingala.zip4j.io.SplitOutputStream: void write(byte[],int,int)>" -> "<java.io.RandomAccessFile: void write(byte[],int,int)>";
"<java.io.RandomAccessFile: void write(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>";
"<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.SplitOutputStream: void seek(long)>";
"<net.lingala.zip4j.io.SplitOutputStream: void seek(long)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.FileInputStream: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.FileInputStream: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.FileInputStream: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.io.FileInputStream: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.io.CipherOutputStream: void close()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.zip.ZipEngine$1: void run()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.lang.Thread: void start()>";
"<net.lingala.zip4j.zip.ZipEngine$1: void run()>" -> "<net.lingala.zip4j.zip.ZipEngine: void access$0(net.lingala.zip4j.zip.ZipEngine,java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>";
"<java.lang.Thread: void start()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void access$0(net.lingala.zip4j.zip.ZipEngine,java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.core.ZipFile: void addFile(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<net.lingala.zip4j.core.ZipFile: void addFile(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.model.ZipParameters: boolean isIncludeRootFolder()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.model.ZipParameters: void setDefaultFolderPath(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.model.ZipParameters: boolean isReadHiddenFiles()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.model.ZipParameters: boolean isIncludeRootFolder()>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: boolean isEncryptFiles()>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: int getEncryptionMethod()>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: java.lang.String getRootFolderInZip()>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: java.lang.String getDefaultFolderPath()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int lastIndexOf(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<java.lang.String: int lastIndexOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: int length()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.lang.String getRelativeFileName(java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: boolean startsWith(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipParameters: java.lang.Object clone()>";
"<net.lingala.zip4j.model.ZipParameters: java.lang.Object clone()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: int getCompressionMethod()>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: int getCompressionMethod()>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: int getCompressionMethod()>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: int getCompressionLevel()>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: int getCompressionLevel()>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: boolean isEncryptFiles()>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: int getEncryptionMethod()>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: int getEncryptionMethod()>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: char[] getPassword()>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: char[] getPassword()>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: void setAesKeyStrength(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void checkParameters(net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipParameters: void setEncryptionMethod(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipParameters: java.lang.String getRootFolderInZip()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipParameters: java.lang.String getDefaultFolderPath()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.io.File: boolean isDirectory()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.io.File: java.io.File getAbsoluteFile()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.io.File: java.io.File getAbsoluteFile()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.io.File: java.io.File getParentFile()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.io.File: java.io.File getParentFile()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFolderToZip(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<java.io.File: java.io.File getAbsoluteFile()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: java.util.ArrayList getFilesInDirectoryRec(java.io.File,boolean)>" -> "<java.io.File: java.io.File[] listFiles()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.util.ArrayList getFilesInDirectoryRec(java.io.File,boolean)>" -> "<java.io.File: boolean canRead()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.util.ArrayList getFilesInDirectoryRec(java.io.File,boolean)>" -> "<java.io.File: boolean isHidden()>";
"<net.lingala.zip4j.util.Zip4jUtil: java.util.ArrayList getFilesInDirectoryRec(java.io.File,boolean)>" -> "<java.io.File: boolean isDirectory()>";
"<java.io.File: java.io.File[] listFiles()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: boolean isHidden()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkArrayListTypes(java.util.ArrayList,int)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkArrayListTypes(java.util.ArrayList,int)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkArrayListTypes(java.util.ArrayList,int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkArrayListTypes(java.util.ArrayList,int)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.util.Zip4jUtil: boolean checkArrayListTypes(java.util.ArrayList,int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipModel: boolean isSplitArchive()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<net.lingala.zip4j.model.ZipParameters: void setCompressionMethod(int)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<net.lingala.zip4j.model.ZipParameters: void setCompressionLevel(int)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<net.lingala.zip4j.model.ZipParameters: void setEncryptFiles(boolean)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<net.lingala.zip4j.model.ZipParameters: void setEncryptionMethod(int)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<net.lingala.zip4j.model.ZipParameters: void setPassword(char[])>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.io.File: boolean isDirectory()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.io.File: java.io.File[] listFiles()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.io.File: boolean isDirectory()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.io.File: java.lang.String getParent()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.io.File: java.lang.String getName()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.io.File: java.lang.String getName()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.io.File: java.lang.String getName()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.io.File: java.lang.String getParent()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.io.File: boolean isDirectory()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.io.File: java.lang.String getName()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.io.File: java.lang.String getName()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.io.File: java.lang.String getName()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.String: char[] toCharArray()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String buildDestinationZipFilePath(java.io.File,java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: void createDestDirectoryIfNecessary(java.lang.String)>" -> "<java.lang.String: boolean endsWith(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: void createDestDirectoryIfNecessary(java.lang.String)>" -> "<java.lang.String: int lastIndexOf(java.lang.String)>";
"<com.fresh.cleaner.utils.CpressUtil: void createDestDirectoryIfNecessary(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.Throwable: void printStackTrace()>";
"<com.fresh.cleaner.utils.CpressUtil: java.lang.String zip(java.lang.String,java.lang.String,boolean,java.lang.String)>" -> "<java.lang.Throwable: java.lang.String getLocalizedMessage()>";
"<java.lang.Throwable: void printStackTrace()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: java.lang.String getLocalizedMessage()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] deriveKey(char[],int)>" -> "<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: int getHLen()>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: byte[] PBKDF2(net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>" -> "<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: int getHLen()>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void _F(byte[],int,net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>" -> "<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: int getHLen()>";
"<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine: void _F(byte[],int,net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int)>" -> "<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: byte[] doFinal(byte[])>";
"<net.lingala.zip4j.io.CipherOutputStream: void encryptAndWrite(byte[],int,int)>" -> "<net.lingala.zip4j.crypto.StandardEncrypter: int encryptData(byte[],int,int)>";
"<net.lingala.zip4j.io.CipherOutputStream: void encryptAndWrite(byte[],int,int)>" -> "<net.lingala.zip4j.crypto.AESEncrpyter: int encryptData(byte[],int,int)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: int encryptData(byte[],int,int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: int encryptData(byte[],int,int)>" -> "<net.lingala.zip4j.util.Raw: void prepareBuffAESIVBytes(byte[],int,int)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: int encryptData(byte[],int,int)>" -> "<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void update(byte[],int,int)>";
"<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: void update(byte[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: int encryptData(byte[],int,int)>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int processBlock(byte[],byte[])>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int processBlock(byte[],byte[])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int processBlock(byte[],int,byte[],int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int processBlock(byte[],int,byte[],int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int processBlock(byte[],int,byte[],int)>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: void stateOut(byte[],int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int processBlock(byte[],int,byte[],int)>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int processBlock(byte[],int,byte[],int)>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: void stateIn(byte[],int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int processBlock(byte[],int,byte[],int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: int processBlock(byte[],int,byte[],int)>" -> "<net.lingala.zip4j.exception.ZipException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: void <clinit>()>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: int shift(int,int)>";
"<net.lingala.zip4j.crypto.engine.AESEngine: void encryptBlock(int[][])>" -> "<net.lingala.zip4j.crypto.engine.AESEngine: void <clinit>()>";
"<net.lingala.zip4j.io.CipherOutputStream: void createLocalFileHeader()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getUncompressedSize()>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setUncompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCrc32(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setCrc32(long)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getCrc32()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getCompressedSize()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getUncompressedSize()>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.FileHeader: void setCompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.FileHeader: void setUncompressedSize(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.FileHeader: boolean isEncrypted()>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.FileHeader: int getEncryptionMethod()>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.FileHeader: void setCrc32(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.FileHeader: void setCrc32(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.crypto.AESEncrpyter: byte[] getFinalMac()>";
"<net.lingala.zip4j.crypto.AESEncrpyter: byte[] getFinalMac()>" -> "<java.lang.System: void <clinit>()>";
"<net.lingala.zip4j.crypto.AESEncrpyter: byte[] getFinalMac()>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<net.lingala.zip4j.crypto.AESEncrpyter: byte[] getFinalMac()>" -> "<net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF: byte[] doFinal()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.crypto.AESEncrpyter: byte[] getSaltBytes()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.crypto.AESEncrpyter: byte[] getDerivedPasswordVerifier()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.crypto.StandardEncrypter: byte[] getHeaderBytes()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: int getSignature()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: int getVersionNeededToExtract()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: byte[] getGeneralPurposeFlag()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: int getCompressionMethod()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: int getLastModFileTime()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getCrc32()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getUncompressedSize()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setWriteComprSizeInZip64ExtraRecord(boolean)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: int getFileNameLength()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: net.lingala.zip4j.model.AESExtraDataRecord getAesExtraDataRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: java.lang.String getFileName()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getUncompressedSize()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: net.lingala.zip4j.model.AESExtraDataRecord getAesExtraDataRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: net.lingala.zip4j.model.AESExtraDataRecord getAesExtraDataRecord()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getCompressedSize()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: long getUncompressedSize()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: void setWriteComprSizeInZip64ExtraRecord(boolean)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.LocalFileHeader: java.lang.String getFileName()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: long getSignature()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: int getDataSize()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: int getVersionNumber()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: java.lang.String getVendorID()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: int getAesStrength()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<net.lingala.zip4j.model.AESExtraDataRecord: int getCompressionMethod()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<net.lingala.zip4j.core.HeaderWriter: int writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream)>" -> "<java.lang.String: byte[] getBytes()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.FileHeader: void setOffsetLocalHeader(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.FileHeader: void setOffsetLocalHeader(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.FileHeader: void setOffsetLocalHeader(long)>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.FileHeader: void setOffsetLocalHeader(long)>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader)>" -> "<java.io.RandomAccessFile: void seek(long)>";
"<net.lingala.zip4j.util.Zip4jUtil: byte[] convertCharset(java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: byte[] convertCharset(java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<net.lingala.zip4j.util.Zip4jUtil: byte[] convertCharset(java.lang.String)>" -> "<java.lang.String: byte[] getBytes()>";
"<net.lingala.zip4j.util.Zip4jUtil: byte[] convertCharset(java.lang.String)>" -> "<java.lang.String: byte[] getBytes()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.io.CipherOutputStream: void closeEntry()>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<net.lingala.zip4j.io.CipherOutputStream: void putNextEntry(java.io.File,net.lingala.zip4j.model.ZipParameters)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderWriter: int writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.util.List)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.core.HeaderWriter: void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderWriter: void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,int,long,java.util.List)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderWriter: int countNumberOfFileHeaderEntriesOnDisk(java.util.ArrayList,int)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.core.HeaderWriter: int countNumberOfFileHeaderEntriesOnDisk(java.util.ArrayList,int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: java.io.RandomAccessFile prepareFileOutputStream()>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getZipFile()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: boolean isSplitArchive()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getZipFile()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getZipFile()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getZipFile()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: boolean isZip64Format()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirRecord getZip64EndCentralDirRecord()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.Zip64EndCentralDirRecord getZip64EndCentralDirRecord()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: int getTotNoOfEntriesInCentralDir()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: int getTotNoOfEntriesInCentralDirOnThisDisk()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object remove(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<java.util.ArrayList: java.lang.Object remove(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: long getOffsetOfStartOfCentralDir()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setOffsetOfStartOfCentralDir(long)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setTotNoOfEntriesInCentralDir(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: void setTotNoOfEntriesInCentralDirOnThisDisk(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.EndCentralDirRecord: long getOffsetOfStartOfCentralDir()>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.util.Zip4jUtil: int getIndexOfFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.io.RandomAccessFile createFileHandler(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getZipFile()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.io.RandomAccessFile createFileHandler(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getZipFile()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.util.Zip4jUtil: net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.CentralDirectory getCentralDirectory()>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getZipFile()>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.model.CentralDirectory: java.util.ArrayList getFileHeaders()>";
"<net.lingala.zip4j.zip.ZipEngine: long calculateTotalWork(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<java.util.ArrayList: int size()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: void setEndCentralDirRecord(net.lingala.zip4j.model.EndCentralDirRecord)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getZipFile()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: java.lang.String getZipFile()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: long getSplitLength()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.ZipModel: net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: long getOffsetStartCenDirWRTStartDiskNo()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: long getOffsetStartCenDirWRTStartDiskNo()>";
"<net.lingala.zip4j.core.HeaderReader: net.lingala.zip4j.model.CentralDirectory readCentralDirectory()>" -> "<net.lingala.zip4j.model.Zip64EndCentralDirRecord: long getTotNoOfEntriesInCentralDir()>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setCurrentOperation(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setState(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setResult(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setTotalWork(long)>";
"<net.lingala.zip4j.zip.ZipEngine: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,boolean)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setFileName(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void endProgressMonitorError(java.lang.Throwable)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void endProgressMonitorSuccess()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: boolean isCancelAllTasks()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setResult(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setState(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setFileName(java.lang.String)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setCurrentOperation(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setCurrentOperation(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: boolean isCancelAllTasks()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setResult(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setState(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void endProgressMonitorError(java.lang.Throwable)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: boolean isCancelAllTasks()>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setResult(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setState(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void initAddFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void updateWorkCompleted(long)>";
"<net.lingala.zip4j.progress.ProgressMonitor: void updateWorkCompleted(long)>" -> "<java.lang.Thread: void sleep(long)>";
"<java.lang.Thread: void sleep(long)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<net.lingala.zip4j.progress.ProgressMonitor: void endProgressMonitorSuccess()>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void reset()>";
"<net.lingala.zip4j.progress.ProgressMonitor: void endProgressMonitorError(java.lang.Throwable)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void reset()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setCurrentOperation(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: boolean isCancelAllTasks()>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setResult(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setState(int)>";
"<net.lingala.zip4j.zip.ZipEngine: void removeFilesIfExists(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setCurrentOperation(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void endProgressMonitorError(java.lang.Throwable)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void endProgressMonitorError(java.lang.Throwable)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: boolean isCancelAllTasks()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setResult(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: java.util.HashMap initRemoveZipFile(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setState(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: boolean isCancelAllTasks()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setResult(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setState(int)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void updateWorkCompleted(long)>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: boolean isCancelAllTasks()>";
"<net.lingala.zip4j.util.ArchiveMaintainer: void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setResult(int)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void updateWorkCompleted(long)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: boolean isCancelAllTasks()>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setResult(int)>";
"<net.lingala.zip4j.util.CRCUtil: long computeFileCRC(java.lang.String,net.lingala.zip4j.progress.ProgressMonitor)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: void setState(int)>";
"<net.lingala.zip4j.core.ZipFile: void addFolder(java.io.File,net.lingala.zip4j.model.ZipParameters,boolean)>" -> "<net.lingala.zip4j.model.ZipModel: boolean isSplitArchive()>";
"<net.lingala.zip4j.core.ZipFile: void addFiles(java.util.ArrayList,net.lingala.zip4j.model.ZipParameters)>" -> "<net.lingala.zip4j.progress.ProgressMonitor: int getState()>";
}
