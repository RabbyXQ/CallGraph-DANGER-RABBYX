digraph CallGraph {
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.SimpleXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.PrettyXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.BrowserCompactXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.io.FileOutputStream: void <init>(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.System: long currentTimeMillis()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CompactXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.net.URL: void <init>(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.System: long currentTimeMillis()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerTransformations: void <init>()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.HtmlCleaner: void <init>()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.util.TreeMap: void <init>()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.ConfigFileTagProvider: void <init>(java.io.File)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.io.File: void <init>(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.HtmlCleaner: void <clinit>()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.io.File: void <clinit>()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.ConfigFileTagProvider: void <clinit>()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.HtmlCleaner: void <clinit>()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.HtmlCleaner: void <clinit>()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.HtmlCleaner: void <clinit>()>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.SimpleXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>" -> "<org.htmlcleaner.XmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>";
"<org.htmlcleaner.PrettyXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>" -> "<org.htmlcleaner.XmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>" -> "<org.htmlcleaner.XmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>";
"<java.io.FileOutputStream: void <init>(java.lang.String)>" -> "<java.io.FileOutputStream: void finalize()>";
"<java.io.FileOutputStream: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileOutputStream: void <init>(java.lang.String)>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.CompactXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>" -> "<org.htmlcleaner.XmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>";
"<java.net.URL: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.net.URL: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>" -> "<org.htmlcleaner.Utils: java.lang.String[] tokenize(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>" -> "<org.htmlcleaner.TagTransformation: void <init>(java.lang.String,java.lang.String,boolean)>";
"<org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>" -> "<org.htmlcleaner.Utils: java.lang.String[] tokenize(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.CleanerTransformations: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.htmlcleaner.CleanerTransformations: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<org.htmlcleaner.HtmlCleaner: void <init>()>" -> "<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.CleanerProperties)>";
"<java.util.TreeMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.TreeMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider)>" -> "<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.CleanerProperties)>";
"<org.htmlcleaner.ConfigFileTagProvider: void <init>(java.io.File)>" -> "<java.util.HashMap: void <init>()>";
"<org.htmlcleaner.ConfigFileTagProvider: void <init>(java.io.File)>" -> "<org.htmlcleaner.HtmlCleanerException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.htmlcleaner.ConfigFileTagProvider: void <init>(java.io.File)>" -> "<org.xml.sax.InputSource: void <init>(java.io.Reader)>";
"<org.htmlcleaner.ConfigFileTagProvider: void <init>(java.io.File)>" -> "<java.io.FileReader: void <init>(java.io.File)>";
"<org.htmlcleaner.ConfigFileTagProvider: void <init>(java.io.File)>" -> "<org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void <init>(org.htmlcleaner.ConfigFileTagProvider,java.util.Map)>";
"<java.lang.System: void exit(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlcleaner.HtmlCleaner: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.htmlcleaner.ConfigFileTagProvider: void <clinit>()>" -> "<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>" -> "<java.lang.Object: void <init>()>";
"<java.io.FileOutputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String[] tokenize(java.lang.String,java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlcleaner.Utils: java.lang.String[] tokenize(java.lang.String,java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String[] tokenize(java.lang.String,java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlcleaner.TagTransformation: void <init>(java.lang.String,java.lang.String,boolean)>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.TagTransformation: void <init>(java.lang.String,java.lang.String,boolean)>" -> "<org.htmlcleaner.Utils: boolean isValidXmlIdentifier(java.lang.String)>";
"<org.htmlcleaner.TagTransformation: void <init>(java.lang.String,java.lang.String,boolean)>" -> "<java.lang.Object: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.CleanerProperties)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.CleanerProperties)>" -> "<org.htmlcleaner.CleanerProperties: void <init>()>";
"<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.CleanerProperties)>" -> "<org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.DefaultTagProvider getInstance()>";
"<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.CleanerProperties)>" -> "<java.util.HashSet: void <init>()>";
"<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.CleanerProperties)>" -> "<java.util.HashSet: void <init>()>";
"<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.CleanerProperties)>" -> "<java.util.TreeSet: void <init>()>";
"<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.CleanerProperties)>" -> "<java.util.LinkedHashSet: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleanerException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.xml.sax.InputSource: void <init>(java.io.Reader)>" -> "<java.lang.Object: void <init>()>";
"<org.xml.sax.InputSource: void <init>(java.io.Reader)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileReader: void <init>(java.io.File)>" -> "<java.io.InputStreamReader: void <init>(java.io.InputStream)>";
"<java.io.FileReader: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void <init>(org.htmlcleaner.ConfigFileTagProvider,java.util.Map)>" -> "<org.xml.sax.helpers.DefaultHandler: void <init>()>";
"<java.lang.System: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: boolean isValidXmlIdentifier(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlcleaner.Utils: boolean isValidXmlIdentifier(java.lang.String)>" -> "<org.htmlcleaner.Utils: boolean isIdentifierHelperChar(char)>";
"<org.htmlcleaner.Utils: boolean isValidXmlIdentifier(java.lang.String)>" -> "<java.lang.Character: boolean isDigit(char)>";
"<org.htmlcleaner.Utils: boolean isValidXmlIdentifier(java.lang.String)>" -> "<java.lang.Character: boolean isUnicodeIdentifierStart(char)>";
"<org.htmlcleaner.Utils: boolean isValidXmlIdentifier(java.lang.String)>" -> "<java.lang.Character: boolean isUnicodeIdentifierStart(char)>";
"<org.htmlcleaner.Utils: boolean isValidXmlIdentifier(java.lang.String)>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.Utils: boolean isValidXmlIdentifier(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlcleaner.CleanerProperties: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.DefaultTagProvider getInstance()>" -> "<org.htmlcleaner.DefaultTagProvider: void <init>()>";
"<java.util.HashSet: void <init>()>" -> "<java.util.AbstractSet: void <init>()>";
"<java.util.HashSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.TreeSet: void <init>()>" -> "<java.util.AbstractSet: void <init>()>";
"<java.util.TreeSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.LinkedHashSet: void <init>()>" -> "<java.util.HashSet: void <init>()>";
"<java.util.LinkedHashSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream)>" -> "<java.io.Reader: void <init>()>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.xml.sax.helpers.DefaultHandler: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.xml.sax.helpers.DefaultHandler: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Character: boolean isDigit(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Character: boolean isUnicodeIdentifierStart(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>";
"<java.util.AbstractSet: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.Reader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Reader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>" -> "<java.util.HashSet: void <init>()>";
"<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>" -> "<java.util.HashSet: void <init>()>";
"<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>" -> "<java.util.HashSet: void <init>()>";
"<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>" -> "<java.util.HashSet: void <init>()>";
"<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>" -> "<java.util.HashSet: void <init>()>";
"<org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>" -> "<java.util.HashSet: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineRequiredEnclosingTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineHigherLevelTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineRequiredEnclosingTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineRequiredEnclosingTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineForbiddenTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>";
"<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.TagInfo: void defineRequiredEnclosingTags(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.TagInfo: void defineHigherLevelTags(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.TagInfo: void defineForbiddenTags(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<java.util.StringTokenizer: boolean hasMoreTokens()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.StringTokenizer: java.lang.String nextToken()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<java.lang.String: java.lang.String toLowerCase()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.TagInfo: void defineForbiddenTags(java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.htmlcleaner.TagInfo: void defineForbiddenTags(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<org.htmlcleaner.TagInfo: void defineForbiddenTags(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.TagInfo: void defineHigherLevelTags(java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.htmlcleaner.TagInfo: void defineHigherLevelTags(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<org.htmlcleaner.TagInfo: void defineHigherLevelTags(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.TagInfo: void defineRequiredEnclosingTags(java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.htmlcleaner.TagInfo: void defineRequiredEnclosingTags(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<org.htmlcleaner.TagInfo: void defineRequiredEnclosingTags(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: void <init>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String[] tokenize(java.lang.String,java.lang.String)>" -> "<java.util.StringTokenizer: int countTokens()>";
"<org.htmlcleaner.Utils: java.lang.String[] tokenize(java.lang.String,java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.htmlcleaner.Utils: java.lang.String[] tokenize(java.lang.String,java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<java.util.StringTokenizer: int countTokens()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.ConfigFileTagProvider: void <init>(java.io.File)>" -> "<org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void parse(org.xml.sax.InputSource)>";
"<org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void parse(org.xml.sax.InputSource)>" -> "<org.htmlcleaner.ConfigFileTagProvider: void <clinit>()>";
"<org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>" -> "<org.htmlcleaner.TagTransformation: void addAttributeTransformation(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.TagTransformation: void addAttributeTransformation(java.lang.String,java.lang.String)>" -> "<java.util.LinkedHashMap: void <init>()>";
"<java.util.LinkedHashMap: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<java.util.LinkedHashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.TagTransformation: void addAttributeTransformation(java.lang.String,java.lang.String)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.XmlSerializer: void writeXmlToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXmlToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>" -> "<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>";
"<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>" -> "<java.io.Writer: void <init>()>";
"<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.Writer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Writer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXmlToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>" -> "<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.io.BufferedWriter: void <init>(java.io.Writer)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>()>";
"<java.io.BufferedWriter: void <init>(java.io.Writer)>" -> "<java.io.Writer: void <init>()>";
"<java.io.BufferedWriter: void <init>(java.io.Writer)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.io.BufferedWriter: void flush()>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<java.io.BufferedWriter: void close()>";
"<java.io.Writer: void write(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedWriter: void flush()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedWriter: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<org.htmlcleaner.SimpleXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>";
"<org.htmlcleaner.SimpleXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.SimpleXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>";
"<org.htmlcleaner.SimpleXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.SimpleXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.SimpleXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: java.lang.String escapeXml(java.lang.String)>";
"<org.htmlcleaner.SimpleXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.XmlSerializer: java.lang.String escapeXml(java.lang.String)>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.XmlSerializer: java.lang.String escapeXml(java.lang.String)>" -> "<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>";
"<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.Math: int min(int,int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: java.lang.String valueOf(char)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.Integer: int parseInt(java.lang.String,int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<org.htmlcleaner.Utils: boolean isHexadecimalDigit(char)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<org.htmlcleaner.SpecialEntities: void <clinit>()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<java.lang.Math: int min(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: int parseInt(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String valueOf(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: int parseInt(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: boolean isHexadecimalDigit(char)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlcleaner.Utils: boolean isHexadecimalDigit(char)>" -> "<java.lang.Character: boolean isDigit(char)>";
"<java.lang.StringBuffer: void <init>(int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<java.lang.Integer: void <init>(int)>" -> "<java.lang.Number: void <init>()>";
"<java.lang.Integer: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Number: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Number: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.SpecialEntities: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: int indexOf(int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: int indexOf(int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: boolean startsWith(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: int indexOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: int length()>";
"<java.lang.String: java.lang.String substring(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<org.htmlcleaner.XmlSerializer: java.lang.String escapeXml(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.XmlSerializer: void writeXmlToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<org.htmlcleaner.PrettyXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<org.htmlcleaner.PrettyXmlSerializer: java.lang.String indent(int)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getSingleLineOfChildren(java.util.List)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String indent(int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<org.htmlcleaner.PrettyXmlSerializer: java.lang.String indent(int)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getSingleLineOfChildren(java.util.List)>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getSingleLineOfChildren(java.util.List)>" -> "<org.htmlcleaner.Utils: java.lang.String rtrim(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getSingleLineOfChildren(java.util.List)>" -> "<org.htmlcleaner.Utils: java.lang.String ltrim(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getSingleLineOfChildren(java.util.List)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getSingleLineOfChildren(java.util.List)>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.Utils: java.lang.String rtrim(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlcleaner.Utils: java.lang.String rtrim(java.lang.String)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.htmlcleaner.Utils: java.lang.String ltrim(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlcleaner.Utils: java.lang.String ltrim(java.lang.String)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<java.lang.Character: boolean isWhitespace(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String ltrim(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.Utils: java.lang.String ltrim(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.Utils: java.lang.String ltrim(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getSingleLineOfChildren(java.util.List)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getSingleLineOfChildren(java.util.List)>" -> "<java.lang.String: int indexOf(java.lang.String)>";
"<java.lang.String: int indexOf(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String rtrim(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.Utils: java.lang.String rtrim(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.Utils: java.lang.String rtrim(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getSingleLineOfChildren(java.util.List)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getSingleLineOfChildren(java.util.List)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>";
"<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String indent(int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<org.htmlcleaner.XmlSerializer: java.lang.String escapeXml(java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<org.htmlcleaner.XmlSerializer: java.lang.String escapeXml(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>" -> "<java.lang.String: java.lang.String trim()>";
"<java.lang.String: java.lang.String trim()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.SimpleXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.XmlSerializer: void writeXmlToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.Utils: boolean isWhitespaceString(java.lang.Object)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlcleaner.Utils: boolean isWhitespaceString(java.lang.Object)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.io.BufferedWriter: void write(int)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.io.BufferedWriter: void write(int)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<java.io.BufferedWriter: void write(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: java.lang.String escapeXml(java.lang.String)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.XmlSerializer: void writeXmlToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.Utils: boolean isWhitespaceString(java.lang.Object)>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: java.lang.String escapeXml(java.lang.String)>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>" -> "<org.htmlcleaner.CleanerTransformations: void addTransformation(org.htmlcleaner.TagTransformation)>";
"<org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>" -> "<org.htmlcleaner.CleanerTransformations: org.htmlcleaner.TagTransformation getTransformation(java.lang.String)>";
"<org.htmlcleaner.CleanerTransformations: org.htmlcleaner.TagTransformation getTransformation(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.htmlcleaner.CleanerTransformations: void addTransformation(org.htmlcleaner.TagTransformation)>" -> "<org.htmlcleaner.TagTransformation: java.lang.String getSourceTag()>";
"<org.htmlcleaner.CleanerTransformations: void addTransformation(org.htmlcleaner.TagTransformation)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.util.TreeMap: java.util.Set entrySet()>";
"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.TreeMap: java.util.Set entrySet()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties getProperties()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.HtmlCleaner: void setTransformations(org.htmlcleaner.CleanerTransformations)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.net.URL,java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.File,java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.net.URL,java.lang.String)>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.net.URL,java.lang.String)>" -> "<java.io.StringReader: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.net.URL,java.lang.String)>" -> "<org.htmlcleaner.Utils: java.lang.StringBuffer readUrl(java.net.URL,java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.File,java.lang.String)>" -> "<java.io.FileInputStream: void <init>(java.io.File)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.File,java.lang.String)>" -> "<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>";
"<java.io.StringReader: void <init>(java.lang.String)>" -> "<java.io.Reader: void <init>()>";
"<java.io.StringReader: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.StringBuffer readUrl(java.net.URL,java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<org.htmlcleaner.Utils: java.lang.StringBuffer readUrl(java.net.URL,java.lang.String)>" -> "<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.FileInputStream: void finalize()>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void <init>(java.io.File)>" -> "<java.io.InputStream: void <init>()>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>" -> "<java.io.Reader: void <init>()>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.FileInputStream: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.net.URL,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.Utils: java.lang.StringBuffer readUrl(java.net.URL,java.lang.String)>" -> "<java.io.Reader: int read(char[])>";
"<java.io.Reader: int read(char[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.StringBuffer readUrl(java.net.URL,java.lang.String)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.File,java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: void <init>(org.htmlcleaner.HtmlCleaner,org.htmlcleaner.HtmlCleaner$1)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.HtmlCleaner: void calculateRootNode(java.util.Set)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.HtmlCleaner: void closeAll(java.util.List)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.HtmlTokenizer: void <init>(org.htmlcleaner.HtmlCleaner,java.io.Reader)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.TagNode: void <init>(java.lang.String,org.htmlcleaner.HtmlCleaner)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.TagNode: void <init>(java.lang.String,org.htmlcleaner.HtmlCleaner)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.TagNode: void <init>(java.lang.String,org.htmlcleaner.HtmlCleaner)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.HtmlCleaner: void setPruneTags(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void <init>(org.htmlcleaner.HtmlCleaner,org.htmlcleaner.HtmlCleaner$1)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: void <init>(org.htmlcleaner.HtmlCleaner)>";
"<org.htmlcleaner.HtmlCleaner: void calculateRootNode(java.util.Set)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>" -> "<org.htmlcleaner.HtmlCleaner: void addPossibleHeadCandidate(org.htmlcleaner.TagInfo,org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.HtmlCleaner: void closeAll(java.util.List)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$1500(org.htmlcleaner.HtmlCleaner$OpenTags)>";
"<org.htmlcleaner.HtmlCleaner: void closeAll(java.util.List)>" -> "<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>";
"<org.htmlcleaner.HtmlTokenizer: void <init>(org.htmlcleaner.HtmlCleaner,java.io.Reader)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlcleaner.HtmlTokenizer: void <init>(org.htmlcleaner.HtmlCleaner,java.io.Reader)>" -> "<java.io.BufferedReader: void <init>(java.io.Reader)>";
"<org.htmlcleaner.HtmlTokenizer: void <init>(org.htmlcleaner.HtmlCleaner,java.io.Reader)>" -> "<java.util.HashSet: void <init>()>";
"<org.htmlcleaner.HtmlTokenizer: void <init>(org.htmlcleaner.HtmlCleaner,java.io.Reader)>" -> "<java.util.ArrayList: void <init>()>";
"<org.htmlcleaner.HtmlTokenizer: void <init>(org.htmlcleaner.HtmlCleaner,java.io.Reader)>" -> "<java.lang.StringBuffer: void <init>(int)>";
"<org.htmlcleaner.TagNode: void <init>(java.lang.String,org.htmlcleaner.HtmlCleaner)>" -> "<org.htmlcleaner.TagToken: void <init>(java.lang.String)>";
"<org.htmlcleaner.TagNode: void <init>(java.lang.String,org.htmlcleaner.HtmlCleaner)>" -> "<java.util.ArrayList: void <init>()>";
"<org.htmlcleaner.TagNode: void <init>(java.lang.String,org.htmlcleaner.HtmlCleaner)>" -> "<java.util.LinkedHashMap: void <init>()>";
"<org.htmlcleaner.HtmlCleaner: void setPruneTags(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void <init>(org.htmlcleaner.HtmlCleaner)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void <init>(org.htmlcleaner.HtmlCleaner)>" -> "<java.util.HashSet: void <init>()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void <init>(org.htmlcleaner.HtmlCleaner)>" -> "<java.util.ArrayList: void <init>()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$1500(org.htmlcleaner.HtmlCleaner$OpenTags)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findFirstTagPos()>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<java.util.ArrayList: void <init>()>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: void access$1400(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<org.htmlcleaner.HtmlCleaner: void addPossibleHeadCandidate(org.htmlcleaner.TagInfo,org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode createTagNode(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<org.htmlcleaner.HtmlCleaner: void closeAll(java.util.List)>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: void <init>(org.htmlcleaner.HtmlCleaner,org.htmlcleaner.HtmlCleaner$1)>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<org.htmlcleaner.HtmlCleaner: boolean isStartToken(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: int access$600(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<java.io.BufferedReader: void <init>(java.io.Reader)>" -> "<java.io.Reader: void <init>()>";
"<java.io.BufferedReader: void <init>(java.io.Reader)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.TagToken: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void access$1400(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: void removeTag(java.lang.String)>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void removeTag(java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$100(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void setPruneTags(java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.htmlcleaner.HtmlCleaner: void setPruneTags(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<org.htmlcleaner.TagNode: void <init>(java.lang.String,org.htmlcleaner.HtmlCleaner)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.TagNode: void <init>(java.lang.String,org.htmlcleaner.HtmlCleaner)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void calculateRootNode(java.util.Set)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void calculateRootNode(java.util.Set)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void calculateRootNode(java.util.Set)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.HtmlTokenizer: void start()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.HtmlTokenizer: java.util.List getTokenList()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.HtmlTokenizer: java.util.Set getNamespacePrefixes()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.HtmlTokenizer: org.htmlcleaner.DoctypeToken getDocType()>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: void readIfNeeded(int)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean content()>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: void ignoreUntil(char)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: void tagStart()>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isIdentifierStartChar(int)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: void comment()>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: void tagEnd()>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isIdentifierStartChar(int)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: void ignoreUntil(char)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: void doctype()>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean content()>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: void comment()>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: void tagEnd()>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(int,char)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isWhitespace(int)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: void readIfNeeded(int)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isAllRead()>";
"<org.htmlcleaner.HtmlTokenizer: void readIfNeeded(int)>" -> "<java.lang.System: void <clinit>()>";
"<org.htmlcleaner.HtmlTokenizer: void readIfNeeded(int)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.htmlcleaner.HtmlTokenizer: boolean content()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isAllRead()>";
"<org.htmlcleaner.HtmlTokenizer: boolean content()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean addSavedAsContent()>";
"<org.htmlcleaner.HtmlTokenizer: boolean content()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: boolean content()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: boolean content()>" -> "<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>";
"<org.htmlcleaner.HtmlTokenizer: void go()>" -> "<org.htmlcleaner.HtmlTokenizer: void readIfNeeded(int)>";
"<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(int,char)>";
"<org.htmlcleaner.HtmlTokenizer: void ignoreUntil(char)>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isAllRead()>";
"<org.htmlcleaner.HtmlTokenizer: void ignoreUntil(char)>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: void ignoreUntil(char)>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>" -> "<java.lang.Character: char toLowerCase(char)>";
"<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>" -> "<java.lang.Character: char toLowerCase(char)>";
"<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>" -> "<org.htmlcleaner.HtmlTokenizer: void readIfNeeded(int)>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean addSavedAsContent()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: void go(int)>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: void addToken(org.htmlcleaner.BaseToken)>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.TagNode: void <init>(java.lang.String,org.htmlcleaner.HtmlCleaner)>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean content()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isReservedTag(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isAllRead()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: boolean isIdentifierStartChar(int)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlcleaner.HtmlTokenizer: boolean isIdentifierStartChar(int)>" -> "<java.lang.Character: boolean isUnicodeIdentifierStart(char)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<org.htmlcleaner.HtmlTokenizer: void go(int)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<org.htmlcleaner.HtmlTokenizer: void addToken(org.htmlcleaner.BaseToken)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<org.htmlcleaner.CommentToken: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<org.htmlcleaner.HtmlTokenizer: void go(int)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isAllRead()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.HtmlTokenizer: void saveCurrent(int)>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean addSavedAsContent()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.HtmlTokenizer: void addToken(org.htmlcleaner.BaseToken)>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.EndTagToken: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean content()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isReservedTag(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isAllRead()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.HtmlTokenizer: void go(int)>";
"<org.htmlcleaner.HtmlTokenizer: void doctype()>" -> "<org.htmlcleaner.HtmlTokenizer: void go(int)>";
"<org.htmlcleaner.HtmlTokenizer: void doctype()>" -> "<org.htmlcleaner.DoctypeToken: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void doctype()>" -> "<org.htmlcleaner.HtmlTokenizer: void ignoreUntil(char)>";
"<org.htmlcleaner.HtmlTokenizer: void doctype()>" -> "<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>";
"<org.htmlcleaner.HtmlTokenizer: void doctype()>" -> "<org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>";
"<org.htmlcleaner.HtmlTokenizer: void doctype()>" -> "<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>";
"<org.htmlcleaner.HtmlTokenizer: void doctype()>" -> "<org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>";
"<org.htmlcleaner.HtmlTokenizer: void doctype()>" -> "<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>";
"<org.htmlcleaner.HtmlTokenizer: void doctype()>" -> "<org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>";
"<org.htmlcleaner.HtmlTokenizer: void doctype()>" -> "<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>";
"<org.htmlcleaner.HtmlTokenizer: void doctype()>" -> "<org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>";
"<org.htmlcleaner.HtmlTokenizer: boolean isChar(int,char)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlcleaner.HtmlTokenizer: boolean isChar(int,char)>" -> "<java.lang.Character: char toLowerCase(char)>";
"<org.htmlcleaner.HtmlTokenizer: boolean isChar(int,char)>" -> "<java.lang.Character: char toLowerCase(char)>";
"<org.htmlcleaner.HtmlTokenizer: boolean isWhitespace(int)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlcleaner.HtmlTokenizer: boolean isWhitespace(int)>" -> "<java.lang.Character: boolean isWhitespace(char)>";
"<org.htmlcleaner.HtmlTokenizer: boolean addSavedAsContent()>" -> "<org.htmlcleaner.ContentToken: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: boolean addSavedAsContent()>" -> "<org.htmlcleaner.HtmlTokenizer: void addToken(org.htmlcleaner.BaseToken)>";
"<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isAllRead()>";
"<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>" -> "<org.htmlcleaner.HtmlTokenizer: void save(char)>";
"<java.lang.Character: char toLowerCase(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void go(int)>" -> "<org.htmlcleaner.HtmlTokenizer: void readIfNeeded(int)>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isAllRead()>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isAllRead()>";
"<org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>" -> "<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>";
"<org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isWhitespace()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<org.htmlcleaner.Utils: boolean isIdentifierHelperChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isIdentifierChar()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isAllRead()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isIdentifierStartChar()>";
"<org.htmlcleaner.CommentToken: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlcleaner.HtmlTokenizer: void saveCurrent(int)>" -> "<org.htmlcleaner.HtmlTokenizer: void readIfNeeded(int)>";
"<org.htmlcleaner.HtmlTokenizer: void saveCurrent(int)>" -> "<org.htmlcleaner.HtmlTokenizer: void save(char)>";
"<org.htmlcleaner.HtmlTokenizer: void saveCurrent(int)>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isAllRead()>";
"<org.htmlcleaner.EndTagToken: void <init>(java.lang.String)>" -> "<org.htmlcleaner.TagToken: void <init>(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlcleaner.DoctypeToken: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.htmlcleaner.DoctypeToken: java.lang.String clean(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.htmlcleaner.DoctypeToken: java.lang.String clean(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isWhitespace()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isWhitespace()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isWhitespace()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isAllRead()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: void go()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: void saveCurrent()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>";
"<org.htmlcleaner.ContentToken: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlcleaner.ContentToken: void <init>(java.lang.String)>" -> "<java.lang.StringBuffer: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: boolean isWhitespace()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isWhitespace(int)>";
"<org.htmlcleaner.HtmlTokenizer: boolean isIdentifierChar()>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlcleaner.HtmlTokenizer: boolean isIdentifierChar()>" -> "<org.htmlcleaner.Utils: boolean isIdentifierHelperChar(char)>";
"<org.htmlcleaner.HtmlTokenizer: boolean isIdentifierChar()>" -> "<java.lang.Character: boolean isDigit(char)>";
"<org.htmlcleaner.HtmlTokenizer: boolean isIdentifierChar()>" -> "<java.lang.Character: boolean isUnicodeIdentifierStart(char)>";
"<org.htmlcleaner.HtmlTokenizer: boolean isIdentifierChar()>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.HtmlTokenizer: boolean isIdentifierStartChar()>" -> "<org.htmlcleaner.HtmlTokenizer: boolean isIdentifierStartChar(int)>";
"<java.lang.StringBuffer: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.DoctypeToken: java.lang.String clean(java.lang.String)>" -> "<java.lang.String: java.lang.String replace(char,char)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String clean(java.lang.String)>" -> "<java.lang.String: java.lang.String replace(char,char)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String clean(java.lang.String)>" -> "<java.lang.String: java.lang.String replace(char,char)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String clean(java.lang.String)>" -> "<java.lang.String: java.lang.String replace(char,char)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String clean(java.lang.String)>" -> "<java.lang.String: java.lang.String replace(char,char)>";
"<java.lang.String: java.lang.String replace(char,char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String toUpperCase()>";
"<java.lang.String: java.lang.String toUpperCase()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String toUpperCase()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: int length()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: int length()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: char charAt(int)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: int length()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: int length()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<java.lang.StringBuffer: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: char charAt(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: boolean isReservedTag(java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: boolean isReservedTag(java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: boolean isReservedTag(java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.EndTagToken: void <init>(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: int length()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.TagNode: void transformAttributes(org.htmlcleaner.TagTransformation)>";
"<org.htmlcleaner.TagNode: void transformAttributes(org.htmlcleaner.TagTransformation)>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.TagNode: void transformAttributes(org.htmlcleaner.TagTransformation)>" -> "<org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>";
"<org.htmlcleaner.TagNode: void transformAttributes(org.htmlcleaner.TagTransformation)>" -> "<java.util.LinkedHashMap: void <init>()>";
"<org.htmlcleaner.TagNode: void transformAttributes(org.htmlcleaner.TagTransformation)>" -> "<java.util.LinkedHashMap: void <init>(java.util.Map)>";
"<org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>" -> "<org.htmlcleaner.Utils: void <clinit>()>";
"<org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>" -> "<java.lang.Math: int max(int,int)>";
"<org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>" -> "<java.lang.StringBuffer: void <init>()>";
"<java.util.LinkedHashMap: void <init>(java.util.Map)>" -> "<java.util.HashMap: void <init>()>";
"<java.util.LinkedHashMap: void <init>(java.util.Map)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Math: int max(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>" -> "<java.lang.String: java.lang.String toString()>";
"<java.lang.String: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.TagNode: void transformAttributes(org.htmlcleaner.TagTransformation)>" -> "<java.util.HashMap: java.lang.Object remove(java.lang.Object)>";
"<org.htmlcleaner.TagNode: void transformAttributes(org.htmlcleaner.TagTransformation)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: java.lang.Object remove(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.TagNode: void transformAttributes(org.htmlcleaner.TagTransformation)>" -> "<java.util.LinkedHashMap: java.util.Set entrySet()>";
"<java.util.LinkedHashMap: java.util.Set entrySet()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>" -> "<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<java.util.HashSet: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void save(char)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.EndTagToken: void addAttribute(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void addToken(org.htmlcleaner.BaseToken)>" -> "<java.util.ArrayList: int size()>";
"<java.util.ArrayList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void addToken(org.htmlcleaner.BaseToken)>" -> "<java.util.ArrayList: java.util.ListIterator listIterator(int)>";
"<java.util.ArrayList: java.util.ListIterator listIterator(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void addToken(org.htmlcleaner.BaseToken)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.HtmlTokenizer: boolean addSavedAsContent()>" -> "<java.lang.StringBuffer: int length()>";
"<org.htmlcleaner.HtmlTokenizer: boolean addSavedAsContent()>" -> "<java.lang.StringBuffer: int length()>";
"<org.htmlcleaner.HtmlTokenizer: boolean addSavedAsContent()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.HtmlTokenizer: boolean addSavedAsContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>";
"<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: int length()>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>";
"<org.htmlcleaner.HtmlTokenizer: void readIfNeeded(int)>" -> "<java.io.BufferedReader: int read(char[],int,int)>";
"<java.io.BufferedReader: int read(char[],int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<java.io.BufferedReader: void close()>";
"<java.io.BufferedReader: void close()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<java.lang.StringBuffer: int length()>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<java.util.HashSet: void clear()>";
"<java.util.HashSet: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<java.util.ArrayList: void clear()>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<java.util.ArrayList: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<java.util.ArrayList: java.util.ListIterator listIterator(int)>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<java.util.ArrayList: java.util.ListIterator listIterator(int)>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<java.util.ArrayList: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode getParent()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.TagNode: void setDocType(org.htmlcleaner.DoctypeToken)>";
"<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>" -> "<org.htmlcleaner.TagNode: void addChildren(java.util.List)>";
"<org.htmlcleaner.TagNode: void addChildren(java.util.List)>" -> "<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>";
"<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.TagNode: void addChildren(java.util.List)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<org.htmlcleaner.TagNode: boolean removeChild(java.lang.Object)>";
"<org.htmlcleaner.TagNode: boolean removeChild(java.lang.Object)>" -> "<java.util.ArrayList: boolean remove(java.lang.Object)>";
"<java.util.ArrayList: boolean remove(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<java.util.HashSet: void clear()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<java.util.HashSet: void clear()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<java.util.HashSet: boolean isEmpty()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<java.util.HashSet: boolean isEmpty()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashSet: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void calculateRootNode(java.util.Set)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<org.htmlcleaner.HtmlCleaner: void setPruneTags(java.lang.String)>" -> "<java.util.HashSet: void clear()>";
"<org.htmlcleaner.HtmlCleaner: void setPruneTags(java.lang.String)>" -> "<java.util.HashSet: void clear()>";
"<org.htmlcleaner.HtmlCleaner: void setPruneTags(java.lang.String)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.TagNode: void <init>(java.lang.String,org.htmlcleaner.HtmlCleaner)>" -> "<org.htmlcleaner.HtmlCleaner: java.util.Set getPruneTagSet()>";
"<org.htmlcleaner.TagNode: void <init>(java.lang.String,org.htmlcleaner.HtmlCleaner)>" -> "<org.htmlcleaner.HtmlCleaner: void addPruneNode(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.HtmlCleaner: void addPruneNode(org.htmlcleaner.TagNode)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.TagNode: void <init>(java.lang.String,org.htmlcleaner.HtmlCleaner)>" -> "<java.util.HashSet: boolean contains(java.lang.Object)>";
"<java.util.HashSet: boolean contains(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void <init>(org.htmlcleaner.HtmlCleaner,java.io.Reader)>" -> "<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties getProperties()>";
"<org.htmlcleaner.HtmlTokenizer: void <init>(org.htmlcleaner.HtmlCleaner,java.io.Reader)>" -> "<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerTransformations getTransformations()>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$500(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: void saveToLastOpenTag(java.util.List,java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: boolean isAllowedInLastOpenTag(org.htmlcleaner.BaseToken)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: void access$1300(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String,int)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: void addPossibleHeadCandidate(org.htmlcleaner.TagInfo,org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode createTagNode(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: void saveToLastOpenTag(java.util.List,java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: boolean isAllowedInLastOpenTag(org.htmlcleaner.BaseToken)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<java.util.ArrayList: void <init>()>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.TagNode: void <init>(java.lang.String,org.htmlcleaner.HtmlCleaner)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: boolean mustAddRequiredParent(org.htmlcleaner.TagInfo)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: boolean isFatalTagSatisfied(org.htmlcleaner.TagInfo)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$1200(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$1100(org.htmlcleaner.HtmlCleaner$OpenTags,java.util.Set)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: void addAttributesToTag(org.htmlcleaner.TagNode,java.util.Map)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: void addAttributesToTag(org.htmlcleaner.TagNode,java.util.Map)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$100(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$800(org.htmlcleaner.HtmlCleaner$OpenTags)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: void addAttributesToTag(org.htmlcleaner.TagNode,java.util.Map)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$1000(org.htmlcleaner.HtmlCleaner$OpenTags)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: boolean isStartToken(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: void saveToLastOpenTag(java.util.List,java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: boolean isAllowedInLastOpenTag(org.htmlcleaner.BaseToken)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$500(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void saveToLastOpenTag(java.util.List,java.lang.Object)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$800(org.htmlcleaner.HtmlCleaner$OpenTags)>";
"<org.htmlcleaner.HtmlCleaner: void saveToLastOpenTag(java.util.List,java.lang.Object)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: int access$600(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner: void saveToLastOpenTag(java.util.List,java.lang.Object)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$900(org.htmlcleaner.HtmlCleaner$OpenTags)>";
"<org.htmlcleaner.HtmlCleaner: void saveToLastOpenTag(java.util.List,java.lang.Object)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: org.htmlcleaner.TagInfo access$200(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner: void saveToLastOpenTag(java.util.List,java.lang.Object)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: org.htmlcleaner.TagInfo access$200(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner: boolean isAllowedInLastOpenTag(org.htmlcleaner.BaseToken)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$800(org.htmlcleaner.HtmlCleaner$OpenTags)>";
"<org.htmlcleaner.HtmlCleaner: boolean isAllowedInLastOpenTag(org.htmlcleaner.BaseToken)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: org.htmlcleaner.TagInfo access$200(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner: boolean isAllowedInLastOpenTag(org.htmlcleaner.BaseToken)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: org.htmlcleaner.TagInfo access$200(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void access$1300(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String,int)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: void addTag(java.lang.String,int)>";
"<org.htmlcleaner.HtmlCleaner: boolean mustAddRequiredParent(org.htmlcleaner.TagInfo)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$500(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: boolean mustAddRequiredParent(org.htmlcleaner.TagInfo)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: int access$600(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner: boolean mustAddRequiredParent(org.htmlcleaner.TagInfo)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$100(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner: boolean mustAddRequiredParent(org.htmlcleaner.TagInfo)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List access$700(org.htmlcleaner.HtmlCleaner$OpenTags)>";
"<org.htmlcleaner.HtmlCleaner: boolean mustAddRequiredParent(org.htmlcleaner.TagInfo)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List access$700(org.htmlcleaner.HtmlCleaner$OpenTags)>";
"<org.htmlcleaner.HtmlCleaner: boolean mustAddRequiredParent(org.htmlcleaner.TagInfo)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: int access$600(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner: boolean isFatalTagSatisfied(org.htmlcleaner.TagInfo)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$400(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$1200(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: boolean tagEncountered(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$1100(org.htmlcleaner.HtmlCleaner$OpenTags,java.util.Set)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: boolean someAlreadyOpen(java.util.Set)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$800(org.htmlcleaner.HtmlCleaner$OpenTags)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos getLastTagPos()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$1000(org.htmlcleaner.HtmlCleaner$OpenTags)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: boolean isEmpty()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner: void <clinit>()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$100(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$100(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.ITagInfoProvider access$000(org.htmlcleaner.HtmlCleaner)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$900(org.htmlcleaner.HtmlCleaner$OpenTags)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTagToPlaceRubbish()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void addTag(java.lang.String,int)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: void <init>(org.htmlcleaner.HtmlCleaner,int,java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$400(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: boolean tagExists(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: boolean someAlreadyOpen(java.util.Set)>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$100(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTagToPlaceRubbish()>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: boolean isEmpty()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTagToPlaceRubbish()>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: org.htmlcleaner.TagInfo access$200(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTagToPlaceRubbish()>" -> "<org.htmlcleaner.HtmlCleaner$TagPos: org.htmlcleaner.TagInfo access$200(org.htmlcleaner.HtmlCleaner$TagPos)>";
"<org.htmlcleaner.HtmlCleaner$TagPos: void <init>(org.htmlcleaner.HtmlCleaner,int,java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner: void <clinit>()>";
"<org.htmlcleaner.HtmlCleaner$TagPos: void <init>(org.htmlcleaner.HtmlCleaner,int,java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.ITagInfoProvider access$000(org.htmlcleaner.HtmlCleaner)>";
"<org.htmlcleaner.HtmlCleaner$TagPos: void <init>(org.htmlcleaner.HtmlCleaner,int,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: boolean tagExists(java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<java.util.ArrayList: java.util.ListIterator listIterator(int)>";
"<org.htmlcleaner.HtmlCleaner: void addAttributesToTag(org.htmlcleaner.TagNode,java.util.Map)>" -> "<org.htmlcleaner.TagNode: java.util.Map getAttributes()>";
"<org.htmlcleaner.HtmlCleaner: void addAttributesToTag(org.htmlcleaner.TagNode,java.util.Map)>" -> "<org.htmlcleaner.TagNode: void addAttribute(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.TagNode: void addAttribute(java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<java.util.ArrayList: void add(int,java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<java.util.ArrayList: int size()>";
"<java.util.ArrayList: void add(int,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void saveToLastOpenTag(java.util.List,java.lang.Object)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)>" -> "<java.util.ArrayList: java.util.ListIterator listIterator(int)>";
"<org.htmlcleaner.HtmlCleaner: boolean mustAddRequiredParent(org.htmlcleaner.TagInfo)>" -> "<java.util.ArrayList: java.util.ListIterator listIterator(int)>";
"<org.htmlcleaner.HtmlCleaner: boolean mustAddRequiredParent(org.htmlcleaner.TagInfo)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTagToPlaceRubbish()>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTagToPlaceRubbish()>" -> "<java.util.ArrayList: java.util.ListIterator listIterator(int)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: boolean isEmpty()>" -> "<java.util.ArrayList: boolean isEmpty()>";
"<java.util.ArrayList: boolean isEmpty()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.TagNode: void addAttribute(java.lang.String,java.lang.String)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void addAttributesToTag(org.htmlcleaner.TagNode,java.util.Map)>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<java.util.HashMap: boolean containsKey(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<java.util.TreeSet: boolean add(java.lang.Object)>";
"<java.util.TreeSet: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: boolean someAlreadyOpen(java.util.Set)>" -> "<java.util.TreeSet: boolean contains(java.lang.Object)>";
"<java.util.TreeSet: boolean contains(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: boolean someAlreadyOpen(java.util.Set)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: boolean tagEncountered(java.lang.String)>" -> "<java.util.HashSet: boolean contains(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void addTag(java.lang.String,int)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void addTag(java.lang.String,int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.ConfigFileTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.ConfigFileTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>" -> "<org.htmlcleaner.ConfigFileTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.ConfigFileTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object)>" -> "<org.htmlcleaner.ConfigFileTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void removeTag(java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void removeTag(java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void removeTag(java.lang.String)>" -> "<java.util.ArrayList: java.util.ListIterator listIterator(int)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void removeTag(java.lang.String)>" -> "<java.util.ArrayList: boolean isEmpty()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: void removeTag(java.lang.String)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.htmlcleaner.HtmlCleaner: void addPossibleHeadCandidate(org.htmlcleaner.TagInfo,org.htmlcleaner.TagNode)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findFirstTagPos()>" -> "<java.util.ArrayList: boolean isEmpty()>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findFirstTagPos()>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>" -> "<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>" -> "<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode getParent()>";
"<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>" -> "<java.util.HashSet: boolean contains(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>" -> "<org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>" -> "<org.htmlcleaner.ConfigFileTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>" -> "<org.htmlcleaner.TagToken: java.lang.String getName()>";
"<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>" -> "<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>" -> "<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode getParent()>";
"<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List)>" -> "<org.htmlcleaner.TagNode: boolean removeFromTree()>";
"<org.htmlcleaner.TagNode: boolean removeFromTree()>" -> "<org.htmlcleaner.TagNode: boolean removeChild(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void calculateRootNode(java.util.Set)>" -> "<org.htmlcleaner.TagNode: java.util.List getChildren()>";
"<org.htmlcleaner.HtmlCleaner: void calculateRootNode(java.util.Set)>" -> "<org.htmlcleaner.TagNode: java.util.Map getAttributes()>";
"<org.htmlcleaner.HtmlCleaner: void calculateRootNode(java.util.Set)>" -> "<org.htmlcleaner.TagNode: void addAttribute(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void calculateRootNode(java.util.Set)>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<org.htmlcleaner.HtmlCleaner: void calculateRootNode(java.util.Set)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<java.util.TreeSet: void clear()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<java.util.TreeSet: void clear()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<java.util.TreeSet: boolean isEmpty()>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>" -> "<java.util.TreeSet: java.util.Iterator iterator()>";
"<java.util.TreeSet: void clear()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.TreeSet: boolean isEmpty()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.TreeSet: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: void calculateRootNode(java.util.Set)>" -> "<java.util.TreeSet: java.util.Iterator iterator()>";
"<org.htmlcleaner.Utils: java.lang.StringBuffer readUrl(java.net.URL,java.lang.String)>" -> "<java.net.URL: java.lang.Object getContent()>";
"<java.net.URL: java.lang.Object getContent()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.net.URL,java.lang.String)>" -> "<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setOmitUnknownTags(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setTreatUnknownTagsAsContent(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setOmitDeprecatedTags(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setTreatDeprecatedTagsAsContent(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setAdvancedXmlEscape(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setUseCdataForScriptAndStyle(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setTranslateSpecialEntities(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setRecognizeUnicodeChars(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setOmitComments(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setOmitXmlDeclaration(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setOmitDoctypeDeclaration(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setOmitHtmlEnvelope(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setUseEmptyElementTags(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setAllowMultiWordAttributes(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setAllowHtmlInsideAttributes(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setIgnoreQuestAndExclam(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setNamespacesAware(boolean)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setHyphenReplacementInComment(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setPruneTags(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.CleanerProperties: void setBooleanAttributeValues(java.lang.String)>";
"<org.htmlcleaner.CleanerProperties: void setBooleanAttributeValues(java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.CleanerProperties: void setBooleanAttributeValues(java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.CleanerProperties: void setBooleanAttributeValues(java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<org.htmlcleaner.TagNode: java.lang.Object[] evaluateXPath(java.lang.String)>";
"<org.htmlcleaner.TagNode: java.lang.Object[] evaluateXPath(java.lang.String)>" -> "<org.htmlcleaner.XPather: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: void <init>(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.htmlcleaner.XPather: void <init>(java.lang.String)>" -> "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>";
"<org.htmlcleaner.XPather: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>" -> "<java.lang.Object: void <init>()>";
"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: void <init>(java.lang.String)>" -> "<java.util.StringTokenizer: int countTokens()>";
"<org.htmlcleaner.XPather: void <init>(java.lang.String)>" -> "<java.util.StringTokenizer: boolean hasMoreTokens()>";
"<org.htmlcleaner.XPather: void <init>(java.lang.String)>" -> "<java.util.StringTokenizer: java.lang.String nextToken()>";
"<org.htmlcleaner.TagNode: java.lang.Object[] evaluateXPath(java.lang.String)>" -> "<org.htmlcleaner.XPather: java.lang.Object[] evaluateAgainstNode(org.htmlcleaner.TagNode)>";
"<org.htmlcleaner.XPather: java.lang.Object[] evaluateAgainstNode(org.htmlcleaner.TagNode)>" -> "<org.htmlcleaner.XPatherException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: java.lang.Object[] evaluateAgainstNode(org.htmlcleaner.TagNode)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.lang.Object[] evaluateAgainstNode(org.htmlcleaner.TagNode)>" -> "<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>";
"<org.htmlcleaner.XPatherException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<java.lang.Boolean: void <clinit>()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<java.lang.Double: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isValidDouble(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<java.lang.Integer: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isValidInteger(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: int findClosingIndex(int,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isFunctionCall(int,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: void throwStandardException()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: int findClosingIndex(int,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<java.lang.Boolean: void <init>(boolean)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: void throwStandardException()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.lang.String flatten(int,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: int findClosingIndex(int,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: void throwStandardException()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: int findClosingIndex(int,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPatherException: void <init>()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: void throwStandardException()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: int findClosingIndex(int,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<java.lang.Double: void <clinit>()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>" -> "<java.util.ArrayList: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<org.htmlcleaner.XPather: boolean isAtt(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<org.htmlcleaner.XPather: void throwStandardException()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.ArrayList: void <init>()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.LinkedHashSet: void <init>(java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.LinkedHashSet: void <init>()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<org.htmlcleaner.XPather: void throwStandardException()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.LinkedHashSet: void <init>()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.ArrayList: void <init>()>";
"<java.lang.Double: void <init>(java.lang.String)>" -> "<java.lang.Number: void <init>()>";
"<java.lang.Double: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: boolean isValidDouble(java.lang.String)>" -> "<java.lang.Double: void <clinit>()>";
"<org.htmlcleaner.XPather: boolean isValidDouble(java.lang.String)>" -> "<java.lang.Double: double parseDouble(java.lang.String)>";
"<java.lang.Integer: void <init>(java.lang.String)>" -> "<java.lang.Number: void <init>()>";
"<java.lang.Integer: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: boolean isValidInteger(java.lang.String)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.htmlcleaner.XPather: boolean isValidInteger(java.lang.String)>" -> "<java.lang.Integer: int parseInt(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<org.htmlcleaner.XPatherException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.Integer: void <init>(int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.ArrayList: void <init>()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.htmlcleaner.XPather: boolean isFunctionCall(int,int)>" -> "<org.htmlcleaner.XPather: boolean isIdentifier(java.lang.String)>";
"<org.htmlcleaner.XPather: boolean isFunctionCall(int,int)>" -> "<org.htmlcleaner.XPather: int findClosingIndex(int,int)>";
"<org.htmlcleaner.XPather: boolean isFunctionCall(int,int)>" -> "<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>";
"<org.htmlcleaner.XPather: void throwStandardException()>" -> "<org.htmlcleaner.XPatherException: void <init>()>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<org.htmlcleaner.XPather: java.lang.String toText(java.lang.Object)>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<org.htmlcleaner.XPather: java.lang.String toText(java.lang.Object)>";
"<java.lang.Boolean: void <init>(boolean)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Boolean: void <init>(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: java.lang.String flatten(int,int)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<java.util.ArrayList: void <init>()>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<java.util.ArrayList: void <init>(java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>";
"<org.htmlcleaner.XPatherException: void <init>()>" -> "<org.htmlcleaner.XPatherException: void <init>(java.lang.String)>";
"<java.util.LinkedHashSet: void <init>(java.util.Collection)>" -> "<java.util.HashSet: void <init>()>";
"<java.util.LinkedHashSet: void <init>(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Double: double parseDouble(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: boolean isIdentifier(java.lang.String)>" -> "<java.lang.Character: void <clinit>()>";
"<org.htmlcleaner.XPather: boolean isIdentifier(java.lang.String)>" -> "<java.lang.Character: boolean isLetterOrDigit(char)>";
"<org.htmlcleaner.XPather: boolean isIdentifier(java.lang.String)>" -> "<java.lang.Character: boolean isLetter(char)>";
"<java.util.ArrayList: void <init>(java.util.Collection)>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Character: boolean isLetterOrDigit(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Character: boolean isLetter(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.lang.String: int compareTo(java.lang.String)>";
"<org.htmlcleaner.XPather: java.lang.Object[] evaluateAgainstNode(org.htmlcleaner.TagNode)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.XPather: java.lang.Object[] evaluateAgainstNode(org.htmlcleaner.TagNode)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>" -> "<java.util.HashSet: int size()>";
"<java.util.HashSet: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: java.lang.String flatten(int,int)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XPather: java.lang.String flatten(int,int)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.util.HashSet: int size()>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: int findClosingIndex(int,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.HashSet: int size()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.HashSet: int size()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.AbstractCollection: boolean addAll(java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.ArrayList: boolean addAll(java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<java.util.AbstractCollection: boolean addAll(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: boolean addAll(java.util.Collection)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.AbstractCollection: boolean addAll(java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.AbstractCollection: boolean addAll(java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.AbstractCollection: boolean addAll(java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.ArrayList: boolean addAll(java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.ArrayList: boolean addAll(java.util.Collection)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.ArrayList: boolean contains(java.lang.Object)>";
"<java.util.ArrayList: boolean contains(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.util.HashSet: boolean contains(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.HashSet: int size()>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: java.lang.Object[] evaluateAgainstNode(org.htmlcleaner.TagNode)>" -> "<java.util.HashSet: int size()>";
"<org.htmlcleaner.XPather: java.lang.Object[] evaluateAgainstNode(org.htmlcleaner.TagNode)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.util.HashSet: int size()>";
"<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>" -> "<java.util.HashSet: java.util.Iterator iterator()>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<org.htmlcleaner.TagNode: org.htmlcleaner.DoctypeToken getDocType()>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.TagNode: java.util.List getChildren()>";
"<org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.util.ArrayList: java.util.ListIterator listIterator()>";
"<java.util.ArrayList: java.util.ListIterator listIterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.TagNode: java.util.List getChildren()>";
"<org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.util.ArrayList: java.util.ListIterator listIterator()>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<org.htmlcleaner.TagNode: java.util.List getChildren()>";
"<org.htmlcleaner.PrettyXmlSerializer: void serializePrettyXml(org.htmlcleaner.TagNode,java.io.Writer,int)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.PrettyXmlSerializer: java.lang.String getSingleLineOfChildren(java.util.List)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<org.htmlcleaner.TagToken: java.lang.String getName()>";
"<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>" -> "<org.htmlcleaner.TagToken: java.lang.String getName()>";
"<org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>" -> "<org.htmlcleaner.TagToken: java.lang.String getName()>";
"<org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>" -> "<org.htmlcleaner.TagNode: java.util.List getChildren()>";
"<org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>" -> "<java.util.ArrayList: int size()>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<org.htmlcleaner.TagToken: java.lang.String getName()>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<org.htmlcleaner.TagNode: java.util.Map getAttributes()>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<java.util.LinkedHashMap: java.util.Set entrySet()>";
"<org.htmlcleaner.SimpleXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<org.htmlcleaner.TagNode: java.util.List getChildren()>";
"<org.htmlcleaner.SimpleXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.TagTransformation: void <init>(java.lang.String,java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.Utils: boolean isValidXmlIdentifier(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.Utils: boolean isValidXmlIdentifier(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>" -> "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: int indexOf(int)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.htmlcleaner.CleanerProperties: void setBooleanAttributeValues(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>" -> "<java.lang.String: int indexOf(int)>";
"<org.htmlcleaner.CleanerTransformations: org.htmlcleaner.TagTransformation getTransformation(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.TagTransformation: void addAttributeTransformation(java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.TagTransformation: void <init>(java.lang.String,java.lang.String,boolean)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: void main(java.lang.String[])>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>" -> "<java.lang.String: int indexOf(int)>";
"<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.XPather: boolean isIdentifier(java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.XPather: boolean isIdentifier(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.XPather: boolean isIdentifier(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.XPather: boolean isIdentifier(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.XPather: boolean isIdentifier(java.lang.String)>" -> "<java.lang.String: char charAt(int)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<org.htmlcleaner.XPather: boolean isAtt(java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.htmlcleaner.XPather: boolean isAtt(java.lang.String)>" -> "<java.lang.String: boolean startsWith(java.lang.String)>";
"<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.HtmlCleaner$TagPos: void <init>(org.htmlcleaner.HtmlCleaner,int,java.lang.String)>" -> "<org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner$TagPos: void <init>(org.htmlcleaner.HtmlCleaner,int,java.lang.String)>" -> "<org.htmlcleaner.ConfigFileTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)>" -> "<org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)>" -> "<org.htmlcleaner.ConfigFileTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.CleanerProperties: boolean isAllowMultiWordAttributes()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>" -> "<org.htmlcleaner.CleanerProperties: boolean isAllowHtmlInsideAttributes()>";
"<org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>" -> "<org.htmlcleaner.CleanerProperties: boolean isNamespacesAware()>";
"<org.htmlcleaner.HtmlTokenizer: void tagAttributes()>" -> "<org.htmlcleaner.TagNode: void addAttribute(java.lang.String,java.lang.String)>";
"<org.htmlcleaner.TagNode: void addAttribute(java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.TagNode: void addAttribute(java.lang.String,java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.HtmlTokenizer: void addToken(org.htmlcleaner.BaseToken)>" -> "<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator)>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.CleanerProperties: boolean isOmitUnknownTags()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.CleanerProperties: boolean isTreatUnknownTagsAsContent()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.CleanerProperties: boolean isOmitDeprecatedTags()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.CleanerProperties: boolean isTreatDeprecatedTagsAsContent()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.ITagInfoProvider getTagInfoProvider()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.ConfigFileTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<org.htmlcleaner.CleanerProperties: boolean isOmitComments()>";
"<org.htmlcleaner.HtmlTokenizer: void comment()>" -> "<org.htmlcleaner.CleanerProperties: java.lang.String getHyphenReplacementInComment()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.CleanerProperties: boolean isOmitUnknownTags()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.CleanerProperties: boolean isTreatUnknownTagsAsContent()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.CleanerProperties: boolean isOmitDeprecatedTags()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.CleanerProperties: boolean isTreatDeprecatedTagsAsContent()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.ITagInfoProvider getTagInfoProvider()>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.ConfigFileTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void start()>" -> "<org.htmlcleaner.CleanerProperties: boolean isIgnoreQuestAndExclam()>";
"<org.htmlcleaner.HtmlCleaner: void setPruneTags(java.lang.String)>" -> "<java.lang.String: java.lang.String trim()>";
"<org.htmlcleaner.HtmlCleaner: void setPruneTags(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<org.htmlcleaner.CleanerProperties: boolean isAdvancedXmlEscape()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<org.htmlcleaner.CleanerProperties: boolean isRecognizeUnicodeChars()>";
"<org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>" -> "<org.htmlcleaner.CleanerProperties: boolean isTranslateSpecialEntities()>";
"<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>" -> "<org.htmlcleaner.CleanerProperties: boolean isUseCdataForScriptAndStyle()>";
"<org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>" -> "<org.htmlcleaner.CleanerProperties: org.htmlcleaner.ITagInfoProvider getTagInfoProvider()>";
"<org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>" -> "<org.htmlcleaner.CleanerProperties: boolean isUseEmptyElementTags()>";
"<org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>" -> "<org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>" -> "<org.htmlcleaner.ConfigFileTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>";
"<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>" -> "<org.htmlcleaner.CleanerProperties: boolean isNamespacesAware()>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<org.htmlcleaner.CleanerProperties: boolean isOmitXmlDeclaration()>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<org.htmlcleaner.CleanerProperties: boolean isOmitDoctypeDeclaration()>";
"<org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.TagInfo: void defineForbiddenTags(java.lang.String)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.TagInfo: void defineHigherLevelTags(java.lang.String)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.TagInfo: void defineRequiredEnclosingTags(java.lang.String)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>" -> "<org.htmlcleaner.DoctypeToken: void serialize(org.htmlcleaner.XmlSerializer,java.io.Writer)>";
"<org.htmlcleaner.DoctypeToken: void serialize(org.htmlcleaner.XmlSerializer,java.io.Writer)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.DoctypeToken: void serialize(org.htmlcleaner.XmlSerializer,java.io.Writer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: void serialize(org.htmlcleaner.XmlSerializer,java.io.Writer)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: void serialize(org.htmlcleaner.XmlSerializer,java.io.Writer)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.DoctypeToken: void serialize(org.htmlcleaner.XmlSerializer,java.io.Writer)>" -> "<java.io.Writer: void write(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: void serialize(org.htmlcleaner.XmlSerializer,java.io.Writer)>" -> "<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.htmlcleaner.DoctypeToken: java.lang.String getContent()>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.CleanerTransformations: boolean hasTransformationForTag(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void tagEnd()>" -> "<org.htmlcleaner.CleanerTransformations: org.htmlcleaner.TagTransformation getTransformation(java.lang.String)>";
"<org.htmlcleaner.CleanerTransformations: boolean hasTransformationForTag(java.lang.String)>" -> "<java.lang.String: java.lang.String toLowerCase()>";
"<org.htmlcleaner.CleanerTransformations: boolean hasTransformationForTag(java.lang.String)>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.CleanerTransformations: boolean hasTransformationForTag(java.lang.String)>";
"<org.htmlcleaner.HtmlTokenizer: void tagStart()>" -> "<org.htmlcleaner.CleanerTransformations: org.htmlcleaner.TagTransformation getTransformation(java.lang.String)>";
}
