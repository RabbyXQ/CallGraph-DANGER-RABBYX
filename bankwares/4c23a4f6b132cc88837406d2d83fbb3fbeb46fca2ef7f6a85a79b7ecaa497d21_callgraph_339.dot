digraph CallGraph {
"<com.naef.jnlua.console.LuaConsole: void main(java.lang.String[])>" -> "<com.naef.jnlua.console.LuaConsole: void <clinit>()>";
"<com.naef.jnlua.console.LuaConsole: void main(java.lang.String[])>" -> "<java.lang.System: void exit(int)>";
"<com.naef.jnlua.console.LuaConsole: void main(java.lang.String[])>" -> "<com.naef.jnlua.console.LuaConsole: void <init>(java.lang.String[])>";
"<com.naef.jnlua.console.LuaConsole: void main(java.lang.String[])>" -> "<java.lang.System: void <clinit>()>";
"<com.naef.jnlua.console.LuaConsole: void <clinit>()>" -> "<java.lang.String: void <clinit>()>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.System: void exit(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void <init>(java.lang.String[])>" -> "<com.naef.jnlua.LuaState: void <clinit>()>";
"<com.naef.jnlua.console.LuaConsole: void <init>(java.lang.String[])>" -> "<com.naef.jnlua.LuaState: void <init>()>";
"<com.naef.jnlua.console.LuaConsole: void <init>(java.lang.String[])>" -> "<java.lang.Object: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void <clinit>()>" -> "<com.naef.jnlua.NativeSupport: void <clinit>()>";
"<com.naef.jnlua.LuaState: void <clinit>()>" -> "<com.naef.jnlua.LuaState: java.lang.String lua_version()>";
"<com.naef.jnlua.LuaState: void <clinit>()>" -> "<com.naef.jnlua.NativeSupport: com.naef.jnlua.NativeSupport getInstance()>";
"<com.naef.jnlua.LuaState: void <init>()>" -> "<com.naef.jnlua.LuaState: void <init>(long)>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.NativeSupport: void <clinit>()>" -> "<com.naef.jnlua.NativeSupport: void <init>()>";
"<com.naef.jnlua.NativeSupport: com.naef.jnlua.NativeSupport getInstance()>" -> "<com.naef.jnlua.NativeSupport: void <clinit>()>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.DefaultConverter: com.naef.jnlua.DefaultConverter getInstance()>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.DefaultJavaReflector: com.naef.jnlua.DefaultJavaReflector getInstance()>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<java.lang.Thread: java.lang.Thread currentThread()>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.LuaState: void lua_pop(int)>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.LuaState: void lua_setfield(int,java.lang.String)>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.LuaState: void lua_pushjavafunction(com.naef.jnlua.JavaFunction)>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.LuaState$2: void <init>(com.naef.jnlua.LuaState,com.naef.jnlua.JavaReflector$Metamethod)>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.JavaReflector$Metamethod: com.naef.jnlua.JavaReflector$Metamethod[] values()>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.JavaReflector$Metamethod: com.naef.jnlua.JavaReflector$Metamethod[] values()>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.LuaState$1: void <init>(com.naef.jnlua.LuaState)>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.LuaState: void lua_newstate(int,long)>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<java.lang.ref.ReferenceQueue: void <init>()>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<java.util.HashSet: void <init>()>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.DefaultConverter: void <clinit>()>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.DefaultJavaReflector: void <clinit>()>";
"<com.naef.jnlua.NativeSupport: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.NativeSupport: void <init>()>" -> "<com.naef.jnlua.NativeSupport$DefaultLoader: void <init>(com.naef.jnlua.NativeSupport,com.naef.jnlua.NativeSupport$1)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.DefaultConverter: com.naef.jnlua.DefaultConverter getInstance()>" -> "<com.naef.jnlua.DefaultConverter: void <clinit>()>";
"<com.naef.jnlua.DefaultJavaReflector: com.naef.jnlua.DefaultJavaReflector getInstance()>" -> "<com.naef.jnlua.DefaultJavaReflector: void <clinit>()>";
"<com.naef.jnlua.LuaState$2: void <init>(com.naef.jnlua.LuaState,com.naef.jnlua.JavaReflector$Metamethod)>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaReflector$Metamethod: com.naef.jnlua.JavaReflector$Metamethod[] values()>" -> "<com.naef.jnlua.JavaReflector$Metamethod: void <clinit>()>";
"<com.naef.jnlua.LuaState$1: void <init>(com.naef.jnlua.LuaState)>" -> "<com.naef.jnlua.LuaState$1: void finalize()>";
"<com.naef.jnlua.LuaState$1: void <init>(com.naef.jnlua.LuaState)>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.LuaState: void check()>" -> "<com.naef.jnlua.LuaState: boolean isOpenInternal()>";
"<com.naef.jnlua.LuaState: void check()>" -> "<com.naef.jnlua.LuaState: void lua_unref(int,int)>";
"<com.naef.jnlua.LuaState: void check()>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<java.lang.ref.ReferenceQueue: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ref.ReferenceQueue: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashSet: void <init>()>" -> "<java.util.AbstractSet: void <init>()>";
"<java.util.HashSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <clinit>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$15: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$14: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$13: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$12: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$11: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$10: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$9: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$8: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$7: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$6: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$5: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$4: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$3: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$2: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter$1: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Integer: void <init>(int)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<com.naef.jnlua.DefaultConverter: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Character: void <clinit>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Double: void <clinit>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Float: void <clinit>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Long: void <clinit>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Short: void <clinit>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Byte: void <clinit>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.naef.jnlua.DefaultJavaReflector: void <clinit>()>" -> "<com.naef.jnlua.DefaultJavaReflector: void <init>()>";
"<com.naef.jnlua.DefaultJavaReflector: void <clinit>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.NativeSupport$DefaultLoader: void <init>(com.naef.jnlua.NativeSupport,com.naef.jnlua.NativeSupport$1)>" -> "<com.naef.jnlua.NativeSupport$DefaultLoader: void <init>(com.naef.jnlua.NativeSupport)>";
"<com.naef.jnlua.JavaReflector$Metamethod: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaState$1: void finalize()>" -> "<com.naef.jnlua.LuaState: void <clinit>()>";
"<com.naef.jnlua.LuaState$1: void finalize()>" -> "<com.naef.jnlua.LuaState: void access$000(com.naef.jnlua.LuaState)>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalStateException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractSet: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.DefaultConverter$15: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter$14: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter$13: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter$12: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.DefaultConverter$11: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter$10: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter$9: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter$8: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter$7: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter$6: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter$5: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter$4: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter$3: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter$2: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter$1: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Integer: void <init>(int)>" -> "<java.lang.Number: void <init>()>";
"<java.lang.Integer: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.DefaultConverter: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<com.naef.jnlua.DefaultJavaReflector$AccessorPairs: void <init>(com.naef.jnlua.DefaultJavaReflector,java.lang.Class)>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<com.naef.jnlua.DefaultJavaReflector$AccessorPairs: void <init>(com.naef.jnlua.DefaultJavaReflector,java.lang.Class)>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<com.naef.jnlua.DefaultJavaReflector$AccessorPairs: void <init>(com.naef.jnlua.DefaultJavaReflector,java.lang.Class)>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<com.naef.jnlua.DefaultJavaReflector$ToString: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<com.naef.jnlua.DefaultJavaReflector$LessThanOrEqual: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<com.naef.jnlua.DefaultJavaReflector$LessThan: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<com.naef.jnlua.DefaultJavaReflector$Length: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<com.naef.jnlua.DefaultJavaReflector$Equal: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<com.naef.jnlua.DefaultJavaReflector$NewIndex: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<com.naef.jnlua.DefaultJavaReflector$Index: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>";
"<com.naef.jnlua.DefaultJavaReflector: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<com.naef.jnlua.NativeSupport$DefaultLoader: void <init>(com.naef.jnlua.NativeSupport)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void finalize()>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.LuaState: void access$000(com.naef.jnlua.LuaState)>" -> "<com.naef.jnlua.LuaState: void closeInternal()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Number: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Number: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.DefaultJavaReflector$AccessorPairs: void <init>(com.naef.jnlua.DefaultJavaReflector,java.lang.Class)>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultJavaReflector$ToString: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>" -> "<com.naef.jnlua.DefaultJavaReflector$ToString: void <init>(com.naef.jnlua.DefaultJavaReflector)>";
"<com.naef.jnlua.DefaultJavaReflector$LessThanOrEqual: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>" -> "<com.naef.jnlua.DefaultJavaReflector$LessThanOrEqual: void <init>(com.naef.jnlua.DefaultJavaReflector)>";
"<com.naef.jnlua.DefaultJavaReflector$LessThan: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>" -> "<com.naef.jnlua.DefaultJavaReflector$LessThan: void <init>(com.naef.jnlua.DefaultJavaReflector)>";
"<com.naef.jnlua.DefaultJavaReflector$Length: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>" -> "<com.naef.jnlua.DefaultJavaReflector$Length: void <init>(com.naef.jnlua.DefaultJavaReflector)>";
"<com.naef.jnlua.DefaultJavaReflector$Equal: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>" -> "<com.naef.jnlua.DefaultJavaReflector$Equal: void <init>(com.naef.jnlua.DefaultJavaReflector)>";
"<com.naef.jnlua.DefaultJavaReflector$NewIndex: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>" -> "<com.naef.jnlua.DefaultJavaReflector$NewIndex: void <init>(com.naef.jnlua.DefaultJavaReflector)>";
"<com.naef.jnlua.DefaultJavaReflector$Index: void <init>(com.naef.jnlua.DefaultJavaReflector,com.naef.jnlua.DefaultJavaReflector$1)>" -> "<com.naef.jnlua.DefaultJavaReflector$Index: void <init>(com.naef.jnlua.DefaultJavaReflector)>";
"<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void closeInternal()>" -> "<com.naef.jnlua.LuaState: boolean isOpenInternal()>";
"<com.naef.jnlua.LuaState: void closeInternal()>" -> "<java.lang.IllegalStateException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void closeInternal()>" -> "<com.naef.jnlua.LuaState: boolean isOpenInternal()>";
"<com.naef.jnlua.LuaState: void closeInternal()>" -> "<com.naef.jnlua.LuaState: void lua_close(boolean)>";
"<com.naef.jnlua.DefaultJavaReflector$ToString: void <init>(com.naef.jnlua.DefaultJavaReflector)>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultJavaReflector$LessThanOrEqual: void <init>(com.naef.jnlua.DefaultJavaReflector)>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultJavaReflector$LessThan: void <init>(com.naef.jnlua.DefaultJavaReflector)>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultJavaReflector$Length: void <init>(com.naef.jnlua.DefaultJavaReflector)>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultJavaReflector$Equal: void <init>(com.naef.jnlua.DefaultJavaReflector)>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultJavaReflector$NewIndex: void <init>(com.naef.jnlua.DefaultJavaReflector)>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultJavaReflector$Index: void <init>(com.naef.jnlua.DefaultJavaReflector)>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.DefaultConverter: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>";
"<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.JavaReflector$Metamethod: com.naef.jnlua.JavaReflector$Metamethod[] values()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<java.lang.Object: java.lang.Object clone()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void <init>(long)>" -> "<com.naef.jnlua.JavaReflector$Metamethod: java.lang.String getMetamethodName()>";
"<com.naef.jnlua.JavaReflector$Metamethod: java.lang.String getMetamethodName()>" -> "<java.lang.StringBuilder: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.JavaReflector$Metamethod: java.lang.String getMetamethodName()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.naef.jnlua.JavaReflector$Metamethod: java.lang.String getMetamethodName()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.naef.jnlua.JavaReflector$Metamethod: java.lang.String getMetamethodName()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.JavaReflector$Metamethod: java.lang.String getMetamethodName()>" -> "<java.lang.Enum: java.lang.String toString()>";
"<java.lang.Enum: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void <clinit>()>" -> "<com.naef.jnlua.NativeSupport: com.naef.jnlua.NativeSupport$Loader getLoader()>";
"<com.naef.jnlua.LuaState: void check()>" -> "<java.util.HashSet: boolean remove(java.lang.Object)>";
"<java.util.HashSet: boolean remove(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void check()>" -> "<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>";
"<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void main(java.lang.String[])>" -> "<com.naef.jnlua.console.LuaConsole: void run()>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.lang.System: void <clinit>()>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.ByteArrayInputStream: void <init>(byte[])>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.ByteArrayInputStream: void <init>(byte[])>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.ByteArrayOutputStream: void <init>()>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.BufferedReader: void <init>(java.io.Reader)>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.InputStreamReader: void <init>(java.io.InputStream)>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.lang.System: void <clinit>()>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.lang.String: void <clinit>()>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<com.naef.jnlua.LuaState: void <clinit>()>";
"<java.io.ByteArrayInputStream: void <init>(byte[])>" -> "<java.io.InputStream: void <init>()>";
"<java.io.ByteArrayInputStream: void <init>(byte[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>" -> "<java.io.Writer: void <init>()>";
"<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.ByteArrayOutputStream: void <init>()>" -> "<java.io.OutputStream: void <init>()>";
"<java.io.ByteArrayOutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.BufferedReader: void <init>(java.io.Reader)>" -> "<java.io.Reader: void <init>()>";
"<java.io.BufferedReader: void <init>(java.io.Reader)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream)>" -> "<java.io.Reader: void <init>()>";
"<java.io.InputStreamReader: void <init>(java.io.InputStream)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.InputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.Writer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Writer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.OutputStream: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.Reader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.io.Reader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.OutputStreamWriter: void flush()>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.OutputStreamWriter: void flush()>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.Writer: void write(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.OutputStreamWriter: void write(int)>";
"<java.io.OutputStreamWriter: void flush()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.Writer: void write(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.OutputStreamWriter: void write(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.ByteArrayOutputStream: byte[] toByteArray()>";
"<java.io.ByteArrayOutputStream: byte[] toByteArray()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<java.io.BufferedReader: java.lang.String readLine()>";
"<java.io.BufferedReader: java.lang.String readLine()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>";
"<com.naef.jnlua.console.LuaConsole: void run()>" -> "<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<java.lang.System: void <clinit>()>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<java.lang.Double: java.lang.Double valueOf(double)>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<java.lang.System: long nanoTime()>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<java.lang.System: long nanoTime()>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<java.lang.String: void <clinit>()>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<java.lang.Double: void <clinit>()>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<java.lang.System: void <clinit>()>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<com.naef.jnlua.console.LuaConsole$1: void <clinit>()>";
"<java.lang.Double: java.lang.Double valueOf(double)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole$1: void <clinit>()>" -> "<com.naef.jnlua.LuaType: void <clinit>()>";
"<com.naef.jnlua.console.LuaConsole$1: void <clinit>()>" -> "<com.naef.jnlua.LuaType: com.naef.jnlua.LuaType[] values()>";
"<com.naef.jnlua.console.LuaConsole$1: void <clinit>()>" -> "<com.naef.jnlua.LuaType: void <clinit>()>";
"<com.naef.jnlua.console.LuaConsole$1: void <clinit>()>" -> "<com.naef.jnlua.LuaType: void <clinit>()>";
"<com.naef.jnlua.LuaType: void <clinit>()>" -> "<com.naef.jnlua.LuaType: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaType: void <clinit>()>" -> "<com.naef.jnlua.LuaType: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaType: void <clinit>()>" -> "<com.naef.jnlua.LuaType: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaType: void <clinit>()>" -> "<com.naef.jnlua.LuaType: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaType: void <clinit>()>" -> "<com.naef.jnlua.LuaType: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaType: void <clinit>()>" -> "<com.naef.jnlua.LuaType: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaType: void <clinit>()>" -> "<com.naef.jnlua.LuaType: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaType: void <clinit>()>" -> "<com.naef.jnlua.LuaType: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaType: void <clinit>()>" -> "<com.naef.jnlua.LuaType: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaType: com.naef.jnlua.LuaType[] values()>" -> "<com.naef.jnlua.LuaType: void <clinit>()>";
"<com.naef.jnlua.LuaType: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaType: com.naef.jnlua.LuaType[] values()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<com.naef.jnlua.console.LuaConsole$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<com.naef.jnlua.console.LuaConsole$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<com.naef.jnlua.console.LuaConsole$1: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<java.lang.Enum: int ordinal()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void <init>(java.lang.String[])>" -> "<com.naef.jnlua.LuaState: void newTable(int,int)>";
"<com.naef.jnlua.console.LuaConsole: void <init>(java.lang.String[])>" -> "<com.naef.jnlua.LuaState: void pushString(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void <init>(java.lang.String[])>" -> "<com.naef.jnlua.LuaState: void rawSet(int,int)>";
"<com.naef.jnlua.console.LuaConsole: void <init>(java.lang.String[])>" -> "<com.naef.jnlua.LuaState: void setGlobal(java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void <init>(java.lang.String[])>" -> "<com.naef.jnlua.LuaState: void openLibs()>";
"<com.naef.jnlua.console.LuaConsole: void <init>(java.lang.String[])>" -> "<com.naef.jnlua.LuaState: void load(java.lang.String,java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void <init>(java.lang.String[])>" -> "<com.naef.jnlua.LuaState: void call(int,int)>";
"<com.naef.jnlua.console.LuaConsole: void <init>(java.lang.String[])>" -> "<com.naef.jnlua.LuaState: void load(java.lang.String,java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void <init>(java.lang.String[])>" -> "<com.naef.jnlua.LuaState: void call(int,int)>";
"<com.naef.jnlua.LuaState: void newTable(int,int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void newTable(int,int)>" -> "<com.naef.jnlua.LuaState: void lua_createtable(int,int)>";
"<com.naef.jnlua.LuaState: void pushString(java.lang.String)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void pushString(java.lang.String)>" -> "<com.naef.jnlua.LuaState: void lua_pushstring(java.lang.String)>";
"<com.naef.jnlua.LuaState: void rawSet(int,int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void rawSet(int,int)>" -> "<com.naef.jnlua.LuaState: void lua_rawseti(int,int)>";
"<com.naef.jnlua.LuaState: void setGlobal(java.lang.String)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void setGlobal(java.lang.String)>" -> "<com.naef.jnlua.LuaState: void lua_setglobal(java.lang.String)>";
"<com.naef.jnlua.LuaState: void openLibs()>" -> "<com.naef.jnlua.LuaState$Library: void <clinit>()>";
"<com.naef.jnlua.LuaState: void openLibs()>" -> "<com.naef.jnlua.LuaState$Library: com.naef.jnlua.LuaState$Library[] values()>";
"<com.naef.jnlua.LuaState: void openLibs()>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void load(java.lang.String,java.lang.String)>" -> "<java.io.ByteArrayInputStream: void <init>(byte[])>";
"<com.naef.jnlua.LuaState: void load(java.lang.String,java.lang.String)>" -> "<com.naef.jnlua.LuaMemoryAllocationException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void call(int,int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void call(int,int)>" -> "<com.naef.jnlua.LuaState: void lua_pcall(int,int)>";
"<com.naef.jnlua.LuaState$Library: void <clinit>()>" -> "<com.naef.jnlua.LuaState$Library: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaState$Library: void <clinit>()>" -> "<com.naef.jnlua.LuaState$Library$1: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaState$Library: void <clinit>()>" -> "<com.naef.jnlua.LuaState$Library: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaState$Library: void <clinit>()>" -> "<com.naef.jnlua.LuaState$Library: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaState$Library: void <clinit>()>" -> "<com.naef.jnlua.LuaState$Library: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaState$Library: void <clinit>()>" -> "<com.naef.jnlua.LuaState$Library: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaState$Library: void <clinit>()>" -> "<com.naef.jnlua.LuaState$Library: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaState$Library: void <clinit>()>" -> "<com.naef.jnlua.LuaState$Library: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaState$Library: void <clinit>()>" -> "<com.naef.jnlua.LuaState$Library: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaState$Library: com.naef.jnlua.LuaState$Library[] values()>" -> "<com.naef.jnlua.LuaState$Library: void <clinit>()>";
"<com.naef.jnlua.LuaMemoryAllocationException: void <init>(java.lang.String)>" -> "<com.naef.jnlua.LuaException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState$Library: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaState$Library$1: void <init>(java.lang.String,int)>" -> "<com.naef.jnlua.LuaState$Library: void <init>(java.lang.String,int,com.naef.jnlua.LuaState$1)>";
"<com.naef.jnlua.LuaException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState$Library: void <init>(java.lang.String,int,com.naef.jnlua.LuaState$1)>" -> "<com.naef.jnlua.LuaState$Library: void <init>(java.lang.String,int)>";
"<com.naef.jnlua.LuaState$Library: com.naef.jnlua.LuaState$Library[] values()>" -> "<java.lang.Object: java.lang.Object clone()>";
"<com.naef.jnlua.LuaState: void load(java.lang.String,java.lang.String)>" -> "<java.lang.String: byte[] getBytes(java.lang.String)>";
"<java.lang.String: byte[] getBytes(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void load(java.lang.String,java.lang.String)>" -> "<com.naef.jnlua.LuaState: void load(java.io.InputStream,java.lang.String)>";
"<com.naef.jnlua.LuaState: void load(java.io.InputStream,java.lang.String)>" -> "<java.lang.NullPointerException: void <init>()>";
"<com.naef.jnlua.LuaState: void load(java.io.InputStream,java.lang.String)>" -> "<com.naef.jnlua.LuaState: void lua_load(java.io.InputStream,java.lang.String)>";
"<com.naef.jnlua.LuaState: void load(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<com.naef.jnlua.LuaState: void load(java.io.InputStream,java.lang.String)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<java.lang.NullPointerException: void <init>()>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.NullPointerException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void load(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.naef.jnlua.LuaState: void load(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<com.naef.jnlua.LuaState: void load(java.io.InputStream,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<com.naef.jnlua.LuaState: void openLibs()>" -> "<com.naef.jnlua.LuaState$Library: void open(com.naef.jnlua.LuaState)>";
"<com.naef.jnlua.LuaState: void openLibs()>" -> "<com.naef.jnlua.LuaState$Library$1: void open(com.naef.jnlua.LuaState)>";
"<com.naef.jnlua.LuaState$Library: void open(com.naef.jnlua.LuaState)>" -> "<com.naef.jnlua.LuaState: void <clinit>()>";
"<com.naef.jnlua.LuaState$Library: void open(com.naef.jnlua.LuaState)>" -> "<com.naef.jnlua.LuaState: void access$200(com.naef.jnlua.LuaState,int)>";
"<com.naef.jnlua.LuaState$Library$1: void open(com.naef.jnlua.LuaState)>" -> "<com.naef.jnlua.JavaModule: void <clinit>()>";
"<com.naef.jnlua.LuaState$Library$1: void open(com.naef.jnlua.LuaState)>" -> "<com.naef.jnlua.JavaModule: com.naef.jnlua.JavaModule getInstance()>";
"<com.naef.jnlua.LuaState: void access$200(com.naef.jnlua.LuaState,int)>" -> "<com.naef.jnlua.LuaState: void lua_openlib(int)>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.lang.Boolean: void <clinit>()>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.util.HashMap: void <init>()>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<com.naef.jnlua.JavaModule: void <init>()>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.lang.Void: void <clinit>()>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.lang.Short: void <clinit>()>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.lang.Long: void <clinit>()>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.lang.Integer: void <clinit>()>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.lang.Float: void <clinit>()>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.lang.Double: void <clinit>()>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.lang.Character: void <clinit>()>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.lang.Byte: void <clinit>()>";
"<com.naef.jnlua.JavaModule: com.naef.jnlua.JavaModule getInstance()>" -> "<com.naef.jnlua.JavaModule: void <clinit>()>";
"<com.naef.jnlua.JavaModule: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule: void <init>()>" -> "<com.naef.jnlua.JavaModule$Properties: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule: void <init>()>" -> "<com.naef.jnlua.JavaModule$Methods: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule: void <init>()>" -> "<com.naef.jnlua.JavaModule$Fields: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule: void <init>()>" -> "<com.naef.jnlua.JavaModule$Elements: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule: void <init>()>" -> "<com.naef.jnlua.JavaModule$ToTable: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule: void <init>()>" -> "<com.naef.jnlua.JavaModule$IPairs: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule: void <init>()>" -> "<com.naef.jnlua.JavaModule$Pairs: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule: void <init>()>" -> "<com.naef.jnlua.JavaModule$Proxy: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule: void <init>()>" -> "<com.naef.jnlua.JavaModule$Cast: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule: void <init>()>" -> "<com.naef.jnlua.JavaModule$InstanceOf: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule: void <init>()>" -> "<com.naef.jnlua.JavaModule$New: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule: void <init>()>" -> "<com.naef.jnlua.JavaModule$Require: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule$Properties: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$Properties: void <init>()>";
"<com.naef.jnlua.JavaModule$Methods: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$Methods: void <init>()>";
"<com.naef.jnlua.JavaModule$Fields: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$Fields: void <init>()>";
"<com.naef.jnlua.JavaModule$Elements: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$Elements: void <init>()>";
"<com.naef.jnlua.JavaModule$ToTable: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$ToTable: void <init>()>";
"<com.naef.jnlua.JavaModule$IPairs: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$IPairs: void <init>()>";
"<com.naef.jnlua.JavaModule$Pairs: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$Pairs: void <init>()>";
"<com.naef.jnlua.JavaModule$Proxy: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$Proxy: void <init>()>";
"<com.naef.jnlua.JavaModule$Cast: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$Cast: void <init>()>";
"<com.naef.jnlua.JavaModule$InstanceOf: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$InstanceOf: void <init>()>";
"<com.naef.jnlua.JavaModule$New: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$New: void <init>()>";
"<com.naef.jnlua.JavaModule$Require: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$Require: void <init>()>";
"<com.naef.jnlua.JavaModule$Properties: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$Methods: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$Fields: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$Elements: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$ToTable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$IPairs: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$IPairs: void <init>()>" -> "<com.naef.jnlua.JavaModule$IPairs$ArrayNext: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule$IPairs: void <init>()>" -> "<com.naef.jnlua.JavaModule$IPairs$ListNext: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule$Pairs: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$Pairs: void <init>()>" -> "<com.naef.jnlua.JavaModule$Pairs$NavigableMapNext: void <init>(com.naef.jnlua.JavaModule$1)>";
"<com.naef.jnlua.JavaModule$Proxy: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$Cast: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$InstanceOf: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$New: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$Require: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$IPairs$ArrayNext: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$IPairs$ArrayNext: void <init>()>";
"<com.naef.jnlua.JavaModule$IPairs$ListNext: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$IPairs$ListNext: void <init>()>";
"<com.naef.jnlua.JavaModule$Pairs$NavigableMapNext: void <init>(com.naef.jnlua.JavaModule$1)>" -> "<com.naef.jnlua.JavaModule$Pairs$NavigableMapNext: void <init>()>";
"<com.naef.jnlua.JavaModule$IPairs$ArrayNext: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$IPairs$ListNext: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.JavaModule$Pairs$NavigableMapNext: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<com.naef.jnlua.LuaState$Library$1: void open(com.naef.jnlua.LuaState)>" -> "<com.naef.jnlua.JavaModule: void open(com.naef.jnlua.LuaState)>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.JavaModule: void <clinit>()>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<com.naef.jnlua.LuaState$Library: void open(com.naef.jnlua.LuaState)>" -> "<java.lang.Enum: int ordinal()>";
"<com.naef.jnlua.JavaModule: void open(com.naef.jnlua.LuaState)>" -> "<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>";
"<com.naef.jnlua.JavaModule: void open(com.naef.jnlua.LuaState)>" -> "<com.naef.jnlua.LuaState: void pop(int)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<java.lang.String: void <clinit>()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.LuaState: java.lang.String lua_findtable(int,java.lang.String,int)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.LuaState: java.lang.String lua_findtable(int,java.lang.String,int)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<java.lang.String: void <clinit>()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<java.lang.Integer: void <clinit>()>";
"<com.naef.jnlua.LuaState: void pop(int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void pop(int)>" -> "<com.naef.jnlua.LuaState: void lua_pop(int)>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Integer: java.lang.Integer valueOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.LuaState: void getField(int,java.lang.String)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.LuaState: boolean isTable(int)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.LuaState: void pop(int)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.LuaState: void pushValue(int)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.LuaState: void setField(int,java.lang.String)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.LuaState: void remove(int)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.LuaState: void pushJavaFunction(com.naef.jnlua.JavaFunction)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.LuaState: void setField(int,java.lang.String)>";
"<com.naef.jnlua.LuaState: void getField(int,java.lang.String)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void getField(int,java.lang.String)>" -> "<com.naef.jnlua.LuaState: void lua_getfield(int,java.lang.String)>";
"<com.naef.jnlua.LuaState: boolean isTable(int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: boolean isTable(int)>" -> "<com.naef.jnlua.LuaState: int lua_istable(int)>";
"<com.naef.jnlua.LuaState: void pushValue(int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void pushValue(int)>" -> "<com.naef.jnlua.LuaState: void lua_pushvalue(int)>";
"<com.naef.jnlua.LuaState: void setField(int,java.lang.String)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void setField(int,java.lang.String)>" -> "<com.naef.jnlua.LuaState: void lua_setfield(int,java.lang.String)>";
"<com.naef.jnlua.LuaState: void remove(int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void remove(int)>" -> "<com.naef.jnlua.LuaState: void lua_remove(int)>";
"<com.naef.jnlua.LuaState: void pushJavaFunction(com.naef.jnlua.JavaFunction)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void pushJavaFunction(com.naef.jnlua.JavaFunction)>" -> "<com.naef.jnlua.LuaState: void lua_pushjavafunction(com.naef.jnlua.JavaFunction)>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<java.lang.Throwable: java.lang.String getMessage()>";
"<java.lang.Throwable: java.lang.String getMessage()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.JavaModule$Properties: java.lang.String getName()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.JavaModule$Methods: java.lang.String getName()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.JavaModule$Fields: java.lang.String getName()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.JavaModule$Elements: java.lang.String getName()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.JavaModule$ToTable: java.lang.String getName()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.JavaModule$IPairs: java.lang.String getName()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.JavaModule$Pairs: java.lang.String getName()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.JavaModule$Proxy: java.lang.String getName()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.JavaModule$Cast: java.lang.String getName()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.JavaModule$InstanceOf: java.lang.String getName()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.JavaModule$New: java.lang.String getName()>";
"<com.naef.jnlua.LuaState: void register(java.lang.String,com.naef.jnlua.NamedJavaFunction[])>" -> "<com.naef.jnlua.JavaModule$Require: java.lang.String getName()>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<com.naef.jnlua.LuaState: void setTop(int)>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<com.naef.jnlua.LuaState: void load(java.io.InputStream,java.lang.String)>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<com.naef.jnlua.LuaState: void call(int,int)>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<com.naef.jnlua.LuaState: int getTop()>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<com.naef.jnlua.LuaState: com.naef.jnlua.LuaType type(int)>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<com.naef.jnlua.LuaState: java.lang.String typeName(int)>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<com.naef.jnlua.LuaState: boolean toBoolean(int)>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<com.naef.jnlua.LuaState: java.lang.String toString(int)>";
"<com.naef.jnlua.LuaState: void setTop(int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: void setTop(int)>" -> "<com.naef.jnlua.LuaState: void lua_settop(int)>";
"<com.naef.jnlua.LuaState: int getTop()>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: int getTop()>" -> "<com.naef.jnlua.LuaState: int lua_gettop()>";
"<com.naef.jnlua.LuaState: com.naef.jnlua.LuaType type(int)>" -> "<com.naef.jnlua.LuaType: void <clinit>()>";
"<com.naef.jnlua.LuaState: com.naef.jnlua.LuaType type(int)>" -> "<com.naef.jnlua.LuaType: com.naef.jnlua.LuaType[] values()>";
"<com.naef.jnlua.LuaState: com.naef.jnlua.LuaType type(int)>" -> "<com.naef.jnlua.LuaState: int lua_type(int)>";
"<com.naef.jnlua.LuaState: com.naef.jnlua.LuaType type(int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: java.lang.String typeName(int)>" -> "<com.naef.jnlua.LuaState$3: void <clinit>()>";
"<com.naef.jnlua.LuaState: java.lang.String typeName(int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: boolean toBoolean(int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: boolean toBoolean(int)>" -> "<com.naef.jnlua.LuaState: int lua_toboolean(int)>";
"<com.naef.jnlua.LuaState: java.lang.String toString(int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: java.lang.String toString(int)>" -> "<com.naef.jnlua.LuaState: java.lang.String lua_tostring(int)>";
"<com.naef.jnlua.LuaState$3: void <clinit>()>" -> "<com.naef.jnlua.LuaType: void <clinit>()>";
"<com.naef.jnlua.LuaState$3: void <clinit>()>" -> "<com.naef.jnlua.LuaType: com.naef.jnlua.LuaType[] values()>";
"<com.naef.jnlua.LuaState$3: void <clinit>()>" -> "<java.lang.Enum: int ordinal()>";
"<com.naef.jnlua.LuaState: java.lang.String typeName(int)>" -> "<com.naef.jnlua.LuaState: com.naef.jnlua.LuaType type(int)>";
"<com.naef.jnlua.LuaState: java.lang.String typeName(int)>" -> "<com.naef.jnlua.LuaState: boolean isJavaObjectRaw(int)>";
"<com.naef.jnlua.LuaState: java.lang.String typeName(int)>" -> "<com.naef.jnlua.LuaState: java.lang.Object toJavaObjectRaw(int)>";
"<com.naef.jnlua.LuaState: boolean isJavaObjectRaw(int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: boolean isJavaObjectRaw(int)>" -> "<com.naef.jnlua.LuaState: int lua_isjavaobject(int)>";
"<com.naef.jnlua.LuaState: java.lang.Object toJavaObjectRaw(int)>" -> "<com.naef.jnlua.LuaState: void check()>";
"<com.naef.jnlua.LuaState: java.lang.Object toJavaObjectRaw(int)>" -> "<com.naef.jnlua.LuaState: java.lang.Object lua_tojavaobject(int)>";
"<com.naef.jnlua.LuaState: java.lang.String typeName(int)>" -> "<java.lang.Enum: int ordinal()>";
"<com.naef.jnlua.LuaState: java.lang.String typeName(int)>" -> "<com.naef.jnlua.LuaType: java.lang.String displayText()>";
"<com.naef.jnlua.LuaType: java.lang.String displayText()>" -> "<java.lang.Enum: java.lang.String toString()>";
"<com.naef.jnlua.console.LuaConsole: void runChunk(java.io.InputStream)>" -> "<java.lang.Enum: int ordinal()>";
"<com.naef.jnlua.LuaState: void <clinit>()>" -> "<com.naef.jnlua.NativeSupport$DefaultLoader: void load()>";
"<com.naef.jnlua.NativeSupport$DefaultLoader: void load()>" -> "<java.lang.System: void <clinit>()>";
"<com.naef.jnlua.NativeSupport$DefaultLoader: void load()>" -> "<java.lang.System: void loadLibrary(java.lang.String)>";
"<java.lang.System: void loadLibrary(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
}
