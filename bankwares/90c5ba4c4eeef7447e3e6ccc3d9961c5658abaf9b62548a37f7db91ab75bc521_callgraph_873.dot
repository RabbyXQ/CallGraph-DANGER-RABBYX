digraph CallGraph {
"<org.msgpack.util.TemplatePrecompiler: void main(java.lang.String[])>" -> "<org.msgpack.util.TemplatePrecompiler: void <clinit>()>";
"<org.msgpack.util.TemplatePrecompiler: void main(java.lang.String[])>" -> "<org.msgpack.util.TemplatePrecompiler: void saveTemplates(java.lang.String[])>";
"<org.msgpack.util.TemplatePrecompiler: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.msgpack.util.TemplatePrecompiler: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.ClassLoader: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.Exception: void <init>()>";
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplates(java.lang.String[])>" -> "<org.msgpack.util.TemplatePrecompiler: void <clinit>()>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplates(java.lang.String[])>" -> "<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplates(java.lang.String[])>" -> "<org.msgpack.util.TemplatePrecompiler: java.util.List toClass(java.util.List)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplates(java.lang.String[])>" -> "<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplates(java.lang.String[])>" -> "<java.util.ArrayList: void <init>()>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplates(java.lang.String[])>" -> "<org.msgpack.template.TemplateRegistry: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplates(java.lang.String[])>" -> "<org.msgpack.util.TemplatePrecompiler: void <clinit>()>";
"<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Object: void <init>()>" -> "<java.lang.Object: void finalize()>";
"<java.lang.Object: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.Throwable: void <init>()>";
"<java.lang.Exception: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<org.msgpack.util.TemplatePrecompiler: void <clinit>()>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<org.msgpack.util.TemplatePrecompiler: java.lang.String getDirName(java.util.Properties,java.lang.String,java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.System: java.util.Properties getProperties()>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: void <clinit>()>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.System: void <clinit>()>";
"<org.msgpack.util.TemplatePrecompiler: java.util.List toClass(java.util.List)>" -> "<java.util.ArrayList: void <init>(int)>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<org.msgpack.util.TemplatePrecompiler$1: void <init>()>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<javax.tools.DiagnosticCollector: void <init>()>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<javax.tools.ToolProvider: javax.tools.JavaCompiler getSystemJavaCompiler()>";
"<java.util.ArrayList: void <init>()>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: void <init>(org.msgpack.template.TemplateRegistry)>" -> "<java.lang.Object: void <init>()>";
"<org.msgpack.template.TemplateRegistry: void <init>(org.msgpack.template.TemplateRegistry)>" -> "<org.msgpack.template.TemplateRegistry: void <init>()>";
"<org.msgpack.template.TemplateRegistry: void <init>(org.msgpack.template.TemplateRegistry)>" -> "<java.util.HashMap: void <init>()>";
"<org.msgpack.template.TemplateRegistry: void <init>(org.msgpack.template.TemplateRegistry)>" -> "<java.util.HashMap: void <init>()>";
"<java.lang.Object: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Throwable: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuilder: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry)>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>";
"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: java.lang.String getDirName(java.util.Properties,java.lang.String,java.lang.String)>" -> "<java.io.File: void <clinit>()>";
"<org.msgpack.util.TemplatePrecompiler: java.lang.String getDirName(java.util.Properties,java.lang.String,java.lang.String)>" -> "<java.io.IOException: void <init>(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: java.lang.String getDirName(java.util.Properties,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.util.TemplatePrecompiler: java.lang.String getDirName(java.util.Properties,java.lang.String,java.lang.String)>" -> "<java.io.File: void <init>(java.lang.String)>";
"<java.lang.System: java.util.Properties getProperties()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.util.AbstractList: void <init>()>";
"<java.util.ArrayList: void <init>(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler$1: void <init>()>" -> "<java.util.HashSet: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractList: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: void <init>()>" -> "<java.util.Collections: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void <init>()>" -> "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
"<org.msgpack.template.TemplateRegistry: void <init>()>" -> "<org.msgpack.template.TemplateRegistry: void registerTemplates()>";
"<org.msgpack.template.TemplateRegistry: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<org.msgpack.template.TemplateRegistry: void <init>()>" -> "<java.util.HashMap: void <init>()>";
"<org.msgpack.template.TemplateRegistry: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.util.AbstractMap: void <init>()>";
"<java.util.HashMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: void <clinit>()>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<javassist.LoaderClassPath: void <init>(java.lang.ClassLoader)>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<javassist.ClassPool: void <init>()>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry)>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.Exception: void <init>()>";
"<java.io.IOException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.Object: void <init>()>";
"<java.io.File: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashSet: void <init>()>" -> "<java.util.AbstractSet: void <init>()>";
"<java.util.HashSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractCollection: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<java.lang.Boolean: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.DateTemplate: org.msgpack.template.DateTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.BigDecimalTemplate: org.msgpack.template.BigDecimalTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ValueTemplate: org.msgpack.template.ValueTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ByteBufferTemplate: org.msgpack.template.ByteBufferTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ByteArrayTemplate: org.msgpack.template.ByteArrayTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.StringTemplate: org.msgpack.template.StringTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.DoubleArrayTemplate: org.msgpack.template.DoubleArrayTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.FloatArrayTemplate: org.msgpack.template.FloatArrayTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.LongArrayTemplate: org.msgpack.template.LongArrayTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.IntegerArrayTemplate: org.msgpack.template.IntegerArrayTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ShortArrayTemplate: org.msgpack.template.ShortArrayTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.BooleanArrayTemplate: org.msgpack.template.BooleanArrayTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.CharacterTemplate: org.msgpack.template.CharacterTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.CharacterTemplate: org.msgpack.template.CharacterTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.BigIntegerTemplate: org.msgpack.template.BigIntegerTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.DoubleTemplate: org.msgpack.template.DoubleTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.DoubleTemplate: org.msgpack.template.DoubleTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.FloatTemplate: org.msgpack.template.FloatTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.FloatTemplate: org.msgpack.template.FloatTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.LongTemplate: org.msgpack.template.LongTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.LongTemplate: org.msgpack.template.LongTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.IntegerTemplate: org.msgpack.template.IntegerTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.IntegerTemplate: org.msgpack.template.IntegerTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ShortTemplate: org.msgpack.template.ShortTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ShortTemplate: org.msgpack.template.ShortTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ByteTemplate: org.msgpack.template.ByteTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ByteTemplate: org.msgpack.template.ByteTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.BooleanTemplate: org.msgpack.template.BooleanTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.BooleanTemplate: org.msgpack.template.BooleanTemplate getInstance()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.DateTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.BigDecimalTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ValueTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ByteBufferTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ByteArrayTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.StringTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.DoubleArrayTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.FloatArrayTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.LongArrayTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.IntegerArrayTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ShortArrayTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.BooleanArrayTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.CharacterTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<java.lang.Character: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.BigIntegerTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.DoubleTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<java.lang.Double: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.FloatTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<java.lang.Float: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.LongTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<java.lang.Long: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.IntegerTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ShortTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<java.lang.Short: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.ByteTemplate: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<java.lang.Byte: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.BooleanTemplate: void <clinit>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractMap: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry)>" -> "<java.lang.Object: void <init>()>";
"<java.util.AbstractSet: void <init>()>" -> "<java.util.AbstractCollection: void <init>()>";
"<java.util.AbstractSet: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.DateTemplate: org.msgpack.template.DateTemplate getInstance()>" -> "<org.msgpack.template.DateTemplate: void <clinit>()>";
"<org.msgpack.template.BigDecimalTemplate: org.msgpack.template.BigDecimalTemplate getInstance()>" -> "<org.msgpack.template.BigDecimalTemplate: void <clinit>()>";
"<org.msgpack.template.ValueTemplate: org.msgpack.template.ValueTemplate getInstance()>" -> "<org.msgpack.template.ValueTemplate: void <clinit>()>";
"<org.msgpack.template.ByteBufferTemplate: org.msgpack.template.ByteBufferTemplate getInstance()>" -> "<org.msgpack.template.ByteBufferTemplate: void <clinit>()>";
"<org.msgpack.template.ByteArrayTemplate: org.msgpack.template.ByteArrayTemplate getInstance()>" -> "<org.msgpack.template.ByteArrayTemplate: void <clinit>()>";
"<org.msgpack.template.StringTemplate: org.msgpack.template.StringTemplate getInstance()>" -> "<org.msgpack.template.StringTemplate: void <clinit>()>";
"<org.msgpack.template.DoubleArrayTemplate: org.msgpack.template.DoubleArrayTemplate getInstance()>" -> "<org.msgpack.template.DoubleArrayTemplate: void <clinit>()>";
"<org.msgpack.template.FloatArrayTemplate: org.msgpack.template.FloatArrayTemplate getInstance()>" -> "<org.msgpack.template.FloatArrayTemplate: void <clinit>()>";
"<org.msgpack.template.LongArrayTemplate: org.msgpack.template.LongArrayTemplate getInstance()>" -> "<org.msgpack.template.LongArrayTemplate: void <clinit>()>";
"<org.msgpack.template.IntegerArrayTemplate: org.msgpack.template.IntegerArrayTemplate getInstance()>" -> "<org.msgpack.template.IntegerArrayTemplate: void <clinit>()>";
"<org.msgpack.template.ShortArrayTemplate: org.msgpack.template.ShortArrayTemplate getInstance()>" -> "<org.msgpack.template.ShortArrayTemplate: void <clinit>()>";
"<org.msgpack.template.BooleanArrayTemplate: org.msgpack.template.BooleanArrayTemplate getInstance()>" -> "<org.msgpack.template.BooleanArrayTemplate: void <clinit>()>";
"<org.msgpack.template.CharacterTemplate: org.msgpack.template.CharacterTemplate getInstance()>" -> "<org.msgpack.template.CharacterTemplate: void <clinit>()>";
"<org.msgpack.template.BigIntegerTemplate: org.msgpack.template.BigIntegerTemplate getInstance()>" -> "<org.msgpack.template.BigIntegerTemplate: void <clinit>()>";
"<org.msgpack.template.DoubleTemplate: org.msgpack.template.DoubleTemplate getInstance()>" -> "<org.msgpack.template.DoubleTemplate: void <clinit>()>";
"<org.msgpack.template.FloatTemplate: org.msgpack.template.FloatTemplate getInstance()>" -> "<org.msgpack.template.FloatTemplate: void <clinit>()>";
"<org.msgpack.template.LongTemplate: org.msgpack.template.LongTemplate getInstance()>" -> "<org.msgpack.template.LongTemplate: void <clinit>()>";
"<org.msgpack.template.IntegerTemplate: org.msgpack.template.IntegerTemplate getInstance()>" -> "<org.msgpack.template.IntegerTemplate: void <clinit>()>";
"<org.msgpack.template.ShortTemplate: org.msgpack.template.ShortTemplate getInstance()>" -> "<org.msgpack.template.ShortTemplate: void <clinit>()>";
"<org.msgpack.template.ByteTemplate: org.msgpack.template.ByteTemplate getInstance()>" -> "<org.msgpack.template.ByteTemplate: void <clinit>()>";
"<org.msgpack.template.BooleanTemplate: org.msgpack.template.BooleanTemplate getInstance()>" -> "<org.msgpack.template.BooleanTemplate: void <clinit>()>";
"<org.msgpack.template.DateTemplate: void <clinit>()>" -> "<org.msgpack.template.DateTemplate: void <init>()>";
"<org.msgpack.template.BigDecimalTemplate: void <clinit>()>" -> "<org.msgpack.template.BigDecimalTemplate: void <init>()>";
"<org.msgpack.template.ValueTemplate: void <clinit>()>" -> "<org.msgpack.template.ValueTemplate: void <init>()>";
"<org.msgpack.template.ByteBufferTemplate: void <clinit>()>" -> "<org.msgpack.template.ByteBufferTemplate: void <init>()>";
"<org.msgpack.template.ByteArrayTemplate: void <clinit>()>" -> "<org.msgpack.template.ByteArrayTemplate: void <init>()>";
"<org.msgpack.template.StringTemplate: void <clinit>()>" -> "<org.msgpack.template.StringTemplate: void <init>()>";
"<org.msgpack.template.DoubleArrayTemplate: void <clinit>()>" -> "<org.msgpack.template.DoubleArrayTemplate: void <init>()>";
"<org.msgpack.template.FloatArrayTemplate: void <clinit>()>" -> "<org.msgpack.template.FloatArrayTemplate: void <init>()>";
"<org.msgpack.template.LongArrayTemplate: void <clinit>()>" -> "<org.msgpack.template.LongArrayTemplate: void <init>()>";
"<org.msgpack.template.IntegerArrayTemplate: void <clinit>()>" -> "<org.msgpack.template.IntegerArrayTemplate: void <init>()>";
"<org.msgpack.template.ShortArrayTemplate: void <clinit>()>" -> "<org.msgpack.template.ShortArrayTemplate: void <init>()>";
"<org.msgpack.template.BooleanArrayTemplate: void <clinit>()>" -> "<org.msgpack.template.BooleanArrayTemplate: void <init>()>";
"<org.msgpack.template.CharacterTemplate: void <clinit>()>" -> "<org.msgpack.template.CharacterTemplate: void <init>()>";
"<org.msgpack.template.BigIntegerTemplate: void <clinit>()>" -> "<org.msgpack.template.BigIntegerTemplate: void <init>()>";
"<org.msgpack.template.DoubleTemplate: void <clinit>()>" -> "<org.msgpack.template.DoubleTemplate: void <init>()>";
"<org.msgpack.template.FloatTemplate: void <clinit>()>" -> "<org.msgpack.template.FloatTemplate: void <init>()>";
"<org.msgpack.template.LongTemplate: void <clinit>()>" -> "<org.msgpack.template.LongTemplate: void <init>()>";
"<org.msgpack.template.IntegerTemplate: void <clinit>()>" -> "<org.msgpack.template.IntegerTemplate: void <init>()>";
"<org.msgpack.template.ShortTemplate: void <clinit>()>" -> "<org.msgpack.template.ShortTemplate: void <init>()>";
"<org.msgpack.template.ByteTemplate: void <clinit>()>" -> "<org.msgpack.template.ByteTemplate: void <init>()>";
"<org.msgpack.template.BooleanTemplate: void <clinit>()>" -> "<org.msgpack.template.BooleanTemplate: void <init>()>";
"<org.msgpack.template.DateTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.BigDecimalTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.ValueTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.ByteBufferTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.ByteArrayTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.StringTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.DoubleArrayTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.FloatArrayTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.LongArrayTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.IntegerArrayTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.ShortArrayTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.BooleanArrayTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.CharacterTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.BigIntegerTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.DoubleTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.FloatTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.LongTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.IntegerTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.ShortTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.ByteTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.BooleanTemplate: void <init>()>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.AbstractTemplate: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void <clinit>()>" -> "<java.lang.Class: java.lang.String getName()>";
"<java.lang.Class: java.lang.String getName()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: java.lang.String getDirName(java.util.Properties,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: java.lang.String getDirName(java.util.Properties,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: java.lang.String getDirName(java.util.Properties,java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuilder: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: java.lang.String getDirName(java.util.Properties,java.lang.String,java.lang.String)>" -> "<java.io.File: boolean isDirectory()>";
"<org.msgpack.util.TemplatePrecompiler: java.lang.String getDirName(java.util.Properties,java.lang.String,java.lang.String)>" -> "<java.io.File: boolean exists()>";
"<org.msgpack.util.TemplatePrecompiler: java.lang.String getDirName(java.util.Properties,java.lang.String,java.lang.String)>" -> "<java.io.File: java.lang.String getAbsolutePath()>";
"<java.io.File: boolean isDirectory()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: boolean exists()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.io.File: java.lang.String getAbsolutePath()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: void <init>()>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.builder.TemplateBuilderChain createTemplateBuilderChain()>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.builder.TemplateBuilderChain createTemplateBuilderChain()>" -> "<org.msgpack.template.builder.TemplateBuilderChain: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.template.builder.TemplateBuilderChain: void <init>(org.msgpack.template.TemplateRegistry)>" -> "<org.msgpack.template.builder.TemplateBuilderChain: void <init>(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>";
"<org.msgpack.template.builder.TemplateBuilderChain: void <init>(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<java.lang.Object: void <init>()>";
"<org.msgpack.template.builder.TemplateBuilderChain: void <init>(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<java.util.ArrayList: void <init>()>";
"<org.msgpack.template.builder.TemplateBuilderChain: void <init>(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.ArrayTemplateBuilder: void <clinit>()>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.ReflectionBeansTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.OrdinalEnumTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.ArrayTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.TemplateBuilderChain: org.msgpack.template.builder.TemplateBuilder createForceTemplateBuilder(java.lang.String,org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.TemplateBuilderChain: boolean enableDynamicCodeGeneration()>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<java.lang.NullPointerException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.ReflectionTemplateBuilder: void <clinit>()>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.ReflectionBeansTemplateBuilder: void <clinit>()>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.OrdinalEnumTemplateBuilder: void <clinit>()>";
"<org.msgpack.template.builder.ArrayTemplateBuilder: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.msgpack.template.builder.ArrayTemplateBuilder: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.msgpack.template.builder.ReflectionBeansTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry)>" -> "<org.msgpack.template.builder.ReflectionTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>";
"<org.msgpack.template.builder.OrdinalEnumTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.template.builder.ArrayTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.template.builder.TemplateBuilderChain: org.msgpack.template.builder.TemplateBuilder createForceTemplateBuilder(java.lang.String,org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.ReflectionTemplateBuilder: void <clinit>()>";
"<org.msgpack.template.builder.TemplateBuilderChain: org.msgpack.template.builder.TemplateBuilder createForceTemplateBuilder(java.lang.String,org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.ReflectionTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>";
"<org.msgpack.template.builder.TemplateBuilderChain: org.msgpack.template.builder.TemplateBuilder createForceTemplateBuilder(java.lang.String,org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.msgpack.template.builder.TemplateBuilderChain: boolean enableDynamicCodeGeneration()>" -> "<org.msgpack.util.android.DalvikVmChecker: void <clinit>()>";
"<org.msgpack.template.builder.TemplateBuilderChain: boolean enableDynamicCodeGeneration()>" -> "<org.msgpack.util.android.DalvikVmChecker: boolean isDalvikVm()>";
"<java.lang.NullPointerException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.NullPointerException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.ReflectionTemplateBuilder: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.msgpack.template.builder.ReflectionTemplateBuilder: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.msgpack.template.builder.ReflectionBeansTemplateBuilder: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.msgpack.template.builder.ReflectionBeansTemplateBuilder: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.msgpack.template.builder.ReflectionBeansTemplateBuilder: void <clinit>()>" -> "<org.msgpack.template.builder.ReflectionTemplateBuilder: void <clinit>()>";
"<org.msgpack.template.builder.OrdinalEnumTemplateBuilder: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.msgpack.template.builder.OrdinalEnumTemplateBuilder: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.msgpack.template.builder.ReflectionTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry)>";
"<java.lang.Class: java.lang.Class forName(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.util.android.DalvikVmChecker: void <clinit>()>" -> "<java.lang.System: void <clinit>()>";
"<org.msgpack.util.android.DalvikVmChecker: void <clinit>()>" -> "<java.lang.System: java.lang.String getProperty(java.lang.String)>";
"<org.msgpack.util.android.DalvikVmChecker: boolean isDalvikVm()>" -> "<org.msgpack.util.android.DalvikVmChecker: void <clinit>()>";
"<java.lang.System: java.lang.String getProperty(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.OrdinalEnumTemplateBuilder: void <clinit>()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.ReflectionBeansTemplateBuilder: void <clinit>()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.ReflectionTemplateBuilder: void <clinit>()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.ArrayTemplateBuilder: void <clinit>()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.msgpack.template.builder.TemplateBuilderChain: void reset(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplates()>" -> "<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>";
"<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>" -> "<java.lang.NullPointerException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.AnyTemplate: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.GenericMapTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.GenericCollectionTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.GenericCollectionTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.GenericCollectionTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.MapTemplate: void <init>(org.msgpack.template.Template,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.CollectionTemplate: void <init>(org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.SetTemplate: void <init>(org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.ListTemplate: void <init>(org.msgpack.template.Template)>";
"<org.msgpack.template.AnyTemplate: void <init>(org.msgpack.template.TemplateRegistry)>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.GenericMapTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.Object: void <init>()>";
"<org.msgpack.template.GenericMapTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>";
"<org.msgpack.template.GenericMapTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>";
"<org.msgpack.template.GenericMapTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>";
"<org.msgpack.template.GenericMapTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>";
"<org.msgpack.template.GenericMapTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<org.msgpack.template.AnyTemplate: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.template.GenericMapTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<org.msgpack.template.AnyTemplate: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.template.GenericCollectionTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.Object: void <init>()>";
"<org.msgpack.template.GenericCollectionTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>";
"<org.msgpack.template.GenericCollectionTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>";
"<org.msgpack.template.GenericCollectionTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>";
"<org.msgpack.template.GenericCollectionTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>";
"<org.msgpack.template.GenericCollectionTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<org.msgpack.template.AnyTemplate: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.template.MapTemplate: void <init>(org.msgpack.template.Template,org.msgpack.template.Template)>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.CollectionTemplate: void <init>(org.msgpack.template.Template)>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.SetTemplate: void <init>(org.msgpack.template.Template)>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.ListTemplate: void <init>(org.msgpack.template.Template)>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>()>";
"<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.GenericCollectionTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>";
"<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.GenericMapTemplate: void <init>(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.TemplateRegistry: void registerGeneric(java.lang.reflect.Type,org.msgpack.template.GenericTemplate)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.TemplateRegistry: void registerGeneric(java.lang.reflect.Type,org.msgpack.template.GenericTemplate)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.TemplateRegistry: void registerGeneric(java.lang.reflect.Type,org.msgpack.template.GenericTemplate)>";
"<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>" -> "<org.msgpack.template.TemplateRegistry: void registerGeneric(java.lang.reflect.Type,org.msgpack.template.GenericTemplate)>";
"<org.msgpack.template.TemplateRegistry: void registerGeneric(java.lang.reflect.Type,org.msgpack.template.GenericTemplate)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: void registerGeneric(java.lang.reflect.Type,org.msgpack.template.GenericTemplate)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.lang.String: int length()>";
"<java.lang.String: int length()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler$1: void <init>()>" -> "<java.util.HashSet: boolean add(java.lang.Object)>";
"<java.util.HashSet: boolean add(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: java.util.List toClass(java.util.List)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplates(java.lang.String[])>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<java.util.ArrayList: java.util.Iterator iterator()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: void writeTemplate(java.lang.reflect.Type,java.lang.String)>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void writeTemplate(java.lang.reflect.Type,java.lang.String)>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: void writeTemplate(java.lang.Class,org.msgpack.template.builder.FieldEntry[],java.lang.String)>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void writeTemplate(java.lang.Class,org.msgpack.template.builder.FieldEntry[],java.lang.String)>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: org.msgpack.template.Template[] toTemplate(org.msgpack.template.builder.FieldEntry[])>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void writeTemplate(java.lang.reflect.Type,java.lang.String)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void writeTemplate(java.lang.reflect.Type,java.lang.String)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.Class)>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void writeTemplate(java.lang.reflect.Type,java.lang.String)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.reflect.Modifier: boolean isAbstract(int)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<org.msgpack.template.builder.TemplateBuildException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<org.msgpack.template.builder.TemplateBuildException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<org.msgpack.template.builder.TemplateBuildException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<org.msgpack.template.builder.TemplateBuildException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.Class)>" -> "<org.msgpack.template.FieldOption: void <clinit>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.Class)>" -> "<org.msgpack.template.FieldOption: void <clinit>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.FieldOption: void <clinit>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.builder.DefaultFieldEntry: void <init>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.builder.DefaultFieldEntry: void <init>(java.lang.reflect.Field,org.msgpack.template.FieldOption)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.builder.TemplateBuildException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.builder.TemplateBuildException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: int getFieldIndex(java.lang.reflect.Field,int)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.reflect.Field,org.msgpack.template.FieldOption)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<java.util.ArrayList: void <init>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: java.lang.reflect.Field[] getFields(java.lang.Class)>";
"<java.lang.reflect.Modifier: boolean isAbstract(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.TemplateBuildException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.FieldOption: void <clinit>()>" -> "<org.msgpack.template.FieldOption: void <init>(java.lang.String,int)>";
"<org.msgpack.template.FieldOption: void <clinit>()>" -> "<org.msgpack.template.FieldOption: void <init>(java.lang.String,int)>";
"<org.msgpack.template.FieldOption: void <clinit>()>" -> "<org.msgpack.template.FieldOption: void <init>(java.lang.String,int)>";
"<org.msgpack.template.FieldOption: void <clinit>()>" -> "<org.msgpack.template.FieldOption: void <init>(java.lang.String,int)>";
"<org.msgpack.template.builder.DefaultFieldEntry: void <init>()>" -> "<org.msgpack.template.FieldOption: void <clinit>()>";
"<org.msgpack.template.builder.DefaultFieldEntry: void <init>()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: void <init>(java.lang.reflect.Field,org.msgpack.template.FieldOption)>";
"<org.msgpack.template.builder.DefaultFieldEntry: void <init>(java.lang.reflect.Field,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.builder.FieldEntry: void <init>(org.msgpack.template.FieldOption)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.reflect.Field,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.FieldOption: void <clinit>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.reflect.Field,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: boolean isAnnotated(java.lang.reflect.AccessibleObject,java.lang.Class)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.reflect.Field,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: boolean isAnnotated(java.lang.reflect.AccessibleObject,java.lang.Class)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.reflect.Field,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: boolean isAnnotated(java.lang.reflect.AccessibleObject,java.lang.Class)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.reflect.Field,org.msgpack.template.FieldOption)>" -> "<java.lang.reflect.Modifier: boolean isTransient(int)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.reflect.Field,org.msgpack.template.FieldOption)>" -> "<java.lang.reflect.Modifier: boolean isFinal(int)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.reflect.Field,org.msgpack.template.FieldOption)>" -> "<java.lang.reflect.Modifier: boolean isStatic(int)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.reflect.Field,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.FieldOption: void <clinit>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.reflect.Field,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.FieldOption: void <clinit>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.reflect.Field,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.FieldOption: void <clinit>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.FieldOption getFieldOption(java.lang.reflect.Field,org.msgpack.template.FieldOption)>" -> "<org.msgpack.template.FieldOption: void <clinit>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: java.lang.reflect.Field[] getFields(java.lang.Class)>" -> "<java.lang.System: void <clinit>()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: java.lang.reflect.Field[] getFields(java.lang.Class)>" -> "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: java.lang.reflect.Field[] getFields(java.lang.Class)>" -> "<java.util.ArrayList: void <init>()>";
"<org.msgpack.template.FieldOption: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void <init>(java.lang.String,int)>";
"<org.msgpack.template.builder.FieldEntry: void <init>(org.msgpack.template.FieldOption)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.reflect.Modifier: boolean isTransient(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.reflect.Modifier: boolean isFinal(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.reflect.Modifier: boolean isStatic(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Enum: void finalize()>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.Enum: void <init>(java.lang.String,int)>" -> "<java.lang.Object: void <init>()>";
"<java.lang.Enum: void finalize()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: java.lang.reflect.Field[] getFields(java.lang.Class)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: java.lang.reflect.Field[] getFields(java.lang.Class)>" -> "<java.util.ArrayList: int size()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: java.lang.reflect.Field[] getFields(java.lang.Class)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<java.util.ArrayList: int size()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.ArrayList: java.lang.Object get(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<java.util.ArrayList: int size()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<java.util.ArrayList: int size()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<java.util.ArrayList: int size()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.builder.FieldEntry[] toFieldEntries(java.lang.Class,org.msgpack.template.FieldOption)>" -> "<java.util.ArrayList: java.lang.Object get(int)>";
"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.AbstractTemplateBuilder: void checkClassValidation(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: org.msgpack.template.Template[] toTemplate(org.msgpack.template.builder.FieldEntry[])>" -> "<org.msgpack.template.builder.FieldEntry: boolean isAvailable()>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: org.msgpack.template.Template[] toTemplate(org.msgpack.template.builder.FieldEntry[])>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.reflect.Type getGenericType()>";
"<org.msgpack.template.builder.FieldEntry: boolean isAvailable()>" -> "<org.msgpack.template.FieldOption: void <clinit>()>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void writeTemplate(java.lang.Class,org.msgpack.template.builder.FieldEntry[],java.lang.String)>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: org.msgpack.template.builder.BuildContext createBuildContext()>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: org.msgpack.template.builder.BuildContext createBuildContext()>" -> "<org.msgpack.template.builder.BuildContext: void <clinit>()>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: org.msgpack.template.builder.BuildContext createBuildContext()>" -> "<org.msgpack.template.builder.DefaultBuildContext: void <init>(org.msgpack.template.builder.JavassistTemplateBuilder)>";
"<org.msgpack.template.builder.BuildContext: void <clinit>()>" -> "<java.util.logging.Logger: void <clinit>()>";
"<org.msgpack.template.builder.BuildContext: void <clinit>()>" -> "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: void <init>(org.msgpack.template.builder.JavassistTemplateBuilder)>" -> "<org.msgpack.template.builder.BuildContext: void <init>(org.msgpack.template.builder.JavassistTemplateBuilder)>";
"<org.msgpack.template.builder.BuildContext: void <init>(org.msgpack.template.builder.JavassistTemplateBuilder)>" -> "<java.lang.Object: void <init>()>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void writeTemplate(java.lang.Class,org.msgpack.template.builder.FieldEntry[],java.lang.String)>" -> "<org.msgpack.template.builder.DefaultBuildContext: void writeTemplate(java.lang.Class,org.msgpack.template.builder.FieldEntry[],org.msgpack.template.Template[],java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: void writeTemplate(java.lang.Class,org.msgpack.template.builder.FieldEntry[],org.msgpack.template.Template[],java.lang.String)>" -> "<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<org.msgpack.template.builder.BuildContext: void <clinit>()>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<org.msgpack.template.builder.TemplateBuildException: void <init>(java.lang.Throwable)>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<org.msgpack.template.builder.TemplateBuildException: void <init>(java.lang.String,java.lang.Throwable)>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.builder.TemplateBuildException: void <init>(java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
"<org.msgpack.template.builder.TemplateBuildException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.Exception: void <init>()>";
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<org.msgpack.template.builder.BuildContext: void buildClass()>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<org.msgpack.template.builder.DefaultBuildContext: void buildConstructor()>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<org.msgpack.template.builder.DefaultBuildContext: void buildMethodInit()>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<org.msgpack.template.builder.BuildContext: void buildReadMethod()>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<org.msgpack.template.builder.BuildContext: void saveClass(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void write(java.lang.String,java.lang.String)>" -> "<org.msgpack.template.builder.BuildContext: java.lang.String getBuiltString()>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.builder.DefaultBuildContext: void buildConstructor()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.builder.DefaultBuildContext: void buildConstructor()>" -> "<javassist.CtNewConstructor: javassist.CtConstructor make(javassist.CtClass[],javassist.CtClass[],javassist.CtClass)>";
"<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>" -> "<org.msgpack.template.builder.BuildContext: void <clinit>()>";
"<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>" -> "<javassist.CtNewMethod: javassist.CtMethod make(int,javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],java.lang.String,javassist.CtClass)>";
"<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>" -> "<java.lang.String: void <clinit>()>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<org.msgpack.template.builder.BuildContext: void <clinit>()>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<javassist.CtNewMethod: javassist.CtMethod make(int,javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],java.lang.String,javassist.CtClass)>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<java.lang.String: void <clinit>()>";
"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<java.lang.reflect.Modifier: boolean isPrivate(int)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<java.lang.Integer: void <clinit>()>";
"<java.lang.Integer: java.lang.Integer valueOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.reflect.Modifier: boolean isPrivate(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<java.lang.Class: boolean isPrimitive()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<java.lang.Class: java.lang.String getName()>";
"<java.lang.Class: boolean isPrimitive()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void resetStringBuilder()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: java.lang.String primitiveReadName(java.lang.Class)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: java.lang.String getBuiltString()>";
"<org.msgpack.template.builder.BuildContext: void resetStringBuilder()>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>" -> "<java.lang.String: void <clinit>()>";
"<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.BuildContext: java.lang.String primitiveReadName(java.lang.Class)>" -> "<java.lang.Boolean: void <clinit>()>";
"<org.msgpack.template.builder.BuildContext: java.lang.String primitiveReadName(java.lang.Class)>" -> "<java.lang.Character: void <clinit>()>";
"<org.msgpack.template.builder.BuildContext: java.lang.String primitiveReadName(java.lang.Class)>" -> "<java.lang.Double: void <clinit>()>";
"<org.msgpack.template.builder.BuildContext: java.lang.String primitiveReadName(java.lang.Class)>" -> "<java.lang.Float: void <clinit>()>";
"<org.msgpack.template.builder.BuildContext: java.lang.String primitiveReadName(java.lang.Class)>" -> "<java.lang.Long: void <clinit>()>";
"<org.msgpack.template.builder.BuildContext: java.lang.String primitiveReadName(java.lang.Class)>" -> "<java.lang.Integer: void <clinit>()>";
"<org.msgpack.template.builder.BuildContext: java.lang.String primitiveReadName(java.lang.Class)>" -> "<java.lang.Short: void <clinit>()>";
"<org.msgpack.template.builder.BuildContext: java.lang.String primitiveReadName(java.lang.Class)>" -> "<java.lang.Byte: void <clinit>()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.FieldEntry: boolean isAvailable()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.FieldEntry: boolean isOptional()>";
"<org.msgpack.template.builder.FieldEntry: boolean isOptional()>" -> "<org.msgpack.template.FieldOption: void <clinit>()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.reflect.Field getField()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.Class getType()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.FieldEntry: boolean isOptional()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.reflect.Field getField()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.FieldEntry: java.lang.String getJavaTypeName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.reflect.Field getField()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildReadMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.String getName()>";
"<org.msgpack.template.builder.FieldEntry: java.lang.String getJavaTypeName()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.Class getType()>";
"<org.msgpack.template.builder.FieldEntry: java.lang.String getJavaTypeName()>" -> "<org.msgpack.template.builder.FieldEntry: java.lang.String arrayTypeToString(java.lang.Class)>";
"<org.msgpack.template.builder.FieldEntry: java.lang.String arrayTypeToString(java.lang.Class)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.builder.FieldEntry: java.lang.String arrayTypeToString(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.FieldEntry: java.lang.String arrayTypeToString(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.FieldEntry: java.lang.String arrayTypeToString(java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>" -> "<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Integer: void <clinit>()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.reflect.Modifier: boolean isPrivate(int)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Integer: java.lang.Integer valueOf(int)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Class: boolean isPrimitive()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void resetStringBuilder()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: java.lang.String primitiveWriteName(java.lang.Class)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.BuildContext: java.lang.String getBuiltString()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.FieldEntry: boolean isAvailable()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.reflect.Field getField()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.Class getType()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.reflect.Field getField()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.FieldEntry: boolean isNotNullable()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.reflect.Field getField()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.reflect.Field getField()>";
"<org.msgpack.template.builder.DefaultBuildContext: java.lang.String buildWriteMethodBody()>" -> "<org.msgpack.template.builder.DefaultFieldEntry: java.lang.String getName()>";
"<org.msgpack.template.builder.FieldEntry: boolean isNotNullable()>" -> "<org.msgpack.template.FieldOption: void <clinit>()>";
"<org.msgpack.template.builder.DefaultBuildContext: void buildConstructor()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: void buildConstructor()>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: void buildConstructor()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.msgpack.template.builder.DefaultBuildContext: void buildConstructor()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.DefaultBuildContext: void buildConstructor()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.BuildContext: void buildClass()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.BuildContext: void buildClass()>" -> "<org.msgpack.template.builder.DefaultBuildContext: void setSuperClass()>";
"<org.msgpack.template.builder.DefaultBuildContext: void setSuperClass()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void <clinit>()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: void <init>(org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<javassist.ClassPool: javassist.ClassPath appendClassPath(javassist.ClassPath)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void saveTemplateClass(org.msgpack.template.TemplateRegistry,java.lang.Class)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.msgpack.util.TemplatePrecompiler: java.util.List toClass(java.util.List)>" -> "<java.util.ArrayList: int size()>";
"<org.msgpack.util.TemplatePrecompiler: java.util.List toClass(java.util.List)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.util.ArrayList: boolean contains(java.lang.Object)>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.util.ArrayList: boolean add(java.lang.Object)>";
"<java.util.ArrayList: boolean contains(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: void <init>(org.msgpack.template.TemplateRegistry)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.builder.TemplateBuilderChain createTemplateBuilderChain()>";
"<org.msgpack.template.TemplateRegistry: void <init>(org.msgpack.template.TemplateRegistry)>" -> "<org.msgpack.template.TemplateRegistry: void registerTemplatesWhichRefersRegistry()>";
"<org.msgpack.template.builder.TemplateBuilderChain: org.msgpack.template.builder.TemplateBuilder createForceTemplateBuilder(java.lang.String,org.msgpack.template.TemplateRegistry,java.lang.ClassLoader)>" -> "<java.lang.Throwable: void printStackTrace()>";
"<java.lang.Throwable: void printStackTrace()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: java.util.List toClass(java.util.List)>" -> "<java.lang.Class: java.lang.ClassLoader getClassLoader()>";
"<java.lang.Class: java.lang.ClassLoader getClassLoader()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.util.TemplatePrecompiler: void <clinit>()>" -> "<java.lang.Class: java.lang.String getName()>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.lang.String: int lastIndexOf(int)>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.lang.String: int lastIndexOf(int)>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.lang.String: int length()>";
"<org.msgpack.util.TemplatePrecompiler: void matchClassNames(java.util.List,java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int,int)>";
"<java.lang.String: int lastIndexOf(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String substring(int,int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: void setSuperClass()>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: javassist.CtClass getCtClass(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String,java.lang.Object[])>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void buildString(java.lang.String)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: java.lang.String getBuiltString()>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: javassist.CtClass getCtClass(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: javassist.CtClass getCtClass(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: javassist.CtClass getCtClass(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void buildReadMethod()>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: javassist.CtClass getCtClass(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: javassist.CtClass getCtClass(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: javassist.CtClass getCtClass(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void buildWriteMethod()>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: javassist.CtClass getCtClass(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: void buildConstructor()>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: javassist.CtClass getCtClass(java.lang.String)>";
"<org.msgpack.template.builder.DefaultBuildContext: void buildConstructor()>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: javassist.CtClass getCtClass(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void buildClass()>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: javassist.CtClass getCtClass(java.lang.String)>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<java.lang.Object: int hashCode()>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: int nextSeqId()>";
"<org.msgpack.template.builder.BuildContext: void reset(java.lang.String,boolean)>" -> "<org.msgpack.template.builder.JavassistTemplateBuilder: javassist.CtClass makeCtClass(java.lang.String)>";
"<java.lang.Object: int hashCode()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.builder.JavassistTemplateBuilder: org.msgpack.template.Template[] toTemplate(org.msgpack.template.builder.FieldEntry[])>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericType(java.lang.reflect.ParameterizedType)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.MessageTypeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupSuperclassInterfaceTypes(java.lang.Class)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupSuperclasses(java.lang.Class)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupInterfaceTypes(java.lang.Class)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupAfterBuilding(java.lang.Class)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.template.AnyTemplate: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.template.MessagePackableTemplate: void <init>(java.lang.Class)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.template.AnyTemplate: void <init>(org.msgpack.template.TemplateRegistry)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupCache(java.lang.reflect.Type)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayType(java.lang.reflect.Type)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericType(java.lang.reflect.ParameterizedType)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericTypeImpl(java.lang.reflect.ParameterizedType)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericType(java.lang.reflect.ParameterizedType)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericSuperclasses(java.lang.reflect.ParameterizedType)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericType(java.lang.reflect.ParameterizedType)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericInterfaceTypes(java.lang.reflect.ParameterizedType)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericType(java.lang.reflect.ParameterizedType)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericTypeImpl(java.lang.reflect.ParameterizedType)>";
"<org.msgpack.MessageTypeException: void <init>(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupSuperclassInterfaceTypes(java.lang.Class)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupInterfaceTypes(java.lang.Class)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupSuperclassInterfaceTypes(java.lang.Class)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupCache(java.lang.reflect.Type)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupSuperclasses(java.lang.Class)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupCache(java.lang.reflect.Type)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupInterfaceTypes(java.lang.Class)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupCache(java.lang.reflect.Type)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupAfterBuilding(java.lang.Class)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template buildAndRegister(org.msgpack.template.builder.TemplateBuilder,java.lang.Class,boolean,org.msgpack.template.FieldList)>";
"<org.msgpack.template.MessagePackableTemplate: void <init>(java.lang.Class)>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupCache(java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupCache(java.lang.reflect.Type)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayType(java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayType(java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericTypeImpl(java.lang.reflect.ParameterizedType)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericTypeImpl0(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericSuperclasses(java.lang.reflect.ParameterizedType)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericTypeImpl0(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericInterfaceTypes(java.lang.reflect.ParameterizedType)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericTypeImpl0(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template buildAndRegister(org.msgpack.template.builder.TemplateBuilder,java.lang.Class,boolean,org.msgpack.template.FieldList)>" -> "<org.msgpack.template.TemplateReference: void <init>(org.msgpack.template.TemplateRegistry,java.lang.reflect.Type)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template buildAndRegister(org.msgpack.template.builder.TemplateBuilder,java.lang.Class,boolean,org.msgpack.template.FieldList)>" -> "<org.msgpack.MessageTypeException: void <init>(java.lang.Throwable)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.String: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<org.msgpack.MessageTypeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupAfterBuilding(java.lang.Class)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.Class: java.lang.Class forName(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupAfterBuilding(java.lang.Class)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<org.msgpack.template.TemplateRegistry: java.lang.String toJvmPrimitiveTypeName(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupAfterBuilding(java.lang.Class)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.Thread: java.lang.Thread currentThread()>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<org.msgpack.template.TemplateRegistry: java.lang.String toJvmReferenceTypeName(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.StringBuffer: void <init>()>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<org.msgpack.template.TemplateRegistry: boolean isPrimitiveType(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<org.msgpack.MessageTypeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.StringBuilder: void <init>()>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.String: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.String: void <clinit>()>";
"<org.msgpack.template.TemplateReference: void <init>(org.msgpack.template.TemplateRegistry,java.lang.reflect.Type)>" -> "<org.msgpack.template.AbstractTemplate: void <init>()>";
"<org.msgpack.MessageTypeException: void <init>(java.lang.Throwable)>" -> "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
"<org.msgpack.template.TemplateRegistry: java.lang.String toJvmPrimitiveTypeName(java.lang.String)>" -> "<java.lang.String: void <clinit>()>";
"<org.msgpack.template.TemplateRegistry: java.lang.String toJvmPrimitiveTypeName(java.lang.String)>" -> "<org.msgpack.MessageTypeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: java.lang.String toJvmPrimitiveTypeName(java.lang.String)>" -> "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.Object: void <init>()>";
"<java.lang.StringBuffer: void <init>()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>";
"<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: boolean isPrimitiveType(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: boolean isPrimitiveType(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: boolean isPrimitiveType(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: boolean isPrimitiveType(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: boolean isPrimitiveType(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: boolean isPrimitiveType(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: boolean isPrimitiveType(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: boolean isPrimitiveType(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<java.lang.String: boolean equals(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: java.lang.String toJvmReferenceTypeName(java.lang.String)>" -> "<java.lang.String: java.lang.String substring(int)>";
"<java.lang.String: java.lang.String substring(int)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.StringBuffer: java.lang.String toString()>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.lang.StringBuffer: java.lang.String toString()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.String: java.lang.String[] split(java.lang.String)>";
"<java.lang.String: java.lang.String[] split(java.lang.String)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: java.lang.String toJvmPrimitiveTypeName(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: java.lang.String toJvmPrimitiveTypeName(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: java.lang.String toJvmPrimitiveTypeName(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: java.lang.String toJvmPrimitiveTypeName(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: java.lang.String toJvmPrimitiveTypeName(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: java.lang.String toJvmPrimitiveTypeName(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: java.lang.String toJvmPrimitiveTypeName(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: java.lang.String toJvmPrimitiveTypeName(java.lang.String)>" -> "<java.lang.String: boolean equals(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<java.lang.StringBuilder: java.lang.String toString()>";
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>";
"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericArrayTypeImpl(java.lang.reflect.GenericArrayType)>" -> "<java.lang.Object: java.lang.Class getClass()>";
"<java.lang.Object: java.lang.Class getClass()>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupCache(java.lang.reflect.Type)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupAfterBuilding(java.lang.Class)>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template buildAndRegister(org.msgpack.template.builder.TemplateBuilder,java.lang.Class,boolean,org.msgpack.template.FieldList)>" -> "<org.msgpack.template.builder.TemplateBuilderChain: org.msgpack.template.builder.TemplateBuilder select(java.lang.reflect.Type,boolean)>";
"<org.msgpack.template.builder.TemplateBuilderChain: org.msgpack.template.builder.TemplateBuilder select(java.lang.reflect.Type,boolean)>" -> "<java.util.ArrayList: java.util.Iterator iterator()>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template buildAndRegister(org.msgpack.template.builder.TemplateBuilder,java.lang.Class,boolean,org.msgpack.template.FieldList)>" -> "<java.util.HashMap: boolean containsKey(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template buildAndRegister(org.msgpack.template.builder.TemplateBuilder,java.lang.Class,boolean,org.msgpack.template.FieldList)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template buildAndRegister(org.msgpack.template.builder.TemplateBuilder,java.lang.Class,boolean,org.msgpack.template.FieldList)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template buildAndRegister(org.msgpack.template.builder.TemplateBuilder,java.lang.Class,boolean,org.msgpack.template.FieldList)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template buildAndRegister(org.msgpack.template.builder.TemplateBuilder,java.lang.Class,boolean,org.msgpack.template.FieldList)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template buildAndRegister(org.msgpack.template.builder.TemplateBuilder,java.lang.Class,boolean,org.msgpack.template.FieldList)>" -> "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template buildAndRegister(org.msgpack.template.builder.TemplateBuilder,java.lang.Class,boolean,org.msgpack.template.FieldList)>" -> "<java.util.HashMap: java.lang.Object remove(java.lang.Object)>";
"<java.util.HashMap: boolean containsKey(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<java.util.HashMap: java.lang.Object remove(java.lang.Object)>" -> "<java.lang.RuntimeException: void <init>(java.lang.String)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupAfterBuilding(java.lang.Class)>" -> "<org.msgpack.template.builder.TemplateBuilderChain: org.msgpack.template.builder.TemplateBuilder select(java.lang.reflect.Type,boolean)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupAfterBuilding(java.lang.Class)>" -> "<org.msgpack.template.builder.TemplateBuilderChain: org.msgpack.template.builder.TemplateBuilder getForceBuilder()>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupAfterBuilding(java.lang.Class)>" -> "<org.msgpack.template.builder.AbstractTemplateBuilder: org.msgpack.template.Template loadTemplate(java.lang.reflect.Type)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupInterfaceTypes(java.lang.Class)>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupInterfaceTypes(java.lang.Class)>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupInterfaceTypes(java.lang.Class)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupSuperclasses(java.lang.Class)>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupSuperclasses(java.lang.Class)>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupSuperclasses(java.lang.Class)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupSuperclassInterfaceTypes(java.lang.Class)>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupSuperclassInterfaceTypes(java.lang.Class)>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericTypeImpl0(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)>" -> "<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookup(java.lang.reflect.Type)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericTypeImpl0(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)>" -> "<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
"<org.msgpack.template.TemplateRegistry: org.msgpack.template.Template lookupGenericSuperclasses(java.lang.reflect.ParameterizedType)>" -> "<org.msgpack.template.TemplateRegistry: void register(java.lang.reflect.Type,org.msgpack.template.Template)>";
}
